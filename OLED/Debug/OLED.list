
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000282c  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c4c  08005c4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c4c  08005c4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000000c  08005c60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08005c60  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e67e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c57  00000000  00000000  0002e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00030310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001a15  00000000  00000000  000320d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adbf  00000000  00000000  00033ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008be9e  00000000  00000000  0003e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  000ca7c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003408 	.word	0x08003408

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003408 	.word	0x08003408

0800014c <HAL_TIM_PeriodElapsedCallback>:
uint8_t message_send[50];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	if (htim->Instance == htim3.Instance) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	4b06      	ldr	r3, [pc, #24]	; (8000174 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	429a      	cmp	r2, r3
 800015e:	d104      	bne.n	800016a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000166:	f001 f965 	bl	8001434 <HAL_GPIO_TogglePin>
	}
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000488 	.word	0x20000488
 8000178:	40011000 	.word	0x40011000

0800017c <horse_run>:
void horse_run(int8_t x) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af02      	add	r7, sp, #8
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	SSD1306_InvertDisplay(0);   // invert the display
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fa7c 	bl	8000684 <SSD1306_InvertDisplay>

	SSD1306_Clear();
 800018c:	f000 fc5e 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse1, 128, 64, 1);
 8000190:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000194:	2301      	movs	r3, #1
 8000196:	9301      	str	r3, [sp, #4]
 8000198:	2340      	movs	r3, #64	; 0x40
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	2380      	movs	r3, #128	; 0x80
 800019e:	4a48      	ldr	r2, [pc, #288]	; (80002c0 <horse_run+0x144>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	f000 fa85 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80001a6:	f000 fbaf 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 80001aa:	f000 fc4f 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse2, 128, 64, 1);
 80001ae:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80001b2:	2301      	movs	r3, #1
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	2340      	movs	r3, #64	; 0x40
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2380      	movs	r3, #128	; 0x80
 80001bc:	4a41      	ldr	r2, [pc, #260]	; (80002c4 <horse_run+0x148>)
 80001be:	2100      	movs	r1, #0
 80001c0:	f000 fa76 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80001c4:	f000 fba0 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 80001c8:	f000 fc40 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse3, 128, 64, 1);
 80001cc:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80001d0:	2301      	movs	r3, #1
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2380      	movs	r3, #128	; 0x80
 80001da:	4a3b      	ldr	r2, [pc, #236]	; (80002c8 <horse_run+0x14c>)
 80001dc:	2100      	movs	r1, #0
 80001de:	f000 fa67 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80001e2:	f000 fb91 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 80001e6:	f000 fc31 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse4, 128, 64, 1);
 80001ea:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80001ee:	2301      	movs	r3, #1
 80001f0:	9301      	str	r3, [sp, #4]
 80001f2:	2340      	movs	r3, #64	; 0x40
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2380      	movs	r3, #128	; 0x80
 80001f8:	4a34      	ldr	r2, [pc, #208]	; (80002cc <horse_run+0x150>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	f000 fa58 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000200:	f000 fb82 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 8000204:	f000 fc22 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse5, 128, 64, 1);
 8000208:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800020c:	2301      	movs	r3, #1
 800020e:	9301      	str	r3, [sp, #4]
 8000210:	2340      	movs	r3, #64	; 0x40
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2380      	movs	r3, #128	; 0x80
 8000216:	4a2e      	ldr	r2, [pc, #184]	; (80002d0 <horse_run+0x154>)
 8000218:	2100      	movs	r1, #0
 800021a:	f000 fa49 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800021e:	f000 fb73 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 8000222:	f000 fc13 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse6, 128, 64, 1);
 8000226:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800022a:	2301      	movs	r3, #1
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2340      	movs	r3, #64	; 0x40
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <horse_run+0x158>)
 8000236:	2100      	movs	r1, #0
 8000238:	f000 fa3a 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800023c:	f000 fb64 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 8000240:	f000 fc04 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse7, 128, 64, 1);
 8000244:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000248:	2301      	movs	r3, #1
 800024a:	9301      	str	r3, [sp, #4]
 800024c:	2340      	movs	r3, #64	; 0x40
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	4a21      	ldr	r2, [pc, #132]	; (80002d8 <horse_run+0x15c>)
 8000254:	2100      	movs	r1, #0
 8000256:	f000 fa2b 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800025a:	f000 fb55 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 800025e:	f000 fbf5 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse8, 128, 64, 1);
 8000262:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000266:	2301      	movs	r3, #1
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	2340      	movs	r3, #64	; 0x40
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2380      	movs	r3, #128	; 0x80
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <horse_run+0x160>)
 8000272:	2100      	movs	r1, #0
 8000274:	f000 fa1c 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000278:	f000 fb46 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 800027c:	f000 fbe6 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse9, 128, 64, 1);
 8000280:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2340      	movs	r3, #64	; 0x40
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <horse_run+0x164>)
 8000290:	2100      	movs	r1, #0
 8000292:	f000 fa0d 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000296:	f000 fb37 	bl	8000908 <SSD1306_UpdateScreen>

	SSD1306_Clear();
 800029a:	f000 fbd7 	bl	8000a4c <SSD1306_Clear>
	SSD1306_DrawBitmap(x, 0, horse10, 128, 64, 1);
 800029e:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80002a2:	2301      	movs	r3, #1
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	2340      	movs	r3, #64	; 0x40
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2380      	movs	r3, #128	; 0x80
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <horse_run+0x168>)
 80002ae:	2100      	movs	r1, #0
 80002b0:	f000 f9fe 	bl	80006b0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80002b4:	f000 fb28 	bl	8000908 <SSD1306_UpdateScreen>
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08003434 	.word	0x08003434
 80002c4:	08003834 	.word	0x08003834
 80002c8:	08003c34 	.word	0x08003c34
 80002cc:	08004034 	.word	0x08004034
 80002d0:	08004434 	.word	0x08004434
 80002d4:	08004834 	.word	0x08004834
 80002d8:	08004c34 	.word	0x08004c34
 80002dc:	08005034 	.word	0x08005034
 80002e0:	08005434 	.word	0x08005434
 80002e4:	08005834 	.word	0x08005834

080002e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002ec:	f000 fdc0 	bl	8000e70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002f0:	f000 f82c 	bl	800034c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002f4:	f000 f96a 	bl	80005cc <MX_GPIO_Init>
	MX_I2C1_Init();
 80002f8:	f000 f86e 	bl	80003d8 <MX_I2C1_Init>
	MX_TIM2_Init();
 80002fc:	f000 f89a 	bl	8000434 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000300:	f000 f93a 	bl	8000578 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8000304:	f000 f8ea 	bl	80004dc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8000308:	f000 fa3a 	bl	8000780 <SSD1306_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <main+0x58>)
 800030e:	f002 fa83 	bl	8002818 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000312:	213c      	movs	r1, #60	; 0x3c
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <main+0x5c>)
 8000316:	f002 fb73 	bl	8002a00 <HAL_TIM_Encoder_Start>
//			__HAL_TIM_SetCounter(&htim2, -128);
//			//TIM2->CNT = 0;
//		}
//		sprintf(message_send, "value x = %d\r\n", value);
//		HAL_UART_Transmit(&huart1, message_send, sizeof(message_send), 100);
		for (value = 128; value >= -128; value -= 5) {
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <main+0x60>)
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	701a      	strb	r2, [r3, #0]
			horse_run(value);
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <main+0x60>)
 8000322:	f993 3000 	ldrsb.w	r3, [r3]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff28 	bl	800017c <horse_run>
		for (value = 128; value >= -128; value -= 5) {
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <main+0x60>)
 800032e:	f993 3000 	ldrsb.w	r3, [r3]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	3b05      	subs	r3, #5
 8000336:	b2db      	uxtb	r3, r3
 8000338:	b25a      	sxtb	r2, r3
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <main+0x60>)
 800033c:	701a      	strb	r2, [r3, #0]
			horse_run(value);
 800033e:	e7ef      	b.n	8000320 <main+0x38>
 8000340:	20000488 	.word	0x20000488
 8000344:	20000548 	.word	0x20000548
 8000348:	20000028 	.word	0x20000028

0800034c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	; 0x40
 8000350:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 f84c 	bl	80033f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036e:	2301      	movs	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000376:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000380:	2302      	movs	r3, #2
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fdd3 	bl	8001f40 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x58>
		Error_Handler();
 80003a0:	f000 f96c 	bl	800067c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2302      	movs	r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2102      	movs	r1, #2
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 f83e 	bl	8002440 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x82>
		Error_Handler();
 80003ca:	f000 f957 	bl	800067c <Error_Handler>
	}
}
 80003ce:	bf00      	nop
 80003d0:	3740      	adds	r7, #64	; 0x40
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_I2C1_Init+0x50>)
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <MX_I2C1_Init+0x54>)
 80003e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_I2C1_Init+0x50>)
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_I2C1_Init+0x58>)
 80003e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_I2C1_Init+0x50>)
 8000416:	f001 f827 	bl	8001468 <HAL_I2C_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000420:	f000 f92c 	bl	800067c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000434 	.word	0x20000434
 800042c:	40005400 	.word	0x40005400
 8000430:	00061a80 	.word	0x00061a80

08000434 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b08c      	sub	sp, #48	; 0x30
 8000438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	2224      	movs	r2, #36	; 0x24
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 ffd8 	bl	80033f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_TIM2_Init+0xa4>)
 8000452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000456:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_TIM2_Init+0xa4>)
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_TIM2_Init+0xa4>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <MX_TIM2_Init+0xa4>)
 8000466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800046a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_TIM2_Init+0xa4>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <MX_TIM2_Init+0xa4>)
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000478:	2303      	movs	r3, #3
 800047a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8000488:	230a      	movs	r3, #10
 800048a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000490:	2301      	movs	r3, #1
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 8000498:	230a      	movs	r3, #10
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	480d      	ldr	r0, [pc, #52]	; (80004d8 <MX_TIM2_Init+0xa4>)
 80004a4:	f002 fa0a 	bl	80028bc <HAL_TIM_Encoder_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80004ae:	f000 f8e5 	bl	800067c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_TIM2_Init+0xa4>)
 80004c0:	f002 fe2a 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80004ca:	f000 f8d7 	bl	800067c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	3730      	adds	r7, #48	; 0x30
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000548 	.word	0x20000548

080004dc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_TIM3_Init+0x94>)
 80004fa:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_TIM3_Init+0x98>)
 80004fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3599;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_TIM3_Init+0x94>)
 8000500:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000504:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_TIM3_Init+0x94>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_TIM3_Init+0x94>)
 800050e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000512:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_TIM3_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM3_Init+0x94>)
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <MX_TIM3_Init+0x94>)
 8000522:	f002 f929 	bl	8002778 <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0x54>
		Error_Handler();
 800052c:	f000 f8a6 	bl	800067c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	4619      	mov	r1, r3
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_TIM3_Init+0x94>)
 800053e:	f002 fbf4 	bl	8002d2a <HAL_TIM_ConfigClockSource>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM3_Init+0x70>
		Error_Handler();
 8000548:	f000 f898 	bl	800067c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_TIM3_Init+0x94>)
 800055a:	f002 fddd 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000564:	f000 f88a 	bl	800067c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000488 	.word	0x20000488
 8000574:	40000400 	.word	0x40000400

08000578 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART1_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000588:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005b0:	f002 fe22 	bl	80031f8 <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80005ba:	f000 f85f 	bl	800067c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000504 	.word	0x20000504
 80005c8:	40013800 	.word	0x40013800

080005cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a23      	ldr	r2, [pc, #140]	; (8000674 <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0xa8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_GPIO_Init+0xa8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_GPIO_Init+0xa8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_GPIO_Init+0xa8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <MX_GPIO_Init+0xa8>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_GPIO_Init+0xa8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0xac>)
 8000648:	f000 fedc 	bl	8001404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0xac>)
 8000666:	f000 fd73 	bl	8001150 <HAL_GPIO_Init>

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40011000 	.word	0x40011000

0800067c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000682:	e7fe      	b.n	8000682 <Error_Handler+0x6>

08000684 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <SSD1306_InvertDisplay+0x1a>
 8000692:	22a7      	movs	r2, #167	; 0xa7
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f000 fa3e 	bl	8000b18 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 800069c:	e004      	b.n	80006a8 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 800069e:	22a6      	movs	r2, #166	; 0xa6
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fa38 	bl	8000b18 <ssd1306_I2C_Write>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60ba      	str	r2, [r7, #8]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4603      	mov	r3, r0
 80006bc:	81fb      	strh	r3, [r7, #14]
 80006be:	460b      	mov	r3, r1
 80006c0:	81bb      	strh	r3, [r7, #12]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80006c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ca:	3307      	adds	r3, #7
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da00      	bge.n	80006d2 <SSD1306_DrawBitmap+0x22>
 80006d0:	3307      	adds	r3, #7
 80006d2:	10db      	asrs	r3, r3, #3
 80006d4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80006da:	2300      	movs	r3, #0
 80006dc:	82bb      	strh	r3, [r7, #20]
 80006de:	e044      	b.n	800076a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	827b      	strh	r3, [r7, #18]
 80006e4:	e02f      	b.n	8000746 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80006e6:	8a7b      	ldrh	r3, [r7, #18]
 80006e8:	f003 0307 	and.w	r3, r3, #7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	75fb      	strb	r3, [r7, #23]
 80006f6:	e012      	b.n	800071e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80006f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000700:	fb02 f203 	mul.w	r2, r2, r3
 8000704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <SSD1306_DrawBitmap+0x5e>
 800070c:	3307      	adds	r3, #7
 800070e:	10db      	asrs	r3, r3, #3
 8000710:	b21b      	sxth	r3, r3
 8000712:	4413      	add	r3, r2
 8000714:	461a      	mov	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800071e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	da09      	bge.n	800073a <SSD1306_DrawBitmap+0x8a>
 8000726:	89fa      	ldrh	r2, [r7, #14]
 8000728:	8a7b      	ldrh	r3, [r7, #18]
 800072a:	4413      	add	r3, r2
 800072c:	b29b      	uxth	r3, r3
 800072e:	89b9      	ldrh	r1, [r7, #12]
 8000730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f92b 	bl	8000990 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800073a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800073e:	b29b      	uxth	r3, r3
 8000740:	3301      	adds	r3, #1
 8000742:	b29b      	uxth	r3, r3
 8000744:	827b      	strh	r3, [r7, #18]
 8000746:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800074a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	dbc9      	blt.n	80006e6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000752:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	3301      	adds	r3, #1
 800075a:	b29b      	uxth	r3, r3
 800075c:	82bb      	strh	r3, [r7, #20]
 800075e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000762:	b29b      	uxth	r3, r3
 8000764:	3301      	adds	r3, #1
 8000766:	b29b      	uxth	r3, r3
 8000768:	81bb      	strh	r3, [r7, #12]
 800076a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800076e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbb4      	blt.n	80006e0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000786:	f000 f96b 	bl	8000a60 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800078a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800078e:	2201      	movs	r2, #1
 8000790:	2178      	movs	r1, #120	; 0x78
 8000792:	485b      	ldr	r0, [pc, #364]	; (8000900 <SSD1306_Init+0x180>)
 8000794:	f001 f89e 	bl	80018d4 <HAL_I2C_IsDeviceReady>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	e0a9      	b.n	80008f6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80007a2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007a8:	e002      	b.n	80007b0 <SSD1306_Init+0x30>
		p--;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f9      	bne.n	80007aa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007b6:	22ae      	movs	r2, #174	; 0xae
 80007b8:	2100      	movs	r1, #0
 80007ba:	2078      	movs	r0, #120	; 0x78
 80007bc:	f000 f9ac 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	2078      	movs	r0, #120	; 0x78
 80007c6:	f000 f9a7 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007ca:	2210      	movs	r2, #16
 80007cc:	2100      	movs	r1, #0
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f000 f9a2 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007d4:	22b0      	movs	r2, #176	; 0xb0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2078      	movs	r0, #120	; 0x78
 80007da:	f000 f99d 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80007de:	22c8      	movs	r2, #200	; 0xc8
 80007e0:	2100      	movs	r1, #0
 80007e2:	2078      	movs	r0, #120	; 0x78
 80007e4:	f000 f998 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2078      	movs	r0, #120	; 0x78
 80007ee:	f000 f993 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80007f2:	2210      	movs	r2, #16
 80007f4:	2100      	movs	r1, #0
 80007f6:	2078      	movs	r0, #120	; 0x78
 80007f8:	f000 f98e 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80007fc:	2240      	movs	r2, #64	; 0x40
 80007fe:	2100      	movs	r1, #0
 8000800:	2078      	movs	r0, #120	; 0x78
 8000802:	f000 f989 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000806:	2281      	movs	r2, #129	; 0x81
 8000808:	2100      	movs	r1, #0
 800080a:	2078      	movs	r0, #120	; 0x78
 800080c:	f000 f984 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	2100      	movs	r1, #0
 8000814:	2078      	movs	r0, #120	; 0x78
 8000816:	f000 f97f 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800081a:	22a1      	movs	r2, #161	; 0xa1
 800081c:	2100      	movs	r1, #0
 800081e:	2078      	movs	r0, #120	; 0x78
 8000820:	f000 f97a 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000824:	22a6      	movs	r2, #166	; 0xa6
 8000826:	2100      	movs	r1, #0
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 f975 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800082e:	22a8      	movs	r2, #168	; 0xa8
 8000830:	2100      	movs	r1, #0
 8000832:	2078      	movs	r0, #120	; 0x78
 8000834:	f000 f970 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000838:	223f      	movs	r2, #63	; 0x3f
 800083a:	2100      	movs	r1, #0
 800083c:	2078      	movs	r0, #120	; 0x78
 800083e:	f000 f96b 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000842:	22a4      	movs	r2, #164	; 0xa4
 8000844:	2100      	movs	r1, #0
 8000846:	2078      	movs	r0, #120	; 0x78
 8000848:	f000 f966 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800084c:	22d3      	movs	r2, #211	; 0xd3
 800084e:	2100      	movs	r1, #0
 8000850:	2078      	movs	r0, #120	; 0x78
 8000852:	f000 f961 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2078      	movs	r0, #120	; 0x78
 800085c:	f000 f95c 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000860:	22d5      	movs	r2, #213	; 0xd5
 8000862:	2100      	movs	r1, #0
 8000864:	2078      	movs	r0, #120	; 0x78
 8000866:	f000 f957 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800086a:	22f0      	movs	r2, #240	; 0xf0
 800086c:	2100      	movs	r1, #0
 800086e:	2078      	movs	r0, #120	; 0x78
 8000870:	f000 f952 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000874:	22d9      	movs	r2, #217	; 0xd9
 8000876:	2100      	movs	r1, #0
 8000878:	2078      	movs	r0, #120	; 0x78
 800087a:	f000 f94d 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800087e:	2222      	movs	r2, #34	; 0x22
 8000880:	2100      	movs	r1, #0
 8000882:	2078      	movs	r0, #120	; 0x78
 8000884:	f000 f948 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000888:	22da      	movs	r2, #218	; 0xda
 800088a:	2100      	movs	r1, #0
 800088c:	2078      	movs	r0, #120	; 0x78
 800088e:	f000 f943 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000892:	2212      	movs	r2, #18
 8000894:	2100      	movs	r1, #0
 8000896:	2078      	movs	r0, #120	; 0x78
 8000898:	f000 f93e 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800089c:	22db      	movs	r2, #219	; 0xdb
 800089e:	2100      	movs	r1, #0
 80008a0:	2078      	movs	r0, #120	; 0x78
 80008a2:	f000 f939 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	2078      	movs	r0, #120	; 0x78
 80008ac:	f000 f934 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008b0:	228d      	movs	r2, #141	; 0x8d
 80008b2:	2100      	movs	r1, #0
 80008b4:	2078      	movs	r0, #120	; 0x78
 80008b6:	f000 f92f 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008ba:	2214      	movs	r2, #20
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 f92a 	bl	8000b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008c4:	22af      	movs	r2, #175	; 0xaf
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 f925 	bl	8000b18 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008ce:	222e      	movs	r2, #46	; 0x2e
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 f920 	bl	8000b18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 f841 	bl	8000960 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80008de:	f000 f813 	bl	8000908 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SSD1306_Init+0x184>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SSD1306_Init+0x184>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SSD1306_Init+0x184>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000434 	.word	0x20000434
 8000904:	2000042c 	.word	0x2000042c

08000908 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800090e:	2300      	movs	r3, #0
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	e01c      	b.n	800094e <SSD1306_UpdateScreen+0x46>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	33b0      	adds	r3, #176	; 0xb0
 8000918:	461a      	mov	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	2078      	movs	r0, #120	; 0x78
 800091e:	f000 f8fb 	bl	8000b18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 f8f6 	bl	8000b18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800092c:	2210      	movs	r2, #16
 800092e:	2100      	movs	r1, #0
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f000 f8f1 	bl	8000b18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	01db      	lsls	r3, r3, #7
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <SSD1306_UpdateScreen+0x54>)
 800093c:	441a      	add	r2, r3
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	2078      	movs	r0, #120	; 0x78
 8000944:	f000 f8a0 	bl	8000a88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3301      	adds	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d9df      	bls.n	8000914 <SSD1306_UpdateScreen+0xc>
	}
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000002c 	.word	0x2000002c

08000960 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <SSD1306_Fill+0x14>
 8000970:	2300      	movs	r3, #0
 8000972:	e000      	b.n	8000976 <SSD1306_Fill+0x16>
 8000974:	23ff      	movs	r3, #255	; 0xff
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	4619      	mov	r1, r3
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <SSD1306_Fill+0x2c>)
 800097e:	f002 fd3b 	bl	80033f8 <memset>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000002c 	.word	0x2000002c

08000990 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	460b      	mov	r3, r1
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	70fb      	strb	r3, [r7, #3]
	if (
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	2b7f      	cmp	r3, #127	; 0x7f
 80009a6:	d848      	bhi.n	8000a3a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	2b3f      	cmp	r3, #63	; 0x3f
 80009ac:	d845      	bhi.n	8000a3a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SSD1306_DrawPixel+0xb4>)
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf0c      	ite	eq
 80009bc:	2301      	moveq	r3, #1
 80009be:	2300      	movne	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d11a      	bne.n	8000a00 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009ca:	88fa      	ldrh	r2, [r7, #6]
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	b298      	uxth	r0, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	01db      	lsls	r3, r3, #7
 80009d6:	4413      	add	r3, r2
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <SSD1306_DrawPixel+0xb8>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b259      	sxtb	r1, r3
 80009f0:	88fa      	ldrh	r2, [r7, #6]
 80009f2:	4603      	mov	r3, r0
 80009f4:	01db      	lsls	r3, r3, #7
 80009f6:	4413      	add	r3, r2
 80009f8:	b2c9      	uxtb	r1, r1
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <SSD1306_DrawPixel+0xb8>)
 80009fc:	54d1      	strb	r1, [r2, r3]
 80009fe:	e01d      	b.n	8000a3c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	b298      	uxth	r0, r3
 8000a08:	4603      	mov	r3, r0
 8000a0a:	01db      	lsls	r3, r3, #7
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <SSD1306_DrawPixel+0xb8>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	4013      	ands	r3, r2
 8000a28:	b259      	sxtb	r1, r3
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	01db      	lsls	r3, r3, #7
 8000a30:	4413      	add	r3, r2
 8000a32:	b2c9      	uxtb	r1, r1
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <SSD1306_DrawPixel+0xb8>)
 8000a36:	54d1      	strb	r1, [r2, r3]
 8000a38:	e000      	b.n	8000a3c <SSD1306_DrawPixel+0xac>
		return;
 8000a3a:	bf00      	nop
	}
}
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	2000042c 	.word	0x2000042c
 8000a48:	2000002c 	.word	0x2000002c

08000a4c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff ff85 	bl	8000960 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a56:	f7ff ff57 	bl	8000908 <SSD1306_UpdateScreen>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <ssd1306_I2C_Init+0x24>)
 8000a68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a6a:	e002      	b.n	8000a72 <ssd1306_I2C_Init+0x12>
		p--;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f9      	bne.n	8000a6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	0003d090 	.word	0x0003d090

08000a88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b0c7      	sub	sp, #284	; 0x11c
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4604      	mov	r4, r0
 8000a90:	4608      	mov	r0, r1
 8000a92:	4639      	mov	r1, r7
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	1dbb      	adds	r3, r7, #6
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	460a      	mov	r2, r1
 8000aa8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	1dba      	adds	r2, r7, #6
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000aba:	e010      	b.n	8000ade <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000abc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ac0:	463a      	mov	r2, r7
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aca:	3301      	adds	r3, #1
 8000acc:	7811      	ldrb	r1, [r2, #0]
 8000ace:	f107 020c 	add.w	r2, r7, #12
 8000ad2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ad4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ad8:	3301      	adds	r3, #1
 8000ada:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ade:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	1d3a      	adds	r2, r7, #4
 8000ae6:	8812      	ldrh	r2, [r2, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8e7      	bhi.n	8000abc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b299      	uxth	r1, r3
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b298      	uxth	r0, r3
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	230a      	movs	r3, #10
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4603      	mov	r3, r0
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <ssd1306_I2C_WriteMulti+0x8c>)
 8000b06:	f000 fde7 	bl	80016d8 <HAL_I2C_Master_Transmit>
}
 8000b0a:	bf00      	nop
 8000b0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000434 	.word	0x20000434

08000b18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	460b      	mov	r3, r1
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	4613      	mov	r3, r2
 8000b28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b2e:	797b      	ldrb	r3, [r7, #5]
 8000b30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	b299      	uxth	r1, r3
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <ssd1306_I2C_Write+0x38>)
 8000b42:	f000 fdc9 	bl	80016d8 <HAL_I2C_Master_Transmit>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000434 	.word	0x20000434

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x60>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_MspInit+0x60>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <HAL_I2C_MspInit+0x70>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d123      	bne.n	8000c20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf0:	23c0      	movs	r3, #192	; 0xc0
 8000bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000c04:	f000 faa4 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c12:	61d3      	str	r3, [r2, #28]
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c52:	d12b      	bne.n	8000cac <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	61d3      	str	r3, [r2, #28]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c84:	2303      	movs	r3, #3
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c98:	f000 fa5a 	bl	8001150 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	201c      	movs	r0, #28
 8000ca2:	f000 fa1e 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f000 fa37 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_TIM_Base_MspInit+0x44>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d113      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_TIM_Base_MspInit+0x48>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201d      	movs	r0, #29
 8000cec:	f000 f9f9 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf0:	201d      	movs	r0, #29
 8000cf2:	f000 fa12 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_UART_MspInit+0x8c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d131      	bne.n	8000d8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_UART_MspInit+0x90>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d6e:	f000 f9ef 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d88:	f000 f9e2 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f889 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f001 fe90 	bl	8002b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000548 	.word	0x20000548

08000e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM3_IRQHandler+0x10>)
 8000e0a:	f001 fe86 	bl	8002b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000488 	.word	0x20000488

08000e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4a:	f7ff ffe5 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f002 faaf 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff fa49 	bl	80002e8 <main>
  bx lr
 8000e56:	4770      	bx	lr
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08005c54 	.word	0x08005c54
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	20000594 	.word	0x20000594

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f923 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe62 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f93b 	bl	8001136 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f903 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x20>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_IncTick+0x20>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000590 	.word	0x20000590

08000f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000590 	.word	0x20000590

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4906      	ldr	r1, [pc, #24]	; (8000fcc <__NVIC_EnableIRQ+0x34>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff90 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff2d 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff42 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff35 	bl	8000f98 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b08b      	sub	sp, #44	; 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e127      	b.n	80013b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001164:	2201      	movs	r2, #1
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8116 	bne.w	80013ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b12      	cmp	r3, #18
 8001188:	d034      	beq.n	80011f4 <HAL_GPIO_Init+0xa4>
 800118a:	2b12      	cmp	r3, #18
 800118c:	d80d      	bhi.n	80011aa <HAL_GPIO_Init+0x5a>
 800118e:	2b02      	cmp	r3, #2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x9a>
 8001192:	2b02      	cmp	r3, #2
 8001194:	d804      	bhi.n	80011a0 <HAL_GPIO_Init+0x50>
 8001196:	2b00      	cmp	r3, #0
 8001198:	d031      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d01c      	beq.n	80011d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800119e:	e048      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d043      	beq.n	800122c <HAL_GPIO_Init+0xdc>
 80011a4:	2b11      	cmp	r3, #17
 80011a6:	d01b      	beq.n	80011e0 <HAL_GPIO_Init+0x90>
          break;
 80011a8:	e043      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011aa:	4a89      	ldr	r2, [pc, #548]	; (80013d0 <HAL_GPIO_Init+0x280>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d026      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011b0:	4a87      	ldr	r2, [pc, #540]	; (80013d0 <HAL_GPIO_Init+0x280>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d806      	bhi.n	80011c4 <HAL_GPIO_Init+0x74>
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_GPIO_Init+0x284>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d020      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011bc:	4a86      	ldr	r2, [pc, #536]	; (80013d8 <HAL_GPIO_Init+0x288>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01d      	beq.n	80011fe <HAL_GPIO_Init+0xae>
          break;
 80011c2:	e036      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011c4:	4a85      	ldr	r2, [pc, #532]	; (80013dc <HAL_GPIO_Init+0x28c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011ca:	4a85      	ldr	r2, [pc, #532]	; (80013e0 <HAL_GPIO_Init+0x290>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d016      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011d0:	4a84      	ldr	r2, [pc, #528]	; (80013e4 <HAL_GPIO_Init+0x294>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xae>
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e028      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e023      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01e      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e019      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e012      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d801      	bhi.n	800123c <HAL_GPIO_Init+0xec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	e001      	b.n	8001240 <HAL_GPIO_Init+0xf0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3304      	adds	r3, #4
 8001240:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2bff      	cmp	r3, #255	; 0xff
 8001246:	d802      	bhi.n	800124e <HAL_GPIO_Init+0xfe>
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x104>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3b08      	subs	r3, #8
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	210f      	movs	r1, #15
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	401a      	ands	r2, r3
 8001266:	6a39      	ldr	r1, [r7, #32]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8096 	beq.w	80013ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129a:	4a54      	ldr	r2, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x29c>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <HAL_GPIO_Init+0x2a0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x19e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4a      	ldr	r2, [pc, #296]	; (80013f4 <HAL_GPIO_Init+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x19a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x196>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x192>
 80012de:	2303      	movs	r3, #3
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012ee:	2300      	movs	r3, #0
 80012f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001300:	493a      	ldr	r1, [pc, #232]	; (80013ec <HAL_GPIO_Init+0x29c>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4938      	ldr	r1, [pc, #224]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	4933      	ldr	r1, [pc, #204]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001332:	4013      	ands	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	492e      	ldr	r1, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4929      	ldr	r1, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800135a:	4013      	ands	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	4924      	ldr	r1, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	491f      	ldr	r1, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001382:	4013      	ands	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	491a      	ldr	r1, [pc, #104]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4915      	ldr	r1, [pc, #84]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f47f aed0 	bne.w	8001164 <HAL_GPIO_Init+0x14>
  }
}
 80013c4:	bf00      	nop
 80013c6:	372c      	adds	r7, #44	; 0x2c
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10110000 	.word	0x10110000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10310000 	.word	0x10310000
 80013e0:	10320000 	.word	0x10320000
 80013e4:	10220000 	.word	0x10220000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40011400 	.word	0x40011400
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43d9      	mvns	r1, r3
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	400b      	ands	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e11f      	b.n	80016ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fb92 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2224      	movs	r2, #36	; 0x24
 8001498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014cc:	f001 f90e 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a7b      	ldr	r2, [pc, #492]	; (80016c4 <HAL_I2C_Init+0x25c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d807      	bhi.n	80014ec <HAL_I2C_Init+0x84>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4a7a      	ldr	r2, [pc, #488]	; (80016c8 <HAL_I2C_Init+0x260>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf94      	ite	ls
 80014e4:	2301      	movls	r3, #1
 80014e6:	2300      	movhi	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	e006      	b.n	80014fa <HAL_I2C_Init+0x92>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a77      	ldr	r2, [pc, #476]	; (80016cc <HAL_I2C_Init+0x264>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0db      	b.n	80016ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a72      	ldr	r2, [pc, #456]	; (80016d0 <HAL_I2C_Init+0x268>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a64      	ldr	r2, [pc, #400]	; (80016c4 <HAL_I2C_Init+0x25c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d802      	bhi.n	800153c <HAL_I2C_Init+0xd4>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	e009      	b.n	8001550 <HAL_I2C_Init+0xe8>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_I2C_Init+0x26c>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	3301      	adds	r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4956      	ldr	r1, [pc, #344]	; (80016c4 <HAL_I2C_Init+0x25c>)
 800156c:	428b      	cmp	r3, r1
 800156e:	d80d      	bhi.n	800158c <HAL_I2C_Init+0x124>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e59      	subs	r1, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fbb1 f3f3 	udiv	r3, r1, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b04      	cmp	r3, #4
 8001586:	bf38      	it	cc
 8001588:	2304      	movcc	r3, #4
 800158a:	e04f      	b.n	800162c <HAL_I2C_Init+0x1c4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d111      	bne.n	80015b8 <HAL_I2C_Init+0x150>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e012      	b.n	80015de <HAL_I2C_Init+0x176>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	0099      	lsls	r1, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x17e>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e022      	b.n	800162c <HAL_I2C_Init+0x1c4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10e      	bne.n	800160c <HAL_I2C_Init+0x1a4>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160a:	e00f      	b.n	800162c <HAL_I2C_Init+0x1c4>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	6809      	ldr	r1, [r1, #0]
 8001630:	4313      	orrs	r3, r2
 8001632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800165a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6911      	ldr	r1, [r2, #16]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68d2      	ldr	r2, [r2, #12]
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	000186a0 	.word	0x000186a0
 80016c8:	001e847f 	.word	0x001e847f
 80016cc:	003d08ff 	.word	0x003d08ff
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	10624dd3 	.word	0x10624dd3

080016d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	460b      	mov	r3, r1
 80016e6:	817b      	strh	r3, [r7, #10]
 80016e8:	4613      	mov	r3, r2
 80016ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fc18 	bl	8000f20 <HAL_GetTick>
 80016f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	f040 80e0 	bne.w	80018c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2319      	movs	r3, #25
 8001706:	2201      	movs	r2, #1
 8001708:	4970      	ldr	r1, [pc, #448]	; (80018cc <HAL_I2C_Master_Transmit+0x1f4>)
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fa92 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001716:	2302      	movs	r3, #2
 8001718:	e0d3      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2C_Master_Transmit+0x50>
 8001724:	2302      	movs	r3, #2
 8001726:	e0cc      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d007      	beq.n	800174e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2221      	movs	r2, #33	; 0x21
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2210      	movs	r2, #16
 800176a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	893a      	ldrh	r2, [r7, #8]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001790:	8979      	ldrh	r1, [r7, #10]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f9ca 	bl	8001b30 <I2C_MasterRequestWrite>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e08d      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017bc:	e066      	b.n	800188c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	6a39      	ldr	r1, [r7, #32]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fb0c 	bl	8001de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d107      	bne.n	80017e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b04      	cmp	r3, #4
 8001826:	d11b      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x188>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d017      	beq.n	8001860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	6a39      	ldr	r1, [r7, #32]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fafc 	bl	8001e62 <I2C_WaitOnBTFFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00d      	beq.n	800188c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b04      	cmp	r3, #4
 8001876:	d107      	bne.n	8001888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e01a      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d194      	bne.n	80017be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	00100002 	.word	0x00100002
 80018d0:	ffff0000 	.word	0xffff0000

080018d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	460b      	mov	r3, r1
 80018e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fb1c 	bl	8000f20 <HAL_GetTick>
 80018e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	f040 8111 	bne.w	8001b1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2319      	movs	r3, #25
 8001902:	2201      	movs	r2, #1
 8001904:	4988      	ldr	r1, [pc, #544]	; (8001b28 <HAL_I2C_IsDeviceReady+0x254>)
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f994 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	e104      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_I2C_IsDeviceReady+0x50>
 8001920:	2302      	movs	r3, #2
 8001922:	e0fd      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d007      	beq.n	800194a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001958:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2224      	movs	r2, #36	; 0x24
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <HAL_I2C_IsDeviceReady+0x258>)
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f952 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d103      	bne.n	80019ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0b6      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff faad 	bl	8000f20 <HAL_GetTick>
 80019c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019f6:	e025      	b.n	8001a44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff fa92 	bl	8000f20 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <HAL_I2C_IsDeviceReady+0x13a>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	22a0      	movs	r2, #160	; 0xa0
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2ba0      	cmp	r3, #160	; 0xa0
 8001a4e:	d005      	beq.n	8001a5c <HAL_I2C_IsDeviceReady+0x188>
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_I2C_IsDeviceReady+0x188>
 8001a56:	7dbb      	ldrb	r3, [r7, #22]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0cd      	beq.n	80019f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d129      	bne.n	8001ac6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4921      	ldr	r1, [pc, #132]	; (8001b28 <HAL_I2C_IsDeviceReady+0x254>)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f8c6 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e036      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e02c      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ade:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2319      	movs	r3, #25
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	490f      	ldr	r1, [pc, #60]	; (8001b28 <HAL_I2C_IsDeviceReady+0x254>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f8a2 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e012      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f4ff af32 	bcc.w	800196e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	00100002 	.word	0x00100002
 8001b2c:	ffff0000 	.word	0xffff0000

08001b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d006      	beq.n	8001b5a <I2C_MasterRequestWrite+0x2a>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d003      	beq.n	8001b5a <I2C_MasterRequestWrite+0x2a>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b58:	d108      	bne.n	8001b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e00b      	b.n	8001b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	2b12      	cmp	r3, #18
 8001b72:	d107      	bne.n	8001b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f84f 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001baa:	d103      	bne.n	8001bb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e035      	b.n	8001c24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc0:	d108      	bne.n	8001bd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	e01b      	b.n	8001c0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	11db      	asrs	r3, r3, #7
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 0306 	and.w	r3, r3, #6
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f063 030f 	orn	r3, r3, #15
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <I2C_MasterRequestWrite+0xfc>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f875 	bl	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e010      	b.n	8001c24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <I2C_MasterRequestWrite+0x100>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f865 	bl	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	00010008 	.word	0x00010008
 8001c30:	00010002 	.word	0x00010002

08001c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c44:	e025      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d021      	beq.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7ff f967 	bl	8000f20 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d116      	bne.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f043 0220 	orr.w	r2, r3, #32
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e023      	b.n	8001cda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10d      	bne.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	e00c      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d0b6      	beq.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf0:	e051      	b.n	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d123      	bne.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e046      	b.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d021      	beq.n	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f8e5 	bl	8000f20 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d116      	bne.n	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e020      	b.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10c      	bne.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4013      	ands	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e00b      	b.n	8001dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d18d      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dec:	e02d      	b.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f878 	bl	8001ee4 <I2C_IsAcknowledgeFailed>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02d      	b.n	8001e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d021      	beq.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f88b 	bl	8000f20 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e007      	b.n	8001e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d1ca      	bne.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e6e:	e02d      	b.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f837 	bl	8001ee4 <I2C_IsAcknowledgeFailed>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e02d      	b.n	8001edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d021      	beq.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7ff f84a 	bl	8000f20 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e007      	b.n	8001edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d1ca      	bne.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d11b      	bne.n	8001f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e26c      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d00c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d112      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d06c      	beq.n	800206c <HAL_RCC_OscConfig+0x12c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d168      	bne.n	800206c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e246      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x76>
 8001fa8:	4b80      	ldr	r3, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7f      	ldr	r2, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e02e      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x98>
 8001fbe:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xbc>
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe ff80 	bl	8000f20 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe ff7c 	bl	8000f20 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1fa      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xe4>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe ff6c 	bl	8000f20 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe ff68 	bl	8000f20 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1e6      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x10c>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1ba      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe ff21 	bl	8000f20 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe ff1d 	bl	8000f20 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e19b      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4927      	ldr	r1, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe ff00 	bl	8000f20 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7fe fefc 	bl	8000f20 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e17a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03a      	beq.n	80021c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe fee0 	bl	8000f20 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fedc 	bl	8000f20 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e15a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 fada 	bl	800273c <RCC_Delay>
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fec6 	bl	8000f20 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	e00f      	b.n	80021b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fec2 	bl	8000f20 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e140      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	42420000 	.word	0x42420000
 80021b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b9e      	ldr	r3, [pc, #632]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e9      	bne.n	8002198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a6 	beq.w	800231e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a93      	ldr	r2, [pc, #588]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe83 	bl	8000f20 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fe7f 	bl	8000f20 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0fd      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x312>
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x334>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x356>
 800227c:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fe33 	bl	8000f20 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fe2f 	bl	8000f20 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ab      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x37e>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fe1d 	bl	8000f20 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fe19 	bl	8000f20 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e095      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a47      	ldr	r2, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8081 	beq.w	800242a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d061      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d146      	bne.n	80023ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fded 	bl	8000f20 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fde9 	bl	8000f20 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e067      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a19      	ldr	r1, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	430b      	orrs	r3, r1
 8002396:	4927      	ldr	r1, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fdbd 	bl	8000f20 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fdb9 	bl	8000f20 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e037      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x46a>
 80023c8:	e02f      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fda6 	bl	8000f20 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fda2 	bl	8000f20 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x498>
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420060 	.word	0x42420060

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fcf6 	bl	8000f20 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fcf2 	bl	8000f20 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4601      	mov	r1, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	fa21 f303 	lsr.w	r3, r1, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fc54 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	08005c34 	.word	0x08005c34
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b490      	push	{r4, r7}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800261c:	1d3c      	adds	r4, r7, #4
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x46>
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800268c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002692:	fb02 f203 	mul.w	r2, r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	623b      	str	r3, [r7, #32]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6a3b      	ldr	r3, [r7, #32]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	08003420 	.word	0x08003420
 80026c8:	08003430 	.word	0x08003430
 80026cc:	40021000 	.word	0x40021000
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	003d0900 	.word	0x003d0900

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08005c44 	.word	0x08005c44

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffde 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800271c:	4601      	mov	r1, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	08005c44 	.word	0x08005c44

0800273c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <RCC_Delay+0x34>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <RCC_Delay+0x38>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002758:	bf00      	nop
  }
  while (Delay --);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <RCC_Delay+0x1c>
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fa8c 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fb92 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03a      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_TIM_Base_Start_IT+0x98>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e093      	b.n	80029f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe f9a5 	bl	8000c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f000 fae5 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	4313      	orrs	r3, r2
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800295c:	f023 030c 	bic.w	r3, r3, #12
 8002960:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4313      	orrs	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	011a      	lsls	r2, r3, #4
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	031b      	lsls	r3, r3, #12
 800298c:	4313      	orrs	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800299a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4313      	orrs	r3, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d110      	bne.n	8002a52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a36:	7b7b      	ldrb	r3, [r7, #13]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e068      	b.n	8002b12 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	e031      	b.n	8002ab6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d110      	bne.n	8002a7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a5e:	7b3b      	ldrb	r3, [r7, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e054      	b.n	8002b12 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a78:	e01d      	b.n	8002ab6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e03d      	b.n	8002b12 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_TIM_Encoder_Start+0xc2>
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d008      	beq.n	8002ad2 <HAL_TIM_Encoder_Start+0xd2>
 8002ac0:	e00f      	b.n	8002ae2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fb00 	bl	80030d0 <TIM_CCxChannelCmd>
      break;
 8002ad0:	e016      	b.n	8002b00 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 faf8 	bl	80030d0 <TIM_CCxChannelCmd>
      break;
 8002ae0:	e00e      	b.n	8002b00 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 faf0 	bl	80030d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	2104      	movs	r1, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fae9 	bl	80030d0 <TIM_CCxChannelCmd>
      break;
 8002afe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0202 	mvn.w	r2, #2
 8002b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f9a4 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f997 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9a6 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d122      	bne.n	8002bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0204 	mvn.w	r2, #4
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f97a 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e005      	b.n	8002bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f96d 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f97c 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11b      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0208 	mvn.w	r2, #8
 8002bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f950 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f943 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f952 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0210 	mvn.w	r2, #16
 8002c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2208      	movs	r2, #8
 8002c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f926 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f919 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f928 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0201 	mvn.w	r2, #1
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fa57 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d10e      	bne.n	8002cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b80      	cmp	r3, #128	; 0x80
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa8e 	bl	80031e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d107      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8ec 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d10e      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d107      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f06f 0220 	mvn.w	r2, #32
 8002d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fa59 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_ConfigClockSource+0x18>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0a6      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x166>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d067      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x120>
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d80b      	bhi.n	8002d96 <HAL_TIM_ConfigClockSource+0x6c>
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d073      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x140>
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d802      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x62>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06f      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d8a:	e078      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d06c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x140>
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d06a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d94:	e073      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d96:	2b70      	cmp	r3, #112	; 0x70
 8002d98:	d00d      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x8c>
 8002d9a:	2b70      	cmp	r3, #112	; 0x70
 8002d9c:	d804      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x7e>
 8002d9e:	2b50      	cmp	r3, #80	; 0x50
 8002da0:	d033      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xe0>
 8002da2:	2b60      	cmp	r3, #96	; 0x60
 8002da4:	d041      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002da6:	e06a      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d066      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x152>
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db2:	d017      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002db4:	e063      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f000 f964 	bl	8003092 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e04c      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f000 f94d 	bl	8003092 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e039      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 f8c4 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f91b 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002e28:	e029      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8e2 	bl	8003000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2160      	movs	r1, #96	; 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f90b 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002e48:	e019      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f8a4 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f8fb 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002e68:	e009      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f000 f8f2 	bl	800305e <TIM_ITRx_SetConfig>
        break;
 8002e7a:	e000      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d007      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <TIM_Base_SetConfig+0xbc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <TIM_Base_SetConfig+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <TIM_Base_SetConfig+0xbc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <TIM_Base_SetConfig+0xc0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 030a 	bic.w	r3, r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f023 0210 	bic.w	r2, r3, #16
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	031b      	lsls	r3, r3, #12
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	621a      	str	r2, [r3, #32]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 0307 	orr.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	021a      	lsls	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800312c:	2302      	movs	r3, #2
 800312e:	e046      	b.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d009      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10c      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e03f      	b.n	800328a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fd72 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800323a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f829 	bl	8003294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ce:	f023 030c 	bic.w	r3, r3, #12
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	430b      	orrs	r3, r1
 80032da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <UART_SetConfig+0x114>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff fa0a 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	e002      	b.n	800330a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003304:	f7ff f9f2 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	0119      	lsls	r1, r3, #4
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <UART_SetConfig+0x118>)
 8003342:	fba3 0302 	umull	r0, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2064      	movs	r0, #100	; 0x64
 800334a:	fb00 f303 	mul.w	r3, r0, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	3332      	adds	r3, #50	; 0x32
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <UART_SetConfig+0x118>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003360:	4419      	add	r1, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <UART_SetConfig+0x118>)
 800337a:	fba3 0302 	umull	r0, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2064      	movs	r0, #100	; 0x64
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <UART_SetConfig+0x118>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	440a      	add	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013800 	.word	0x40013800
 80033ac:	51eb851f 	.word	0x51eb851f

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	2500      	movs	r5, #0
 80033b4:	4e0c      	ldr	r6, [pc, #48]	; (80033e8 <__libc_init_array+0x38>)
 80033b6:	4c0d      	ldr	r4, [pc, #52]	; (80033ec <__libc_init_array+0x3c>)
 80033b8:	1ba4      	subs	r4, r4, r6
 80033ba:	10a4      	asrs	r4, r4, #2
 80033bc:	42a5      	cmp	r5, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	f000 f822 	bl	8003408 <_init>
 80033c4:	2500      	movs	r5, #0
 80033c6:	4e0a      	ldr	r6, [pc, #40]	; (80033f0 <__libc_init_array+0x40>)
 80033c8:	4c0a      	ldr	r4, [pc, #40]	; (80033f4 <__libc_init_array+0x44>)
 80033ca:	1ba4      	subs	r4, r4, r6
 80033cc:	10a4      	asrs	r4, r4, #2
 80033ce:	42a5      	cmp	r5, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033d8:	4798      	blx	r3
 80033da:	3501      	adds	r5, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033e2:	4798      	blx	r3
 80033e4:	3501      	adds	r5, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	08005c4c 	.word	0x08005c4c
 80033ec:	08005c4c 	.word	0x08005c4c
 80033f0:	08005c4c 	.word	0x08005c4c
 80033f4:	08005c50 	.word	0x08005c50

080033f8 <memset>:
 80033f8:	4603      	mov	r3, r0
 80033fa:	4402      	add	r2, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
