
C6_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc8  08002cc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc8  08002cc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc8  08002cc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08002d40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08002d40  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000787f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001762  00000000  00000000  00027918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ec  00000000  00000000  0002a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fcc  00000000  00000000  00041424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008252a  00000000  00000000  0004a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  000cc96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c38 	.word	0x08002c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c38 	.word	0x08002c38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b085      	sub	sp, #20
 8000160:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f000 fd45 	bl	8000bf0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 f851 	bl	800020c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 f8eb 	bl	8000344 <MX_GPIO_Init>
	MX_SPI1_Init();
 800016e:	f000 f889 	bl	8000284 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000172:	f000 f8bd 	bl	80002f0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	TM_MFRC522_Init();
 8000176:	f000 f973 	bl	8000460 <TM_MFRC522_Init>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	481c      	ldr	r0, [pc, #112]	; (80001f4 <main+0x98>)
 8000182:	f000 fff7 	bl	8001174 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		static uint32_t t_prev = 0;
		if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000186:	481c      	ldr	r0, [pc, #112]	; (80001f8 <main+0x9c>)
 8000188:	f000 f98e 	bl	80004a8 <TM_MFRC522_Check>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d116      	bne.n	80001c0 <main+0x64>
			sprintf(szBuff, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 8000192:	4b19      	ldr	r3, [pc, #100]	; (80001f8 <main+0x9c>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	4618      	mov	r0, r3
 8000198:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <main+0x9c>)
 800019a:	785b      	ldrb	r3, [r3, #1]
 800019c:	461c      	mov	r4, r3
 800019e:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <main+0x9c>)
 80001a0:	789b      	ldrb	r3, [r3, #2]
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0x9c>)
 80001a6:	78db      	ldrb	r3, [r3, #3]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <main+0x9c>)
 80001ac:	791b      	ldrb	r3, [r3, #4]
 80001ae:	9302      	str	r3, [sp, #8]
 80001b0:	9101      	str	r1, [sp, #4]
 80001b2:	9200      	str	r2, [sp, #0]
 80001b4:	4623      	mov	r3, r4
 80001b6:	4602      	mov	r2, r0
 80001b8:	4910      	ldr	r1, [pc, #64]	; (80001fc <main+0xa0>)
 80001ba:	4811      	ldr	r0, [pc, #68]	; (8000200 <main+0xa4>)
 80001bc:	f002 f8c2 	bl	8002344 <siprintf>
		}
		if (HAL_GetTick() - t_prev >= 500) {
 80001c0:	f000 fd6e 	bl	8000ca0 <HAL_GetTick>
 80001c4:	4602      	mov	r2, r0
 80001c6:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <main+0xa8>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	1ad3      	subs	r3, r2, r3
 80001cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001d0:	d3d9      	bcc.n	8000186 <main+0x2a>
			t_prev = HAL_GetTick();
 80001d2:	f000 fd65 	bl	8000ca0 <HAL_GetTick>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <main+0xa8>)
 80001da:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)szBuff, strlen((char*)szBuff), 1000);
 80001dc:	4808      	ldr	r0, [pc, #32]	; (8000200 <main+0xa4>)
 80001de:	f7ff ffb5 	bl	800014c <strlen>
 80001e2:	4603      	mov	r3, r0
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ea:	4905      	ldr	r1, [pc, #20]	; (8000200 <main+0xa4>)
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0xac>)
 80001ee:	f001 ff0c 	bl	800200a <HAL_UART_Transmit>
	while (1) {
 80001f2:	e7c8      	b.n	8000186 <main+0x2a>
 80001f4:	40011000 	.word	0x40011000
 80001f8:	20000128 	.word	0x20000128
 80001fc:	08002c50 	.word	0x08002c50
 8000200:	20000130 	.word	0x20000130
 8000204:	20000194 	.word	0x20000194
 8000208:	200000e4 	.word	0x200000e4

0800020c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f88a 	bl	8002334 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ffae 	bl	80011a4 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
		Error_Handler();
 800024e:	f000 f8d9 	bl	8000404 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fa1c 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
		Error_Handler();
 8000276:	f000 f8c5 	bl	8000404 <Error_Handler>
	}
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_SPI1_Init+0x64>)
 800028a:	4a18      	ldr	r2, [pc, #96]	; (80002ec <MX_SPI1_Init+0x68>)
 800028c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_SPI1_Init+0x64>)
 8000290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000294:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_SPI1_Init+0x64>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_SPI1_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_SPI1_Init+0x64>)
 80002d6:	f001 fb7f 	bl	80019d8 <HAL_SPI_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80002e0:	f000 f890 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000008c 	.word	0x2000008c
 80002ec:	40013000 	.word	0x40013000

080002f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000300:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 fe22 	bl	8001f70 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000332:	f000 f867 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000e4 	.word	0x200000e4
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	4815      	ldr	r0, [pc, #84]	; (80003fc <MX_GPIO_Init+0xb8>)
 80003a8:	f000 fee4 	bl	8001174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_RFID_GPIO_Port, CS_RFID_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2110      	movs	r1, #16
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <MX_GPIO_Init+0xbc>)
 80003b2:	f000 fedf 	bl	8001174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	480b      	ldr	r0, [pc, #44]	; (80003fc <MX_GPIO_Init+0xb8>)
 80003d0:	f000 fd54 	bl	8000e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_RFID_Pin */
	GPIO_InitStruct.Pin = CS_RFID_Pin;
 80003d4:	2310      	movs	r3, #16
 80003d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_RFID_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_GPIO_Init+0xbc>)
 80003ec:	f000 fd46 	bl	8000e7c <HAL_GPIO_Init>

}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40011000 	.word	0x40011000
 8000400:	40010800 	.word	0x40010800

08000404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <TM_SPI_Send>:

extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12], m;
RC522_DATA rc522;

uint8_t TM_SPI_Send(uint8_t data) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af02      	add	r7, sp, #8
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	733b      	strb	r3, [r7, #12]
	while (!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE))
 800041e:	bf00      	nop
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <TM_SPI_Send+0x4c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b02      	cmp	r3, #2
 800042c:	d1f8      	bne.n	8000420 <TM_SPI_Send+0x10>
		;
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 800042e:	f107 0208 	add.w	r2, r7, #8
 8000432:	f107 010c 	add.w	r1, r7, #12
 8000436:	230a      	movs	r3, #10
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	4807      	ldr	r0, [pc, #28]	; (800045c <TM_SPI_Send+0x4c>)
 800043e:	f001 fb4f 	bl	8001ae0 <HAL_SPI_TransmitReceive>
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY))
 8000442:	bf00      	nop
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <TM_SPI_Send+0x4c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b80      	cmp	r3, #128	; 0x80
 8000450:	d0f8      	beq.n	8000444 <TM_SPI_Send+0x34>
		; /*!< Send byte through the SPI1 peripheral */
	return data_re[0];
 8000452:	7a3b      	ldrb	r3, [r7, #8]

}
 8000454:	4618      	mov	r0, r3
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2000008c 	.word	0x2000008c

08000460 <TM_MFRC522_Init>:

void TM_MFRC522_Init(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8000464:	f000 f8d5 	bl	8000612 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000468:	218d      	movs	r1, #141	; 0x8d
 800046a:	202a      	movs	r0, #42	; 0x2a
 800046c:	f000 f836 	bl	80004dc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000470:	213e      	movs	r1, #62	; 0x3e
 8000472:	202b      	movs	r0, #43	; 0x2b
 8000474:	f000 f832 	bl	80004dc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000478:	211e      	movs	r1, #30
 800047a:	202d      	movs	r0, #45	; 0x2d
 800047c:	f000 f82e 	bl	80004dc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000480:	2100      	movs	r1, #0
 8000482:	202c      	movs	r0, #44	; 0x2c
 8000484:	f000 f82a 	bl	80004dc <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8000488:	2170      	movs	r1, #112	; 0x70
 800048a:	2026      	movs	r0, #38	; 0x26
 800048c:	f000 f826 	bl	80004dc <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	2015      	movs	r0, #21
 8000494:	f000 f822 	bl	80004dc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000498:	213d      	movs	r1, #61	; 0x3d
 800049a:	2011      	movs	r0, #17
 800049c:	f000 f81e 	bl	80004dc <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80004a0:	f000 f8a2 	bl	80005e8 <TM_MFRC522_AntennaOn>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t *id) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	2026      	movs	r0, #38	; 0x26
 80004b4:	f000 f8b5 	bl	8000622 <TM_MFRC522_Request>
 80004b8:	4603      	mov	r3, r0
 80004ba:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f9a1 	bl	800080a <TM_MFRC522_Anticoll>
 80004c8:	4603      	mov	r3, r0
 80004ca:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 80004cc:	f000 fa23 	bl	8000916 <TM_MFRC522_Halt>
	return status;
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <TM_MFRC522_WriteRegister>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <TM_MFRC522_WriteRegister+0x48>)
 80004f2:	f000 fe3f 	bl	8001174 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff84 	bl	8000410 <TM_SPI_Send>
	//Send data	
	TM_SPI_Send(val);
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff80 	bl	8000410 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <TM_MFRC522_WriteRegister+0x48>)
 8000516:	f000 fe2d 	bl	8001174 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <TM_MFRC522_ReadRegister+0x4c>)
 8000538:	f000 fe1c 	bl	8001174 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	b25b      	sxtb	r3, r3
 8000542:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000546:	b25b      	sxtb	r3, r3
 8000548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff5d 	bl	8000410 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ff5a 	bl	8000410 <TM_SPI_Send>
 800055c:	4603      	mov	r3, r0
 800055e:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <TM_MFRC522_ReadRegister+0x4c>)
 8000566:	f000 fe05 	bl	8001174 <HAL_GPIO_WritePin>

	return val;
 800056a:	7bfb      	ldrb	r3, [r7, #15]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800

08000578 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffcc 	bl	8000528 <TM_MFRC522_ReadRegister>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	4313      	orrs	r3, r2
 8000598:	b2da      	uxtb	r2, r3
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff9c 	bl	80004dc <TM_MFRC522_WriteRegister>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffb2 	bl	8000528 <TM_MFRC522_ReadRegister>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b25a      	sxtb	r2, r3
 80005c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005cc:	43db      	mvns	r3, r3
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	4013      	ands	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff7e 	bl	80004dc <TM_MFRC522_WriteRegister>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80005ee:	2014      	movs	r0, #20
 80005f0:	f7ff ff9a 	bl	8000528 <TM_MFRC522_ReadRegister>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000602:	2103      	movs	r1, #3
 8000604:	2014      	movs	r0, #20
 8000606:	f7ff ffb7 	bl	8000578 <TM_MFRC522_SetBitMask>
	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000616:	210f      	movs	r1, #15
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ff5f 	bl	80004dc <TM_MFRC522_WriteRegister>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}

08000622 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af02      	add	r7, sp, #8
 8000628:	4603      	mov	r3, r0
 800062a:	6039      	str	r1, [r7, #0]
 800062c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 800062e:	2107      	movs	r1, #7
 8000630:	200d      	movs	r0, #13
 8000632:	f7ff ff53 	bl	80004dc <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	200c      	movs	r0, #12
 800064a:	f000 f80f 	bl	800066c <TM_MFRC522_ToCard>
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <TM_MFRC522_Request+0x3c>
 8000658:	89bb      	ldrh	r3, [r7, #12]
 800065a:	2b10      	cmp	r3, #16
 800065c:	d001      	beq.n	8000662 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 800065e:	2302      	movs	r3, #2
 8000660:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t *sendData,
		uint8_t sendLen, uint8_t *backData, uint16_t *backLen) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4603      	mov	r3, r0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	4613      	mov	r3, r2
 800067c:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 800067e:	2302      	movs	r3, #2
 8000680:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2b0c      	cmp	r3, #12
 800068e:	d006      	beq.n	800069e <TM_MFRC522_ToCard+0x32>
 8000690:	2b0e      	cmp	r3, #14
 8000692:	d109      	bne.n	80006a8 <TM_MFRC522_ToCard+0x3c>
	case PCD_AUTHENT: {
		irqEn = 0x12;
 8000694:	2312      	movs	r3, #18
 8000696:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 8000698:	2310      	movs	r3, #16
 800069a:	757b      	strb	r3, [r7, #21]
		break;
 800069c:	e005      	b.n	80006aa <TM_MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE: {
		irqEn = 0x77;
 800069e:	2377      	movs	r3, #119	; 0x77
 80006a0:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 80006a2:	2330      	movs	r3, #48	; 0x30
 80006a4:	757b      	strb	r3, [r7, #21]
		break;
 80006a6:	e000      	b.n	80006aa <TM_MFRC522_ToCard+0x3e>
	}
	default:
		break;
 80006a8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80006aa:	7dbb      	ldrb	r3, [r7, #22]
 80006ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4619      	mov	r1, r3
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff ff11 	bl	80004dc <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	2004      	movs	r0, #4
 80006be:	f7ff ff75 	bl	80005ac <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	200a      	movs	r0, #10
 80006c6:	f7ff ff57 	bl	8000578 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff05 	bl	80004dc <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	827b      	strh	r3, [r7, #18]
 80006d6:	e00a      	b.n	80006ee <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80006d8:	8a7b      	ldrh	r3, [r7, #18]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2009      	movs	r0, #9
 80006e4:	f7ff fefa 	bl	80004dc <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80006e8:	8a7b      	ldrh	r3, [r7, #18]
 80006ea:	3301      	adds	r3, #1
 80006ec:	827b      	strh	r3, [r7, #18]
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	8a7a      	ldrh	r2, [r7, #18]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d3ef      	bcc.n	80006d8 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff feed 	bl	80004dc <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b0c      	cmp	r3, #12
 8000706:	d103      	bne.n	8000710 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);//StartSend=1,transmission of data starts
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	200d      	movs	r0, #13
 800070c:	f7ff ff34 	bl	8000578 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000710:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000714:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000716:	2004      	movs	r0, #4
 8000718:	f7ff ff06 	bl	8000528 <TM_MFRC522_ReadRegister>
 800071c:	4603      	mov	r3, r0
 800071e:	753b      	strb	r3, [r7, #20]
		i--;
 8000720:	8a7b      	ldrh	r3, [r7, #18]
 8000722:	3b01      	subs	r3, #1
 8000724:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8000726:	8a7b      	ldrh	r3, [r7, #18]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00a      	beq.n	8000742 <TM_MFRC522_ToCard+0xd6>
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <TM_MFRC522_ToCard+0xd6>
 8000736:	7d3a      	ldrb	r2, [r7, #20]
 8000738:	7d7b      	ldrb	r3, [r7, #21]
 800073a:	4013      	ands	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0e9      	beq.n	8000716 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=0
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	200d      	movs	r0, #13
 8000746:	f7ff ff31 	bl	80005ac <TM_MFRC522_ClearBitMask>

	if (i != 0) {
 800074a:	8a7b      	ldrh	r3, [r7, #18]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d057      	beq.n	8000800 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff fee9 	bl	8000528 <TM_MFRC522_ReadRegister>
 8000756:	4603      	mov	r3, r0
 8000758:	f003 031b 	and.w	r3, r3, #27
 800075c:	2b00      	cmp	r3, #0
 800075e:	d14d      	bne.n	80007fc <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8000764:	7d3a      	ldrb	r2, [r7, #20]
 8000766:	7dbb      	ldrb	r3, [r7, #22]
 8000768:	4013      	ands	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8000774:	2301      	movs	r3, #1
 8000776:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b0c      	cmp	r3, #12
 800077c:	d140      	bne.n	8000800 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800077e:	200a      	movs	r0, #10
 8000780:	f7ff fed2 	bl	8000528 <TM_MFRC522_ReadRegister>
 8000784:	4603      	mov	r3, r0
 8000786:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000788:	200c      	movs	r0, #12
 800078a:	f7ff fecd 	bl	8000528 <TM_MFRC522_ReadRegister>
 800078e:	4603      	mov	r3, r0
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8000796:	7c7b      	ldrb	r3, [r7, #17]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00b      	beq.n	80007b4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 800079c:	7d3b      	ldrb	r3, [r7, #20]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	7c7b      	ldrb	r3, [r7, #17]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4413      	add	r3, r2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b0:	801a      	strh	r2, [r3, #0]
 80007b2:	e005      	b.n	80007c0 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80007b4:	7d3b      	ldrb	r3, [r7, #20]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007be:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80007c0:	7d3b      	ldrb	r3, [r7, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80007ca:	7d3b      	ldrb	r3, [r7, #20]
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	d901      	bls.n	80007d4 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80007d0:	2310      	movs	r3, #16
 80007d2:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	827b      	strh	r3, [r7, #18]
 80007d8:	e00a      	b.n	80007f0 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(
 80007da:	8a7b      	ldrh	r3, [r7, #18]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	18d4      	adds	r4, r2, r3
 80007e0:	2009      	movs	r0, #9
 80007e2:	f7ff fea1 	bl	8000528 <TM_MFRC522_ReadRegister>
 80007e6:	4603      	mov	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80007ea:	8a7b      	ldrh	r3, [r7, #18]
 80007ec:	3301      	adds	r3, #1
 80007ee:	827b      	strh	r3, [r7, #18]
 80007f0:	7d3b      	ldrb	r3, [r7, #20]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	8a7a      	ldrh	r2, [r7, #18]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3ef      	bcc.n	80007da <TM_MFRC522_ToCard+0x16e>
 80007fa:	e001      	b.n	8000800 <TM_MFRC522_ToCard+0x194>
							MFRC522_REG_FIFO_DATA);
				}
			}
		} else {
			status = MI_ERR;
 80007fc:	2302      	movs	r3, #2
 80007fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000800:	7dfb      	ldrb	r3, [r7, #23]
}
 8000802:	4618      	mov	r0, r3
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}

0800080a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t *serNum) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);//TxLastBists = BitFramingReg[2..0]
 8000816:	2100      	movs	r1, #0
 8000818:	200d      	movs	r0, #13
 800081a:	f7ff fe5f 	bl	80004dc <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2293      	movs	r2, #147	; 0x93
 8000822:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	2220      	movs	r2, #32
 800082a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800082c:	f107 030a 	add.w	r3, r7, #10
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2202      	movs	r2, #2
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff17 	bl	800066c <TM_MFRC522_ToCard>
 800083e:	4603      	mov	r3, r0
 8000840:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d118      	bne.n	800087a <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	73bb      	strb	r3, [r7, #14]
 800084c:	e009      	b.n	8000862 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	4053      	eors	r3, r2
 800085a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	3301      	adds	r3, #1
 8000860:	73bb      	strb	r3, [r7, #14]
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d9f2      	bls.n	800084e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	7b7a      	ldrb	r2, [r7, #13]
 8000872:	429a      	cmp	r2, r3
 8000874:	d001      	beq.n	800087a <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8000876:	2302      	movs	r3, #2
 8000878:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	460b      	mov	r3, r1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8000892:	2104      	movs	r1, #4
 8000894:	2005      	movs	r0, #5
 8000896:	f7ff fe89 	bl	80005ac <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);//Clear the FIFO pointer
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	200a      	movs	r0, #10
 800089e:	f7ff fe6b 	bl	8000578 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	75fb      	strb	r3, [r7, #23]
 80008a6:	e00a      	b.n	80008be <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	2009      	movs	r0, #9
 80008b4:	f7ff fe12 	bl	80004dc <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	3301      	adds	r3, #1
 80008bc:	75fb      	strb	r3, [r7, #23]
 80008be:	7dfa      	ldrb	r2, [r7, #23]
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d3f0      	bcc.n	80008a8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80008c6:	2103      	movs	r1, #3
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff fe07 	bl	80004dc <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80008ce:	23ff      	movs	r3, #255	; 0xff
 80008d0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80008d2:	2005      	movs	r0, #5
 80008d4:	f7ff fe28 	bl	8000528 <TM_MFRC522_ReadRegister>
 80008d8:	4603      	mov	r3, r0
 80008da:	75bb      	strb	r3, [r7, #22]
		i--;
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	3b01      	subs	r3, #1
 80008e0:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <TM_MFRC522_CalculateCRC+0x6e>
 80008e8:	7dbb      	ldrb	r3, [r7, #22]
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0ef      	beq.n	80008d2 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80008f2:	2022      	movs	r0, #34	; 0x22
 80008f4:	f7ff fe18 	bl	8000528 <TM_MFRC522_ReadRegister>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1c5c      	adds	r4, r3, #1
 8000904:	2021      	movs	r0, #33	; 0x21
 8000906:	f7ff fe0f 	bl	8000528 <TM_MFRC522_ReadRegister>
 800090a:	4603      	mov	r3, r0
 800090c:	7023      	strb	r3, [r4, #0]
}
 800090e:	bf00      	nop
 8000910:	371c      	adds	r7, #28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}

08000916 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 800091c:	2350      	movs	r3, #80	; 0x50
 800091e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8000924:	463b      	mov	r3, r7
 8000926:	1c9a      	adds	r2, r3, #2
 8000928:	463b      	mov	r3, r7
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffa9 	bl	8000884 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000932:	463a      	mov	r2, r7
 8000934:	4639      	mov	r1, r7
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	4613      	mov	r3, r2
 800093c:	2204      	movs	r2, #4
 800093e:	200c      	movs	r0, #12
 8000940:	f7ff fe94 	bl	800066c <TM_MFRC522_ToCard>

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <HAL_MspInit+0x5c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x5c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_MspInit+0x60>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_MspInit+0x60>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000

080009b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d12f      	bne.n	8000a30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a00:	23a0      	movs	r3, #160	; 0xa0
 8000a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <HAL_SPI_MspInit+0x90>)
 8000a14:	f000 fa32 	bl	8000e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_SPI_MspInit+0x90>)
 8000a2c:	f000 fa26 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40013000 	.word	0x40013000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010800 	.word	0x40010800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d131      	bne.n	8000ac8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000aaa:	f000 f9e7 	bl	8000e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000ac4:	f000 f9da 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013800 	.word	0x40013800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f8ab 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f001 fbc0 	bl	80022e0 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20002800 	.word	0x20002800
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000198 	.word	0x20000198
 8000b94:	200001b0 	.word	0x200001b0

08000b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bca:	f7ff ffe5 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f001 fb8d 	bl	80022ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fac3 	bl	800015c <main>
  bx lr
 8000bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be0:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8000be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000be8:	200001b0 	.word	0x200001b0

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x28>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x28>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f907 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe9e 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f911 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f8e7 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x1c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x20>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x20>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	2000019c 	.word	0x2000019c

08000ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <HAL_GetTick+0x10>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000019c 	.word	0x2000019c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff90 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff49 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb0 	bl	8000dd0 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b08b      	sub	sp, #44	; 0x2c
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e161      	b.n	8001154 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e90:	2201      	movs	r2, #1
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8150 	bne.w	800114e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4a97      	ldr	r2, [pc, #604]	; (8001110 <HAL_GPIO_Init+0x294>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d05e      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a95      	ldr	r2, [pc, #596]	; (8001110 <HAL_GPIO_Init+0x294>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d875      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ebe:	4a95      	ldr	r2, [pc, #596]	; (8001114 <HAL_GPIO_Init+0x298>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d058      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a93      	ldr	r2, [pc, #588]	; (8001114 <HAL_GPIO_Init+0x298>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d86f      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000eca:	4a93      	ldr	r2, [pc, #588]	; (8001118 <HAL_GPIO_Init+0x29c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d052      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ed0:	4a91      	ldr	r2, [pc, #580]	; (8001118 <HAL_GPIO_Init+0x29c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d869      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ed6:	4a91      	ldr	r2, [pc, #580]	; (800111c <HAL_GPIO_Init+0x2a0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d04c      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000edc:	4a8f      	ldr	r2, [pc, #572]	; (800111c <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d863      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ee2:	4a8f      	ldr	r2, [pc, #572]	; (8001120 <HAL_GPIO_Init+0x2a4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d046      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a8d      	ldr	r2, [pc, #564]	; (8001120 <HAL_GPIO_Init+0x2a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d85d      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d82a      	bhi.n	8000f48 <HAL_GPIO_Init+0xcc>
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d859      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <HAL_GPIO_Init+0x80>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f77 	.word	0x08000f77
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f63 	.word	0x08000f63
 8000f08:	08000fa5 	.word	0x08000fa5
 8000f0c:	08000fab 	.word	0x08000fab
 8000f10:	08000fab 	.word	0x08000fab
 8000f14:	08000fab 	.word	0x08000fab
 8000f18:	08000fab 	.word	0x08000fab
 8000f1c:	08000fab 	.word	0x08000fab
 8000f20:	08000fab 	.word	0x08000fab
 8000f24:	08000fab 	.word	0x08000fab
 8000f28:	08000fab 	.word	0x08000fab
 8000f2c:	08000fab 	.word	0x08000fab
 8000f30:	08000fab 	.word	0x08000fab
 8000f34:	08000fab 	.word	0x08000fab
 8000f38:	08000fab 	.word	0x08000fab
 8000f3c:	08000fab 	.word	0x08000fab
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	08000f6d 	.word	0x08000f6d
 8000f48:	4a76      	ldr	r2, [pc, #472]	; (8001124 <HAL_GPIO_Init+0x2a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f4e:	e02c      	b.n	8000faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	623b      	str	r3, [r7, #32]
          break;
 8000f56:	e029      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e024      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	3308      	adds	r3, #8
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e01f      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	330c      	adds	r3, #12
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e01a      	b.n	8000fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e013      	b.n	8000fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	611a      	str	r2, [r3, #16]
          break;
 8000f96:	e009      	b.n	8000fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	615a      	str	r2, [r3, #20]
          break;
 8000fa2:	e003      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x130>
          break;
 8000faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2bff      	cmp	r3, #255	; 0xff
 8000fb0:	d801      	bhi.n	8000fb6 <HAL_GPIO_Init+0x13a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	e001      	b.n	8000fba <HAL_GPIO_Init+0x13e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d802      	bhi.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x152>
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	3b08      	subs	r3, #8
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	6a39      	ldr	r1, [r7, #32]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 80a9 	beq.w	800114e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_GPIO_Init+0x2ac>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2ac>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001014:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_GPIO_Init+0x2b0>)
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <HAL_GPIO_Init+0x2b4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x1e0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <HAL_GPIO_Init+0x2b8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x1dc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <HAL_GPIO_Init+0x2bc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_GPIO_Init+0x1d8>
 8001050:	2302      	movs	r3, #2
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 8001054:	2303      	movs	r3, #3
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 800105c:	2300      	movs	r3, #0
 800105e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106e:	492f      	ldr	r1, [pc, #188]	; (800112c <HAL_GPIO_Init+0x2b0>)
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <HAL_GPIO_Init+0x2c0>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	492b      	ldr	r1, [pc, #172]	; (800113c <HAL_GPIO_Init+0x2c0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	4927      	ldr	r1, [pc, #156]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4921      	ldr	r1, [pc, #132]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	491d      	ldr	r1, [pc, #116]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	4917      	ldr	r1, [pc, #92]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4913      	ldr	r1, [pc, #76]	; (800113c <HAL_GPIO_Init+0x2c0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01f      	beq.n	8001140 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	490d      	ldr	r1, [pc, #52]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	60cb      	str	r3, [r1, #12]
 800110c:	e01f      	b.n	800114e <HAL_GPIO_Init+0x2d2>
 800110e:	bf00      	nop
 8001110:	10320000 	.word	0x10320000
 8001114:	10310000 	.word	0x10310000
 8001118:	10220000 	.word	0x10220000
 800111c:	10210000 	.word	0x10210000
 8001120:	10120000 	.word	0x10120000
 8001124:	10110000 	.word	0x10110000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000
 800113c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	43db      	mvns	r3, r3
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 800114a:	4013      	ands	r3, r2
 800114c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae96 	bne.w	8000e90 <HAL_GPIO_Init+0x14>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	; 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e272      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c4:	4b92      	ldr	r3, [pc, #584]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d00c      	beq.n	80011ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d0:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d112      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
 80011dc:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d10b      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d06c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x12c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d168      	bne.n	80012d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e24c      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x76>
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a7f      	ldr	r2, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e02e      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a77      	ldr	r2, [pc, #476]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0xbc>
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 8001260:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b68      	ldr	r3, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a67      	ldr	r2, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fd0e 	bl	8000ca0 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fd0a 	bl	8000ca0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e200      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xe4>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcfa 	bl	8000ca0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcf6 	bl	8000ca0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1ec      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x10c>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d063      	beq.n	80013a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1c0      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4939      	ldr	r1, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e03a      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fcaf 	bl	8000ca0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fcab 	bl	8000ca0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1a1      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc8e 	bl	8000ca0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc8a 	bl	8000ca0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e180      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d03a      	beq.n	8001428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc6e 	bl	8000ca0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc6a 	bl	8000ca0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e160      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fad8 	bl	800199c <RCC_Delay>
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc54 	bl	8000ca0 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc50 	bl	8000ca0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d908      	bls.n	800141c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e146      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	42420000 	.word	0x42420000
 8001418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e9      	bne.n	80013fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a6 	beq.w	8001582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7e      	ldr	r2, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc11 	bl	8000ca0 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fc0d 	bl	8000ca0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e103      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e02d      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x334>
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6213      	str	r3, [r2, #32]
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	e01c      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x356>
 80014e0:	4b61      	ldr	r3, [pc, #388]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a60      	ldr	r2, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fbc1 	bl	8000ca0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fbbd 	bl	8000ca0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0b1      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ee      	beq.n	8001522 <HAL_RCC_OscConfig+0x37e>
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbab 	bl	8000ca0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fba7 	bl	8000ca0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e09b      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ee      	bne.n	800154e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8087 	beq.w	800169a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d061      	beq.n	800165c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d146      	bne.n	800162e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb7b 	bl	8000ca0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fb77 	bl	8000ca0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e06d      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d108      	bne.n	80015e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4921      	ldr	r1, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a19      	ldr	r1, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	430b      	orrs	r3, r1
 80015fa:	491b      	ldr	r1, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb4b 	bl	8000ca0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb47 	bl	8000ca0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e03d      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x46a>
 800162c:	e035      	b.n	800169a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb34 	bl	8000ca0 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fb30 	bl	8000ca0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e026      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x498>
 800165a:	e01e      	b.n	800169a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e019      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x500>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	429a      	cmp	r2, r3
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d0      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d910      	bls.n	80016ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b67      	ldr	r3, [pc, #412]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4965      	ldr	r1, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800170e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d040      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d115      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e073      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06b      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4936      	ldr	r1, [pc, #216]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fa82 	bl	8000ca0 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fa7e 	bl	8000ca0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e053      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d210      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 0207 	bic.w	r2, r3, #7
 80017de:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4602      	mov	r2, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	490a      	ldr	r1, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	5ccb      	ldrb	r3, [r1, r3]
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1cc>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1d0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f9e0 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000
 800186c:	40021000 	.word	0x40021000
 8001870:	08002c7c 	.word	0x08002c7c
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b490      	push	{r4, r7}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_GetSysClockFreq+0xac>)
 8001884:	1d3c      	adds	r4, r7, #4
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800188c:	f240 2301 	movw	r3, #513	; 0x201
 8001890:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x40>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ba:	e02b      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	e02b      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3328      	adds	r3, #40	; 0x28
 80018cc:	443b      	add	r3, r7
 80018ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0c5b      	lsrs	r3, r3, #17
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	3328      	adds	r3, #40	; 0x28
 80018ea:	443b      	add	r3, r7
 80018ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f6:	fb03 f202 	mul.w	r2, r3, r2
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e004      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	623b      	str	r3, [r7, #32]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6a3b      	ldr	r3, [r7, #32]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc90      	pop	{r4, r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08002c6c 	.word	0x08002c6c
 800192c:	40021000 	.word	0x40021000
 8001930:	007a1200 	.word	0x007a1200
 8001934:	003d0900 	.word	0x003d0900

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_RCC_GetHCLKFreq+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff2 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	08002c8c 	.word	0x08002c8c

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffde 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0adb      	lsrs	r3, r3, #11
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	08002c8c 	.word	0x08002c8c

0800199c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <RCC_Delay+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <RCC_Delay+0x38>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b8:	bf00      	nop
  }
  while (Delay --);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <RCC_Delay+0x1c>
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3

080019d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e076      	b.n	8001ad8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019fa:	d009      	beq.n	8001a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
 8001a02:	e005      	b.n	8001a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ffc0 	bl	80009b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a94:	ea42 0103 	orr.w	r1, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	0c1a      	lsrs	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f002 0204 	and.w	r2, r2, #4
 8001ab6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_SPI_TransmitReceive+0x26>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e18a      	b.n	8001e1c <HAL_SPI_TransmitReceive+0x33c>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b0e:	f7ff f8c7 	bl	8000ca0 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00f      	beq.n	8001b50 <HAL_SPI_TransmitReceive+0x70>
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b36:	d107      	bne.n	8001b48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <HAL_SPI_TransmitReceive+0x68>
 8001b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d003      	beq.n	8001b50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b4e:	e15b      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_SPI_TransmitReceive+0x82>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_SPI_TransmitReceive+0x82>
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b68:	e14e      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d003      	beq.n	8001b7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2205      	movs	r2, #5
 8001b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbe:	2b40      	cmp	r3, #64	; 0x40
 8001bc0:	d007      	beq.n	8001bd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bda:	d178      	bne.n	8001cce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_SPI_TransmitReceive+0x10a>
 8001be4:	8b7b      	ldrh	r3, [r7, #26]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d166      	bne.n	8001cb8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	1c9a      	adds	r2, r3, #2
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c0e:	e053      	b.n	8001cb8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d11b      	bne.n	8001c56 <HAL_SPI_TransmitReceive+0x176>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_SPI_TransmitReceive+0x176>
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d113      	bne.n	8001c56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	1c9a      	adds	r2, r3, #2
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <HAL_SPI_TransmitReceive+0x1b8>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d014      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	1c9a      	adds	r2, r3, #2
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c98:	f7ff f802 	bl	8000ca0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d807      	bhi.n	8001cb8 <HAL_SPI_TransmitReceive+0x1d8>
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d003      	beq.n	8001cb8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cb6:	e0a7      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1a6      	bne.n	8001c10 <HAL_SPI_TransmitReceive+0x130>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1a1      	bne.n	8001c10 <HAL_SPI_TransmitReceive+0x130>
 8001ccc:	e07c      	b.n	8001dc8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x1fc>
 8001cd6:	8b7b      	ldrh	r3, [r7, #26]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d16b      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d02:	e057      	b.n	8001db4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d11c      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x26c>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d017      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x26c>
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d114      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	330c      	adds	r3, #12
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d119      	bne.n	8001d8e <HAL_SPI_TransmitReceive+0x2ae>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d8e:	f7fe ff87 	bl	8000ca0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d803      	bhi.n	8001da6 <HAL_SPI_TransmitReceive+0x2c6>
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d102      	bne.n	8001dac <HAL_SPI_TransmitReceive+0x2cc>
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001db2:	e029      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1a2      	bne.n	8001d04 <HAL_SPI_TransmitReceive+0x224>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d19d      	bne.n	8001d04 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8b1 	bl	8001f34 <SPI_EndRxTxTransaction>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001de4:	e010      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10b      	bne.n	8001e06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	e000      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e34:	f7fe ff34 	bl	8000ca0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e44:	f7fe ff2c 	bl	8000ca0 <HAL_GetTick>
 8001e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	0d1b      	lsrs	r3, r3, #20
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e5a:	e054      	b.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e62:	d050      	beq.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e64:	f7fe ff1c 	bl	8000ca0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d902      	bls.n	8001e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d13d      	bne.n	8001ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e92:	d111      	bne.n	8001eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	d004      	beq.n	8001ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d107      	bne.n	8001eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec0:	d10f      	bne.n	8001ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e017      	b.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	bf0c      	ite	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	2300      	movne	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d19b      	bne.n	8001e5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff6a 	bl	8001e24 <SPI_WaitFlagStateUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e000      	b.n	8001f68 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fd54 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f905 	bl	80021c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	; 0x28
 800200e:	af02      	add	r7, sp, #8
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d17c      	bne.n	8002124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_UART_Transmit+0x2c>
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e075      	b.n	8002126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_UART_Transmit+0x3e>
 8002044:	2302      	movs	r3, #2
 8002046:	e06e      	b.n	8002126 <HAL_UART_Transmit+0x11c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2221      	movs	r2, #33	; 0x21
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800205e:	f7fe fe1f 	bl	8000ca0 <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002078:	d108      	bne.n	800208c <HAL_UART_Transmit+0x82>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e003      	b.n	8002094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800209c:	e02a      	b.n	80020f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f840 	bl	800212e <UART_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e036      	b.n	8002126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	3302      	adds	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e007      	b.n	80020e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3301      	adds	r3, #1
 80020e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1cf      	bne.n	800209e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2200      	movs	r2, #0
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f810 	bl	800212e <UART_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e006      	b.n	8002126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213e:	e02c      	b.n	800219a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d028      	beq.n	800219a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <UART_WaitOnFlagUntilTimeout+0x30>
 800214e:	f7fe fda7 	bl	8000ca0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	429a      	cmp	r2, r3
 800215c:	d21d      	bcs.n	800219a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800216c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e00f      	b.n	80021ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d0c3      	beq.n	8002140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021fe:	f023 030c 	bic.w	r3, r3, #12
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <UART_SetConfig+0x114>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff fba2 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	e002      	b.n	800223a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002234:	f7ff fb8a 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009a      	lsls	r2, r3, #2
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	0119      	lsls	r1, r3, #4
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009a      	lsls	r2, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <UART_SetConfig+0x118>)
 8002272:	fba3 0302 	umull	r0, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2064      	movs	r0, #100	; 0x64
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	3332      	adds	r3, #50	; 0x32
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <UART_SetConfig+0x118>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	4419      	add	r1, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	009a      	lsls	r2, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <UART_SetConfig+0x118>)
 80022aa:	fba3 0302 	umull	r0, r3, r3, r2
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	fb00 f303 	mul.w	r3, r0, r3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	3332      	adds	r3, #50	; 0x32
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <UART_SetConfig+0x118>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	440a      	add	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40013800 	.word	0x40013800
 80022dc:	51eb851f 	.word	0x51eb851f

080022e0 <__errno>:
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <__errno+0x8>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000000c 	.word	0x2000000c

080022ec <__libc_init_array>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	2600      	movs	r6, #0
 80022f0:	4d0c      	ldr	r5, [pc, #48]	; (8002324 <__libc_init_array+0x38>)
 80022f2:	4c0d      	ldr	r4, [pc, #52]	; (8002328 <__libc_init_array+0x3c>)
 80022f4:	1b64      	subs	r4, r4, r5
 80022f6:	10a4      	asrs	r4, r4, #2
 80022f8:	42a6      	cmp	r6, r4
 80022fa:	d109      	bne.n	8002310 <__libc_init_array+0x24>
 80022fc:	f000 fc9c 	bl	8002c38 <_init>
 8002300:	2600      	movs	r6, #0
 8002302:	4d0a      	ldr	r5, [pc, #40]	; (800232c <__libc_init_array+0x40>)
 8002304:	4c0a      	ldr	r4, [pc, #40]	; (8002330 <__libc_init_array+0x44>)
 8002306:	1b64      	subs	r4, r4, r5
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	42a6      	cmp	r6, r4
 800230c:	d105      	bne.n	800231a <__libc_init_array+0x2e>
 800230e:	bd70      	pop	{r4, r5, r6, pc}
 8002310:	f855 3b04 	ldr.w	r3, [r5], #4
 8002314:	4798      	blx	r3
 8002316:	3601      	adds	r6, #1
 8002318:	e7ee      	b.n	80022f8 <__libc_init_array+0xc>
 800231a:	f855 3b04 	ldr.w	r3, [r5], #4
 800231e:	4798      	blx	r3
 8002320:	3601      	adds	r6, #1
 8002322:	e7f2      	b.n	800230a <__libc_init_array+0x1e>
 8002324:	08002cc8 	.word	0x08002cc8
 8002328:	08002cc8 	.word	0x08002cc8
 800232c:	08002cc8 	.word	0x08002cc8
 8002330:	08002ccc 	.word	0x08002ccc

08002334 <memset>:
 8002334:	4603      	mov	r3, r0
 8002336:	4402      	add	r2, r0
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <memset+0xa>
 800233c:	4770      	bx	lr
 800233e:	f803 1b01 	strb.w	r1, [r3], #1
 8002342:	e7f9      	b.n	8002338 <memset+0x4>

08002344 <siprintf>:
 8002344:	b40e      	push	{r1, r2, r3}
 8002346:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800234a:	b500      	push	{lr}
 800234c:	b09c      	sub	sp, #112	; 0x70
 800234e:	ab1d      	add	r3, sp, #116	; 0x74
 8002350:	9002      	str	r0, [sp, #8]
 8002352:	9006      	str	r0, [sp, #24]
 8002354:	9107      	str	r1, [sp, #28]
 8002356:	9104      	str	r1, [sp, #16]
 8002358:	4808      	ldr	r0, [pc, #32]	; (800237c <siprintf+0x38>)
 800235a:	4909      	ldr	r1, [pc, #36]	; (8002380 <siprintf+0x3c>)
 800235c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002360:	9105      	str	r1, [sp, #20]
 8002362:	6800      	ldr	r0, [r0, #0]
 8002364:	a902      	add	r1, sp, #8
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	f000 f868 	bl	800243c <_svfiprintf_r>
 800236c:	2200      	movs	r2, #0
 800236e:	9b02      	ldr	r3, [sp, #8]
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	b01c      	add	sp, #112	; 0x70
 8002374:	f85d eb04 	ldr.w	lr, [sp], #4
 8002378:	b003      	add	sp, #12
 800237a:	4770      	bx	lr
 800237c:	2000000c 	.word	0x2000000c
 8002380:	ffff0208 	.word	0xffff0208

08002384 <__ssputs_r>:
 8002384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002388:	688e      	ldr	r6, [r1, #8]
 800238a:	4682      	mov	sl, r0
 800238c:	429e      	cmp	r6, r3
 800238e:	460c      	mov	r4, r1
 8002390:	4690      	mov	r8, r2
 8002392:	461f      	mov	r7, r3
 8002394:	d838      	bhi.n	8002408 <__ssputs_r+0x84>
 8002396:	898a      	ldrh	r2, [r1, #12]
 8002398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800239c:	d032      	beq.n	8002404 <__ssputs_r+0x80>
 800239e:	6825      	ldr	r5, [r4, #0]
 80023a0:	6909      	ldr	r1, [r1, #16]
 80023a2:	3301      	adds	r3, #1
 80023a4:	eba5 0901 	sub.w	r9, r5, r1
 80023a8:	6965      	ldr	r5, [r4, #20]
 80023aa:	444b      	add	r3, r9
 80023ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023b4:	106d      	asrs	r5, r5, #1
 80023b6:	429d      	cmp	r5, r3
 80023b8:	bf38      	it	cc
 80023ba:	461d      	movcc	r5, r3
 80023bc:	0553      	lsls	r3, r2, #21
 80023be:	d531      	bpl.n	8002424 <__ssputs_r+0xa0>
 80023c0:	4629      	mov	r1, r5
 80023c2:	f000 fb6f 	bl	8002aa4 <_malloc_r>
 80023c6:	4606      	mov	r6, r0
 80023c8:	b950      	cbnz	r0, 80023e0 <__ssputs_r+0x5c>
 80023ca:	230c      	movs	r3, #12
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f8ca 3000 	str.w	r3, [sl]
 80023d4:	89a3      	ldrh	r3, [r4, #12]
 80023d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023da:	81a3      	strh	r3, [r4, #12]
 80023dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e0:	464a      	mov	r2, r9
 80023e2:	6921      	ldr	r1, [r4, #16]
 80023e4:	f000 face 	bl	8002984 <memcpy>
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	6126      	str	r6, [r4, #16]
 80023f6:	444e      	add	r6, r9
 80023f8:	6026      	str	r6, [r4, #0]
 80023fa:	463e      	mov	r6, r7
 80023fc:	6165      	str	r5, [r4, #20]
 80023fe:	eba5 0509 	sub.w	r5, r5, r9
 8002402:	60a5      	str	r5, [r4, #8]
 8002404:	42be      	cmp	r6, r7
 8002406:	d900      	bls.n	800240a <__ssputs_r+0x86>
 8002408:	463e      	mov	r6, r7
 800240a:	4632      	mov	r2, r6
 800240c:	4641      	mov	r1, r8
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	f000 fac6 	bl	80029a0 <memmove>
 8002414:	68a3      	ldr	r3, [r4, #8]
 8002416:	2000      	movs	r0, #0
 8002418:	1b9b      	subs	r3, r3, r6
 800241a:	60a3      	str	r3, [r4, #8]
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	4433      	add	r3, r6
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	e7db      	b.n	80023dc <__ssputs_r+0x58>
 8002424:	462a      	mov	r2, r5
 8002426:	f000 fbb1 	bl	8002b8c <_realloc_r>
 800242a:	4606      	mov	r6, r0
 800242c:	2800      	cmp	r0, #0
 800242e:	d1e1      	bne.n	80023f4 <__ssputs_r+0x70>
 8002430:	4650      	mov	r0, sl
 8002432:	6921      	ldr	r1, [r4, #16]
 8002434:	f000 face 	bl	80029d4 <_free_r>
 8002438:	e7c7      	b.n	80023ca <__ssputs_r+0x46>
	...

0800243c <_svfiprintf_r>:
 800243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002440:	4698      	mov	r8, r3
 8002442:	898b      	ldrh	r3, [r1, #12]
 8002444:	4607      	mov	r7, r0
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	460d      	mov	r5, r1
 800244a:	4614      	mov	r4, r2
 800244c:	b09d      	sub	sp, #116	; 0x74
 800244e:	d50e      	bpl.n	800246e <_svfiprintf_r+0x32>
 8002450:	690b      	ldr	r3, [r1, #16]
 8002452:	b963      	cbnz	r3, 800246e <_svfiprintf_r+0x32>
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	f000 fb25 	bl	8002aa4 <_malloc_r>
 800245a:	6028      	str	r0, [r5, #0]
 800245c:	6128      	str	r0, [r5, #16]
 800245e:	b920      	cbnz	r0, 800246a <_svfiprintf_r+0x2e>
 8002460:	230c      	movs	r3, #12
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	e0d1      	b.n	800260e <_svfiprintf_r+0x1d2>
 800246a:	2340      	movs	r3, #64	; 0x40
 800246c:	616b      	str	r3, [r5, #20]
 800246e:	2300      	movs	r3, #0
 8002470:	9309      	str	r3, [sp, #36]	; 0x24
 8002472:	2320      	movs	r3, #32
 8002474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002478:	2330      	movs	r3, #48	; 0x30
 800247a:	f04f 0901 	mov.w	r9, #1
 800247e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002628 <_svfiprintf_r+0x1ec>
 8002486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800248a:	4623      	mov	r3, r4
 800248c:	469a      	mov	sl, r3
 800248e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002492:	b10a      	cbz	r2, 8002498 <_svfiprintf_r+0x5c>
 8002494:	2a25      	cmp	r2, #37	; 0x25
 8002496:	d1f9      	bne.n	800248c <_svfiprintf_r+0x50>
 8002498:	ebba 0b04 	subs.w	fp, sl, r4
 800249c:	d00b      	beq.n	80024b6 <_svfiprintf_r+0x7a>
 800249e:	465b      	mov	r3, fp
 80024a0:	4622      	mov	r2, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	4638      	mov	r0, r7
 80024a6:	f7ff ff6d 	bl	8002384 <__ssputs_r>
 80024aa:	3001      	adds	r0, #1
 80024ac:	f000 80aa 	beq.w	8002604 <_svfiprintf_r+0x1c8>
 80024b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024b2:	445a      	add	r2, fp
 80024b4:	9209      	str	r2, [sp, #36]	; 0x24
 80024b6:	f89a 3000 	ldrb.w	r3, [sl]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80a2 	beq.w	8002604 <_svfiprintf_r+0x1c8>
 80024c0:	2300      	movs	r3, #0
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295
 80024c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024ca:	f10a 0a01 	add.w	sl, sl, #1
 80024ce:	9304      	str	r3, [sp, #16]
 80024d0:	9307      	str	r3, [sp, #28]
 80024d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024d6:	931a      	str	r3, [sp, #104]	; 0x68
 80024d8:	4654      	mov	r4, sl
 80024da:	2205      	movs	r2, #5
 80024dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e0:	4851      	ldr	r0, [pc, #324]	; (8002628 <_svfiprintf_r+0x1ec>)
 80024e2:	f000 fa41 	bl	8002968 <memchr>
 80024e6:	9a04      	ldr	r2, [sp, #16]
 80024e8:	b9d8      	cbnz	r0, 8002522 <_svfiprintf_r+0xe6>
 80024ea:	06d0      	lsls	r0, r2, #27
 80024ec:	bf44      	itt	mi
 80024ee:	2320      	movmi	r3, #32
 80024f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024f4:	0711      	lsls	r1, r2, #28
 80024f6:	bf44      	itt	mi
 80024f8:	232b      	movmi	r3, #43	; 0x2b
 80024fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002502:	2b2a      	cmp	r3, #42	; 0x2a
 8002504:	d015      	beq.n	8002532 <_svfiprintf_r+0xf6>
 8002506:	4654      	mov	r4, sl
 8002508:	2000      	movs	r0, #0
 800250a:	f04f 0c0a 	mov.w	ip, #10
 800250e:	9a07      	ldr	r2, [sp, #28]
 8002510:	4621      	mov	r1, r4
 8002512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002516:	3b30      	subs	r3, #48	; 0x30
 8002518:	2b09      	cmp	r3, #9
 800251a:	d94e      	bls.n	80025ba <_svfiprintf_r+0x17e>
 800251c:	b1b0      	cbz	r0, 800254c <_svfiprintf_r+0x110>
 800251e:	9207      	str	r2, [sp, #28]
 8002520:	e014      	b.n	800254c <_svfiprintf_r+0x110>
 8002522:	eba0 0308 	sub.w	r3, r0, r8
 8002526:	fa09 f303 	lsl.w	r3, r9, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	46a2      	mov	sl, r4
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	e7d2      	b.n	80024d8 <_svfiprintf_r+0x9c>
 8002532:	9b03      	ldr	r3, [sp, #12]
 8002534:	1d19      	adds	r1, r3, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	9103      	str	r1, [sp, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	bfbb      	ittet	lt
 800253e:	425b      	neglt	r3, r3
 8002540:	f042 0202 	orrlt.w	r2, r2, #2
 8002544:	9307      	strge	r3, [sp, #28]
 8002546:	9307      	strlt	r3, [sp, #28]
 8002548:	bfb8      	it	lt
 800254a:	9204      	strlt	r2, [sp, #16]
 800254c:	7823      	ldrb	r3, [r4, #0]
 800254e:	2b2e      	cmp	r3, #46	; 0x2e
 8002550:	d10c      	bne.n	800256c <_svfiprintf_r+0x130>
 8002552:	7863      	ldrb	r3, [r4, #1]
 8002554:	2b2a      	cmp	r3, #42	; 0x2a
 8002556:	d135      	bne.n	80025c4 <_svfiprintf_r+0x188>
 8002558:	9b03      	ldr	r3, [sp, #12]
 800255a:	3402      	adds	r4, #2
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	9203      	str	r2, [sp, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	bfb8      	it	lt
 8002566:	f04f 33ff 	movlt.w	r3, #4294967295
 800256a:	9305      	str	r3, [sp, #20]
 800256c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800262c <_svfiprintf_r+0x1f0>
 8002570:	2203      	movs	r2, #3
 8002572:	4650      	mov	r0, sl
 8002574:	7821      	ldrb	r1, [r4, #0]
 8002576:	f000 f9f7 	bl	8002968 <memchr>
 800257a:	b140      	cbz	r0, 800258e <_svfiprintf_r+0x152>
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	eba0 000a 	sub.w	r0, r0, sl
 8002582:	fa03 f000 	lsl.w	r0, r3, r0
 8002586:	9b04      	ldr	r3, [sp, #16]
 8002588:	3401      	adds	r4, #1
 800258a:	4303      	orrs	r3, r0
 800258c:	9304      	str	r3, [sp, #16]
 800258e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002592:	2206      	movs	r2, #6
 8002594:	4826      	ldr	r0, [pc, #152]	; (8002630 <_svfiprintf_r+0x1f4>)
 8002596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800259a:	f000 f9e5 	bl	8002968 <memchr>
 800259e:	2800      	cmp	r0, #0
 80025a0:	d038      	beq.n	8002614 <_svfiprintf_r+0x1d8>
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <_svfiprintf_r+0x1f8>)
 80025a4:	bb1b      	cbnz	r3, 80025ee <_svfiprintf_r+0x1b2>
 80025a6:	9b03      	ldr	r3, [sp, #12]
 80025a8:	3307      	adds	r3, #7
 80025aa:	f023 0307 	bic.w	r3, r3, #7
 80025ae:	3308      	adds	r3, #8
 80025b0:	9303      	str	r3, [sp, #12]
 80025b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025b4:	4433      	add	r3, r6
 80025b6:	9309      	str	r3, [sp, #36]	; 0x24
 80025b8:	e767      	b.n	800248a <_svfiprintf_r+0x4e>
 80025ba:	460c      	mov	r4, r1
 80025bc:	2001      	movs	r0, #1
 80025be:	fb0c 3202 	mla	r2, ip, r2, r3
 80025c2:	e7a5      	b.n	8002510 <_svfiprintf_r+0xd4>
 80025c4:	2300      	movs	r3, #0
 80025c6:	f04f 0c0a 	mov.w	ip, #10
 80025ca:	4619      	mov	r1, r3
 80025cc:	3401      	adds	r4, #1
 80025ce:	9305      	str	r3, [sp, #20]
 80025d0:	4620      	mov	r0, r4
 80025d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025d6:	3a30      	subs	r2, #48	; 0x30
 80025d8:	2a09      	cmp	r2, #9
 80025da:	d903      	bls.n	80025e4 <_svfiprintf_r+0x1a8>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0c5      	beq.n	800256c <_svfiprintf_r+0x130>
 80025e0:	9105      	str	r1, [sp, #20]
 80025e2:	e7c3      	b.n	800256c <_svfiprintf_r+0x130>
 80025e4:	4604      	mov	r4, r0
 80025e6:	2301      	movs	r3, #1
 80025e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80025ec:	e7f0      	b.n	80025d0 <_svfiprintf_r+0x194>
 80025ee:	ab03      	add	r3, sp, #12
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	462a      	mov	r2, r5
 80025f4:	4638      	mov	r0, r7
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_svfiprintf_r+0x1fc>)
 80025f8:	a904      	add	r1, sp, #16
 80025fa:	f3af 8000 	nop.w
 80025fe:	1c42      	adds	r2, r0, #1
 8002600:	4606      	mov	r6, r0
 8002602:	d1d6      	bne.n	80025b2 <_svfiprintf_r+0x176>
 8002604:	89ab      	ldrh	r3, [r5, #12]
 8002606:	065b      	lsls	r3, r3, #25
 8002608:	f53f af2c 	bmi.w	8002464 <_svfiprintf_r+0x28>
 800260c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800260e:	b01d      	add	sp, #116	; 0x74
 8002610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002614:	ab03      	add	r3, sp, #12
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	462a      	mov	r2, r5
 800261a:	4638      	mov	r0, r7
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <_svfiprintf_r+0x1fc>)
 800261e:	a904      	add	r1, sp, #16
 8002620:	f000 f87c 	bl	800271c <_printf_i>
 8002624:	e7eb      	b.n	80025fe <_svfiprintf_r+0x1c2>
 8002626:	bf00      	nop
 8002628:	08002c94 	.word	0x08002c94
 800262c:	08002c9a 	.word	0x08002c9a
 8002630:	08002c9e 	.word	0x08002c9e
 8002634:	00000000 	.word	0x00000000
 8002638:	08002385 	.word	0x08002385

0800263c <_printf_common>:
 800263c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002640:	4616      	mov	r6, r2
 8002642:	4699      	mov	r9, r3
 8002644:	688a      	ldr	r2, [r1, #8]
 8002646:	690b      	ldr	r3, [r1, #16]
 8002648:	4607      	mov	r7, r0
 800264a:	4293      	cmp	r3, r2
 800264c:	bfb8      	it	lt
 800264e:	4613      	movlt	r3, r2
 8002650:	6033      	str	r3, [r6, #0]
 8002652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002656:	460c      	mov	r4, r1
 8002658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800265c:	b10a      	cbz	r2, 8002662 <_printf_common+0x26>
 800265e:	3301      	adds	r3, #1
 8002660:	6033      	str	r3, [r6, #0]
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	0699      	lsls	r1, r3, #26
 8002666:	bf42      	ittt	mi
 8002668:	6833      	ldrmi	r3, [r6, #0]
 800266a:	3302      	addmi	r3, #2
 800266c:	6033      	strmi	r3, [r6, #0]
 800266e:	6825      	ldr	r5, [r4, #0]
 8002670:	f015 0506 	ands.w	r5, r5, #6
 8002674:	d106      	bne.n	8002684 <_printf_common+0x48>
 8002676:	f104 0a19 	add.w	sl, r4, #25
 800267a:	68e3      	ldr	r3, [r4, #12]
 800267c:	6832      	ldr	r2, [r6, #0]
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	42ab      	cmp	r3, r5
 8002682:	dc28      	bgt.n	80026d6 <_printf_common+0x9a>
 8002684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002688:	1e13      	subs	r3, r2, #0
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	bf18      	it	ne
 800268e:	2301      	movne	r3, #1
 8002690:	0692      	lsls	r2, r2, #26
 8002692:	d42d      	bmi.n	80026f0 <_printf_common+0xb4>
 8002694:	4649      	mov	r1, r9
 8002696:	4638      	mov	r0, r7
 8002698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800269c:	47c0      	blx	r8
 800269e:	3001      	adds	r0, #1
 80026a0:	d020      	beq.n	80026e4 <_printf_common+0xa8>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	68e5      	ldr	r5, [r4, #12]
 80026a6:	f003 0306 	and.w	r3, r3, #6
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf18      	it	ne
 80026ae:	2500      	movne	r5, #0
 80026b0:	6832      	ldr	r2, [r6, #0]
 80026b2:	f04f 0600 	mov.w	r6, #0
 80026b6:	68a3      	ldr	r3, [r4, #8]
 80026b8:	bf08      	it	eq
 80026ba:	1aad      	subeq	r5, r5, r2
 80026bc:	6922      	ldr	r2, [r4, #16]
 80026be:	bf08      	it	eq
 80026c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bfc4      	itt	gt
 80026c8:	1a9b      	subgt	r3, r3, r2
 80026ca:	18ed      	addgt	r5, r5, r3
 80026cc:	341a      	adds	r4, #26
 80026ce:	42b5      	cmp	r5, r6
 80026d0:	d11a      	bne.n	8002708 <_printf_common+0xcc>
 80026d2:	2000      	movs	r0, #0
 80026d4:	e008      	b.n	80026e8 <_printf_common+0xac>
 80026d6:	2301      	movs	r3, #1
 80026d8:	4652      	mov	r2, sl
 80026da:	4649      	mov	r1, r9
 80026dc:	4638      	mov	r0, r7
 80026de:	47c0      	blx	r8
 80026e0:	3001      	adds	r0, #1
 80026e2:	d103      	bne.n	80026ec <_printf_common+0xb0>
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ec:	3501      	adds	r5, #1
 80026ee:	e7c4      	b.n	800267a <_printf_common+0x3e>
 80026f0:	2030      	movs	r0, #48	; 0x30
 80026f2:	18e1      	adds	r1, r4, r3
 80026f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026fe:	4422      	add	r2, r4
 8002700:	3302      	adds	r3, #2
 8002702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002706:	e7c5      	b.n	8002694 <_printf_common+0x58>
 8002708:	2301      	movs	r3, #1
 800270a:	4622      	mov	r2, r4
 800270c:	4649      	mov	r1, r9
 800270e:	4638      	mov	r0, r7
 8002710:	47c0      	blx	r8
 8002712:	3001      	adds	r0, #1
 8002714:	d0e6      	beq.n	80026e4 <_printf_common+0xa8>
 8002716:	3601      	adds	r6, #1
 8002718:	e7d9      	b.n	80026ce <_printf_common+0x92>
	...

0800271c <_printf_i>:
 800271c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	7e0f      	ldrb	r7, [r1, #24]
 8002722:	4691      	mov	r9, r2
 8002724:	2f78      	cmp	r7, #120	; 0x78
 8002726:	4680      	mov	r8, r0
 8002728:	460c      	mov	r4, r1
 800272a:	469a      	mov	sl, r3
 800272c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800272e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002732:	d807      	bhi.n	8002744 <_printf_i+0x28>
 8002734:	2f62      	cmp	r7, #98	; 0x62
 8002736:	d80a      	bhi.n	800274e <_printf_i+0x32>
 8002738:	2f00      	cmp	r7, #0
 800273a:	f000 80d9 	beq.w	80028f0 <_printf_i+0x1d4>
 800273e:	2f58      	cmp	r7, #88	; 0x58
 8002740:	f000 80a4 	beq.w	800288c <_printf_i+0x170>
 8002744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800274c:	e03a      	b.n	80027c4 <_printf_i+0xa8>
 800274e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002752:	2b15      	cmp	r3, #21
 8002754:	d8f6      	bhi.n	8002744 <_printf_i+0x28>
 8002756:	a101      	add	r1, pc, #4	; (adr r1, 800275c <_printf_i+0x40>)
 8002758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800275c:	080027b5 	.word	0x080027b5
 8002760:	080027c9 	.word	0x080027c9
 8002764:	08002745 	.word	0x08002745
 8002768:	08002745 	.word	0x08002745
 800276c:	08002745 	.word	0x08002745
 8002770:	08002745 	.word	0x08002745
 8002774:	080027c9 	.word	0x080027c9
 8002778:	08002745 	.word	0x08002745
 800277c:	08002745 	.word	0x08002745
 8002780:	08002745 	.word	0x08002745
 8002784:	08002745 	.word	0x08002745
 8002788:	080028d7 	.word	0x080028d7
 800278c:	080027f9 	.word	0x080027f9
 8002790:	080028b9 	.word	0x080028b9
 8002794:	08002745 	.word	0x08002745
 8002798:	08002745 	.word	0x08002745
 800279c:	080028f9 	.word	0x080028f9
 80027a0:	08002745 	.word	0x08002745
 80027a4:	080027f9 	.word	0x080027f9
 80027a8:	08002745 	.word	0x08002745
 80027ac:	08002745 	.word	0x08002745
 80027b0:	080028c1 	.word	0x080028c1
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	1d1a      	adds	r2, r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	602a      	str	r2, [r5, #0]
 80027bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0a4      	b.n	8002912 <_printf_i+0x1f6>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	6829      	ldr	r1, [r5, #0]
 80027cc:	0606      	lsls	r6, r0, #24
 80027ce:	f101 0304 	add.w	r3, r1, #4
 80027d2:	d50a      	bpl.n	80027ea <_printf_i+0xce>
 80027d4:	680e      	ldr	r6, [r1, #0]
 80027d6:	602b      	str	r3, [r5, #0]
 80027d8:	2e00      	cmp	r6, #0
 80027da:	da03      	bge.n	80027e4 <_printf_i+0xc8>
 80027dc:	232d      	movs	r3, #45	; 0x2d
 80027de:	4276      	negs	r6, r6
 80027e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027e4:	230a      	movs	r3, #10
 80027e6:	485e      	ldr	r0, [pc, #376]	; (8002960 <_printf_i+0x244>)
 80027e8:	e019      	b.n	800281e <_printf_i+0x102>
 80027ea:	680e      	ldr	r6, [r1, #0]
 80027ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027f0:	602b      	str	r3, [r5, #0]
 80027f2:	bf18      	it	ne
 80027f4:	b236      	sxthne	r6, r6
 80027f6:	e7ef      	b.n	80027d8 <_printf_i+0xbc>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	1d19      	adds	r1, r3, #4
 80027fe:	6029      	str	r1, [r5, #0]
 8002800:	0601      	lsls	r1, r0, #24
 8002802:	d501      	bpl.n	8002808 <_printf_i+0xec>
 8002804:	681e      	ldr	r6, [r3, #0]
 8002806:	e002      	b.n	800280e <_printf_i+0xf2>
 8002808:	0646      	lsls	r6, r0, #25
 800280a:	d5fb      	bpl.n	8002804 <_printf_i+0xe8>
 800280c:	881e      	ldrh	r6, [r3, #0]
 800280e:	2f6f      	cmp	r7, #111	; 0x6f
 8002810:	bf0c      	ite	eq
 8002812:	2308      	moveq	r3, #8
 8002814:	230a      	movne	r3, #10
 8002816:	4852      	ldr	r0, [pc, #328]	; (8002960 <_printf_i+0x244>)
 8002818:	2100      	movs	r1, #0
 800281a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800281e:	6865      	ldr	r5, [r4, #4]
 8002820:	2d00      	cmp	r5, #0
 8002822:	bfa8      	it	ge
 8002824:	6821      	ldrge	r1, [r4, #0]
 8002826:	60a5      	str	r5, [r4, #8]
 8002828:	bfa4      	itt	ge
 800282a:	f021 0104 	bicge.w	r1, r1, #4
 800282e:	6021      	strge	r1, [r4, #0]
 8002830:	b90e      	cbnz	r6, 8002836 <_printf_i+0x11a>
 8002832:	2d00      	cmp	r5, #0
 8002834:	d04d      	beq.n	80028d2 <_printf_i+0x1b6>
 8002836:	4615      	mov	r5, r2
 8002838:	fbb6 f1f3 	udiv	r1, r6, r3
 800283c:	fb03 6711 	mls	r7, r3, r1, r6
 8002840:	5dc7      	ldrb	r7, [r0, r7]
 8002842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002846:	4637      	mov	r7, r6
 8002848:	42bb      	cmp	r3, r7
 800284a:	460e      	mov	r6, r1
 800284c:	d9f4      	bls.n	8002838 <_printf_i+0x11c>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d10b      	bne.n	800286a <_printf_i+0x14e>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	07de      	lsls	r6, r3, #31
 8002856:	d508      	bpl.n	800286a <_printf_i+0x14e>
 8002858:	6923      	ldr	r3, [r4, #16]
 800285a:	6861      	ldr	r1, [r4, #4]
 800285c:	4299      	cmp	r1, r3
 800285e:	bfde      	ittt	le
 8002860:	2330      	movle	r3, #48	; 0x30
 8002862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800286a:	1b52      	subs	r2, r2, r5
 800286c:	6122      	str	r2, [r4, #16]
 800286e:	464b      	mov	r3, r9
 8002870:	4621      	mov	r1, r4
 8002872:	4640      	mov	r0, r8
 8002874:	f8cd a000 	str.w	sl, [sp]
 8002878:	aa03      	add	r2, sp, #12
 800287a:	f7ff fedf 	bl	800263c <_printf_common>
 800287e:	3001      	adds	r0, #1
 8002880:	d14c      	bne.n	800291c <_printf_i+0x200>
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	b004      	add	sp, #16
 8002888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800288c:	4834      	ldr	r0, [pc, #208]	; (8002960 <_printf_i+0x244>)
 800288e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002892:	6829      	ldr	r1, [r5, #0]
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	f851 6b04 	ldr.w	r6, [r1], #4
 800289a:	6029      	str	r1, [r5, #0]
 800289c:	061d      	lsls	r5, r3, #24
 800289e:	d514      	bpl.n	80028ca <_printf_i+0x1ae>
 80028a0:	07df      	lsls	r7, r3, #31
 80028a2:	bf44      	itt	mi
 80028a4:	f043 0320 	orrmi.w	r3, r3, #32
 80028a8:	6023      	strmi	r3, [r4, #0]
 80028aa:	b91e      	cbnz	r6, 80028b4 <_printf_i+0x198>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	f023 0320 	bic.w	r3, r3, #32
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	2310      	movs	r3, #16
 80028b6:	e7af      	b.n	8002818 <_printf_i+0xfc>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	2378      	movs	r3, #120	; 0x78
 80028c2:	4828      	ldr	r0, [pc, #160]	; (8002964 <_printf_i+0x248>)
 80028c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028c8:	e7e3      	b.n	8002892 <_printf_i+0x176>
 80028ca:	0659      	lsls	r1, r3, #25
 80028cc:	bf48      	it	mi
 80028ce:	b2b6      	uxthmi	r6, r6
 80028d0:	e7e6      	b.n	80028a0 <_printf_i+0x184>
 80028d2:	4615      	mov	r5, r2
 80028d4:	e7bb      	b.n	800284e <_printf_i+0x132>
 80028d6:	682b      	ldr	r3, [r5, #0]
 80028d8:	6826      	ldr	r6, [r4, #0]
 80028da:	1d18      	adds	r0, r3, #4
 80028dc:	6961      	ldr	r1, [r4, #20]
 80028de:	6028      	str	r0, [r5, #0]
 80028e0:	0635      	lsls	r5, r6, #24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	d501      	bpl.n	80028ea <_printf_i+0x1ce>
 80028e6:	6019      	str	r1, [r3, #0]
 80028e8:	e002      	b.n	80028f0 <_printf_i+0x1d4>
 80028ea:	0670      	lsls	r0, r6, #25
 80028ec:	d5fb      	bpl.n	80028e6 <_printf_i+0x1ca>
 80028ee:	8019      	strh	r1, [r3, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	4615      	mov	r5, r2
 80028f4:	6123      	str	r3, [r4, #16]
 80028f6:	e7ba      	b.n	800286e <_printf_i+0x152>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	2100      	movs	r1, #0
 80028fc:	1d1a      	adds	r2, r3, #4
 80028fe:	602a      	str	r2, [r5, #0]
 8002900:	681d      	ldr	r5, [r3, #0]
 8002902:	6862      	ldr	r2, [r4, #4]
 8002904:	4628      	mov	r0, r5
 8002906:	f000 f82f 	bl	8002968 <memchr>
 800290a:	b108      	cbz	r0, 8002910 <_printf_i+0x1f4>
 800290c:	1b40      	subs	r0, r0, r5
 800290e:	6060      	str	r0, [r4, #4]
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	6123      	str	r3, [r4, #16]
 8002914:	2300      	movs	r3, #0
 8002916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800291a:	e7a8      	b.n	800286e <_printf_i+0x152>
 800291c:	462a      	mov	r2, r5
 800291e:	4649      	mov	r1, r9
 8002920:	4640      	mov	r0, r8
 8002922:	6923      	ldr	r3, [r4, #16]
 8002924:	47d0      	blx	sl
 8002926:	3001      	adds	r0, #1
 8002928:	d0ab      	beq.n	8002882 <_printf_i+0x166>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	079b      	lsls	r3, r3, #30
 800292e:	d413      	bmi.n	8002958 <_printf_i+0x23c>
 8002930:	68e0      	ldr	r0, [r4, #12]
 8002932:	9b03      	ldr	r3, [sp, #12]
 8002934:	4298      	cmp	r0, r3
 8002936:	bfb8      	it	lt
 8002938:	4618      	movlt	r0, r3
 800293a:	e7a4      	b.n	8002886 <_printf_i+0x16a>
 800293c:	2301      	movs	r3, #1
 800293e:	4632      	mov	r2, r6
 8002940:	4649      	mov	r1, r9
 8002942:	4640      	mov	r0, r8
 8002944:	47d0      	blx	sl
 8002946:	3001      	adds	r0, #1
 8002948:	d09b      	beq.n	8002882 <_printf_i+0x166>
 800294a:	3501      	adds	r5, #1
 800294c:	68e3      	ldr	r3, [r4, #12]
 800294e:	9903      	ldr	r1, [sp, #12]
 8002950:	1a5b      	subs	r3, r3, r1
 8002952:	42ab      	cmp	r3, r5
 8002954:	dcf2      	bgt.n	800293c <_printf_i+0x220>
 8002956:	e7eb      	b.n	8002930 <_printf_i+0x214>
 8002958:	2500      	movs	r5, #0
 800295a:	f104 0619 	add.w	r6, r4, #25
 800295e:	e7f5      	b.n	800294c <_printf_i+0x230>
 8002960:	08002ca5 	.word	0x08002ca5
 8002964:	08002cb6 	.word	0x08002cb6

08002968 <memchr>:
 8002968:	4603      	mov	r3, r0
 800296a:	b510      	push	{r4, lr}
 800296c:	b2c9      	uxtb	r1, r1
 800296e:	4402      	add	r2, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	4618      	mov	r0, r3
 8002974:	d101      	bne.n	800297a <memchr+0x12>
 8002976:	2000      	movs	r0, #0
 8002978:	e003      	b.n	8002982 <memchr+0x1a>
 800297a:	7804      	ldrb	r4, [r0, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	428c      	cmp	r4, r1
 8002980:	d1f6      	bne.n	8002970 <memchr+0x8>
 8002982:	bd10      	pop	{r4, pc}

08002984 <memcpy>:
 8002984:	440a      	add	r2, r1
 8002986:	4291      	cmp	r1, r2
 8002988:	f100 33ff 	add.w	r3, r0, #4294967295
 800298c:	d100      	bne.n	8002990 <memcpy+0xc>
 800298e:	4770      	bx	lr
 8002990:	b510      	push	{r4, lr}
 8002992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002996:	4291      	cmp	r1, r2
 8002998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800299c:	d1f9      	bne.n	8002992 <memcpy+0xe>
 800299e:	bd10      	pop	{r4, pc}

080029a0 <memmove>:
 80029a0:	4288      	cmp	r0, r1
 80029a2:	b510      	push	{r4, lr}
 80029a4:	eb01 0402 	add.w	r4, r1, r2
 80029a8:	d902      	bls.n	80029b0 <memmove+0x10>
 80029aa:	4284      	cmp	r4, r0
 80029ac:	4623      	mov	r3, r4
 80029ae:	d807      	bhi.n	80029c0 <memmove+0x20>
 80029b0:	1e43      	subs	r3, r0, #1
 80029b2:	42a1      	cmp	r1, r4
 80029b4:	d008      	beq.n	80029c8 <memmove+0x28>
 80029b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029be:	e7f8      	b.n	80029b2 <memmove+0x12>
 80029c0:	4601      	mov	r1, r0
 80029c2:	4402      	add	r2, r0
 80029c4:	428a      	cmp	r2, r1
 80029c6:	d100      	bne.n	80029ca <memmove+0x2a>
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029d2:	e7f7      	b.n	80029c4 <memmove+0x24>

080029d4 <_free_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4605      	mov	r5, r0
 80029d8:	2900      	cmp	r1, #0
 80029da:	d040      	beq.n	8002a5e <_free_r+0x8a>
 80029dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e0:	1f0c      	subs	r4, r1, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bfb8      	it	lt
 80029e6:	18e4      	addlt	r4, r4, r3
 80029e8:	f000 f910 	bl	8002c0c <__malloc_lock>
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <_free_r+0x8c>)
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	b933      	cbnz	r3, 8002a00 <_free_r+0x2c>
 80029f2:	6063      	str	r3, [r4, #4]
 80029f4:	6014      	str	r4, [r2, #0]
 80029f6:	4628      	mov	r0, r5
 80029f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029fc:	f000 b90c 	b.w	8002c18 <__malloc_unlock>
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d908      	bls.n	8002a16 <_free_r+0x42>
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	1821      	adds	r1, r4, r0
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf01      	itttt	eq
 8002a0c:	6819      	ldreq	r1, [r3, #0]
 8002a0e:	685b      	ldreq	r3, [r3, #4]
 8002a10:	1809      	addeq	r1, r1, r0
 8002a12:	6021      	streq	r1, [r4, #0]
 8002a14:	e7ed      	b.n	80029f2 <_free_r+0x1e>
 8002a16:	461a      	mov	r2, r3
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b10b      	cbz	r3, 8002a20 <_free_r+0x4c>
 8002a1c:	42a3      	cmp	r3, r4
 8002a1e:	d9fa      	bls.n	8002a16 <_free_r+0x42>
 8002a20:	6811      	ldr	r1, [r2, #0]
 8002a22:	1850      	adds	r0, r2, r1
 8002a24:	42a0      	cmp	r0, r4
 8002a26:	d10b      	bne.n	8002a40 <_free_r+0x6c>
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	4401      	add	r1, r0
 8002a2c:	1850      	adds	r0, r2, r1
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	6011      	str	r1, [r2, #0]
 8002a32:	d1e0      	bne.n	80029f6 <_free_r+0x22>
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4401      	add	r1, r0
 8002a3a:	6011      	str	r1, [r2, #0]
 8002a3c:	6053      	str	r3, [r2, #4]
 8002a3e:	e7da      	b.n	80029f6 <_free_r+0x22>
 8002a40:	d902      	bls.n	8002a48 <_free_r+0x74>
 8002a42:	230c      	movs	r3, #12
 8002a44:	602b      	str	r3, [r5, #0]
 8002a46:	e7d6      	b.n	80029f6 <_free_r+0x22>
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	1821      	adds	r1, r4, r0
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	bf01      	itttt	eq
 8002a50:	6819      	ldreq	r1, [r3, #0]
 8002a52:	685b      	ldreq	r3, [r3, #4]
 8002a54:	1809      	addeq	r1, r1, r0
 8002a56:	6021      	streq	r1, [r4, #0]
 8002a58:	6063      	str	r3, [r4, #4]
 8002a5a:	6054      	str	r4, [r2, #4]
 8002a5c:	e7cb      	b.n	80029f6 <_free_r+0x22>
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	200001a0 	.word	0x200001a0

08002a64 <sbrk_aligned>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4e0e      	ldr	r6, [pc, #56]	; (8002aa0 <sbrk_aligned+0x3c>)
 8002a68:	460c      	mov	r4, r1
 8002a6a:	6831      	ldr	r1, [r6, #0]
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	b911      	cbnz	r1, 8002a76 <sbrk_aligned+0x12>
 8002a70:	f000 f8bc 	bl	8002bec <_sbrk_r>
 8002a74:	6030      	str	r0, [r6, #0]
 8002a76:	4621      	mov	r1, r4
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f000 f8b7 	bl	8002bec <_sbrk_r>
 8002a7e:	1c43      	adds	r3, r0, #1
 8002a80:	d00a      	beq.n	8002a98 <sbrk_aligned+0x34>
 8002a82:	1cc4      	adds	r4, r0, #3
 8002a84:	f024 0403 	bic.w	r4, r4, #3
 8002a88:	42a0      	cmp	r0, r4
 8002a8a:	d007      	beq.n	8002a9c <sbrk_aligned+0x38>
 8002a8c:	1a21      	subs	r1, r4, r0
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f8ac 	bl	8002bec <_sbrk_r>
 8002a94:	3001      	adds	r0, #1
 8002a96:	d101      	bne.n	8002a9c <sbrk_aligned+0x38>
 8002a98:	f04f 34ff 	mov.w	r4, #4294967295
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	200001a4 	.word	0x200001a4

08002aa4 <_malloc_r>:
 8002aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa8:	1ccd      	adds	r5, r1, #3
 8002aaa:	f025 0503 	bic.w	r5, r5, #3
 8002aae:	3508      	adds	r5, #8
 8002ab0:	2d0c      	cmp	r5, #12
 8002ab2:	bf38      	it	cc
 8002ab4:	250c      	movcc	r5, #12
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	4607      	mov	r7, r0
 8002aba:	db01      	blt.n	8002ac0 <_malloc_r+0x1c>
 8002abc:	42a9      	cmp	r1, r5
 8002abe:	d905      	bls.n	8002acc <_malloc_r+0x28>
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002acc:	4e2e      	ldr	r6, [pc, #184]	; (8002b88 <_malloc_r+0xe4>)
 8002ace:	f000 f89d 	bl	8002c0c <__malloc_lock>
 8002ad2:	6833      	ldr	r3, [r6, #0]
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	bb34      	cbnz	r4, 8002b26 <_malloc_r+0x82>
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7ff ffc2 	bl	8002a64 <sbrk_aligned>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	d14d      	bne.n	8002b82 <_malloc_r+0xde>
 8002ae6:	6834      	ldr	r4, [r6, #0]
 8002ae8:	4626      	mov	r6, r4
 8002aea:	2e00      	cmp	r6, #0
 8002aec:	d140      	bne.n	8002b70 <_malloc_r+0xcc>
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	4631      	mov	r1, r6
 8002af2:	4638      	mov	r0, r7
 8002af4:	eb04 0803 	add.w	r8, r4, r3
 8002af8:	f000 f878 	bl	8002bec <_sbrk_r>
 8002afc:	4580      	cmp	r8, r0
 8002afe:	d13a      	bne.n	8002b76 <_malloc_r+0xd2>
 8002b00:	6821      	ldr	r1, [r4, #0]
 8002b02:	3503      	adds	r5, #3
 8002b04:	1a6d      	subs	r5, r5, r1
 8002b06:	f025 0503 	bic.w	r5, r5, #3
 8002b0a:	3508      	adds	r5, #8
 8002b0c:	2d0c      	cmp	r5, #12
 8002b0e:	bf38      	it	cc
 8002b10:	250c      	movcc	r5, #12
 8002b12:	4638      	mov	r0, r7
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7ff ffa5 	bl	8002a64 <sbrk_aligned>
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d02b      	beq.n	8002b76 <_malloc_r+0xd2>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	442b      	add	r3, r5
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	e00e      	b.n	8002b44 <_malloc_r+0xa0>
 8002b26:	6822      	ldr	r2, [r4, #0]
 8002b28:	1b52      	subs	r2, r2, r5
 8002b2a:	d41e      	bmi.n	8002b6a <_malloc_r+0xc6>
 8002b2c:	2a0b      	cmp	r2, #11
 8002b2e:	d916      	bls.n	8002b5e <_malloc_r+0xba>
 8002b30:	1961      	adds	r1, r4, r5
 8002b32:	42a3      	cmp	r3, r4
 8002b34:	6025      	str	r5, [r4, #0]
 8002b36:	bf18      	it	ne
 8002b38:	6059      	strne	r1, [r3, #4]
 8002b3a:	6863      	ldr	r3, [r4, #4]
 8002b3c:	bf08      	it	eq
 8002b3e:	6031      	streq	r1, [r6, #0]
 8002b40:	5162      	str	r2, [r4, r5]
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	4638      	mov	r0, r7
 8002b46:	f104 060b 	add.w	r6, r4, #11
 8002b4a:	f000 f865 	bl	8002c18 <__malloc_unlock>
 8002b4e:	f026 0607 	bic.w	r6, r6, #7
 8002b52:	1d23      	adds	r3, r4, #4
 8002b54:	1af2      	subs	r2, r6, r3
 8002b56:	d0b6      	beq.n	8002ac6 <_malloc_r+0x22>
 8002b58:	1b9b      	subs	r3, r3, r6
 8002b5a:	50a3      	str	r3, [r4, r2]
 8002b5c:	e7b3      	b.n	8002ac6 <_malloc_r+0x22>
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	bf0c      	ite	eq
 8002b64:	6032      	streq	r2, [r6, #0]
 8002b66:	605a      	strne	r2, [r3, #4]
 8002b68:	e7ec      	b.n	8002b44 <_malloc_r+0xa0>
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	6864      	ldr	r4, [r4, #4]
 8002b6e:	e7b2      	b.n	8002ad6 <_malloc_r+0x32>
 8002b70:	4634      	mov	r4, r6
 8002b72:	6876      	ldr	r6, [r6, #4]
 8002b74:	e7b9      	b.n	8002aea <_malloc_r+0x46>
 8002b76:	230c      	movs	r3, #12
 8002b78:	4638      	mov	r0, r7
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	f000 f84c 	bl	8002c18 <__malloc_unlock>
 8002b80:	e7a1      	b.n	8002ac6 <_malloc_r+0x22>
 8002b82:	6025      	str	r5, [r4, #0]
 8002b84:	e7de      	b.n	8002b44 <_malloc_r+0xa0>
 8002b86:	bf00      	nop
 8002b88:	200001a0 	.word	0x200001a0

08002b8c <_realloc_r>:
 8002b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b90:	4680      	mov	r8, r0
 8002b92:	4614      	mov	r4, r2
 8002b94:	460e      	mov	r6, r1
 8002b96:	b921      	cbnz	r1, 8002ba2 <_realloc_r+0x16>
 8002b98:	4611      	mov	r1, r2
 8002b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9e:	f7ff bf81 	b.w	8002aa4 <_malloc_r>
 8002ba2:	b92a      	cbnz	r2, 8002bb0 <_realloc_r+0x24>
 8002ba4:	f7ff ff16 	bl	80029d4 <_free_r>
 8002ba8:	4625      	mov	r5, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb0:	f000 f838 	bl	8002c24 <_malloc_usable_size_r>
 8002bb4:	4284      	cmp	r4, r0
 8002bb6:	4607      	mov	r7, r0
 8002bb8:	d802      	bhi.n	8002bc0 <_realloc_r+0x34>
 8002bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bbe:	d812      	bhi.n	8002be6 <_realloc_r+0x5a>
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	f7ff ff6e 	bl	8002aa4 <_malloc_r>
 8002bc8:	4605      	mov	r5, r0
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d0ed      	beq.n	8002baa <_realloc_r+0x1e>
 8002bce:	42bc      	cmp	r4, r7
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	4631      	mov	r1, r6
 8002bd4:	bf28      	it	cs
 8002bd6:	463a      	movcs	r2, r7
 8002bd8:	f7ff fed4 	bl	8002984 <memcpy>
 8002bdc:	4631      	mov	r1, r6
 8002bde:	4640      	mov	r0, r8
 8002be0:	f7ff fef8 	bl	80029d4 <_free_r>
 8002be4:	e7e1      	b.n	8002baa <_realloc_r+0x1e>
 8002be6:	4635      	mov	r5, r6
 8002be8:	e7df      	b.n	8002baa <_realloc_r+0x1e>
	...

08002bec <_sbrk_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	2300      	movs	r3, #0
 8002bf0:	4d05      	ldr	r5, [pc, #20]	; (8002c08 <_sbrk_r+0x1c>)
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	602b      	str	r3, [r5, #0]
 8002bf8:	f7fd ff98 	bl	8000b2c <_sbrk>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	d102      	bne.n	8002c06 <_sbrk_r+0x1a>
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	b103      	cbz	r3, 8002c06 <_sbrk_r+0x1a>
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	200001a8 	.word	0x200001a8

08002c0c <__malloc_lock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__malloc_lock+0x8>)
 8002c0e:	f000 b811 	b.w	8002c34 <__retarget_lock_acquire_recursive>
 8002c12:	bf00      	nop
 8002c14:	200001ac 	.word	0x200001ac

08002c18 <__malloc_unlock>:
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <__malloc_unlock+0x8>)
 8002c1a:	f000 b80c 	b.w	8002c36 <__retarget_lock_release_recursive>
 8002c1e:	bf00      	nop
 8002c20:	200001ac 	.word	0x200001ac

08002c24 <_malloc_usable_size_r>:
 8002c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c28:	1f18      	subs	r0, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bfbc      	itt	lt
 8002c2e:	580b      	ldrlt	r3, [r1, r0]
 8002c30:	18c0      	addlt	r0, r0, r3
 8002c32:	4770      	bx	lr

08002c34 <__retarget_lock_acquire_recursive>:
 8002c34:	4770      	bx	lr

08002c36 <__retarget_lock_release_recursive>:
 8002c36:	4770      	bx	lr

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
