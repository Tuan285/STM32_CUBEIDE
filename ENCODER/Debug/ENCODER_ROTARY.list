
ENCODER_ROTARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800283c  0800283c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800283c  0800283c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800283c  0800283c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  080028b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080028b4  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a031  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000179c  00000000  00000000  0002a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d08  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085c9  00000000  00000000  00043ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088165  00000000  00000000  0004c171  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d42d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ec  00000000  00000000  000d4354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b0 	.word	0x080027b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080027b0 	.word	0x080027b0

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t message_rec[50] = { '\0' };
 8000152:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000156:	2232      	movs	r2, #50	; 0x32
 8000158:	2100      	movs	r1, #0
 800015a:	4618      	mov	r0, r3
 800015c:	f001 ff0e 	bl	8001f7c <memset>
	uint8_t message_send[50] = { '\0' };
 8000160:	463b      	mov	r3, r7
 8000162:	2232      	movs	r2, #50	; 0x32
 8000164:	2100      	movs	r1, #0
 8000166:	4618      	mov	r0, r3
 8000168:	f001 ff08 	bl	8001f7c <memset>
	uint8_t value = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000172:	f000 faa7 	bl	80006c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000176:	f000 f83b 	bl	80001f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800017a:	f000 f8fd 	bl	8000378 <MX_GPIO_Init>
	MX_TIM2_Init();
 800017e:	f000 f87d 	bl	800027c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000182:	f000 f8cf 	bl	8000324 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000186:	213c      	movs	r1, #60	; 0x3c
 8000188:	4816      	ldr	r0, [pc, #88]	; (80001e4 <main+0x98>)
 800018a:	f001 fa5d 	bl	8001648 <HAL_TIM_Encoder_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		value = (TIM2->CNT) >> 4;
		value = __HAL_TIM_GetCounter(&htim2) >> 2;
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0x98>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (value > 10) {
 800019a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800019e:	2b0a      	cmp	r3, #10
 80001a0:	d903      	bls.n	80001aa <main+0x5e>
			//TIM2->CNT = 10;
			__HAL_TIM_SetCounter(&htim2, 0);
 80001a2:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <main+0x98>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2200      	movs	r2, #0
 80001a8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (value > 250 && value < 255) {
 80001aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001ae:	2bfa      	cmp	r3, #250	; 0xfa
 80001b0:	d907      	bls.n	80001c2 <main+0x76>
 80001b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001b6:	2bff      	cmp	r3, #255	; 0xff
 80001b8:	d003      	beq.n	80001c2 <main+0x76>
			__HAL_TIM_SetCounter(&htim2, 10);
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <main+0x98>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	220a      	movs	r2, #10
 80001c0:	625a      	str	r2, [r3, #36]	; 0x24
			//TIM2->CNT = 0;
		}
		sprintf(message_send, "xin chao x =%d\r\n", value);
 80001c2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80001c6:	463b      	mov	r3, r7
 80001c8:	4907      	ldr	r1, [pc, #28]	; (80001e8 <main+0x9c>)
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fede 	bl	8001f8c <siprintf>
		HAL_UART_Transmit(&huart1, message_send, sizeof(message_send), 200);
 80001d0:	4639      	mov	r1, r7
 80001d2:	23c8      	movs	r3, #200	; 0xc8
 80001d4:	2232      	movs	r2, #50	; 0x32
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <main+0xa0>)
 80001d8:	f001 fd3b 	bl	8001c52 <HAL_UART_Transmit>
		HAL_Delay(100);
 80001dc:	2064      	movs	r0, #100	; 0x64
 80001de:	f000 fad3 	bl	8000788 <HAL_Delay>
	while (1) {
 80001e2:	e7d4      	b.n	800018e <main+0x42>
 80001e4:	200000dc 	.word	0x200000dc
 80001e8:	080027c8 	.word	0x080027c8
 80001ec:	20000098 	.word	0x20000098

080001f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 febc 	bl	8001f7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fd47 	bl	8000ccc <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
		Error_Handler();
 8000244:	f000 f8e4 	bl	8000410 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f000 ffb2 	bl	80011cc <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
		Error_Handler();
 800026e:	f000 f8cf 	bl	8000410 <Error_Handler>
	}
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b08c      	sub	sp, #48	; 0x30
 8000280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000282:	f107 030c 	add.w	r3, r7, #12
 8000286:	2224      	movs	r2, #36	; 0x24
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe76 	bl	8001f7c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <MX_TIM2_Init+0xa4>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002b2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002ba:	4b19      	ldr	r3, [pc, #100]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002c0:	2303      	movs	r3, #3
 80002c2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002c8:	2301      	movs	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80002d0:	230a      	movs	r3, #10
 80002d2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002d8:	2301      	movs	r3, #1
 80002da:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80002e0:	230a      	movs	r3, #10
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4619      	mov	r1, r3
 80002ea:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002ec:	f001 f90a 	bl	8001504 <HAL_TIM_Encoder_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM2_Init+0x7e>
		Error_Handler();
 80002f6:	f000 f88b 	bl	8000410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <MX_TIM2_Init+0xa4>)
 8000308:	f001 fbe6 	bl	8001ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8000312:	f000 f87d 	bl	8000410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3730      	adds	r7, #48	; 0x30
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000dc 	.word	0x200000dc

08000324 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <MX_USART1_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000334:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800035c:	f001 fc2c 	bl	8001bb8 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000366:	f000 f853 	bl	8000410 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000098 	.word	0x20000098
 8000374:	40013800 	.word	0x40013800

08000378 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <MX_GPIO_Init+0x90>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a17      	ldr	r2, [pc, #92]	; (8000408 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a11      	ldr	r2, [pc, #68]	; (8000408 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <MX_GPIO_Init+0x94>)
 80003dc:	f000 fc5e 	bl	8000c9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x94>)
 80003fa:	f000 faf5 	bl	80009e8 <HAL_GPIO_Init>

}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40011000 	.word	0x40011000

08000410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000416:	e7fe      	b.n	8000416 <Error_Handler+0x6>

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800049a:	d12b      	bne.n	80004f4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a16      	ldr	r2, [pc, #88]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	61d3      	str	r3, [r2, #28]
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_TIM_Encoder_MspInit+0x80>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004cc:	2303      	movs	r3, #3
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <HAL_TIM_Encoder_MspInit+0x84>)
 80004e0:	f000 fa82 	bl	80009e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	201c      	movs	r0, #28
 80004ea:	f000 fa46 	bl	800097a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ee:	201c      	movs	r0, #28
 80004f0:	f000 fa5f 	bl	80009b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <HAL_UART_MspInit+0x8c>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d131      	bne.n	8000588 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_UART_MspInit+0x90>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <HAL_UART_MspInit+0x90>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_UART_MspInit+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_UART_MspInit+0x90>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <HAL_UART_MspInit+0x90>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_UART_MspInit+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055e:	2303      	movs	r3, #3
 8000560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4619      	mov	r1, r3
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <HAL_UART_MspInit+0x94>)
 800056a:	f000 fa3d 	bl	80009e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800056e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <HAL_UART_MspInit+0x94>)
 8000584:	f000 fa30 	bl	80009e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40013800 	.word	0x40013800
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e2:	f000 f8b5 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM2_IRQHandler+0x10>)
 80005f2:	f001 f8b6 	bl	8001762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000dc 	.word	0x200000dc

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f001 fc7a 	bl	8001f28 <__errno>
 8000634:	4602      	mov	r2, r0
 8000636:	230c      	movs	r3, #12
 8000638:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20005000 	.word	0x20005000
 8000660:	00000400 	.word	0x00000400
 8000664:	2000008c 	.word	0x2000008c
 8000668:	20000130 	.word	0x20000130

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffe5 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 fc47 	bl	8001f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fd51 	bl	800014c <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b4:	08002844 	.word	0x08002844
  ldr r2, =_sbss
 80006b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006bc:	2000012c 	.word	0x2000012c

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f945 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff fe9a 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f95d 	bl	80009ce <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f925 	bl	800097a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	20000124 	.word	0x20000124

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000124 	.word	0x20000124

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_Delay+0x40>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ae:	bf00      	nop
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000008 	.word	0x20000008

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0b      	blt.n	800085a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <__NVIC_EnableIRQ+0x34>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff90 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff2d 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff42 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff90 	bl	80008bc <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5f 	bl	8000868 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff35 	bl	8000830 <__NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffa2 	bl	8000920 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b08b      	sub	sp, #44	; 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fa:	e127      	b.n	8000c4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009fc:	2201      	movs	r2, #1
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 8116 	bne.w	8000c46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d034      	beq.n	8000a8c <HAL_GPIO_Init+0xa4>
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d80d      	bhi.n	8000a42 <HAL_GPIO_Init+0x5a>
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d02b      	beq.n	8000a82 <HAL_GPIO_Init+0x9a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d804      	bhi.n	8000a38 <HAL_GPIO_Init+0x50>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d031      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d01c      	beq.n	8000a70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a36:	e048      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d043      	beq.n	8000ac4 <HAL_GPIO_Init+0xdc>
 8000a3c:	2b11      	cmp	r3, #17
 8000a3e:	d01b      	beq.n	8000a78 <HAL_GPIO_Init+0x90>
          break;
 8000a40:	e043      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a42:	4a89      	ldr	r2, [pc, #548]	; (8000c68 <HAL_GPIO_Init+0x280>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d026      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a48:	4a87      	ldr	r2, [pc, #540]	; (8000c68 <HAL_GPIO_Init+0x280>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d806      	bhi.n	8000a5c <HAL_GPIO_Init+0x74>
 8000a4e:	4a87      	ldr	r2, [pc, #540]	; (8000c6c <HAL_GPIO_Init+0x284>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d020      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a54:	4a86      	ldr	r2, [pc, #536]	; (8000c70 <HAL_GPIO_Init+0x288>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d01d      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
          break;
 8000a5a:	e036      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a5c:	4a85      	ldr	r2, [pc, #532]	; (8000c74 <HAL_GPIO_Init+0x28c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d019      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a62:	4a85      	ldr	r2, [pc, #532]	; (8000c78 <HAL_GPIO_Init+0x290>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d016      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a68:	4a84      	ldr	r2, [pc, #528]	; (8000c7c <HAL_GPIO_Init+0x294>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e028      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e023      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01e      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e019      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e012      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e008      	b.n	8000aca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	2bff      	cmp	r3, #255	; 0xff
 8000ace:	d801      	bhi.n	8000ad4 <HAL_GPIO_Init+0xec>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	e001      	b.n	8000ad8 <HAL_GPIO_Init+0xf0>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	2bff      	cmp	r3, #255	; 0xff
 8000ade:	d802      	bhi.n	8000ae6 <HAL_GPIO_Init+0xfe>
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x104>
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	210f      	movs	r1, #15
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	401a      	ands	r2, r3
 8000afe:	6a39      	ldr	r1, [r7, #32]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	431a      	orrs	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 8096 	beq.w	8000c46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a58      	ldr	r2, [pc, #352]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b56      	ldr	r3, [pc, #344]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b32:	4a54      	ldr	r2, [pc, #336]	; (8000c84 <HAL_GPIO_Init+0x29c>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x19e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x19a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x196>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x192>
 8000b76:	2303      	movs	r3, #3
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	e004      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b86:	2300      	movs	r3, #0
 8000b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8a:	f002 0203 	and.w	r2, r2, #3
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4093      	lsls	r3, r2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b98:	493a      	ldr	r1, [pc, #232]	; (8000c84 <HAL_GPIO_Init+0x29c>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4938      	ldr	r1, [pc, #224]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4933      	ldr	r1, [pc, #204]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	492e      	ldr	r1, [pc, #184]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	604b      	str	r3, [r1, #4]
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4929      	ldr	r1, [pc, #164]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	608b      	str	r3, [r1, #8]
 8000c0e:	e006      	b.n	8000c1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	491f      	ldr	r1, [pc, #124]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	491a      	ldr	r1, [pc, #104]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60cb      	str	r3, [r1, #12]
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4915      	ldr	r1, [pc, #84]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	3301      	adds	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f aed0 	bne.w	80009fc <HAL_GPIO_Init+0x14>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	372c      	adds	r7, #44	; 0x2c
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	10120000 	.word	0x10120000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10320000 	.word	0x10320000
 8000c7c:	10220000 	.word	0x10220000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	611a      	str	r2, [r3, #16]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e26c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8087 	beq.w	8000dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cec:	4b92      	ldr	r3, [pc, #584]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d00c      	beq.n	8000d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf8:	4b8f      	ldr	r3, [pc, #572]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d112      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
 8000d04:	4b8c      	ldr	r3, [pc, #560]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d10b      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d06c      	beq.n	8000df8 <HAL_RCC_OscConfig+0x12c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d168      	bne.n	8000df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e246      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x76>
 8000d34:	4b80      	ldr	r3, [pc, #512]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7f      	ldr	r2, [pc, #508]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e02e      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x98>
 8000d4a:	4b7b      	ldr	r3, [pc, #492]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7a      	ldr	r2, [pc, #488]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a77      	ldr	r2, [pc, #476]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e01d      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0xbc>
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a6e      	ldr	r2, [pc, #440]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e00b      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d88:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a67      	ldr	r2, [pc, #412]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fce4 	bl	8000774 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fce0 	bl	8000774 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	; 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e1fa      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe4>
 8000dce:	e014      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcd0 	bl	8000774 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fccc 	bl	8000774 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e1e6      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x10c>
 8000df6:	e000      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d063      	beq.n	8000ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e06:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00b      	beq.n	8000e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e12:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d11c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d116      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e1ba      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4939      	ldr	r1, [pc, #228]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e56:	e03a      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d020      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fc85 	bl	8000774 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fc81 	bl	8000774 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e19b      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4927      	ldr	r1, [pc, #156]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e015      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc64 	bl	8000774 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fc60 	bl	8000774 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e17a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d03a      	beq.n	8000f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fc44 	bl	8000774 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fc40 	bl	8000774 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e15a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fada 	bl	80014c8 <RCC_Delay>
 8000f14:	e01c      	b.n	8000f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc2a 	bl	8000774 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f22:	e00f      	b.n	8000f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc26 	bl	8000774 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d908      	bls.n	8000f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e140      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42420000 	.word	0x42420000
 8000f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b9e      	ldr	r3, [pc, #632]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e9      	bne.n	8000f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a6 	beq.w	80010aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f62:	4b97      	ldr	r3, [pc, #604]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10d      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b94      	ldr	r3, [pc, #592]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a93      	ldr	r2, [pc, #588]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b91      	ldr	r3, [pc, #580]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f86:	2301      	movs	r3, #1
 8000f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a8a      	ldr	r2, [pc, #552]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fbe7 	bl	8000774 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000faa:	f7ff fbe3 	bl	8000774 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b64      	cmp	r3, #100	; 0x64
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e0fd      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x312>
 8000fd0:	4b7b      	ldr	r3, [pc, #492]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a7a      	ldr	r2, [pc, #488]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	e02d      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x334>
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a72      	ldr	r2, [pc, #456]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	e01c      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d10c      	bne.n	8001022 <HAL_RCC_OscConfig+0x356>
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a6c      	ldr	r2, [pc, #432]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a69      	ldr	r2, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e00b      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a66      	ldr	r2, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d015      	beq.n	800106e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb97 	bl	8000774 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fb93 	bl	8000774 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0ab      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0ee      	beq.n	800104a <HAL_RCC_OscConfig+0x37e>
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fb81 	bl	8000774 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fb7d 	bl	8000774 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e095      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ee      	bne.n	8001076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d105      	bne.n	80010aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8081 	beq.w	80011b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d061      	beq.n	8001184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d146      	bne.n	8001156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb51 	bl	8000774 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fb4d 	bl	8000774 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e067      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	492d      	ldr	r1, [pc, #180]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a19      	ldr	r1, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	430b      	orrs	r3, r1
 8001122:	4927      	ldr	r1, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fb21 	bl	8000774 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fb1d 	bl	8000774 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e037      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x46a>
 8001154:	e02f      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fb0a 	bl	8000774 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fb06 	bl	8000774 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e020      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x498>
 8001182:	e018      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e013      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	42420060 	.word	0x42420060

080011cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0d0      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d910      	bls.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4965      	ldr	r1, [pc, #404]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800124a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d040      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e073      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06b      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4936      	ldr	r1, [pc, #216]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa5a 	bl	8000774 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fa56 	bl	8000774 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e053      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d210      	bcs.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0207 	bic.w	r2, r3, #7
 8001302:	4922      	ldr	r1, [pc, #136]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f821 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 800135e:	4601      	mov	r1, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	fa21 f303 	lsr.w	r3, r1, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1cc>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1d0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f9b8 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000
 8001390:	40021000 	.word	0x40021000
 8001394:	080027f0 	.word	0x080027f0
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013a8:	1d3c      	adds	r4, r7, #4
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d002      	beq.n	80013e0 <HAL_RCC_GetSysClockFreq+0x40>
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x46>
 80013de:	e02d      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013e2:	623b      	str	r3, [r7, #32]
      break;
 80013e4:	e02d      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f2:	4413      	add	r3, r2
 80013f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0c5b      	lsrs	r3, r3, #17
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001412:	4413      	add	r3, r2
 8001414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 800141e:	fb02 f203 	mul.w	r2, r2, r3
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	e004      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	623b      	str	r3, [r7, #32]
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 800143e:	623b      	str	r3, [r7, #32]
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	6a3b      	ldr	r3, [r7, #32]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc90      	pop	{r4, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	080027dc 	.word	0x080027dc
 8001454:	080027ec 	.word	0x080027ec
 8001458:	40021000 	.word	0x40021000
 800145c:	007a1200 	.word	0x007a1200
 8001460:	003d0900 	.word	0x003d0900

08001464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <HAL_RCC_GetHCLKFreq+0x10>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800147c:	f7ff fff2 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 8001480:	4601      	mov	r1, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK1Freq+0x24>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	08002800 	.word	0x08002800

080014a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a4:	f7ff ffde 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 80014a8:	4601      	mov	r1, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0adb      	lsrs	r3, r3, #11
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08002800 	.word	0x08002800

080014c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <RCC_Delay+0x34>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <RCC_Delay+0x38>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0a5b      	lsrs	r3, r3, #9
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e4:	bf00      	nop
  }
  while (Delay --);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	60fa      	str	r2, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <RCC_Delay+0x1c>
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000000 	.word	0x20000000
 8001500:	10624dd3 	.word	0x10624dd3

08001504 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e093      	b.n	8001640 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7fe ffa5 	bl	800047c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2202      	movs	r2, #2
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001548:	f023 0307 	bic.w	r3, r3, #7
 800154c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4610      	mov	r0, r2
 800155a:	f000 fa37 	bl	80019cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	4313      	orrs	r3, r2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015a4:	f023 030c 	bic.w	r3, r3, #12
 80015a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80015b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4313      	orrs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	011a      	lsls	r2, r3, #4
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	031b      	lsls	r3, r3, #12
 80015d4:	4313      	orrs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80015e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4313      	orrs	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001658:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001660:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001668:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001670:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d110      	bne.n	800169a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d001      	beq.n	8001688 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e068      	b.n	800175a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001698:	e031      	b.n	80016fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d110      	bne.n	80016c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d102      	bne.n	80016ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80016a6:	7b3b      	ldrb	r3, [r7, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d001      	beq.n	80016b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e054      	b.n	800175a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016c0:	e01d      	b.n	80016fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80016d4:	7b3b      	ldrb	r3, [r7, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e03d      	b.n	800175a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_TIM_Encoder_Start+0xc2>
 8001704:	2b04      	cmp	r3, #4
 8001706:	d008      	beq.n	800171a <HAL_TIM_Encoder_Start+0xd2>
 8001708:	e00f      	b.n	800172a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f9bc 	bl	8001a90 <TIM_CCxChannelCmd>
      break;
 8001718:	e016      	b.n	8001748 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	2104      	movs	r1, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f9b4 	bl	8001a90 <TIM_CCxChannelCmd>
      break;
 8001728:	e00e      	b.n	8001748 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f9ac 	bl	8001a90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	2104      	movs	r1, #4
 8001740:	4618      	mov	r0, r3
 8001742:	f000 f9a5 	bl	8001a90 <TIM_CCxChannelCmd>
      break;
 8001746:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d122      	bne.n	80017be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d11b      	bne.n	80017be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0202 	mvn.w	r2, #2
 800178e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8f6 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80017aa:	e005      	b.n	80017b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8e9 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8f8 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d122      	bne.n	8001812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d11b      	bne.n	8001812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f06f 0204 	mvn.w	r2, #4
 80017e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8cc 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80017fe:	e005      	b.n	800180c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8bf 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8ce 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d122      	bne.n	8001866 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11b      	bne.n	8001866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f06f 0208 	mvn.w	r2, #8
 8001836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2204      	movs	r2, #4
 800183c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8a2 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 8001852:	e005      	b.n	8001860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f895 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8a4 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d122      	bne.n	80018ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b10      	cmp	r3, #16
 8001880:	d11b      	bne.n	80018ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f06f 0210 	mvn.w	r2, #16
 800188a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2208      	movs	r2, #8
 8001890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f878 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80018a6:	e005      	b.n	80018b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f86b 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f87a 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10e      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 0201 	mvn.w	r2, #1
 80018de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f846 	bl	8001972 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d10e      	bne.n	8001912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b80      	cmp	r3, #128	; 0x80
 8001900:	d107      	bne.n	8001912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800190a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f94a 	bl	8001ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b40      	cmp	r3, #64	; 0x40
 800191e:	d10e      	bne.n	800193e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d107      	bne.n	800193e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f83e 	bl	80019ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d10e      	bne.n	800196a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b20      	cmp	r3, #32
 8001958:	d107      	bne.n	800196a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f06f 0220 	mvn.w	r2, #32
 8001962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f915 	bl	8001b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00b      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d007      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <TIM_Base_SetConfig+0xbc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <TIM_Base_SetConfig+0xc0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <TIM_Base_SetConfig+0xbc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <TIM_Base_SetConfig+0xc0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d103      	bne.n	8001a74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	615a      	str	r2, [r3, #20]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40000800 	.word	0x40000800

08001a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	621a      	str	r2, [r3, #32]
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e046      	b.n	8001b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00e      	beq.n	8001b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d009      	beq.n	8001b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d004      	beq.n	8001b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10c      	bne.n	8001b6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40012c00 	.word	0x40012c00
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800

08001b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e03f      	b.n	8001c4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fc90 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	; 0x24
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f905 	bl	8001e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d17c      	bne.n	8001d6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_UART_Transmit+0x2c>
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e075      	b.n	8001d6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_UART_Transmit+0x3e>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e06e      	b.n	8001d6e <HAL_UART_Transmit+0x11c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2221      	movs	r2, #33	; 0x21
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ca6:	f7fe fd65 	bl	8000774 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_UART_Transmit+0x82>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e003      	b.n	8001cdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ce4:	e02a      	b.n	8001d3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f840 	bl	8001d76 <UART_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e036      	b.n	8001d6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10b      	bne.n	8001d1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e007      	b.n	8001d2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1cf      	bne.n	8001ce6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f810 	bl	8001d76 <UART_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e006      	b.n	8001d6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4613      	mov	r3, r2
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d86:	e02c      	b.n	8001de2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8e:	d028      	beq.n	8001de2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d96:	f7fe fced 	bl	8000774 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d21d      	bcs.n	8001de2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001db4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e00f      	b.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4013      	ands	r3, r2
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d0c3      	beq.n	8001d88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e46:	f023 030c 	bic.w	r3, r3, #12
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <UART_SetConfig+0x114>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e74:	f7ff fb14 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	e002      	b.n	8001e82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f7ff fafc 	bl	8001478 <HAL_RCC_GetPCLK1Freq>
 8001e80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <UART_SetConfig+0x118>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	0119      	lsls	r1, r3, #4
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <UART_SetConfig+0x118>)
 8001eba:	fba3 0302 	umull	r0, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	3332      	adds	r3, #50	; 0x32
 8001ecc:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <UART_SetConfig+0x118>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed8:	4419      	add	r1, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	441a      	add	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <UART_SetConfig+0x118>)
 8001ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2064      	movs	r0, #100	; 0x64
 8001efa:	fb00 f303 	mul.w	r3, r0, r3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	3332      	adds	r3, #50	; 0x32
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <UART_SetConfig+0x118>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	440a      	add	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40013800 	.word	0x40013800
 8001f24:	51eb851f 	.word	0x51eb851f

08001f28 <__errno>:
 8001f28:	4b01      	ldr	r3, [pc, #4]	; (8001f30 <__errno+0x8>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000000c 	.word	0x2000000c

08001f34 <__libc_init_array>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	2500      	movs	r5, #0
 8001f38:	4e0c      	ldr	r6, [pc, #48]	; (8001f6c <__libc_init_array+0x38>)
 8001f3a:	4c0d      	ldr	r4, [pc, #52]	; (8001f70 <__libc_init_array+0x3c>)
 8001f3c:	1ba4      	subs	r4, r4, r6
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	42a5      	cmp	r5, r4
 8001f42:	d109      	bne.n	8001f58 <__libc_init_array+0x24>
 8001f44:	f000 fc34 	bl	80027b0 <_init>
 8001f48:	2500      	movs	r5, #0
 8001f4a:	4e0a      	ldr	r6, [pc, #40]	; (8001f74 <__libc_init_array+0x40>)
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	; (8001f78 <__libc_init_array+0x44>)
 8001f4e:	1ba4      	subs	r4, r4, r6
 8001f50:	10a4      	asrs	r4, r4, #2
 8001f52:	42a5      	cmp	r5, r4
 8001f54:	d105      	bne.n	8001f62 <__libc_init_array+0x2e>
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f5c:	4798      	blx	r3
 8001f5e:	3501      	adds	r5, #1
 8001f60:	e7ee      	b.n	8001f40 <__libc_init_array+0xc>
 8001f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f66:	4798      	blx	r3
 8001f68:	3501      	adds	r5, #1
 8001f6a:	e7f2      	b.n	8001f52 <__libc_init_array+0x1e>
 8001f6c:	0800283c 	.word	0x0800283c
 8001f70:	0800283c 	.word	0x0800283c
 8001f74:	0800283c 	.word	0x0800283c
 8001f78:	08002840 	.word	0x08002840

08001f7c <memset>:
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4402      	add	r2, r0
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d100      	bne.n	8001f86 <memset+0xa>
 8001f84:	4770      	bx	lr
 8001f86:	f803 1b01 	strb.w	r1, [r3], #1
 8001f8a:	e7f9      	b.n	8001f80 <memset+0x4>

08001f8c <siprintf>:
 8001f8c:	b40e      	push	{r1, r2, r3}
 8001f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f92:	b500      	push	{lr}
 8001f94:	b09c      	sub	sp, #112	; 0x70
 8001f96:	ab1d      	add	r3, sp, #116	; 0x74
 8001f98:	9002      	str	r0, [sp, #8]
 8001f9a:	9006      	str	r0, [sp, #24]
 8001f9c:	9107      	str	r1, [sp, #28]
 8001f9e:	9104      	str	r1, [sp, #16]
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <siprintf+0x38>)
 8001fa2:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <siprintf+0x3c>)
 8001fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fa8:	9105      	str	r1, [sp, #20]
 8001faa:	6800      	ldr	r0, [r0, #0]
 8001fac:	a902      	add	r1, sp, #8
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	f000 f866 	bl	8002080 <_svfiprintf_r>
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	9b02      	ldr	r3, [sp, #8]
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	b01c      	add	sp, #112	; 0x70
 8001fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fc0:	b003      	add	sp, #12
 8001fc2:	4770      	bx	lr
 8001fc4:	2000000c 	.word	0x2000000c
 8001fc8:	ffff0208 	.word	0xffff0208

08001fcc <__ssputs_r>:
 8001fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd0:	688e      	ldr	r6, [r1, #8]
 8001fd2:	4682      	mov	sl, r0
 8001fd4:	429e      	cmp	r6, r3
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4690      	mov	r8, r2
 8001fda:	4699      	mov	r9, r3
 8001fdc:	d837      	bhi.n	800204e <__ssputs_r+0x82>
 8001fde:	898a      	ldrh	r2, [r1, #12]
 8001fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fe4:	d031      	beq.n	800204a <__ssputs_r+0x7e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	6825      	ldr	r5, [r4, #0]
 8001fea:	6909      	ldr	r1, [r1, #16]
 8001fec:	1a6f      	subs	r7, r5, r1
 8001fee:	6965      	ldr	r5, [r4, #20]
 8001ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ff4:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ff8:	f109 0301 	add.w	r3, r9, #1
 8001ffc:	443b      	add	r3, r7
 8001ffe:	429d      	cmp	r5, r3
 8002000:	bf38      	it	cc
 8002002:	461d      	movcc	r5, r3
 8002004:	0553      	lsls	r3, r2, #21
 8002006:	d530      	bpl.n	800206a <__ssputs_r+0x9e>
 8002008:	4629      	mov	r1, r5
 800200a:	f000 fb37 	bl	800267c <_malloc_r>
 800200e:	4606      	mov	r6, r0
 8002010:	b950      	cbnz	r0, 8002028 <__ssputs_r+0x5c>
 8002012:	230c      	movs	r3, #12
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f8ca 3000 	str.w	r3, [sl]
 800201c:	89a3      	ldrh	r3, [r4, #12]
 800201e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002022:	81a3      	strh	r3, [r4, #12]
 8002024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002028:	463a      	mov	r2, r7
 800202a:	6921      	ldr	r1, [r4, #16]
 800202c:	f000 fab6 	bl	800259c <memcpy>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203a:	81a3      	strh	r3, [r4, #12]
 800203c:	6126      	str	r6, [r4, #16]
 800203e:	443e      	add	r6, r7
 8002040:	6026      	str	r6, [r4, #0]
 8002042:	464e      	mov	r6, r9
 8002044:	6165      	str	r5, [r4, #20]
 8002046:	1bed      	subs	r5, r5, r7
 8002048:	60a5      	str	r5, [r4, #8]
 800204a:	454e      	cmp	r6, r9
 800204c:	d900      	bls.n	8002050 <__ssputs_r+0x84>
 800204e:	464e      	mov	r6, r9
 8002050:	4632      	mov	r2, r6
 8002052:	4641      	mov	r1, r8
 8002054:	6820      	ldr	r0, [r4, #0]
 8002056:	f000 faac 	bl	80025b2 <memmove>
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	2000      	movs	r0, #0
 800205e:	1b9b      	subs	r3, r3, r6
 8002060:	60a3      	str	r3, [r4, #8]
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	441e      	add	r6, r3
 8002066:	6026      	str	r6, [r4, #0]
 8002068:	e7dc      	b.n	8002024 <__ssputs_r+0x58>
 800206a:	462a      	mov	r2, r5
 800206c:	f000 fb60 	bl	8002730 <_realloc_r>
 8002070:	4606      	mov	r6, r0
 8002072:	2800      	cmp	r0, #0
 8002074:	d1e2      	bne.n	800203c <__ssputs_r+0x70>
 8002076:	6921      	ldr	r1, [r4, #16]
 8002078:	4650      	mov	r0, sl
 800207a:	f000 fab3 	bl	80025e4 <_free_r>
 800207e:	e7c8      	b.n	8002012 <__ssputs_r+0x46>

08002080 <_svfiprintf_r>:
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002084:	461d      	mov	r5, r3
 8002086:	898b      	ldrh	r3, [r1, #12]
 8002088:	b09d      	sub	sp, #116	; 0x74
 800208a:	061f      	lsls	r7, r3, #24
 800208c:	4680      	mov	r8, r0
 800208e:	460c      	mov	r4, r1
 8002090:	4616      	mov	r6, r2
 8002092:	d50f      	bpl.n	80020b4 <_svfiprintf_r+0x34>
 8002094:	690b      	ldr	r3, [r1, #16]
 8002096:	b96b      	cbnz	r3, 80020b4 <_svfiprintf_r+0x34>
 8002098:	2140      	movs	r1, #64	; 0x40
 800209a:	f000 faef 	bl	800267c <_malloc_r>
 800209e:	6020      	str	r0, [r4, #0]
 80020a0:	6120      	str	r0, [r4, #16]
 80020a2:	b928      	cbnz	r0, 80020b0 <_svfiprintf_r+0x30>
 80020a4:	230c      	movs	r3, #12
 80020a6:	f8c8 3000 	str.w	r3, [r8]
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295
 80020ae:	e0c8      	b.n	8002242 <_svfiprintf_r+0x1c2>
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	6163      	str	r3, [r4, #20]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9309      	str	r3, [sp, #36]	; 0x24
 80020b8:	2320      	movs	r3, #32
 80020ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020be:	2330      	movs	r3, #48	; 0x30
 80020c0:	f04f 0b01 	mov.w	fp, #1
 80020c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020c8:	9503      	str	r5, [sp, #12]
 80020ca:	4637      	mov	r7, r6
 80020cc:	463d      	mov	r5, r7
 80020ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80020d2:	b10b      	cbz	r3, 80020d8 <_svfiprintf_r+0x58>
 80020d4:	2b25      	cmp	r3, #37	; 0x25
 80020d6:	d13e      	bne.n	8002156 <_svfiprintf_r+0xd6>
 80020d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80020dc:	d00b      	beq.n	80020f6 <_svfiprintf_r+0x76>
 80020de:	4653      	mov	r3, sl
 80020e0:	4632      	mov	r2, r6
 80020e2:	4621      	mov	r1, r4
 80020e4:	4640      	mov	r0, r8
 80020e6:	f7ff ff71 	bl	8001fcc <__ssputs_r>
 80020ea:	3001      	adds	r0, #1
 80020ec:	f000 80a4 	beq.w	8002238 <_svfiprintf_r+0x1b8>
 80020f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020f2:	4453      	add	r3, sl
 80020f4:	9309      	str	r3, [sp, #36]	; 0x24
 80020f6:	783b      	ldrb	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 809d 	beq.w	8002238 <_svfiprintf_r+0x1b8>
 80020fe:	2300      	movs	r3, #0
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002108:	9304      	str	r3, [sp, #16]
 800210a:	9307      	str	r3, [sp, #28]
 800210c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002110:	931a      	str	r3, [sp, #104]	; 0x68
 8002112:	462f      	mov	r7, r5
 8002114:	2205      	movs	r2, #5
 8002116:	f817 1b01 	ldrb.w	r1, [r7], #1
 800211a:	4850      	ldr	r0, [pc, #320]	; (800225c <_svfiprintf_r+0x1dc>)
 800211c:	f000 fa30 	bl	8002580 <memchr>
 8002120:	9b04      	ldr	r3, [sp, #16]
 8002122:	b9d0      	cbnz	r0, 800215a <_svfiprintf_r+0xda>
 8002124:	06d9      	lsls	r1, r3, #27
 8002126:	bf44      	itt	mi
 8002128:	2220      	movmi	r2, #32
 800212a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800212e:	071a      	lsls	r2, r3, #28
 8002130:	bf44      	itt	mi
 8002132:	222b      	movmi	r2, #43	; 0x2b
 8002134:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002138:	782a      	ldrb	r2, [r5, #0]
 800213a:	2a2a      	cmp	r2, #42	; 0x2a
 800213c:	d015      	beq.n	800216a <_svfiprintf_r+0xea>
 800213e:	462f      	mov	r7, r5
 8002140:	2000      	movs	r0, #0
 8002142:	250a      	movs	r5, #10
 8002144:	9a07      	ldr	r2, [sp, #28]
 8002146:	4639      	mov	r1, r7
 8002148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800214c:	3b30      	subs	r3, #48	; 0x30
 800214e:	2b09      	cmp	r3, #9
 8002150:	d94d      	bls.n	80021ee <_svfiprintf_r+0x16e>
 8002152:	b1b8      	cbz	r0, 8002184 <_svfiprintf_r+0x104>
 8002154:	e00f      	b.n	8002176 <_svfiprintf_r+0xf6>
 8002156:	462f      	mov	r7, r5
 8002158:	e7b8      	b.n	80020cc <_svfiprintf_r+0x4c>
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <_svfiprintf_r+0x1dc>)
 800215c:	463d      	mov	r5, r7
 800215e:	1a80      	subs	r0, r0, r2
 8002160:	fa0b f000 	lsl.w	r0, fp, r0
 8002164:	4318      	orrs	r0, r3
 8002166:	9004      	str	r0, [sp, #16]
 8002168:	e7d3      	b.n	8002112 <_svfiprintf_r+0x92>
 800216a:	9a03      	ldr	r2, [sp, #12]
 800216c:	1d11      	adds	r1, r2, #4
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	9103      	str	r1, [sp, #12]
 8002172:	2a00      	cmp	r2, #0
 8002174:	db01      	blt.n	800217a <_svfiprintf_r+0xfa>
 8002176:	9207      	str	r2, [sp, #28]
 8002178:	e004      	b.n	8002184 <_svfiprintf_r+0x104>
 800217a:	4252      	negs	r2, r2
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	9207      	str	r2, [sp, #28]
 8002182:	9304      	str	r3, [sp, #16]
 8002184:	783b      	ldrb	r3, [r7, #0]
 8002186:	2b2e      	cmp	r3, #46	; 0x2e
 8002188:	d10c      	bne.n	80021a4 <_svfiprintf_r+0x124>
 800218a:	787b      	ldrb	r3, [r7, #1]
 800218c:	2b2a      	cmp	r3, #42	; 0x2a
 800218e:	d133      	bne.n	80021f8 <_svfiprintf_r+0x178>
 8002190:	9b03      	ldr	r3, [sp, #12]
 8002192:	3702      	adds	r7, #2
 8002194:	1d1a      	adds	r2, r3, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	9203      	str	r2, [sp, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	bfb8      	it	lt
 800219e:	f04f 33ff 	movlt.w	r3, #4294967295
 80021a2:	9305      	str	r3, [sp, #20]
 80021a4:	4d2e      	ldr	r5, [pc, #184]	; (8002260 <_svfiprintf_r+0x1e0>)
 80021a6:	2203      	movs	r2, #3
 80021a8:	7839      	ldrb	r1, [r7, #0]
 80021aa:	4628      	mov	r0, r5
 80021ac:	f000 f9e8 	bl	8002580 <memchr>
 80021b0:	b138      	cbz	r0, 80021c2 <_svfiprintf_r+0x142>
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	1b40      	subs	r0, r0, r5
 80021b6:	fa03 f000 	lsl.w	r0, r3, r0
 80021ba:	9b04      	ldr	r3, [sp, #16]
 80021bc:	3701      	adds	r7, #1
 80021be:	4303      	orrs	r3, r0
 80021c0:	9304      	str	r3, [sp, #16]
 80021c2:	7839      	ldrb	r1, [r7, #0]
 80021c4:	2206      	movs	r2, #6
 80021c6:	4827      	ldr	r0, [pc, #156]	; (8002264 <_svfiprintf_r+0x1e4>)
 80021c8:	1c7e      	adds	r6, r7, #1
 80021ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021ce:	f000 f9d7 	bl	8002580 <memchr>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d038      	beq.n	8002248 <_svfiprintf_r+0x1c8>
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <_svfiprintf_r+0x1e8>)
 80021d8:	bb13      	cbnz	r3, 8002220 <_svfiprintf_r+0x1a0>
 80021da:	9b03      	ldr	r3, [sp, #12]
 80021dc:	3307      	adds	r3, #7
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	3308      	adds	r3, #8
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021e8:	444b      	add	r3, r9
 80021ea:	9309      	str	r3, [sp, #36]	; 0x24
 80021ec:	e76d      	b.n	80020ca <_svfiprintf_r+0x4a>
 80021ee:	fb05 3202 	mla	r2, r5, r2, r3
 80021f2:	2001      	movs	r0, #1
 80021f4:	460f      	mov	r7, r1
 80021f6:	e7a6      	b.n	8002146 <_svfiprintf_r+0xc6>
 80021f8:	2300      	movs	r3, #0
 80021fa:	250a      	movs	r5, #10
 80021fc:	4619      	mov	r1, r3
 80021fe:	3701      	adds	r7, #1
 8002200:	9305      	str	r3, [sp, #20]
 8002202:	4638      	mov	r0, r7
 8002204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002208:	3a30      	subs	r2, #48	; 0x30
 800220a:	2a09      	cmp	r2, #9
 800220c:	d903      	bls.n	8002216 <_svfiprintf_r+0x196>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0c8      	beq.n	80021a4 <_svfiprintf_r+0x124>
 8002212:	9105      	str	r1, [sp, #20]
 8002214:	e7c6      	b.n	80021a4 <_svfiprintf_r+0x124>
 8002216:	fb05 2101 	mla	r1, r5, r1, r2
 800221a:	2301      	movs	r3, #1
 800221c:	4607      	mov	r7, r0
 800221e:	e7f0      	b.n	8002202 <_svfiprintf_r+0x182>
 8002220:	ab03      	add	r3, sp, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4622      	mov	r2, r4
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <_svfiprintf_r+0x1ec>)
 8002228:	a904      	add	r1, sp, #16
 800222a:	4640      	mov	r0, r8
 800222c:	f3af 8000 	nop.w
 8002230:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002234:	4681      	mov	r9, r0
 8002236:	d1d6      	bne.n	80021e6 <_svfiprintf_r+0x166>
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	065b      	lsls	r3, r3, #25
 800223c:	f53f af35 	bmi.w	80020aa <_svfiprintf_r+0x2a>
 8002240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002242:	b01d      	add	sp, #116	; 0x74
 8002244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002248:	ab03      	add	r3, sp, #12
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4622      	mov	r2, r4
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_svfiprintf_r+0x1ec>)
 8002250:	a904      	add	r1, sp, #16
 8002252:	4640      	mov	r0, r8
 8002254:	f000 f882 	bl	800235c <_printf_i>
 8002258:	e7ea      	b.n	8002230 <_svfiprintf_r+0x1b0>
 800225a:	bf00      	nop
 800225c:	08002808 	.word	0x08002808
 8002260:	0800280e 	.word	0x0800280e
 8002264:	08002812 	.word	0x08002812
 8002268:	00000000 	.word	0x00000000
 800226c:	08001fcd 	.word	0x08001fcd

08002270 <_printf_common>:
 8002270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002274:	4691      	mov	r9, r2
 8002276:	461f      	mov	r7, r3
 8002278:	688a      	ldr	r2, [r1, #8]
 800227a:	690b      	ldr	r3, [r1, #16]
 800227c:	4606      	mov	r6, r0
 800227e:	4293      	cmp	r3, r2
 8002280:	bfb8      	it	lt
 8002282:	4613      	movlt	r3, r2
 8002284:	f8c9 3000 	str.w	r3, [r9]
 8002288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800228c:	460c      	mov	r4, r1
 800228e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002292:	b112      	cbz	r2, 800229a <_printf_common+0x2a>
 8002294:	3301      	adds	r3, #1
 8002296:	f8c9 3000 	str.w	r3, [r9]
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	0699      	lsls	r1, r3, #26
 800229e:	bf42      	ittt	mi
 80022a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80022a4:	3302      	addmi	r3, #2
 80022a6:	f8c9 3000 	strmi.w	r3, [r9]
 80022aa:	6825      	ldr	r5, [r4, #0]
 80022ac:	f015 0506 	ands.w	r5, r5, #6
 80022b0:	d107      	bne.n	80022c2 <_printf_common+0x52>
 80022b2:	f104 0a19 	add.w	sl, r4, #25
 80022b6:	68e3      	ldr	r3, [r4, #12]
 80022b8:	f8d9 2000 	ldr.w	r2, [r9]
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	42ab      	cmp	r3, r5
 80022c0:	dc29      	bgt.n	8002316 <_printf_common+0xa6>
 80022c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	3300      	adds	r3, #0
 80022ca:	bf18      	it	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	0692      	lsls	r2, r2, #26
 80022d0:	d42e      	bmi.n	8002330 <_printf_common+0xc0>
 80022d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022d6:	4639      	mov	r1, r7
 80022d8:	4630      	mov	r0, r6
 80022da:	47c0      	blx	r8
 80022dc:	3001      	adds	r0, #1
 80022de:	d021      	beq.n	8002324 <_printf_common+0xb4>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	68e5      	ldr	r5, [r4, #12]
 80022e4:	f003 0306 	and.w	r3, r3, #6
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	bf18      	it	ne
 80022ec:	2500      	movne	r5, #0
 80022ee:	f8d9 2000 	ldr.w	r2, [r9]
 80022f2:	f04f 0900 	mov.w	r9, #0
 80022f6:	bf08      	it	eq
 80022f8:	1aad      	subeq	r5, r5, r2
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	6922      	ldr	r2, [r4, #16]
 80022fe:	bf08      	it	eq
 8002300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002304:	4293      	cmp	r3, r2
 8002306:	bfc4      	itt	gt
 8002308:	1a9b      	subgt	r3, r3, r2
 800230a:	18ed      	addgt	r5, r5, r3
 800230c:	341a      	adds	r4, #26
 800230e:	454d      	cmp	r5, r9
 8002310:	d11a      	bne.n	8002348 <_printf_common+0xd8>
 8002312:	2000      	movs	r0, #0
 8002314:	e008      	b.n	8002328 <_printf_common+0xb8>
 8002316:	2301      	movs	r3, #1
 8002318:	4652      	mov	r2, sl
 800231a:	4639      	mov	r1, r7
 800231c:	4630      	mov	r0, r6
 800231e:	47c0      	blx	r8
 8002320:	3001      	adds	r0, #1
 8002322:	d103      	bne.n	800232c <_printf_common+0xbc>
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232c:	3501      	adds	r5, #1
 800232e:	e7c2      	b.n	80022b6 <_printf_common+0x46>
 8002330:	2030      	movs	r0, #48	; 0x30
 8002332:	18e1      	adds	r1, r4, r3
 8002334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800233e:	4422      	add	r2, r4
 8002340:	3302      	adds	r3, #2
 8002342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002346:	e7c4      	b.n	80022d2 <_printf_common+0x62>
 8002348:	2301      	movs	r3, #1
 800234a:	4622      	mov	r2, r4
 800234c:	4639      	mov	r1, r7
 800234e:	4630      	mov	r0, r6
 8002350:	47c0      	blx	r8
 8002352:	3001      	adds	r0, #1
 8002354:	d0e6      	beq.n	8002324 <_printf_common+0xb4>
 8002356:	f109 0901 	add.w	r9, r9, #1
 800235a:	e7d8      	b.n	800230e <_printf_common+0x9e>

0800235c <_printf_i>:
 800235c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002360:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002364:	460c      	mov	r4, r1
 8002366:	7e09      	ldrb	r1, [r1, #24]
 8002368:	b085      	sub	sp, #20
 800236a:	296e      	cmp	r1, #110	; 0x6e
 800236c:	4617      	mov	r7, r2
 800236e:	4606      	mov	r6, r0
 8002370:	4698      	mov	r8, r3
 8002372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002374:	f000 80b3 	beq.w	80024de <_printf_i+0x182>
 8002378:	d822      	bhi.n	80023c0 <_printf_i+0x64>
 800237a:	2963      	cmp	r1, #99	; 0x63
 800237c:	d036      	beq.n	80023ec <_printf_i+0x90>
 800237e:	d80a      	bhi.n	8002396 <_printf_i+0x3a>
 8002380:	2900      	cmp	r1, #0
 8002382:	f000 80b9 	beq.w	80024f8 <_printf_i+0x19c>
 8002386:	2958      	cmp	r1, #88	; 0x58
 8002388:	f000 8083 	beq.w	8002492 <_printf_i+0x136>
 800238c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002390:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002394:	e032      	b.n	80023fc <_printf_i+0xa0>
 8002396:	2964      	cmp	r1, #100	; 0x64
 8002398:	d001      	beq.n	800239e <_printf_i+0x42>
 800239a:	2969      	cmp	r1, #105	; 0x69
 800239c:	d1f6      	bne.n	800238c <_printf_i+0x30>
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	0605      	lsls	r5, r0, #24
 80023a4:	f103 0104 	add.w	r1, r3, #4
 80023a8:	d52a      	bpl.n	8002400 <_printf_i+0xa4>
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da03      	bge.n	80023ba <_printf_i+0x5e>
 80023b2:	222d      	movs	r2, #45	; 0x2d
 80023b4:	425b      	negs	r3, r3
 80023b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80023ba:	486f      	ldr	r0, [pc, #444]	; (8002578 <_printf_i+0x21c>)
 80023bc:	220a      	movs	r2, #10
 80023be:	e039      	b.n	8002434 <_printf_i+0xd8>
 80023c0:	2973      	cmp	r1, #115	; 0x73
 80023c2:	f000 809d 	beq.w	8002500 <_printf_i+0x1a4>
 80023c6:	d808      	bhi.n	80023da <_printf_i+0x7e>
 80023c8:	296f      	cmp	r1, #111	; 0x6f
 80023ca:	d020      	beq.n	800240e <_printf_i+0xb2>
 80023cc:	2970      	cmp	r1, #112	; 0x70
 80023ce:	d1dd      	bne.n	800238c <_printf_i+0x30>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	6023      	str	r3, [r4, #0]
 80023d8:	e003      	b.n	80023e2 <_printf_i+0x86>
 80023da:	2975      	cmp	r1, #117	; 0x75
 80023dc:	d017      	beq.n	800240e <_printf_i+0xb2>
 80023de:	2978      	cmp	r1, #120	; 0x78
 80023e0:	d1d4      	bne.n	800238c <_printf_i+0x30>
 80023e2:	2378      	movs	r3, #120	; 0x78
 80023e4:	4865      	ldr	r0, [pc, #404]	; (800257c <_printf_i+0x220>)
 80023e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023ea:	e055      	b.n	8002498 <_printf_i+0x13c>
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023f2:	1d19      	adds	r1, r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6011      	str	r1, [r2, #0]
 80023f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023fc:	2301      	movs	r3, #1
 80023fe:	e08c      	b.n	800251a <_printf_i+0x1be>
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002406:	6011      	str	r1, [r2, #0]
 8002408:	bf18      	it	ne
 800240a:	b21b      	sxthne	r3, r3
 800240c:	e7cf      	b.n	80023ae <_printf_i+0x52>
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	6825      	ldr	r5, [r4, #0]
 8002412:	1d18      	adds	r0, r3, #4
 8002414:	6010      	str	r0, [r2, #0]
 8002416:	0628      	lsls	r0, r5, #24
 8002418:	d501      	bpl.n	800241e <_printf_i+0xc2>
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e002      	b.n	8002424 <_printf_i+0xc8>
 800241e:	0668      	lsls	r0, r5, #25
 8002420:	d5fb      	bpl.n	800241a <_printf_i+0xbe>
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	296f      	cmp	r1, #111	; 0x6f
 8002426:	bf14      	ite	ne
 8002428:	220a      	movne	r2, #10
 800242a:	2208      	moveq	r2, #8
 800242c:	4852      	ldr	r0, [pc, #328]	; (8002578 <_printf_i+0x21c>)
 800242e:	2100      	movs	r1, #0
 8002430:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002434:	6865      	ldr	r5, [r4, #4]
 8002436:	2d00      	cmp	r5, #0
 8002438:	60a5      	str	r5, [r4, #8]
 800243a:	f2c0 8095 	blt.w	8002568 <_printf_i+0x20c>
 800243e:	6821      	ldr	r1, [r4, #0]
 8002440:	f021 0104 	bic.w	r1, r1, #4
 8002444:	6021      	str	r1, [r4, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13d      	bne.n	80024c6 <_printf_i+0x16a>
 800244a:	2d00      	cmp	r5, #0
 800244c:	f040 808e 	bne.w	800256c <_printf_i+0x210>
 8002450:	4665      	mov	r5, ip
 8002452:	2a08      	cmp	r2, #8
 8002454:	d10b      	bne.n	800246e <_printf_i+0x112>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	07db      	lsls	r3, r3, #31
 800245a:	d508      	bpl.n	800246e <_printf_i+0x112>
 800245c:	6923      	ldr	r3, [r4, #16]
 800245e:	6862      	ldr	r2, [r4, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	bfde      	ittt	le
 8002464:	2330      	movle	r3, #48	; 0x30
 8002466:	f805 3c01 	strble.w	r3, [r5, #-1]
 800246a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800246e:	ebac 0305 	sub.w	r3, ip, r5
 8002472:	6123      	str	r3, [r4, #16]
 8002474:	f8cd 8000 	str.w	r8, [sp]
 8002478:	463b      	mov	r3, r7
 800247a:	aa03      	add	r2, sp, #12
 800247c:	4621      	mov	r1, r4
 800247e:	4630      	mov	r0, r6
 8002480:	f7ff fef6 	bl	8002270 <_printf_common>
 8002484:	3001      	adds	r0, #1
 8002486:	d14d      	bne.n	8002524 <_printf_i+0x1c8>
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	b005      	add	sp, #20
 800248e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002492:	4839      	ldr	r0, [pc, #228]	; (8002578 <_printf_i+0x21c>)
 8002494:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	6821      	ldr	r1, [r4, #0]
 800249c:	1d1d      	adds	r5, r3, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6015      	str	r5, [r2, #0]
 80024a2:	060a      	lsls	r2, r1, #24
 80024a4:	d50b      	bpl.n	80024be <_printf_i+0x162>
 80024a6:	07ca      	lsls	r2, r1, #31
 80024a8:	bf44      	itt	mi
 80024aa:	f041 0120 	orrmi.w	r1, r1, #32
 80024ae:	6021      	strmi	r1, [r4, #0]
 80024b0:	b91b      	cbnz	r3, 80024ba <_printf_i+0x15e>
 80024b2:	6822      	ldr	r2, [r4, #0]
 80024b4:	f022 0220 	bic.w	r2, r2, #32
 80024b8:	6022      	str	r2, [r4, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	e7b7      	b.n	800242e <_printf_i+0xd2>
 80024be:	064d      	lsls	r5, r1, #25
 80024c0:	bf48      	it	mi
 80024c2:	b29b      	uxthmi	r3, r3
 80024c4:	e7ef      	b.n	80024a6 <_printf_i+0x14a>
 80024c6:	4665      	mov	r5, ip
 80024c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80024cc:	fb02 3311 	mls	r3, r2, r1, r3
 80024d0:	5cc3      	ldrb	r3, [r0, r3]
 80024d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80024d6:	460b      	mov	r3, r1
 80024d8:	2900      	cmp	r1, #0
 80024da:	d1f5      	bne.n	80024c8 <_printf_i+0x16c>
 80024dc:	e7b9      	b.n	8002452 <_printf_i+0xf6>
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	6825      	ldr	r5, [r4, #0]
 80024e2:	1d18      	adds	r0, r3, #4
 80024e4:	6961      	ldr	r1, [r4, #20]
 80024e6:	6010      	str	r0, [r2, #0]
 80024e8:	0628      	lsls	r0, r5, #24
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	d501      	bpl.n	80024f2 <_printf_i+0x196>
 80024ee:	6019      	str	r1, [r3, #0]
 80024f0:	e002      	b.n	80024f8 <_printf_i+0x19c>
 80024f2:	066a      	lsls	r2, r5, #25
 80024f4:	d5fb      	bpl.n	80024ee <_printf_i+0x192>
 80024f6:	8019      	strh	r1, [r3, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	4665      	mov	r5, ip
 80024fc:	6123      	str	r3, [r4, #16]
 80024fe:	e7b9      	b.n	8002474 <_printf_i+0x118>
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	1d19      	adds	r1, r3, #4
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	681d      	ldr	r5, [r3, #0]
 8002508:	6862      	ldr	r2, [r4, #4]
 800250a:	2100      	movs	r1, #0
 800250c:	4628      	mov	r0, r5
 800250e:	f000 f837 	bl	8002580 <memchr>
 8002512:	b108      	cbz	r0, 8002518 <_printf_i+0x1bc>
 8002514:	1b40      	subs	r0, r0, r5
 8002516:	6060      	str	r0, [r4, #4]
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	6123      	str	r3, [r4, #16]
 800251c:	2300      	movs	r3, #0
 800251e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002522:	e7a7      	b.n	8002474 <_printf_i+0x118>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	462a      	mov	r2, r5
 8002528:	4639      	mov	r1, r7
 800252a:	4630      	mov	r0, r6
 800252c:	47c0      	blx	r8
 800252e:	3001      	adds	r0, #1
 8002530:	d0aa      	beq.n	8002488 <_printf_i+0x12c>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	079b      	lsls	r3, r3, #30
 8002536:	d413      	bmi.n	8002560 <_printf_i+0x204>
 8002538:	68e0      	ldr	r0, [r4, #12]
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	4298      	cmp	r0, r3
 800253e:	bfb8      	it	lt
 8002540:	4618      	movlt	r0, r3
 8002542:	e7a3      	b.n	800248c <_printf_i+0x130>
 8002544:	2301      	movs	r3, #1
 8002546:	464a      	mov	r2, r9
 8002548:	4639      	mov	r1, r7
 800254a:	4630      	mov	r0, r6
 800254c:	47c0      	blx	r8
 800254e:	3001      	adds	r0, #1
 8002550:	d09a      	beq.n	8002488 <_printf_i+0x12c>
 8002552:	3501      	adds	r5, #1
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	9a03      	ldr	r2, [sp, #12]
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	42ab      	cmp	r3, r5
 800255c:	dcf2      	bgt.n	8002544 <_printf_i+0x1e8>
 800255e:	e7eb      	b.n	8002538 <_printf_i+0x1dc>
 8002560:	2500      	movs	r5, #0
 8002562:	f104 0919 	add.w	r9, r4, #25
 8002566:	e7f5      	b.n	8002554 <_printf_i+0x1f8>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ac      	bne.n	80024c6 <_printf_i+0x16a>
 800256c:	7803      	ldrb	r3, [r0, #0]
 800256e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002576:	e76c      	b.n	8002452 <_printf_i+0xf6>
 8002578:	08002819 	.word	0x08002819
 800257c:	0800282a 	.word	0x0800282a

08002580 <memchr>:
 8002580:	b510      	push	{r4, lr}
 8002582:	b2c9      	uxtb	r1, r1
 8002584:	4402      	add	r2, r0
 8002586:	4290      	cmp	r0, r2
 8002588:	4603      	mov	r3, r0
 800258a:	d101      	bne.n	8002590 <memchr+0x10>
 800258c:	2300      	movs	r3, #0
 800258e:	e003      	b.n	8002598 <memchr+0x18>
 8002590:	781c      	ldrb	r4, [r3, #0]
 8002592:	3001      	adds	r0, #1
 8002594:	428c      	cmp	r4, r1
 8002596:	d1f6      	bne.n	8002586 <memchr+0x6>
 8002598:	4618      	mov	r0, r3
 800259a:	bd10      	pop	{r4, pc}

0800259c <memcpy>:
 800259c:	b510      	push	{r4, lr}
 800259e:	1e43      	subs	r3, r0, #1
 80025a0:	440a      	add	r2, r1
 80025a2:	4291      	cmp	r1, r2
 80025a4:	d100      	bne.n	80025a8 <memcpy+0xc>
 80025a6:	bd10      	pop	{r4, pc}
 80025a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025b0:	e7f7      	b.n	80025a2 <memcpy+0x6>

080025b2 <memmove>:
 80025b2:	4288      	cmp	r0, r1
 80025b4:	b510      	push	{r4, lr}
 80025b6:	eb01 0302 	add.w	r3, r1, r2
 80025ba:	d807      	bhi.n	80025cc <memmove+0x1a>
 80025bc:	1e42      	subs	r2, r0, #1
 80025be:	4299      	cmp	r1, r3
 80025c0:	d00a      	beq.n	80025d8 <memmove+0x26>
 80025c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80025ca:	e7f8      	b.n	80025be <memmove+0xc>
 80025cc:	4283      	cmp	r3, r0
 80025ce:	d9f5      	bls.n	80025bc <memmove+0xa>
 80025d0:	1881      	adds	r1, r0, r2
 80025d2:	1ad2      	subs	r2, r2, r3
 80025d4:	42d3      	cmn	r3, r2
 80025d6:	d100      	bne.n	80025da <memmove+0x28>
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80025e2:	e7f7      	b.n	80025d4 <memmove+0x22>

080025e4 <_free_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4605      	mov	r5, r0
 80025e8:	2900      	cmp	r1, #0
 80025ea:	d043      	beq.n	8002674 <_free_r+0x90>
 80025ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025f0:	1f0c      	subs	r4, r1, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bfb8      	it	lt
 80025f6:	18e4      	addlt	r4, r4, r3
 80025f8:	f000 f8d0 	bl	800279c <__malloc_lock>
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <_free_r+0x94>)
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	4610      	mov	r0, r2
 8002602:	b933      	cbnz	r3, 8002612 <_free_r+0x2e>
 8002604:	6063      	str	r3, [r4, #4]
 8002606:	6014      	str	r4, [r2, #0]
 8002608:	4628      	mov	r0, r5
 800260a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800260e:	f000 b8c6 	b.w	800279e <__malloc_unlock>
 8002612:	42a3      	cmp	r3, r4
 8002614:	d90b      	bls.n	800262e <_free_r+0x4a>
 8002616:	6821      	ldr	r1, [r4, #0]
 8002618:	1862      	adds	r2, r4, r1
 800261a:	4293      	cmp	r3, r2
 800261c:	bf01      	itttt	eq
 800261e:	681a      	ldreq	r2, [r3, #0]
 8002620:	685b      	ldreq	r3, [r3, #4]
 8002622:	1852      	addeq	r2, r2, r1
 8002624:	6022      	streq	r2, [r4, #0]
 8002626:	6063      	str	r3, [r4, #4]
 8002628:	6004      	str	r4, [r0, #0]
 800262a:	e7ed      	b.n	8002608 <_free_r+0x24>
 800262c:	4613      	mov	r3, r2
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	b10a      	cbz	r2, 8002636 <_free_r+0x52>
 8002632:	42a2      	cmp	r2, r4
 8002634:	d9fa      	bls.n	800262c <_free_r+0x48>
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	1858      	adds	r0, r3, r1
 800263a:	42a0      	cmp	r0, r4
 800263c:	d10b      	bne.n	8002656 <_free_r+0x72>
 800263e:	6820      	ldr	r0, [r4, #0]
 8002640:	4401      	add	r1, r0
 8002642:	1858      	adds	r0, r3, r1
 8002644:	4282      	cmp	r2, r0
 8002646:	6019      	str	r1, [r3, #0]
 8002648:	d1de      	bne.n	8002608 <_free_r+0x24>
 800264a:	6810      	ldr	r0, [r2, #0]
 800264c:	6852      	ldr	r2, [r2, #4]
 800264e:	4401      	add	r1, r0
 8002650:	6019      	str	r1, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	e7d8      	b.n	8002608 <_free_r+0x24>
 8002656:	d902      	bls.n	800265e <_free_r+0x7a>
 8002658:	230c      	movs	r3, #12
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	e7d4      	b.n	8002608 <_free_r+0x24>
 800265e:	6820      	ldr	r0, [r4, #0]
 8002660:	1821      	adds	r1, r4, r0
 8002662:	428a      	cmp	r2, r1
 8002664:	bf01      	itttt	eq
 8002666:	6811      	ldreq	r1, [r2, #0]
 8002668:	6852      	ldreq	r2, [r2, #4]
 800266a:	1809      	addeq	r1, r1, r0
 800266c:	6021      	streq	r1, [r4, #0]
 800266e:	6062      	str	r2, [r4, #4]
 8002670:	605c      	str	r4, [r3, #4]
 8002672:	e7c9      	b.n	8002608 <_free_r+0x24>
 8002674:	bd38      	pop	{r3, r4, r5, pc}
 8002676:	bf00      	nop
 8002678:	20000090 	.word	0x20000090

0800267c <_malloc_r>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	1ccd      	adds	r5, r1, #3
 8002680:	f025 0503 	bic.w	r5, r5, #3
 8002684:	3508      	adds	r5, #8
 8002686:	2d0c      	cmp	r5, #12
 8002688:	bf38      	it	cc
 800268a:	250c      	movcc	r5, #12
 800268c:	2d00      	cmp	r5, #0
 800268e:	4606      	mov	r6, r0
 8002690:	db01      	blt.n	8002696 <_malloc_r+0x1a>
 8002692:	42a9      	cmp	r1, r5
 8002694:	d903      	bls.n	800269e <_malloc_r+0x22>
 8002696:	230c      	movs	r3, #12
 8002698:	6033      	str	r3, [r6, #0]
 800269a:	2000      	movs	r0, #0
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	f000 f87d 	bl	800279c <__malloc_lock>
 80026a2:	4a21      	ldr	r2, [pc, #132]	; (8002728 <_malloc_r+0xac>)
 80026a4:	6814      	ldr	r4, [r2, #0]
 80026a6:	4621      	mov	r1, r4
 80026a8:	b991      	cbnz	r1, 80026d0 <_malloc_r+0x54>
 80026aa:	4c20      	ldr	r4, [pc, #128]	; (800272c <_malloc_r+0xb0>)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	b91b      	cbnz	r3, 80026b8 <_malloc_r+0x3c>
 80026b0:	4630      	mov	r0, r6
 80026b2:	f000 f863 	bl	800277c <_sbrk_r>
 80026b6:	6020      	str	r0, [r4, #0]
 80026b8:	4629      	mov	r1, r5
 80026ba:	4630      	mov	r0, r6
 80026bc:	f000 f85e 	bl	800277c <_sbrk_r>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d124      	bne.n	800270e <_malloc_r+0x92>
 80026c4:	230c      	movs	r3, #12
 80026c6:	4630      	mov	r0, r6
 80026c8:	6033      	str	r3, [r6, #0]
 80026ca:	f000 f868 	bl	800279e <__malloc_unlock>
 80026ce:	e7e4      	b.n	800269a <_malloc_r+0x1e>
 80026d0:	680b      	ldr	r3, [r1, #0]
 80026d2:	1b5b      	subs	r3, r3, r5
 80026d4:	d418      	bmi.n	8002708 <_malloc_r+0x8c>
 80026d6:	2b0b      	cmp	r3, #11
 80026d8:	d90f      	bls.n	80026fa <_malloc_r+0x7e>
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	18cc      	adds	r4, r1, r3
 80026de:	50cd      	str	r5, [r1, r3]
 80026e0:	4630      	mov	r0, r6
 80026e2:	f000 f85c 	bl	800279e <__malloc_unlock>
 80026e6:	f104 000b 	add.w	r0, r4, #11
 80026ea:	1d23      	adds	r3, r4, #4
 80026ec:	f020 0007 	bic.w	r0, r0, #7
 80026f0:	1ac3      	subs	r3, r0, r3
 80026f2:	d0d3      	beq.n	800269c <_malloc_r+0x20>
 80026f4:	425a      	negs	r2, r3
 80026f6:	50e2      	str	r2, [r4, r3]
 80026f8:	e7d0      	b.n	800269c <_malloc_r+0x20>
 80026fa:	684b      	ldr	r3, [r1, #4]
 80026fc:	428c      	cmp	r4, r1
 80026fe:	bf16      	itet	ne
 8002700:	6063      	strne	r3, [r4, #4]
 8002702:	6013      	streq	r3, [r2, #0]
 8002704:	460c      	movne	r4, r1
 8002706:	e7eb      	b.n	80026e0 <_malloc_r+0x64>
 8002708:	460c      	mov	r4, r1
 800270a:	6849      	ldr	r1, [r1, #4]
 800270c:	e7cc      	b.n	80026a8 <_malloc_r+0x2c>
 800270e:	1cc4      	adds	r4, r0, #3
 8002710:	f024 0403 	bic.w	r4, r4, #3
 8002714:	42a0      	cmp	r0, r4
 8002716:	d005      	beq.n	8002724 <_malloc_r+0xa8>
 8002718:	1a21      	subs	r1, r4, r0
 800271a:	4630      	mov	r0, r6
 800271c:	f000 f82e 	bl	800277c <_sbrk_r>
 8002720:	3001      	adds	r0, #1
 8002722:	d0cf      	beq.n	80026c4 <_malloc_r+0x48>
 8002724:	6025      	str	r5, [r4, #0]
 8002726:	e7db      	b.n	80026e0 <_malloc_r+0x64>
 8002728:	20000090 	.word	0x20000090
 800272c:	20000094 	.word	0x20000094

08002730 <_realloc_r>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	4607      	mov	r7, r0
 8002734:	4614      	mov	r4, r2
 8002736:	460e      	mov	r6, r1
 8002738:	b921      	cbnz	r1, 8002744 <_realloc_r+0x14>
 800273a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800273e:	4611      	mov	r1, r2
 8002740:	f7ff bf9c 	b.w	800267c <_malloc_r>
 8002744:	b922      	cbnz	r2, 8002750 <_realloc_r+0x20>
 8002746:	f7ff ff4d 	bl	80025e4 <_free_r>
 800274a:	4625      	mov	r5, r4
 800274c:	4628      	mov	r0, r5
 800274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002750:	f000 f826 	bl	80027a0 <_malloc_usable_size_r>
 8002754:	42a0      	cmp	r0, r4
 8002756:	d20f      	bcs.n	8002778 <_realloc_r+0x48>
 8002758:	4621      	mov	r1, r4
 800275a:	4638      	mov	r0, r7
 800275c:	f7ff ff8e 	bl	800267c <_malloc_r>
 8002760:	4605      	mov	r5, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	d0f2      	beq.n	800274c <_realloc_r+0x1c>
 8002766:	4631      	mov	r1, r6
 8002768:	4622      	mov	r2, r4
 800276a:	f7ff ff17 	bl	800259c <memcpy>
 800276e:	4631      	mov	r1, r6
 8002770:	4638      	mov	r0, r7
 8002772:	f7ff ff37 	bl	80025e4 <_free_r>
 8002776:	e7e9      	b.n	800274c <_realloc_r+0x1c>
 8002778:	4635      	mov	r5, r6
 800277a:	e7e7      	b.n	800274c <_realloc_r+0x1c>

0800277c <_sbrk_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	2300      	movs	r3, #0
 8002780:	4c05      	ldr	r4, [pc, #20]	; (8002798 <_sbrk_r+0x1c>)
 8002782:	4605      	mov	r5, r0
 8002784:	4608      	mov	r0, r1
 8002786:	6023      	str	r3, [r4, #0]
 8002788:	f7fd ff3a 	bl	8000600 <_sbrk>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_sbrk_r+0x1a>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	b103      	cbz	r3, 8002796 <_sbrk_r+0x1a>
 8002794:	602b      	str	r3, [r5, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	20000128 	.word	0x20000128

0800279c <__malloc_lock>:
 800279c:	4770      	bx	lr

0800279e <__malloc_unlock>:
 800279e:	4770      	bx	lr

080027a0 <_malloc_usable_size_r>:
 80027a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a4:	1f18      	subs	r0, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bfbc      	itt	lt
 80027aa:	580b      	ldrlt	r3, [r1, r0]
 80027ac:	18c0      	addlt	r0, r0, r3
 80027ae:	4770      	bx	lr

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
