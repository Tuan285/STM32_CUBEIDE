
ENCODER_ROTARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800298c  0800298c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800298c  0800298c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800298c  0800298c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08002a04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002a04  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc10  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001924  00000000  00000000  0002bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d8a  00000000  00000000  0002ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c20b  00000000  00000000  000459a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882ab  00000000  00000000  00051bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ec  00000000  00000000  000d9ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002900 	.word	0x08002900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002900 	.word	0x08002900

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t message_rec[50] = { '\0' };
 8000152:	2300      	movs	r3, #0
 8000154:	637b      	str	r3, [r7, #52]	; 0x34
 8000156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800015a:	222e      	movs	r2, #46	; 0x2e
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f001 ff4c 	bl	8001ffc <memset>
	uint8_t message_send[50] = { '\0' };
 8000164:	2300      	movs	r3, #0
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	222e      	movs	r2, #46	; 0x2e
 800016c:	2100      	movs	r1, #0
 800016e:	4618      	mov	r0, r3
 8000170:	f001 ff44 	bl	8001ffc <memset>
	uint8_t value = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800017a:	f000 faa9 	bl	80006d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800017e:	f000 f83b 	bl	80001f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000182:	f000 f8fd 	bl	8000380 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000186:	f000 f87d 	bl	8000284 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800018a:	f000 f8cf 	bl	800032c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800018e:	213c      	movs	r1, #60	; 0x3c
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <main+0xa0>)
 8000192:	f001 fa7f 	bl	8001694 <HAL_TIM_Encoder_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		value = (TIM2->CNT) >> 4;
		value = __HAL_TIM_GetCounter(&htim2) >> 2;
 8000196:	4b15      	ldr	r3, [pc, #84]	; (80001ec <main+0xa0>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800019c:	089b      	lsrs	r3, r3, #2
 800019e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (value > 10) {
 80001a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001a6:	2b0a      	cmp	r3, #10
 80001a8:	d903      	bls.n	80001b2 <main+0x66>
			//TIM2->CNT = 10;
			__HAL_TIM_SetCounter(&htim2, 0);
 80001aa:	4b10      	ldr	r3, [pc, #64]	; (80001ec <main+0xa0>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2200      	movs	r2, #0
 80001b0:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (value > 250 && value < 255) {
 80001b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001b6:	2bfa      	cmp	r3, #250	; 0xfa
 80001b8:	d907      	bls.n	80001ca <main+0x7e>
 80001ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001be:	2bff      	cmp	r3, #255	; 0xff
 80001c0:	d003      	beq.n	80001ca <main+0x7e>
			__HAL_TIM_SetCounter(&htim2, 10);
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <main+0xa0>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	220a      	movs	r2, #10
 80001c8:	625a      	str	r2, [r3, #36]	; 0x24
			//TIM2->CNT = 0;
		}
		sprintf(message_send, "xin chao x =%d\r\n", value);
 80001ca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80001ce:	463b      	mov	r3, r7
 80001d0:	4907      	ldr	r1, [pc, #28]	; (80001f0 <main+0xa4>)
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 ff1a 	bl	800200c <siprintf>
		HAL_UART_Transmit(&huart1, message_send, sizeof(message_send), 200);
 80001d8:	4639      	mov	r1, r7
 80001da:	23c8      	movs	r3, #200	; 0xc8
 80001dc:	2232      	movs	r2, #50	; 0x32
 80001de:	4805      	ldr	r0, [pc, #20]	; (80001f4 <main+0xa8>)
 80001e0:	f001 fd62 	bl	8001ca8 <HAL_UART_Transmit>
		HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	; 0x64
 80001e6:	f000 fad5 	bl	8000794 <HAL_Delay>
	while (1) {
 80001ea:	e7d4      	b.n	8000196 <main+0x4a>
 80001ec:	2000008c 	.word	0x2000008c
 80001f0:	08002918 	.word	0x08002918
 80001f4:	200000d4 	.word	0x200000d4

080001f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fef8 	bl	8001ffc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fd75 	bl	8000d30 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
		Error_Handler();
 800024c:	f000 f8e4 	bl	8000418 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ffe2 	bl	8001234 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
		Error_Handler();
 8000276:	f000 f8cf 	bl	8000418 <Error_Handler>
	}
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b08c      	sub	sp, #48	; 0x30
 8000288:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	2224      	movs	r2, #36	; 0x24
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 feb2 	bl	8001ffc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80002b4:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002c2:	4b19      	ldr	r3, [pc, #100]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002c8:	2303      	movs	r3, #3
 80002ca:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002d0:	2301      	movs	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80002d8:	230a      	movs	r3, #10
 80002da:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002e0:	2301      	movs	r3, #1
 80002e2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80002e8:	230a      	movs	r3, #10
 80002ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4619      	mov	r1, r3
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <MX_TIM2_Init+0xa4>)
 80002f4:	f001 f92c 	bl	8001550 <HAL_TIM_Encoder_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80002fe:	f000 f88b 	bl	8000418 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <MX_TIM2_Init+0xa4>)
 8000310:	f001 fc0a 	bl	8001b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800031a:	f000 f87d 	bl	8000418 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3730      	adds	r7, #48	; 0x30
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000008c 	.word	0x2000008c

0800032c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_USART1_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800033c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000364:	f001 fc50 	bl	8001c08 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800036e:	f000 f853 	bl	8000418 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000d4 	.word	0x200000d4
 800037c:	40013800 	.word	0x40013800

08000380 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_GPIO_Init+0x90>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1d      	ldr	r2, [pc, #116]	; (8000410 <MX_GPIO_Init+0x90>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_GPIO_Init+0x90>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0310 	and.w	r3, r3, #16
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_GPIO_Init+0x90>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a17      	ldr	r2, [pc, #92]	; (8000410 <MX_GPIO_Init+0x90>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_GPIO_Init+0x90>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_GPIO_Init+0x90>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <MX_GPIO_Init+0x90>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_GPIO_Init+0x90>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e2:	480c      	ldr	r0, [pc, #48]	; (8000414 <MX_GPIO_Init+0x94>)
 80003e4:	f000 fc8c 	bl	8000d00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x94>)
 8000402:	f000 faf9 	bl	80009f8 <HAL_GPIO_Init>

}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40011000 	.word	0x40011000

08000418 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004a6:	d12b      	bne.n	8000500 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a8:	4b17      	ldr	r3, [pc, #92]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a16      	ldr	r2, [pc, #88]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	61d3      	str	r3, [r2, #28]
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_TIM_Encoder_MspInit+0x80>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004d8:	2303      	movs	r3, #3
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <HAL_TIM_Encoder_MspInit+0x84>)
 80004ec:	f000 fa84 	bl	80009f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	201c      	movs	r0, #28
 80004f6:	f000 fa48 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004fa:	201c      	movs	r0, #28
 80004fc:	f000 fa61 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <HAL_UART_MspInit+0x8c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d131      	bne.n	8000594 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <HAL_UART_MspInit+0x94>)
 8000576:	f000 fa3f 	bl	80009f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_UART_MspInit+0x94>)
 8000590:	f000 fa32 	bl	80009f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013800 	.word	0x40013800
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ee:	f000 f8b5 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <TIM2_IRQHandler+0x10>)
 80005fe:	f001 f8d7 	bl	80017b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c

0800060c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <_sbrk+0x5c>)
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <_sbrk+0x60>)
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_sbrk+0x64>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <_sbrk+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	429a      	cmp	r2, r3
 800063a:	d207      	bcs.n	800064c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800063c:	f001 fcb4 	bl	8001fa8 <__errno>
 8000640:	4603      	mov	r3, r0
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e009      	b.n	8000660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <_sbrk+0x64>)
 800065c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20005000 	.word	0x20005000
 800066c:	00000400 	.word	0x00000400
 8000670:	2000011c 	.word	0x2000011c
 8000674:	20000138 	.word	0x20000138

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	; (80006c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006aa:	f7ff ffe5 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f001 fc81 	bl	8001fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fd4b 	bl	800014c <main>
  bx lr
 80006b6:	4770      	bx	lr
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006c0:	08002994 	.word	0x08002994
  ldr r2, =_sbss
 80006c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006c8:	20000134 	.word	0x20000134

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f947 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff fe9a 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f95f 	bl	80009de <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 f927 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	20000120 	.word	0x20000120

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000120 	.word	0x20000120

08000794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff fff0 	bl	8000780 <HAL_GetTick>
 80007a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d005      	beq.n	80007ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_Delay+0x44>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ba:	bf00      	nop
 80007bc:	f7ff ffe0 	bl	8000780 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f7      	bhi.n	80007bc <HAL_Delay+0x28>
  {
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <__NVIC_EnableIRQ+0x34>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff90 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff2d 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff42 	bl	8000824 <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff90 	bl	80008cc <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5f 	bl	8000878 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff35 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffa2 	bl	8000930 <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e169      	b.n	8000ce0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f040 8158 	bne.w	8000cda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a9a      	ldr	r2, [pc, #616]	; (8000c98 <HAL_GPIO_Init+0x2a0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d05e      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a34:	4a98      	ldr	r2, [pc, #608]	; (8000c98 <HAL_GPIO_Init+0x2a0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d875      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a3a:	4a98      	ldr	r2, [pc, #608]	; (8000c9c <HAL_GPIO_Init+0x2a4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d058      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a40:	4a96      	ldr	r2, [pc, #600]	; (8000c9c <HAL_GPIO_Init+0x2a4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d86f      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a46:	4a96      	ldr	r2, [pc, #600]	; (8000ca0 <HAL_GPIO_Init+0x2a8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d052      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a94      	ldr	r2, [pc, #592]	; (8000ca0 <HAL_GPIO_Init+0x2a8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d869      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a52:	4a94      	ldr	r2, [pc, #592]	; (8000ca4 <HAL_GPIO_Init+0x2ac>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d04c      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a58:	4a92      	ldr	r2, [pc, #584]	; (8000ca4 <HAL_GPIO_Init+0x2ac>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d863      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a5e:	4a92      	ldr	r2, [pc, #584]	; (8000ca8 <HAL_GPIO_Init+0x2b0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d046      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a64:	4a90      	ldr	r2, [pc, #576]	; (8000ca8 <HAL_GPIO_Init+0x2b0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d85d      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d82a      	bhi.n	8000ac4 <HAL_GPIO_Init+0xcc>
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d859      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a72:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <HAL_GPIO_Init+0x80>)
 8000a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a78:	08000af3 	.word	0x08000af3
 8000a7c:	08000acd 	.word	0x08000acd
 8000a80:	08000adf 	.word	0x08000adf
 8000a84:	08000b21 	.word	0x08000b21
 8000a88:	08000b27 	.word	0x08000b27
 8000a8c:	08000b27 	.word	0x08000b27
 8000a90:	08000b27 	.word	0x08000b27
 8000a94:	08000b27 	.word	0x08000b27
 8000a98:	08000b27 	.word	0x08000b27
 8000a9c:	08000b27 	.word	0x08000b27
 8000aa0:	08000b27 	.word	0x08000b27
 8000aa4:	08000b27 	.word	0x08000b27
 8000aa8:	08000b27 	.word	0x08000b27
 8000aac:	08000b27 	.word	0x08000b27
 8000ab0:	08000b27 	.word	0x08000b27
 8000ab4:	08000b27 	.word	0x08000b27
 8000ab8:	08000b27 	.word	0x08000b27
 8000abc:	08000ad5 	.word	0x08000ad5
 8000ac0:	08000ae9 	.word	0x08000ae9
 8000ac4:	4a79      	ldr	r2, [pc, #484]	; (8000cac <HAL_GPIO_Init+0x2b4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aca:	e02c      	b.n	8000b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e029      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	e024      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e01f      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	330c      	adds	r3, #12
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e01a      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000afa:	2304      	movs	r3, #4
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e013      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d105      	bne.n	8000b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	611a      	str	r2, [r3, #16]
          break;
 8000b12:	e009      	b.n	8000b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b14:	2308      	movs	r3, #8
 8000b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	615a      	str	r2, [r3, #20]
          break;
 8000b1e:	e003      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	e000      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          break;
 8000b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d801      	bhi.n	8000b32 <HAL_GPIO_Init+0x13a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	e001      	b.n	8000b36 <HAL_GPIO_Init+0x13e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d802      	bhi.n	8000b44 <HAL_GPIO_Init+0x14c>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	3b08      	subs	r3, #8
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	210f      	movs	r1, #15
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	6a39      	ldr	r1, [r7, #32]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 80b1 	beq.w	8000cda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b78:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b90:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <HAL_GPIO_Init+0x2bc>)
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a40      	ldr	r2, [pc, #256]	; (8000cb8 <HAL_GPIO_Init+0x2c0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d013      	beq.n	8000be4 <HAL_GPIO_Init+0x1ec>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <HAL_GPIO_Init+0x2c4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00d      	beq.n	8000be0 <HAL_GPIO_Init+0x1e8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3e      	ldr	r2, [pc, #248]	; (8000cc0 <HAL_GPIO_Init+0x2c8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <HAL_GPIO_Init+0x1e4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <HAL_GPIO_Init+0x2cc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d101      	bne.n	8000bd8 <HAL_GPIO_Init+0x1e0>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e006      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e004      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be4:	2300      	movs	r3, #0
 8000be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be8:	f002 0203 	and.w	r2, r2, #3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf6:	492f      	ldr	r1, [pc, #188]	; (8000cb4 <HAL_GPIO_Init+0x2bc>)
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	492c      	ldr	r1, [pc, #176]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	608b      	str	r3, [r1, #8]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60cb      	str	r3, [r1, #12]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4918      	ldr	r1, [pc, #96]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
 8000c6c:	e006      	b.n	8000c7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d021      	beq.n	8000ccc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e021      	b.n	8000cda <HAL_GPIO_Init+0x2e2>
 8000c96:	bf00      	nop
 8000c98:	10320000 	.word	0x10320000
 8000c9c:	10310000 	.word	0x10310000
 8000ca0:	10220000 	.word	0x10220000
 8000ca4:	10210000 	.word	0x10210000
 8000ca8:	10120000 	.word	0x10120000
 8000cac:	10110000 	.word	0x10110000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_GPIO_Init+0x304>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4909      	ldr	r1, [pc, #36]	; (8000cfc <HAL_GPIO_Init+0x304>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	3301      	adds	r3, #1
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f ae8e 	bne.w	8000a0c <HAL_GPIO_Init+0x14>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	372c      	adds	r7, #44	; 0x2c
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d1c:	e003      	b.n	8000d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	611a      	str	r2, [r3, #16]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e272      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8087 	beq.w	8000e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	4b92      	ldr	r3, [pc, #584]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d00c      	beq.n	8000d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d112      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
 8000d68:	4b8c      	ldr	r3, [pc, #560]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d10b      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d76:	4b89      	ldr	r3, [pc, #548]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d06c      	beq.n	8000e5c <HAL_RCC_OscConfig+0x12c>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d168      	bne.n	8000e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e24c      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d96:	d106      	bne.n	8000da6 <HAL_RCC_OscConfig+0x76>
 8000d98:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a7f      	ldr	r2, [pc, #508]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e02e      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x98>
 8000dae:	4b7b      	ldr	r3, [pc, #492]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7a      	ldr	r2, [pc, #488]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e01d      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0xbc>
 8000dd2:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a71      	ldr	r2, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6e      	ldr	r2, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e00b      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6a      	ldr	r2, [pc, #424]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a67      	ldr	r2, [pc, #412]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d013      	beq.n	8000e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fcb8 	bl	8000780 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fcb4 	bl	8000780 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e200      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0xe4>
 8000e32:	e014      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fca4 	bl	8000780 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fca0 	bl	8000780 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1ec      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x10c>
 8000e5a:	e000      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d063      	beq.n	8000f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e76:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d11c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
 8000e82:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e1c0      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4939      	ldr	r1, [pc, #228]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	e03a      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d020      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc59 	bl	8000780 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fc55 	bl	8000780 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e1a1      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4927      	ldr	r1, [pc, #156]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc38 	bl	8000780 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc34 	bl	8000780 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e180      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d03a      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d019      	beq.n	8000f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fc18 	bl	8000780 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fc14 	bl	8000780 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e160      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 face 	bl	8001514 <RCC_Delay>
 8000f78:	e01c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fbfe 	bl	8000780 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f86:	e00f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbfa 	bl	8000780 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d908      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e146      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	42420000 	.word	0x42420000
 8000fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa8:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e9      	bne.n	8000f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a6 	beq.w	800110e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10d      	bne.n	8000fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a87      	ldr	r2, [pc, #540]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7e      	ldr	r2, [pc, #504]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001006:	f7ff fbbb 	bl	8000780 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fbb7 	bl	8000780 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	; 0x64
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e103      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x312>
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e02d      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x334>
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a69      	ldr	r2, [pc, #420]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a66      	ldr	r2, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	e01c      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b05      	cmp	r3, #5
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x356>
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6213      	str	r3, [r2, #32]
 8001084:	e00b      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d015      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb6b 	bl	8000780 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff fb67 	bl	8000780 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0b1      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0ee      	beq.n	80010ae <HAL_RCC_OscConfig+0x37e>
 80010d0:	e014      	b.n	80010fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fb55 	bl	8000780 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fb51 	bl	8000780 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e09b      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ee      	bne.n	80010da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d105      	bne.n	800110e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a3b      	ldr	r2, [pc, #236]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8087 	beq.w	8001226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d061      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d146      	bne.n	80011ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb25 	bl	8000780 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff fb21 	bl	8000780 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e06d      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d108      	bne.n	8001174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4921      	ldr	r1, [pc, #132]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a19      	ldr	r1, [r3, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	430b      	orrs	r3, r1
 8001186:	491b      	ldr	r1, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff faf5 	bl	8000780 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff faf1 	bl	8000780 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e03d      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x46a>
 80011b8:	e035      	b.n	8001226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fade 	bl	8000780 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fada 	bl	8000780 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e026      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x498>
 80011e6:	e01e      	b.n	8001226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d107      	bne.n	8001200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e019      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40007000 	.word	0x40007000
 80011fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x500>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	429a      	cmp	r2, r3
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0d0      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d910      	bls.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 0207 	bic.w	r2, r3, #7
 800125e:	4965      	ldr	r1, [pc, #404]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0b8      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	494d      	ldr	r1, [pc, #308]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d040      	beq.n	8001354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d115      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e07f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e073      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06b      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f023 0203 	bic.w	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4936      	ldr	r1, [pc, #216]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001324:	f7ff fa2c 	bl	8000780 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	e00a      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff fa28 	bl	8000780 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e053      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 020c 	and.w	r2, r3, #12
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	429a      	cmp	r2, r3
 8001352:	d1eb      	bne.n	800132c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d210      	bcs.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e032      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4916      	ldr	r1, [pc, #88]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c2:	f000 f821 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	490a      	ldr	r1, [pc, #40]	; (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	5ccb      	ldrb	r3, [r1, r3]
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_RCC_ClockConfig+0x1cc>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1d0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f98a 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	0800292c 	.word	0x0800292c
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_GetSysClockFreq+0x94>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b04      	cmp	r3, #4
 8001430:	d002      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x30>
 8001432:	2b08      	cmp	r3, #8
 8001434:	d003      	beq.n	800143e <HAL_RCC_GetSysClockFreq+0x36>
 8001436:	e027      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800143a:	613b      	str	r3, [r7, #16]
      break;
 800143c:	e027      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d010      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_RCC_GetSysClockFreq+0x94>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0c5b      	lsrs	r3, r3, #17
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800146a:	fb03 f202 	mul.w	r2, r3, r2
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e004      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	613b      	str	r3, [r7, #16]
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800148a:	613b      	str	r3, [r7, #16]
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	693b      	ldr	r3, [r7, #16]
}
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	007a1200 	.word	0x007a1200
 80014a4:	08002944 	.word	0x08002944
 80014a8:	08002954 	.word	0x08002954
 80014ac:	003d0900 	.word	0x003d0900

080014b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c8:	f7ff fff2 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	; (80014e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	0800293c 	.word	0x0800293c

080014ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014f0:	f7ff ffde 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	0adb      	lsrs	r3, r3, #11
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	4903      	ldr	r1, [pc, #12]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001502:	5ccb      	ldrb	r3, [r1, r3]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	0800293c 	.word	0x0800293c

08001514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <RCC_Delay+0x34>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <RCC_Delay+0x38>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0a5b      	lsrs	r3, r3, #9
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001530:	bf00      	nop
  }
  while (Delay --);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	60fa      	str	r2, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f9      	bne.n	8001530 <RCC_Delay+0x1c>
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000000 	.word	0x20000000
 800154c:	10624dd3 	.word	0x10624dd3

08001550 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e093      	b.n	800168c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7fe ff85 	bl	8000488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001594:	f023 0307 	bic.w	r3, r3, #7
 8001598:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3304      	adds	r3, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f000 fa39 	bl	8001a1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	4313      	orrs	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015f0:	f023 030c 	bic.w	r3, r3, #12
 80015f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80015fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4313      	orrs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	011a      	lsls	r2, r3, #4
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	031b      	lsls	r3, r3, #12
 8001620:	4313      	orrs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800162e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4313      	orrs	r3, r2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80016bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d110      	bne.n	80016e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80016ca:	7b7b      	ldrb	r3, [r7, #13]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d001      	beq.n	80016d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e069      	b.n	80017a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e4:	e031      	b.n	800174a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d110      	bne.n	800170e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d001      	beq.n	80016fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e055      	b.n	80017a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800170c:	e01d      	b.n	800174a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800171a:	7b7b      	ldrb	r3, [r7, #13]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001720:	7b3b      	ldrb	r3, [r7, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e03e      	b.n	80017a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2202      	movs	r2, #2
 800172e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_TIM_Encoder_Start+0xc4>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d008      	beq.n	8001768 <HAL_TIM_Encoder_Start+0xd4>
 8001756:	e00f      	b.n	8001778 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f9bd 	bl	8001ae0 <TIM_CCxChannelCmd>
      break;
 8001766:	e016      	b.n	8001796 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	2104      	movs	r1, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f9b5 	bl	8001ae0 <TIM_CCxChannelCmd>
      break;
 8001776:	e00e      	b.n	8001796 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f9ad 	bl	8001ae0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	2104      	movs	r1, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f9a6 	bl	8001ae0 <TIM_CCxChannelCmd>
      break;
 8001794:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d122      	bne.n	800180c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d11b      	bne.n	800180c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0202 	mvn.w	r2, #2
 80017dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8f6 	bl	80019e4 <HAL_TIM_IC_CaptureCallback>
 80017f8:	e005      	b.n	8001806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8e9 	bl	80019d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8f8 	bl	80019f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b04      	cmp	r3, #4
 8001818:	d122      	bne.n	8001860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b04      	cmp	r3, #4
 8001826:	d11b      	bne.n	8001860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0204 	mvn.w	r2, #4
 8001830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8cc 	bl	80019e4 <HAL_TIM_IC_CaptureCallback>
 800184c:	e005      	b.n	800185a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f8bf 	bl	80019d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8ce 	bl	80019f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b08      	cmp	r3, #8
 800186c:	d122      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d11b      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0208 	mvn.w	r2, #8
 8001884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8a2 	bl	80019e4 <HAL_TIM_IC_CaptureCallback>
 80018a0:	e005      	b.n	80018ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f895 	bl	80019d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f8a4 	bl	80019f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d122      	bne.n	8001908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d11b      	bne.n	8001908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0210 	mvn.w	r2, #16
 80018d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2208      	movs	r2, #8
 80018de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f878 	bl	80019e4 <HAL_TIM_IC_CaptureCallback>
 80018f4:	e005      	b.n	8001902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f86b 	bl	80019d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f87a 	bl	80019f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d10e      	bne.n	8001934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0201 	mvn.w	r2, #1
 800192c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f846 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	2b80      	cmp	r3, #128	; 0x80
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d107      	bne.n	8001960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f94b 	bl	8001bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d10e      	bne.n	800198c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d107      	bne.n	800198c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f83e 	bl	8001a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	2b20      	cmp	r3, #32
 8001998:	d10e      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d107      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0220 	mvn.w	r2, #32
 80019b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f916 	bl	8001be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a29      	ldr	r2, [pc, #164]	; (8001ad4 <TIM_Base_SetConfig+0xb8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00b      	beq.n	8001a4c <TIM_Base_SetConfig+0x30>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3a:	d007      	beq.n	8001a4c <TIM_Base_SetConfig+0x30>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <TIM_Base_SetConfig+0xbc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d003      	beq.n	8001a4c <TIM_Base_SetConfig+0x30>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a25      	ldr	r2, [pc, #148]	; (8001adc <TIM_Base_SetConfig+0xc0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <TIM_Base_SetConfig+0xb8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00b      	beq.n	8001a7e <TIM_Base_SetConfig+0x62>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d007      	beq.n	8001a7e <TIM_Base_SetConfig+0x62>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <TIM_Base_SetConfig+0xbc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d003      	beq.n	8001a7e <TIM_Base_SetConfig+0x62>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <TIM_Base_SetConfig+0xc0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d108      	bne.n	8001a90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <TIM_Base_SetConfig+0xb8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d103      	bne.n	8001ac4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	615a      	str	r2, [r3, #20]
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800

08001ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2201      	movs	r2, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	621a      	str	r2, [r3, #32]
}
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e046      	b.n	8001bce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d009      	beq.n	8001ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d004      	beq.n	8001ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10c      	bne.n	8001bbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800

08001be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e042      	b.n	8001ca0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fc6e 	bl	8000510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f91d 	bl	8001e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d16d      	bne.n	8001da4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_UART_Transmit+0x2c>
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e066      	b.n	8001da6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2221      	movs	r2, #33	; 0x21
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce6:	f7fe fd4b 	bl	8000780 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d108      	bne.n	8001d14 <HAL_UART_Transmit+0x6c>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	e003      	b.n	8001d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d1c:	e02a      	b.n	8001d74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f840 	bl	8001dae <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e036      	b.n	8001da6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3302      	adds	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e007      	b.n	8001d66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1cf      	bne.n	8001d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f810 	bl	8001dae <UART_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b090      	sub	sp, #64	; 0x40
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dbe:	e050      	b.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d04c      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <UART_WaitOnFlagUntilTimeout+0x30>
 8001dce:	f7fe fcd7 	bl	8000780 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d241      	bcs.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	e853 3f00 	ldrex	r3, [r3]
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	330c      	adds	r3, #12
 8001dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfe:	637a      	str	r2, [r7, #52]	; 0x34
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e06:	e841 2300 	strex	r3, r2, [r1]
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e5      	bne.n	8001dde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3314      	adds	r3, #20
 8001e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	e853 3f00 	ldrex	r3, [r3]
 8001e20:	613b      	str	r3, [r7, #16]
   return(result);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3314      	adds	r3, #20
 8001e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e32:	623a      	str	r2, [r7, #32]
 8001e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e36:	69f9      	ldr	r1, [r7, #28]
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	e841 2300 	strex	r3, r2, [r1]
 8001e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e5      	bne.n	8001e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e00f      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d09f      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3740      	adds	r7, #64	; 0x40
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ec6:	f023 030c 	bic.w	r3, r3, #12
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <UART_SetConfig+0x114>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d103      	bne.n	8001efc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ef4:	f7ff fafa 	bl	80014ec <HAL_RCC_GetPCLK2Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	e002      	b.n	8001f02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001efc:	f7ff fae2 	bl	80014c4 <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009a      	lsls	r2, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <UART_SetConfig+0x118>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	0119      	lsls	r1, r3, #4
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	009a      	lsls	r2, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <UART_SetConfig+0x118>)
 8001f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	fb00 f303 	mul.w	r3, r0, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	3332      	adds	r3, #50	; 0x32
 8001f4c:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <UART_SetConfig+0x118>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	4419      	add	r1, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <UART_SetConfig+0x118>)
 8001f72:	fba3 0302 	umull	r0, r3, r3, r2
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <UART_SetConfig+0x118>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	f003 020f 	and.w	r2, r3, #15
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	440a      	add	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	51eb851f 	.word	0x51eb851f

08001fa8 <__errno>:
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <__errno+0x8>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <__libc_init_array>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	2600      	movs	r6, #0
 8001fb8:	4d0c      	ldr	r5, [pc, #48]	; (8001fec <__libc_init_array+0x38>)
 8001fba:	4c0d      	ldr	r4, [pc, #52]	; (8001ff0 <__libc_init_array+0x3c>)
 8001fbc:	1b64      	subs	r4, r4, r5
 8001fbe:	10a4      	asrs	r4, r4, #2
 8001fc0:	42a6      	cmp	r6, r4
 8001fc2:	d109      	bne.n	8001fd8 <__libc_init_array+0x24>
 8001fc4:	f000 fc9c 	bl	8002900 <_init>
 8001fc8:	2600      	movs	r6, #0
 8001fca:	4d0a      	ldr	r5, [pc, #40]	; (8001ff4 <__libc_init_array+0x40>)
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	; (8001ff8 <__libc_init_array+0x44>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	42a6      	cmp	r6, r4
 8001fd4:	d105      	bne.n	8001fe2 <__libc_init_array+0x2e>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fdc:	4798      	blx	r3
 8001fde:	3601      	adds	r6, #1
 8001fe0:	e7ee      	b.n	8001fc0 <__libc_init_array+0xc>
 8001fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe6:	4798      	blx	r3
 8001fe8:	3601      	adds	r6, #1
 8001fea:	e7f2      	b.n	8001fd2 <__libc_init_array+0x1e>
 8001fec:	0800298c 	.word	0x0800298c
 8001ff0:	0800298c 	.word	0x0800298c
 8001ff4:	0800298c 	.word	0x0800298c
 8001ff8:	08002990 	.word	0x08002990

08001ffc <memset>:
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4402      	add	r2, r0
 8002000:	4293      	cmp	r3, r2
 8002002:	d100      	bne.n	8002006 <memset+0xa>
 8002004:	4770      	bx	lr
 8002006:	f803 1b01 	strb.w	r1, [r3], #1
 800200a:	e7f9      	b.n	8002000 <memset+0x4>

0800200c <siprintf>:
 800200c:	b40e      	push	{r1, r2, r3}
 800200e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002012:	b500      	push	{lr}
 8002014:	b09c      	sub	sp, #112	; 0x70
 8002016:	ab1d      	add	r3, sp, #116	; 0x74
 8002018:	9002      	str	r0, [sp, #8]
 800201a:	9006      	str	r0, [sp, #24]
 800201c:	9107      	str	r1, [sp, #28]
 800201e:	9104      	str	r1, [sp, #16]
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <siprintf+0x38>)
 8002022:	4909      	ldr	r1, [pc, #36]	; (8002048 <siprintf+0x3c>)
 8002024:	f853 2b04 	ldr.w	r2, [r3], #4
 8002028:	9105      	str	r1, [sp, #20]
 800202a:	6800      	ldr	r0, [r0, #0]
 800202c:	a902      	add	r1, sp, #8
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	f000 f868 	bl	8002104 <_svfiprintf_r>
 8002034:	2200      	movs	r2, #0
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	b01c      	add	sp, #112	; 0x70
 800203c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002040:	b003      	add	sp, #12
 8002042:	4770      	bx	lr
 8002044:	2000000c 	.word	0x2000000c
 8002048:	ffff0208 	.word	0xffff0208

0800204c <__ssputs_r>:
 800204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002050:	688e      	ldr	r6, [r1, #8]
 8002052:	4682      	mov	sl, r0
 8002054:	429e      	cmp	r6, r3
 8002056:	460c      	mov	r4, r1
 8002058:	4690      	mov	r8, r2
 800205a:	461f      	mov	r7, r3
 800205c:	d838      	bhi.n	80020d0 <__ssputs_r+0x84>
 800205e:	898a      	ldrh	r2, [r1, #12]
 8002060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002064:	d032      	beq.n	80020cc <__ssputs_r+0x80>
 8002066:	6825      	ldr	r5, [r4, #0]
 8002068:	6909      	ldr	r1, [r1, #16]
 800206a:	3301      	adds	r3, #1
 800206c:	eba5 0901 	sub.w	r9, r5, r1
 8002070:	6965      	ldr	r5, [r4, #20]
 8002072:	444b      	add	r3, r9
 8002074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800207c:	106d      	asrs	r5, r5, #1
 800207e:	429d      	cmp	r5, r3
 8002080:	bf38      	it	cc
 8002082:	461d      	movcc	r5, r3
 8002084:	0553      	lsls	r3, r2, #21
 8002086:	d531      	bpl.n	80020ec <__ssputs_r+0xa0>
 8002088:	4629      	mov	r1, r5
 800208a:	f000 fb6f 	bl	800276c <_malloc_r>
 800208e:	4606      	mov	r6, r0
 8002090:	b950      	cbnz	r0, 80020a8 <__ssputs_r+0x5c>
 8002092:	230c      	movs	r3, #12
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f8ca 3000 	str.w	r3, [sl]
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020a8:	464a      	mov	r2, r9
 80020aa:	6921      	ldr	r1, [r4, #16]
 80020ac:	f000 face 	bl	800264c <memcpy>
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ba:	81a3      	strh	r3, [r4, #12]
 80020bc:	6126      	str	r6, [r4, #16]
 80020be:	444e      	add	r6, r9
 80020c0:	6026      	str	r6, [r4, #0]
 80020c2:	463e      	mov	r6, r7
 80020c4:	6165      	str	r5, [r4, #20]
 80020c6:	eba5 0509 	sub.w	r5, r5, r9
 80020ca:	60a5      	str	r5, [r4, #8]
 80020cc:	42be      	cmp	r6, r7
 80020ce:	d900      	bls.n	80020d2 <__ssputs_r+0x86>
 80020d0:	463e      	mov	r6, r7
 80020d2:	4632      	mov	r2, r6
 80020d4:	4641      	mov	r1, r8
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	f000 fac6 	bl	8002668 <memmove>
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	2000      	movs	r0, #0
 80020e0:	1b9b      	subs	r3, r3, r6
 80020e2:	60a3      	str	r3, [r4, #8]
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	4433      	add	r3, r6
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	e7db      	b.n	80020a4 <__ssputs_r+0x58>
 80020ec:	462a      	mov	r2, r5
 80020ee:	f000 fbb1 	bl	8002854 <_realloc_r>
 80020f2:	4606      	mov	r6, r0
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d1e1      	bne.n	80020bc <__ssputs_r+0x70>
 80020f8:	4650      	mov	r0, sl
 80020fa:	6921      	ldr	r1, [r4, #16]
 80020fc:	f000 face 	bl	800269c <_free_r>
 8002100:	e7c7      	b.n	8002092 <__ssputs_r+0x46>
	...

08002104 <_svfiprintf_r>:
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	4698      	mov	r8, r3
 800210a:	898b      	ldrh	r3, [r1, #12]
 800210c:	4607      	mov	r7, r0
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	460d      	mov	r5, r1
 8002112:	4614      	mov	r4, r2
 8002114:	b09d      	sub	sp, #116	; 0x74
 8002116:	d50e      	bpl.n	8002136 <_svfiprintf_r+0x32>
 8002118:	690b      	ldr	r3, [r1, #16]
 800211a:	b963      	cbnz	r3, 8002136 <_svfiprintf_r+0x32>
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	f000 fb25 	bl	800276c <_malloc_r>
 8002122:	6028      	str	r0, [r5, #0]
 8002124:	6128      	str	r0, [r5, #16]
 8002126:	b920      	cbnz	r0, 8002132 <_svfiprintf_r+0x2e>
 8002128:	230c      	movs	r3, #12
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	e0d1      	b.n	80022d6 <_svfiprintf_r+0x1d2>
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	616b      	str	r3, [r5, #20]
 8002136:	2300      	movs	r3, #0
 8002138:	9309      	str	r3, [sp, #36]	; 0x24
 800213a:	2320      	movs	r3, #32
 800213c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002140:	2330      	movs	r3, #48	; 0x30
 8002142:	f04f 0901 	mov.w	r9, #1
 8002146:	f8cd 800c 	str.w	r8, [sp, #12]
 800214a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80022f0 <_svfiprintf_r+0x1ec>
 800214e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002152:	4623      	mov	r3, r4
 8002154:	469a      	mov	sl, r3
 8002156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800215a:	b10a      	cbz	r2, 8002160 <_svfiprintf_r+0x5c>
 800215c:	2a25      	cmp	r2, #37	; 0x25
 800215e:	d1f9      	bne.n	8002154 <_svfiprintf_r+0x50>
 8002160:	ebba 0b04 	subs.w	fp, sl, r4
 8002164:	d00b      	beq.n	800217e <_svfiprintf_r+0x7a>
 8002166:	465b      	mov	r3, fp
 8002168:	4622      	mov	r2, r4
 800216a:	4629      	mov	r1, r5
 800216c:	4638      	mov	r0, r7
 800216e:	f7ff ff6d 	bl	800204c <__ssputs_r>
 8002172:	3001      	adds	r0, #1
 8002174:	f000 80aa 	beq.w	80022cc <_svfiprintf_r+0x1c8>
 8002178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800217a:	445a      	add	r2, fp
 800217c:	9209      	str	r2, [sp, #36]	; 0x24
 800217e:	f89a 3000 	ldrb.w	r3, [sl]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a2 	beq.w	80022cc <_svfiprintf_r+0x1c8>
 8002188:	2300      	movs	r3, #0
 800218a:	f04f 32ff 	mov.w	r2, #4294967295
 800218e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002192:	f10a 0a01 	add.w	sl, sl, #1
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	9307      	str	r3, [sp, #28]
 800219a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800219e:	931a      	str	r3, [sp, #104]	; 0x68
 80021a0:	4654      	mov	r4, sl
 80021a2:	2205      	movs	r2, #5
 80021a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021a8:	4851      	ldr	r0, [pc, #324]	; (80022f0 <_svfiprintf_r+0x1ec>)
 80021aa:	f000 fa41 	bl	8002630 <memchr>
 80021ae:	9a04      	ldr	r2, [sp, #16]
 80021b0:	b9d8      	cbnz	r0, 80021ea <_svfiprintf_r+0xe6>
 80021b2:	06d0      	lsls	r0, r2, #27
 80021b4:	bf44      	itt	mi
 80021b6:	2320      	movmi	r3, #32
 80021b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021bc:	0711      	lsls	r1, r2, #28
 80021be:	bf44      	itt	mi
 80021c0:	232b      	movmi	r3, #43	; 0x2b
 80021c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021c6:	f89a 3000 	ldrb.w	r3, [sl]
 80021ca:	2b2a      	cmp	r3, #42	; 0x2a
 80021cc:	d015      	beq.n	80021fa <_svfiprintf_r+0xf6>
 80021ce:	4654      	mov	r4, sl
 80021d0:	2000      	movs	r0, #0
 80021d2:	f04f 0c0a 	mov.w	ip, #10
 80021d6:	9a07      	ldr	r2, [sp, #28]
 80021d8:	4621      	mov	r1, r4
 80021da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021de:	3b30      	subs	r3, #48	; 0x30
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d94e      	bls.n	8002282 <_svfiprintf_r+0x17e>
 80021e4:	b1b0      	cbz	r0, 8002214 <_svfiprintf_r+0x110>
 80021e6:	9207      	str	r2, [sp, #28]
 80021e8:	e014      	b.n	8002214 <_svfiprintf_r+0x110>
 80021ea:	eba0 0308 	sub.w	r3, r0, r8
 80021ee:	fa09 f303 	lsl.w	r3, r9, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	46a2      	mov	sl, r4
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	e7d2      	b.n	80021a0 <_svfiprintf_r+0x9c>
 80021fa:	9b03      	ldr	r3, [sp, #12]
 80021fc:	1d19      	adds	r1, r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	9103      	str	r1, [sp, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	bfbb      	ittet	lt
 8002206:	425b      	neglt	r3, r3
 8002208:	f042 0202 	orrlt.w	r2, r2, #2
 800220c:	9307      	strge	r3, [sp, #28]
 800220e:	9307      	strlt	r3, [sp, #28]
 8002210:	bfb8      	it	lt
 8002212:	9204      	strlt	r2, [sp, #16]
 8002214:	7823      	ldrb	r3, [r4, #0]
 8002216:	2b2e      	cmp	r3, #46	; 0x2e
 8002218:	d10c      	bne.n	8002234 <_svfiprintf_r+0x130>
 800221a:	7863      	ldrb	r3, [r4, #1]
 800221c:	2b2a      	cmp	r3, #42	; 0x2a
 800221e:	d135      	bne.n	800228c <_svfiprintf_r+0x188>
 8002220:	9b03      	ldr	r3, [sp, #12]
 8002222:	3402      	adds	r4, #2
 8002224:	1d1a      	adds	r2, r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	9203      	str	r2, [sp, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	bfb8      	it	lt
 800222e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002232:	9305      	str	r3, [sp, #20]
 8002234:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80022f4 <_svfiprintf_r+0x1f0>
 8002238:	2203      	movs	r2, #3
 800223a:	4650      	mov	r0, sl
 800223c:	7821      	ldrb	r1, [r4, #0]
 800223e:	f000 f9f7 	bl	8002630 <memchr>
 8002242:	b140      	cbz	r0, 8002256 <_svfiprintf_r+0x152>
 8002244:	2340      	movs	r3, #64	; 0x40
 8002246:	eba0 000a 	sub.w	r0, r0, sl
 800224a:	fa03 f000 	lsl.w	r0, r3, r0
 800224e:	9b04      	ldr	r3, [sp, #16]
 8002250:	3401      	adds	r4, #1
 8002252:	4303      	orrs	r3, r0
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800225a:	2206      	movs	r2, #6
 800225c:	4826      	ldr	r0, [pc, #152]	; (80022f8 <_svfiprintf_r+0x1f4>)
 800225e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002262:	f000 f9e5 	bl	8002630 <memchr>
 8002266:	2800      	cmp	r0, #0
 8002268:	d038      	beq.n	80022dc <_svfiprintf_r+0x1d8>
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <_svfiprintf_r+0x1f8>)
 800226c:	bb1b      	cbnz	r3, 80022b6 <_svfiprintf_r+0x1b2>
 800226e:	9b03      	ldr	r3, [sp, #12]
 8002270:	3307      	adds	r3, #7
 8002272:	f023 0307 	bic.w	r3, r3, #7
 8002276:	3308      	adds	r3, #8
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800227c:	4433      	add	r3, r6
 800227e:	9309      	str	r3, [sp, #36]	; 0x24
 8002280:	e767      	b.n	8002152 <_svfiprintf_r+0x4e>
 8002282:	460c      	mov	r4, r1
 8002284:	2001      	movs	r0, #1
 8002286:	fb0c 3202 	mla	r2, ip, r2, r3
 800228a:	e7a5      	b.n	80021d8 <_svfiprintf_r+0xd4>
 800228c:	2300      	movs	r3, #0
 800228e:	f04f 0c0a 	mov.w	ip, #10
 8002292:	4619      	mov	r1, r3
 8002294:	3401      	adds	r4, #1
 8002296:	9305      	str	r3, [sp, #20]
 8002298:	4620      	mov	r0, r4
 800229a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800229e:	3a30      	subs	r2, #48	; 0x30
 80022a0:	2a09      	cmp	r2, #9
 80022a2:	d903      	bls.n	80022ac <_svfiprintf_r+0x1a8>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0c5      	beq.n	8002234 <_svfiprintf_r+0x130>
 80022a8:	9105      	str	r1, [sp, #20]
 80022aa:	e7c3      	b.n	8002234 <_svfiprintf_r+0x130>
 80022ac:	4604      	mov	r4, r0
 80022ae:	2301      	movs	r3, #1
 80022b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80022b4:	e7f0      	b.n	8002298 <_svfiprintf_r+0x194>
 80022b6:	ab03      	add	r3, sp, #12
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	462a      	mov	r2, r5
 80022bc:	4638      	mov	r0, r7
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <_svfiprintf_r+0x1fc>)
 80022c0:	a904      	add	r1, sp, #16
 80022c2:	f3af 8000 	nop.w
 80022c6:	1c42      	adds	r2, r0, #1
 80022c8:	4606      	mov	r6, r0
 80022ca:	d1d6      	bne.n	800227a <_svfiprintf_r+0x176>
 80022cc:	89ab      	ldrh	r3, [r5, #12]
 80022ce:	065b      	lsls	r3, r3, #25
 80022d0:	f53f af2c 	bmi.w	800212c <_svfiprintf_r+0x28>
 80022d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022d6:	b01d      	add	sp, #116	; 0x74
 80022d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022dc:	ab03      	add	r3, sp, #12
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	462a      	mov	r2, r5
 80022e2:	4638      	mov	r0, r7
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <_svfiprintf_r+0x1fc>)
 80022e6:	a904      	add	r1, sp, #16
 80022e8:	f000 f87c 	bl	80023e4 <_printf_i>
 80022ec:	e7eb      	b.n	80022c6 <_svfiprintf_r+0x1c2>
 80022ee:	bf00      	nop
 80022f0:	08002956 	.word	0x08002956
 80022f4:	0800295c 	.word	0x0800295c
 80022f8:	08002960 	.word	0x08002960
 80022fc:	00000000 	.word	0x00000000
 8002300:	0800204d 	.word	0x0800204d

08002304 <_printf_common>:
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	4616      	mov	r6, r2
 800230a:	4699      	mov	r9, r3
 800230c:	688a      	ldr	r2, [r1, #8]
 800230e:	690b      	ldr	r3, [r1, #16]
 8002310:	4607      	mov	r7, r0
 8002312:	4293      	cmp	r3, r2
 8002314:	bfb8      	it	lt
 8002316:	4613      	movlt	r3, r2
 8002318:	6033      	str	r3, [r6, #0]
 800231a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800231e:	460c      	mov	r4, r1
 8002320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002324:	b10a      	cbz	r2, 800232a <_printf_common+0x26>
 8002326:	3301      	adds	r3, #1
 8002328:	6033      	str	r3, [r6, #0]
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	0699      	lsls	r1, r3, #26
 800232e:	bf42      	ittt	mi
 8002330:	6833      	ldrmi	r3, [r6, #0]
 8002332:	3302      	addmi	r3, #2
 8002334:	6033      	strmi	r3, [r6, #0]
 8002336:	6825      	ldr	r5, [r4, #0]
 8002338:	f015 0506 	ands.w	r5, r5, #6
 800233c:	d106      	bne.n	800234c <_printf_common+0x48>
 800233e:	f104 0a19 	add.w	sl, r4, #25
 8002342:	68e3      	ldr	r3, [r4, #12]
 8002344:	6832      	ldr	r2, [r6, #0]
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	42ab      	cmp	r3, r5
 800234a:	dc28      	bgt.n	800239e <_printf_common+0x9a>
 800234c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002350:	1e13      	subs	r3, r2, #0
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	bf18      	it	ne
 8002356:	2301      	movne	r3, #1
 8002358:	0692      	lsls	r2, r2, #26
 800235a:	d42d      	bmi.n	80023b8 <_printf_common+0xb4>
 800235c:	4649      	mov	r1, r9
 800235e:	4638      	mov	r0, r7
 8002360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002364:	47c0      	blx	r8
 8002366:	3001      	adds	r0, #1
 8002368:	d020      	beq.n	80023ac <_printf_common+0xa8>
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	68e5      	ldr	r5, [r4, #12]
 800236e:	f003 0306 	and.w	r3, r3, #6
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf18      	it	ne
 8002376:	2500      	movne	r5, #0
 8002378:	6832      	ldr	r2, [r6, #0]
 800237a:	f04f 0600 	mov.w	r6, #0
 800237e:	68a3      	ldr	r3, [r4, #8]
 8002380:	bf08      	it	eq
 8002382:	1aad      	subeq	r5, r5, r2
 8002384:	6922      	ldr	r2, [r4, #16]
 8002386:	bf08      	it	eq
 8002388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800238c:	4293      	cmp	r3, r2
 800238e:	bfc4      	itt	gt
 8002390:	1a9b      	subgt	r3, r3, r2
 8002392:	18ed      	addgt	r5, r5, r3
 8002394:	341a      	adds	r4, #26
 8002396:	42b5      	cmp	r5, r6
 8002398:	d11a      	bne.n	80023d0 <_printf_common+0xcc>
 800239a:	2000      	movs	r0, #0
 800239c:	e008      	b.n	80023b0 <_printf_common+0xac>
 800239e:	2301      	movs	r3, #1
 80023a0:	4652      	mov	r2, sl
 80023a2:	4649      	mov	r1, r9
 80023a4:	4638      	mov	r0, r7
 80023a6:	47c0      	blx	r8
 80023a8:	3001      	adds	r0, #1
 80023aa:	d103      	bne.n	80023b4 <_printf_common+0xb0>
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b4:	3501      	adds	r5, #1
 80023b6:	e7c4      	b.n	8002342 <_printf_common+0x3e>
 80023b8:	2030      	movs	r0, #48	; 0x30
 80023ba:	18e1      	adds	r1, r4, r3
 80023bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023c6:	4422      	add	r2, r4
 80023c8:	3302      	adds	r3, #2
 80023ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ce:	e7c5      	b.n	800235c <_printf_common+0x58>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4622      	mov	r2, r4
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d0e6      	beq.n	80023ac <_printf_common+0xa8>
 80023de:	3601      	adds	r6, #1
 80023e0:	e7d9      	b.n	8002396 <_printf_common+0x92>
	...

080023e4 <_printf_i>:
 80023e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e8:	7e0f      	ldrb	r7, [r1, #24]
 80023ea:	4691      	mov	r9, r2
 80023ec:	2f78      	cmp	r7, #120	; 0x78
 80023ee:	4680      	mov	r8, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	469a      	mov	sl, r3
 80023f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023fa:	d807      	bhi.n	800240c <_printf_i+0x28>
 80023fc:	2f62      	cmp	r7, #98	; 0x62
 80023fe:	d80a      	bhi.n	8002416 <_printf_i+0x32>
 8002400:	2f00      	cmp	r7, #0
 8002402:	f000 80d9 	beq.w	80025b8 <_printf_i+0x1d4>
 8002406:	2f58      	cmp	r7, #88	; 0x58
 8002408:	f000 80a4 	beq.w	8002554 <_printf_i+0x170>
 800240c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002414:	e03a      	b.n	800248c <_printf_i+0xa8>
 8002416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800241a:	2b15      	cmp	r3, #21
 800241c:	d8f6      	bhi.n	800240c <_printf_i+0x28>
 800241e:	a101      	add	r1, pc, #4	; (adr r1, 8002424 <_printf_i+0x40>)
 8002420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002424:	0800247d 	.word	0x0800247d
 8002428:	08002491 	.word	0x08002491
 800242c:	0800240d 	.word	0x0800240d
 8002430:	0800240d 	.word	0x0800240d
 8002434:	0800240d 	.word	0x0800240d
 8002438:	0800240d 	.word	0x0800240d
 800243c:	08002491 	.word	0x08002491
 8002440:	0800240d 	.word	0x0800240d
 8002444:	0800240d 	.word	0x0800240d
 8002448:	0800240d 	.word	0x0800240d
 800244c:	0800240d 	.word	0x0800240d
 8002450:	0800259f 	.word	0x0800259f
 8002454:	080024c1 	.word	0x080024c1
 8002458:	08002581 	.word	0x08002581
 800245c:	0800240d 	.word	0x0800240d
 8002460:	0800240d 	.word	0x0800240d
 8002464:	080025c1 	.word	0x080025c1
 8002468:	0800240d 	.word	0x0800240d
 800246c:	080024c1 	.word	0x080024c1
 8002470:	0800240d 	.word	0x0800240d
 8002474:	0800240d 	.word	0x0800240d
 8002478:	08002589 	.word	0x08002589
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	1d1a      	adds	r2, r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	602a      	str	r2, [r5, #0]
 8002484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800248c:	2301      	movs	r3, #1
 800248e:	e0a4      	b.n	80025da <_printf_i+0x1f6>
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	6829      	ldr	r1, [r5, #0]
 8002494:	0606      	lsls	r6, r0, #24
 8002496:	f101 0304 	add.w	r3, r1, #4
 800249a:	d50a      	bpl.n	80024b2 <_printf_i+0xce>
 800249c:	680e      	ldr	r6, [r1, #0]
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	2e00      	cmp	r6, #0
 80024a2:	da03      	bge.n	80024ac <_printf_i+0xc8>
 80024a4:	232d      	movs	r3, #45	; 0x2d
 80024a6:	4276      	negs	r6, r6
 80024a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ac:	230a      	movs	r3, #10
 80024ae:	485e      	ldr	r0, [pc, #376]	; (8002628 <_printf_i+0x244>)
 80024b0:	e019      	b.n	80024e6 <_printf_i+0x102>
 80024b2:	680e      	ldr	r6, [r1, #0]
 80024b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024b8:	602b      	str	r3, [r5, #0]
 80024ba:	bf18      	it	ne
 80024bc:	b236      	sxthne	r6, r6
 80024be:	e7ef      	b.n	80024a0 <_printf_i+0xbc>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	1d19      	adds	r1, r3, #4
 80024c6:	6029      	str	r1, [r5, #0]
 80024c8:	0601      	lsls	r1, r0, #24
 80024ca:	d501      	bpl.n	80024d0 <_printf_i+0xec>
 80024cc:	681e      	ldr	r6, [r3, #0]
 80024ce:	e002      	b.n	80024d6 <_printf_i+0xf2>
 80024d0:	0646      	lsls	r6, r0, #25
 80024d2:	d5fb      	bpl.n	80024cc <_printf_i+0xe8>
 80024d4:	881e      	ldrh	r6, [r3, #0]
 80024d6:	2f6f      	cmp	r7, #111	; 0x6f
 80024d8:	bf0c      	ite	eq
 80024da:	2308      	moveq	r3, #8
 80024dc:	230a      	movne	r3, #10
 80024de:	4852      	ldr	r0, [pc, #328]	; (8002628 <_printf_i+0x244>)
 80024e0:	2100      	movs	r1, #0
 80024e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024e6:	6865      	ldr	r5, [r4, #4]
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	bfa8      	it	ge
 80024ec:	6821      	ldrge	r1, [r4, #0]
 80024ee:	60a5      	str	r5, [r4, #8]
 80024f0:	bfa4      	itt	ge
 80024f2:	f021 0104 	bicge.w	r1, r1, #4
 80024f6:	6021      	strge	r1, [r4, #0]
 80024f8:	b90e      	cbnz	r6, 80024fe <_printf_i+0x11a>
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d04d      	beq.n	800259a <_printf_i+0x1b6>
 80024fe:	4615      	mov	r5, r2
 8002500:	fbb6 f1f3 	udiv	r1, r6, r3
 8002504:	fb03 6711 	mls	r7, r3, r1, r6
 8002508:	5dc7      	ldrb	r7, [r0, r7]
 800250a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800250e:	4637      	mov	r7, r6
 8002510:	42bb      	cmp	r3, r7
 8002512:	460e      	mov	r6, r1
 8002514:	d9f4      	bls.n	8002500 <_printf_i+0x11c>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d10b      	bne.n	8002532 <_printf_i+0x14e>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	07de      	lsls	r6, r3, #31
 800251e:	d508      	bpl.n	8002532 <_printf_i+0x14e>
 8002520:	6923      	ldr	r3, [r4, #16]
 8002522:	6861      	ldr	r1, [r4, #4]
 8002524:	4299      	cmp	r1, r3
 8002526:	bfde      	ittt	le
 8002528:	2330      	movle	r3, #48	; 0x30
 800252a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800252e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002532:	1b52      	subs	r2, r2, r5
 8002534:	6122      	str	r2, [r4, #16]
 8002536:	464b      	mov	r3, r9
 8002538:	4621      	mov	r1, r4
 800253a:	4640      	mov	r0, r8
 800253c:	f8cd a000 	str.w	sl, [sp]
 8002540:	aa03      	add	r2, sp, #12
 8002542:	f7ff fedf 	bl	8002304 <_printf_common>
 8002546:	3001      	adds	r0, #1
 8002548:	d14c      	bne.n	80025e4 <_printf_i+0x200>
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	b004      	add	sp, #16
 8002550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002554:	4834      	ldr	r0, [pc, #208]	; (8002628 <_printf_i+0x244>)
 8002556:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800255a:	6829      	ldr	r1, [r5, #0]
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002562:	6029      	str	r1, [r5, #0]
 8002564:	061d      	lsls	r5, r3, #24
 8002566:	d514      	bpl.n	8002592 <_printf_i+0x1ae>
 8002568:	07df      	lsls	r7, r3, #31
 800256a:	bf44      	itt	mi
 800256c:	f043 0320 	orrmi.w	r3, r3, #32
 8002570:	6023      	strmi	r3, [r4, #0]
 8002572:	b91e      	cbnz	r6, 800257c <_printf_i+0x198>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	f023 0320 	bic.w	r3, r3, #32
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	2310      	movs	r3, #16
 800257e:	e7af      	b.n	80024e0 <_printf_i+0xfc>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6023      	str	r3, [r4, #0]
 8002588:	2378      	movs	r3, #120	; 0x78
 800258a:	4828      	ldr	r0, [pc, #160]	; (800262c <_printf_i+0x248>)
 800258c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002590:	e7e3      	b.n	800255a <_printf_i+0x176>
 8002592:	0659      	lsls	r1, r3, #25
 8002594:	bf48      	it	mi
 8002596:	b2b6      	uxthmi	r6, r6
 8002598:	e7e6      	b.n	8002568 <_printf_i+0x184>
 800259a:	4615      	mov	r5, r2
 800259c:	e7bb      	b.n	8002516 <_printf_i+0x132>
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	6826      	ldr	r6, [r4, #0]
 80025a2:	1d18      	adds	r0, r3, #4
 80025a4:	6961      	ldr	r1, [r4, #20]
 80025a6:	6028      	str	r0, [r5, #0]
 80025a8:	0635      	lsls	r5, r6, #24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	d501      	bpl.n	80025b2 <_printf_i+0x1ce>
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	e002      	b.n	80025b8 <_printf_i+0x1d4>
 80025b2:	0670      	lsls	r0, r6, #25
 80025b4:	d5fb      	bpl.n	80025ae <_printf_i+0x1ca>
 80025b6:	8019      	strh	r1, [r3, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	4615      	mov	r5, r2
 80025bc:	6123      	str	r3, [r4, #16]
 80025be:	e7ba      	b.n	8002536 <_printf_i+0x152>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	2100      	movs	r1, #0
 80025c4:	1d1a      	adds	r2, r3, #4
 80025c6:	602a      	str	r2, [r5, #0]
 80025c8:	681d      	ldr	r5, [r3, #0]
 80025ca:	6862      	ldr	r2, [r4, #4]
 80025cc:	4628      	mov	r0, r5
 80025ce:	f000 f82f 	bl	8002630 <memchr>
 80025d2:	b108      	cbz	r0, 80025d8 <_printf_i+0x1f4>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	6060      	str	r0, [r4, #4]
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	6123      	str	r3, [r4, #16]
 80025dc:	2300      	movs	r3, #0
 80025de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025e2:	e7a8      	b.n	8002536 <_printf_i+0x152>
 80025e4:	462a      	mov	r2, r5
 80025e6:	4649      	mov	r1, r9
 80025e8:	4640      	mov	r0, r8
 80025ea:	6923      	ldr	r3, [r4, #16]
 80025ec:	47d0      	blx	sl
 80025ee:	3001      	adds	r0, #1
 80025f0:	d0ab      	beq.n	800254a <_printf_i+0x166>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	079b      	lsls	r3, r3, #30
 80025f6:	d413      	bmi.n	8002620 <_printf_i+0x23c>
 80025f8:	68e0      	ldr	r0, [r4, #12]
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	4298      	cmp	r0, r3
 80025fe:	bfb8      	it	lt
 8002600:	4618      	movlt	r0, r3
 8002602:	e7a4      	b.n	800254e <_printf_i+0x16a>
 8002604:	2301      	movs	r3, #1
 8002606:	4632      	mov	r2, r6
 8002608:	4649      	mov	r1, r9
 800260a:	4640      	mov	r0, r8
 800260c:	47d0      	blx	sl
 800260e:	3001      	adds	r0, #1
 8002610:	d09b      	beq.n	800254a <_printf_i+0x166>
 8002612:	3501      	adds	r5, #1
 8002614:	68e3      	ldr	r3, [r4, #12]
 8002616:	9903      	ldr	r1, [sp, #12]
 8002618:	1a5b      	subs	r3, r3, r1
 800261a:	42ab      	cmp	r3, r5
 800261c:	dcf2      	bgt.n	8002604 <_printf_i+0x220>
 800261e:	e7eb      	b.n	80025f8 <_printf_i+0x214>
 8002620:	2500      	movs	r5, #0
 8002622:	f104 0619 	add.w	r6, r4, #25
 8002626:	e7f5      	b.n	8002614 <_printf_i+0x230>
 8002628:	08002967 	.word	0x08002967
 800262c:	08002978 	.word	0x08002978

08002630 <memchr>:
 8002630:	4603      	mov	r3, r0
 8002632:	b510      	push	{r4, lr}
 8002634:	b2c9      	uxtb	r1, r1
 8002636:	4402      	add	r2, r0
 8002638:	4293      	cmp	r3, r2
 800263a:	4618      	mov	r0, r3
 800263c:	d101      	bne.n	8002642 <memchr+0x12>
 800263e:	2000      	movs	r0, #0
 8002640:	e003      	b.n	800264a <memchr+0x1a>
 8002642:	7804      	ldrb	r4, [r0, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	428c      	cmp	r4, r1
 8002648:	d1f6      	bne.n	8002638 <memchr+0x8>
 800264a:	bd10      	pop	{r4, pc}

0800264c <memcpy>:
 800264c:	440a      	add	r2, r1
 800264e:	4291      	cmp	r1, r2
 8002650:	f100 33ff 	add.w	r3, r0, #4294967295
 8002654:	d100      	bne.n	8002658 <memcpy+0xc>
 8002656:	4770      	bx	lr
 8002658:	b510      	push	{r4, lr}
 800265a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800265e:	4291      	cmp	r1, r2
 8002660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002664:	d1f9      	bne.n	800265a <memcpy+0xe>
 8002666:	bd10      	pop	{r4, pc}

08002668 <memmove>:
 8002668:	4288      	cmp	r0, r1
 800266a:	b510      	push	{r4, lr}
 800266c:	eb01 0402 	add.w	r4, r1, r2
 8002670:	d902      	bls.n	8002678 <memmove+0x10>
 8002672:	4284      	cmp	r4, r0
 8002674:	4623      	mov	r3, r4
 8002676:	d807      	bhi.n	8002688 <memmove+0x20>
 8002678:	1e43      	subs	r3, r0, #1
 800267a:	42a1      	cmp	r1, r4
 800267c:	d008      	beq.n	8002690 <memmove+0x28>
 800267e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002686:	e7f8      	b.n	800267a <memmove+0x12>
 8002688:	4601      	mov	r1, r0
 800268a:	4402      	add	r2, r0
 800268c:	428a      	cmp	r2, r1
 800268e:	d100      	bne.n	8002692 <memmove+0x2a>
 8002690:	bd10      	pop	{r4, pc}
 8002692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800269a:	e7f7      	b.n	800268c <memmove+0x24>

0800269c <_free_r>:
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	4605      	mov	r5, r0
 80026a0:	2900      	cmp	r1, #0
 80026a2:	d040      	beq.n	8002726 <_free_r+0x8a>
 80026a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026a8:	1f0c      	subs	r4, r1, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bfb8      	it	lt
 80026ae:	18e4      	addlt	r4, r4, r3
 80026b0:	f000 f910 	bl	80028d4 <__malloc_lock>
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <_free_r+0x8c>)
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	b933      	cbnz	r3, 80026c8 <_free_r+0x2c>
 80026ba:	6063      	str	r3, [r4, #4]
 80026bc:	6014      	str	r4, [r2, #0]
 80026be:	4628      	mov	r0, r5
 80026c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026c4:	f000 b90c 	b.w	80028e0 <__malloc_unlock>
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	d908      	bls.n	80026de <_free_r+0x42>
 80026cc:	6820      	ldr	r0, [r4, #0]
 80026ce:	1821      	adds	r1, r4, r0
 80026d0:	428b      	cmp	r3, r1
 80026d2:	bf01      	itttt	eq
 80026d4:	6819      	ldreq	r1, [r3, #0]
 80026d6:	685b      	ldreq	r3, [r3, #4]
 80026d8:	1809      	addeq	r1, r1, r0
 80026da:	6021      	streq	r1, [r4, #0]
 80026dc:	e7ed      	b.n	80026ba <_free_r+0x1e>
 80026de:	461a      	mov	r2, r3
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	b10b      	cbz	r3, 80026e8 <_free_r+0x4c>
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d9fa      	bls.n	80026de <_free_r+0x42>
 80026e8:	6811      	ldr	r1, [r2, #0]
 80026ea:	1850      	adds	r0, r2, r1
 80026ec:	42a0      	cmp	r0, r4
 80026ee:	d10b      	bne.n	8002708 <_free_r+0x6c>
 80026f0:	6820      	ldr	r0, [r4, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	1850      	adds	r0, r2, r1
 80026f6:	4283      	cmp	r3, r0
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	d1e0      	bne.n	80026be <_free_r+0x22>
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4401      	add	r1, r0
 8002702:	6011      	str	r1, [r2, #0]
 8002704:	6053      	str	r3, [r2, #4]
 8002706:	e7da      	b.n	80026be <_free_r+0x22>
 8002708:	d902      	bls.n	8002710 <_free_r+0x74>
 800270a:	230c      	movs	r3, #12
 800270c:	602b      	str	r3, [r5, #0]
 800270e:	e7d6      	b.n	80026be <_free_r+0x22>
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	1821      	adds	r1, r4, r0
 8002714:	428b      	cmp	r3, r1
 8002716:	bf01      	itttt	eq
 8002718:	6819      	ldreq	r1, [r3, #0]
 800271a:	685b      	ldreq	r3, [r3, #4]
 800271c:	1809      	addeq	r1, r1, r0
 800271e:	6021      	streq	r1, [r4, #0]
 8002720:	6063      	str	r3, [r4, #4]
 8002722:	6054      	str	r4, [r2, #4]
 8002724:	e7cb      	b.n	80026be <_free_r+0x22>
 8002726:	bd38      	pop	{r3, r4, r5, pc}
 8002728:	20000124 	.word	0x20000124

0800272c <sbrk_aligned>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	4e0e      	ldr	r6, [pc, #56]	; (8002768 <sbrk_aligned+0x3c>)
 8002730:	460c      	mov	r4, r1
 8002732:	6831      	ldr	r1, [r6, #0]
 8002734:	4605      	mov	r5, r0
 8002736:	b911      	cbnz	r1, 800273e <sbrk_aligned+0x12>
 8002738:	f000 f8bc 	bl	80028b4 <_sbrk_r>
 800273c:	6030      	str	r0, [r6, #0]
 800273e:	4621      	mov	r1, r4
 8002740:	4628      	mov	r0, r5
 8002742:	f000 f8b7 	bl	80028b4 <_sbrk_r>
 8002746:	1c43      	adds	r3, r0, #1
 8002748:	d00a      	beq.n	8002760 <sbrk_aligned+0x34>
 800274a:	1cc4      	adds	r4, r0, #3
 800274c:	f024 0403 	bic.w	r4, r4, #3
 8002750:	42a0      	cmp	r0, r4
 8002752:	d007      	beq.n	8002764 <sbrk_aligned+0x38>
 8002754:	1a21      	subs	r1, r4, r0
 8002756:	4628      	mov	r0, r5
 8002758:	f000 f8ac 	bl	80028b4 <_sbrk_r>
 800275c:	3001      	adds	r0, #1
 800275e:	d101      	bne.n	8002764 <sbrk_aligned+0x38>
 8002760:	f04f 34ff 	mov.w	r4, #4294967295
 8002764:	4620      	mov	r0, r4
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	20000128 	.word	0x20000128

0800276c <_malloc_r>:
 800276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002770:	1ccd      	adds	r5, r1, #3
 8002772:	f025 0503 	bic.w	r5, r5, #3
 8002776:	3508      	adds	r5, #8
 8002778:	2d0c      	cmp	r5, #12
 800277a:	bf38      	it	cc
 800277c:	250c      	movcc	r5, #12
 800277e:	2d00      	cmp	r5, #0
 8002780:	4607      	mov	r7, r0
 8002782:	db01      	blt.n	8002788 <_malloc_r+0x1c>
 8002784:	42a9      	cmp	r1, r5
 8002786:	d905      	bls.n	8002794 <_malloc_r+0x28>
 8002788:	230c      	movs	r3, #12
 800278a:	2600      	movs	r6, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4630      	mov	r0, r6
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002794:	4e2e      	ldr	r6, [pc, #184]	; (8002850 <_malloc_r+0xe4>)
 8002796:	f000 f89d 	bl	80028d4 <__malloc_lock>
 800279a:	6833      	ldr	r3, [r6, #0]
 800279c:	461c      	mov	r4, r3
 800279e:	bb34      	cbnz	r4, 80027ee <_malloc_r+0x82>
 80027a0:	4629      	mov	r1, r5
 80027a2:	4638      	mov	r0, r7
 80027a4:	f7ff ffc2 	bl	800272c <sbrk_aligned>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	4604      	mov	r4, r0
 80027ac:	d14d      	bne.n	800284a <_malloc_r+0xde>
 80027ae:	6834      	ldr	r4, [r6, #0]
 80027b0:	4626      	mov	r6, r4
 80027b2:	2e00      	cmp	r6, #0
 80027b4:	d140      	bne.n	8002838 <_malloc_r+0xcc>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	4631      	mov	r1, r6
 80027ba:	4638      	mov	r0, r7
 80027bc:	eb04 0803 	add.w	r8, r4, r3
 80027c0:	f000 f878 	bl	80028b4 <_sbrk_r>
 80027c4:	4580      	cmp	r8, r0
 80027c6:	d13a      	bne.n	800283e <_malloc_r+0xd2>
 80027c8:	6821      	ldr	r1, [r4, #0]
 80027ca:	3503      	adds	r5, #3
 80027cc:	1a6d      	subs	r5, r5, r1
 80027ce:	f025 0503 	bic.w	r5, r5, #3
 80027d2:	3508      	adds	r5, #8
 80027d4:	2d0c      	cmp	r5, #12
 80027d6:	bf38      	it	cc
 80027d8:	250c      	movcc	r5, #12
 80027da:	4638      	mov	r0, r7
 80027dc:	4629      	mov	r1, r5
 80027de:	f7ff ffa5 	bl	800272c <sbrk_aligned>
 80027e2:	3001      	adds	r0, #1
 80027e4:	d02b      	beq.n	800283e <_malloc_r+0xd2>
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	442b      	add	r3, r5
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	e00e      	b.n	800280c <_malloc_r+0xa0>
 80027ee:	6822      	ldr	r2, [r4, #0]
 80027f0:	1b52      	subs	r2, r2, r5
 80027f2:	d41e      	bmi.n	8002832 <_malloc_r+0xc6>
 80027f4:	2a0b      	cmp	r2, #11
 80027f6:	d916      	bls.n	8002826 <_malloc_r+0xba>
 80027f8:	1961      	adds	r1, r4, r5
 80027fa:	42a3      	cmp	r3, r4
 80027fc:	6025      	str	r5, [r4, #0]
 80027fe:	bf18      	it	ne
 8002800:	6059      	strne	r1, [r3, #4]
 8002802:	6863      	ldr	r3, [r4, #4]
 8002804:	bf08      	it	eq
 8002806:	6031      	streq	r1, [r6, #0]
 8002808:	5162      	str	r2, [r4, r5]
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	4638      	mov	r0, r7
 800280e:	f104 060b 	add.w	r6, r4, #11
 8002812:	f000 f865 	bl	80028e0 <__malloc_unlock>
 8002816:	f026 0607 	bic.w	r6, r6, #7
 800281a:	1d23      	adds	r3, r4, #4
 800281c:	1af2      	subs	r2, r6, r3
 800281e:	d0b6      	beq.n	800278e <_malloc_r+0x22>
 8002820:	1b9b      	subs	r3, r3, r6
 8002822:	50a3      	str	r3, [r4, r2]
 8002824:	e7b3      	b.n	800278e <_malloc_r+0x22>
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	42a3      	cmp	r3, r4
 800282a:	bf0c      	ite	eq
 800282c:	6032      	streq	r2, [r6, #0]
 800282e:	605a      	strne	r2, [r3, #4]
 8002830:	e7ec      	b.n	800280c <_malloc_r+0xa0>
 8002832:	4623      	mov	r3, r4
 8002834:	6864      	ldr	r4, [r4, #4]
 8002836:	e7b2      	b.n	800279e <_malloc_r+0x32>
 8002838:	4634      	mov	r4, r6
 800283a:	6876      	ldr	r6, [r6, #4]
 800283c:	e7b9      	b.n	80027b2 <_malloc_r+0x46>
 800283e:	230c      	movs	r3, #12
 8002840:	4638      	mov	r0, r7
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	f000 f84c 	bl	80028e0 <__malloc_unlock>
 8002848:	e7a1      	b.n	800278e <_malloc_r+0x22>
 800284a:	6025      	str	r5, [r4, #0]
 800284c:	e7de      	b.n	800280c <_malloc_r+0xa0>
 800284e:	bf00      	nop
 8002850:	20000124 	.word	0x20000124

08002854 <_realloc_r>:
 8002854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002858:	4680      	mov	r8, r0
 800285a:	4614      	mov	r4, r2
 800285c:	460e      	mov	r6, r1
 800285e:	b921      	cbnz	r1, 800286a <_realloc_r+0x16>
 8002860:	4611      	mov	r1, r2
 8002862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002866:	f7ff bf81 	b.w	800276c <_malloc_r>
 800286a:	b92a      	cbnz	r2, 8002878 <_realloc_r+0x24>
 800286c:	f7ff ff16 	bl	800269c <_free_r>
 8002870:	4625      	mov	r5, r4
 8002872:	4628      	mov	r0, r5
 8002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002878:	f000 f838 	bl	80028ec <_malloc_usable_size_r>
 800287c:	4284      	cmp	r4, r0
 800287e:	4607      	mov	r7, r0
 8002880:	d802      	bhi.n	8002888 <_realloc_r+0x34>
 8002882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002886:	d812      	bhi.n	80028ae <_realloc_r+0x5a>
 8002888:	4621      	mov	r1, r4
 800288a:	4640      	mov	r0, r8
 800288c:	f7ff ff6e 	bl	800276c <_malloc_r>
 8002890:	4605      	mov	r5, r0
 8002892:	2800      	cmp	r0, #0
 8002894:	d0ed      	beq.n	8002872 <_realloc_r+0x1e>
 8002896:	42bc      	cmp	r4, r7
 8002898:	4622      	mov	r2, r4
 800289a:	4631      	mov	r1, r6
 800289c:	bf28      	it	cs
 800289e:	463a      	movcs	r2, r7
 80028a0:	f7ff fed4 	bl	800264c <memcpy>
 80028a4:	4631      	mov	r1, r6
 80028a6:	4640      	mov	r0, r8
 80028a8:	f7ff fef8 	bl	800269c <_free_r>
 80028ac:	e7e1      	b.n	8002872 <_realloc_r+0x1e>
 80028ae:	4635      	mov	r5, r6
 80028b0:	e7df      	b.n	8002872 <_realloc_r+0x1e>
	...

080028b4 <_sbrk_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	2300      	movs	r3, #0
 80028b8:	4d05      	ldr	r5, [pc, #20]	; (80028d0 <_sbrk_r+0x1c>)
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	f7fd fea4 	bl	800060c <_sbrk>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_sbrk_r+0x1a>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_sbrk_r+0x1a>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	2000012c 	.word	0x2000012c

080028d4 <__malloc_lock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__malloc_lock+0x8>)
 80028d6:	f000 b811 	b.w	80028fc <__retarget_lock_acquire_recursive>
 80028da:	bf00      	nop
 80028dc:	20000130 	.word	0x20000130

080028e0 <__malloc_unlock>:
 80028e0:	4801      	ldr	r0, [pc, #4]	; (80028e8 <__malloc_unlock+0x8>)
 80028e2:	f000 b80c 	b.w	80028fe <__retarget_lock_release_recursive>
 80028e6:	bf00      	nop
 80028e8:	20000130 	.word	0x20000130

080028ec <_malloc_usable_size_r>:
 80028ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f0:	1f18      	subs	r0, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bfbc      	itt	lt
 80028f6:	580b      	ldrlt	r3, [r1, r0]
 80028f8:	18c0      	addlt	r0, r0, r3
 80028fa:	4770      	bx	lr

080028fc <__retarget_lock_acquire_recursive>:
 80028fc:	4770      	bx	lr

080028fe <__retarget_lock_release_recursive>:
 80028fe:	4770      	bx	lr

08002900 <_init>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr

0800290c <_fini>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr
