
UART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004260  08004260  00014260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080044b8  080044b8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b8  080044b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001dc  0800469c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  0800469c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ac6  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001540  00000000  00000000  00026ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00028210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  000288b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d55  00000000  00000000  00028ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f0e  00000000  00000000  0003fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082679  00000000  00000000  00045b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c81a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a8  00000000  00000000  000c8220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004248 	.word	0x08004248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004248 	.word	0x08004248

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_UART_RxCpltCallback>:

int _write(int file, char *ptr, int len) {
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
	return len;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	//printf(rx_data);
	HAL_UART_Transmit(&huart1, rx_data, 2, 200);
 8000a90:	23c8      	movs	r3, #200	; 0xc8
 8000a92:	2202      	movs	r2, #2
 8000a94:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <HAL_UART_RxCpltCallback+0x28>)
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2c>)
 8000a98:	f001 f99f 	bl	8001dda <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, rx_data, 2);
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <HAL_UART_RxCpltCallback+0x28>)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2c>)
 8000aa2:	f001 fa2c 	bl	8001efe <HAL_UART_Receive_IT>
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000248 	.word	0x20000248
 8000ab4:	20000204 	.word	0x20000204

08000ab8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000abc:	f000 f9aa 	bl	8000e14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac0:	f000 f80e 	bl	8000ae0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac4:	f000 f872 	bl	8000bac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000ac8:	f000 f846 	bl	8000b58 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rx_data, 4);
 8000acc:	2204      	movs	r2, #4
 8000ace:	4902      	ldr	r1, [pc, #8]	; (8000ad8 <main+0x20>)
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <main+0x24>)
 8000ad2:	f001 fa14 	bl	8001efe <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x1e>
 8000ad8:	20000248 	.word	0x20000248
 8000adc:	20000204 	.word	0x20000204

08000ae0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	; 0x40
 8000ae4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fe8a 	bl	8002808 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fcf6 	bl	8001508 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x46>
		Error_Handler();
 8000b22:	f000 f859 	bl	8000bd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ff62 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x6e>
		Error_Handler();
 8000b4a:	f000 f845 	bl	8000bd8 <Error_Handler>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3740      	adds	r7, #64	; 0x40
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART1_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b68:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f001 f8d6 	bl	8001d40 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b9a:	f000 f81d 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000204 	.word	0x20000204
 8000ba8:	40013800 	.word	0x40013800

08000bac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0x28>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <MX_GPIO_Init+0x28>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x28>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bde:	e7fe      	b.n	8000bde <Error_Handler+0x6>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_MspInit+0x5c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_MspInit+0x60>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_MspInit+0x60>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d139      	bne.n	8000cd8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <HAL_UART_MspInit+0xa4>)
 8000caa:	f000 fad3 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0xa4>)
 8000cc4:	f000 fac6 	bl	8001254 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f000 f9da 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd2:	2025      	movs	r0, #37	; 0x25
 8000cd4:	f000 f9f3 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 f8b5 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART1_IRQHandler+0x10>)
 8000d42:	f001 f90d 	bl	8001f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000204 	.word	0x20000204

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f001 fd18 	bl	80027b4 <__errno>
 8000d84:	4602      	mov	r2, r0
 8000d86:	230c      	movs	r3, #12
 8000d88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20005000 	.word	0x20005000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	200001f8 	.word	0x200001f8
 8000db8:	20000258 	.word	0x20000258

08000dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dee:	f7ff ffe5 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f001 fce5 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff fe5f 	bl	8000ab8 <main>
  bx lr
 8000dfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000e04:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8000e08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000e0c:	20000254 	.word	0x20000254

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x28>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f923 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fed6 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f93b 	bl	80010da <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f903 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	2000024c 	.word	0x2000024c

08000ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	2000024c 	.word	0x2000024c

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4906      	ldr	r1, [pc, #24]	; (8000f70 <__NVIC_EnableIRQ+0x34>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff90 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff2d 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff42 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff35 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa2 	bl	800102c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001104:	2b02      	cmp	r3, #2
 8001106:	d008      	beq.n	800111a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2204      	movs	r2, #4
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e020      	b.n	800115c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 020e 	bic.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
	...

08001168 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800117a:	2b02      	cmp	r3, #2
 800117c:	d005      	beq.n	800118a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2204      	movs	r2, #4
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e051      	b.n	800122e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 020e 	bic.w	r2, r2, #14
 8001198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_DMA_Abort_IT+0xd0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d029      	beq.n	8001208 <HAL_DMA_Abort_IT+0xa0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_DMA_Abort_IT+0xd4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d022      	beq.n	8001204 <HAL_DMA_Abort_IT+0x9c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_DMA_Abort_IT+0xd8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01a      	beq.n	80011fe <HAL_DMA_Abort_IT+0x96>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_DMA_Abort_IT+0xdc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d012      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x90>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_DMA_Abort_IT+0xe0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00a      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x8a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_DMA_Abort_IT+0xe4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d102      	bne.n	80011ec <HAL_DMA_Abort_IT+0x84>
 80011e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ea:	e00e      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 80011ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f0:	e00b      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 80011f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f6:	e008      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	e005      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001202:	e002      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 8001204:	2310      	movs	r3, #16
 8001206:	e000      	b.n	800120a <HAL_DMA_Abort_IT+0xa2>
 8001208:	2301      	movs	r3, #1
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_DMA_Abort_IT+0xe8>)
 800120c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	4798      	blx	r3
    } 
  }
  return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020008 	.word	0x40020008
 800123c:	4002001c 	.word	0x4002001c
 8001240:	40020030 	.word	0x40020030
 8001244:	40020044 	.word	0x40020044
 8001248:	40020058 	.word	0x40020058
 800124c:	4002006c 	.word	0x4002006c
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b08b      	sub	sp, #44	; 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e127      	b.n	80014b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001268:	2201      	movs	r2, #1
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8116 	bne.w	80014b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b12      	cmp	r3, #18
 800128c:	d034      	beq.n	80012f8 <HAL_GPIO_Init+0xa4>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d80d      	bhi.n	80012ae <HAL_GPIO_Init+0x5a>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x9a>
 8001296:	2b02      	cmp	r3, #2
 8001298:	d804      	bhi.n	80012a4 <HAL_GPIO_Init+0x50>
 800129a:	2b00      	cmp	r3, #0
 800129c:	d031      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d01c      	beq.n	80012dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a2:	e048      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d043      	beq.n	8001330 <HAL_GPIO_Init+0xdc>
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d01b      	beq.n	80012e4 <HAL_GPIO_Init+0x90>
          break;
 80012ac:	e043      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ae:	4a89      	ldr	r2, [pc, #548]	; (80014d4 <HAL_GPIO_Init+0x280>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d026      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012b4:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <HAL_GPIO_Init+0x280>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d806      	bhi.n	80012c8 <HAL_GPIO_Init+0x74>
 80012ba:	4a87      	ldr	r2, [pc, #540]	; (80014d8 <HAL_GPIO_Init+0x284>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d020      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012c0:	4a86      	ldr	r2, [pc, #536]	; (80014dc <HAL_GPIO_Init+0x288>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01d      	beq.n	8001302 <HAL_GPIO_Init+0xae>
          break;
 80012c6:	e036      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c8:	4a85      	ldr	r2, [pc, #532]	; (80014e0 <HAL_GPIO_Init+0x28c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012ce:	4a85      	ldr	r2, [pc, #532]	; (80014e4 <HAL_GPIO_Init+0x290>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d016      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012d4:	4a84      	ldr	r2, [pc, #528]	; (80014e8 <HAL_GPIO_Init+0x294>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0xae>
          break;
 80012da:	e02c      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	623b      	str	r3, [r7, #32]
          break;
 80012e2:	e028      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	3304      	adds	r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e023      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e01e      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	330c      	adds	r3, #12
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e019      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800130a:	2304      	movs	r3, #4
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e012      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	611a      	str	r2, [r3, #16]
          break;
 8001322:	e008      	b.n	8001336 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001324:	2308      	movs	r3, #8
 8001326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	615a      	str	r2, [r3, #20]
          break;
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d801      	bhi.n	8001340 <HAL_GPIO_Init+0xec>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	e001      	b.n	8001344 <HAL_GPIO_Init+0xf0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d802      	bhi.n	8001352 <HAL_GPIO_Init+0xfe>
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x104>
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3b08      	subs	r3, #8
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	210f      	movs	r1, #15
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	401a      	ands	r2, r3
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	431a      	orrs	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8096 	beq.w	80014b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_GPIO_Init+0x298>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x298>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x298>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800139e:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_GPIO_Init+0x29c>)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x19e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x2a4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x19a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2a8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x196>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2ac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x192>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013f2:	2300      	movs	r3, #0
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001404:	493a      	ldr	r1, [pc, #232]	; (80014f0 <HAL_GPIO_Init+0x29c>)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4938      	ldr	r1, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4933      	ldr	r1, [pc, #204]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001436:	4013      	ands	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	492e      	ldr	r1, [pc, #184]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
 8001452:	e006      	b.n	8001462 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800145e:	4013      	ands	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4924      	ldr	r1, [pc, #144]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	491f      	ldr	r1, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001486:	4013      	ands	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	491a      	ldr	r1, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4915      	ldr	r1, [pc, #84]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f aed0 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 80014c8:	bf00      	nop
 80014ca:	372c      	adds	r7, #44	; 0x2c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	10210000 	.word	0x10210000
 80014d8:	10110000 	.word	0x10110000
 80014dc:	10120000 	.word	0x10120000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10220000 	.word	0x10220000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e26c      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
 8001540:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b89      	ldr	r3, [pc, #548]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e246      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x76>
 8001570:	4b80      	ldr	r3, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7a      	ldr	r2, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b78      	ldr	r3, [pc, #480]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a77      	ldr	r2, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xbc>
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a71      	ldr	r2, [pc, #452]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015c4:	4b6b      	ldr	r3, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc6e 	bl	8000ec4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc6a 	bl	8000ec4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1fa      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe4>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fc5a 	bl	8000ec4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc56 	bl	8000ec4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1e6      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x10c>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1ba      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4939      	ldr	r1, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc0f 	bl	8000ec4 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc0b 	bl	8000ec4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e19b      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4927      	ldr	r1, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fbee 	bl	8000ec4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fbea 	bl	8000ec4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e17a      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03a      	beq.n	800178c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fbce 	bl	8000ec4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fbca 	bl	8000ec4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e15a      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fada 	bl	8001d04 <RCC_Delay>
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fbb4 	bl	8000ec4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fbb0 	bl	8000ec4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d908      	bls.n	8001780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e140      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	42420000 	.word	0x42420000
 800177c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a6 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b94      	ldr	r3, [pc, #592]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a93      	ldr	r2, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b91      	ldr	r3, [pc, #580]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fb71 	bl	8000ec4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fb6d 	bl	8000ec4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0fd      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b81      	ldr	r3, [pc, #516]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 800180c:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a7a      	ldr	r2, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x334>
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a75      	ldr	r2, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x356>
 8001844:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6c      	ldr	r2, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a69      	ldr	r2, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a63      	ldr	r2, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb21 	bl	8000ec4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fb1d 	bl	8000ec4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0ab      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x37e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb0b 	bl	8000ec4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fb07 	bl	8000ec4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e095      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8081 	beq.w	80019f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d061      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fadb 	bl	8000ec4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fad7 	bl	8000ec4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e067      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	492d      	ldr	r1, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a19      	ldr	r1, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff faab 	bl	8000ec4 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff faa7 	bl	8000ec4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e037      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
 8001990:	e02f      	b.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fa94 	bl	8000ec4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fa90 	bl	8000ec4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e020      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x498>
 80019be:	e018      	b.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e013      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420060 	.word	0x42420060

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4965      	ldr	r1, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f9e4 	bl	8000ec4 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f9e0 	bl	8000ec4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	fa21 f303 	lsr.w	r3, r1, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f942 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004274 	.word	0x08004274
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b490      	push	{r4, r7}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be4:	1d3c      	adds	r4, r7, #4
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1a:	e02d      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	e02d      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2e:	4413      	add	r3, r2
 8001c30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c5b      	lsrs	r3, r3, #17
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4e:	4413      	add	r3, r2
 8001c50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c5a:	fb02 f203 	mul.w	r2, r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e004      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	623b      	str	r3, [r7, #32]
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7a:	623b      	str	r3, [r7, #32]
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc90      	pop	{r4, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08004260 	.word	0x08004260
 8001c90:	08004270 	.word	0x08004270
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	003d0900 	.word	0x003d0900

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff2 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08004284 	.word	0x08004284

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08004284 	.word	0x08004284

08001d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <RCC_Delay+0x34>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <RCC_Delay+0x38>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d20:	bf00      	nop
  }
  while (Delay --);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <RCC_Delay+0x1c>
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e03f      	b.n	8001dd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ff6c 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fc87 	bl	8002698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b08a      	sub	sp, #40	; 0x28
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d17c      	bne.n	8001ef4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_UART_Transmit+0x2c>
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e075      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Transmit+0x3e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e06e      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2221      	movs	r2, #33	; 0x21
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e2e:	f7ff f849 	bl	8000ec4 <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e48:	d108      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e003      	b.n	8001e64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e6c:	e02a      	b.n	8001ec4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fa3a 	bl	80022f2 <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e036      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e007      	b.n	8001eb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1cf      	bne.n	8001e6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa0a 	bl	80022f2 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d11d      	bne.n	8001f54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_UART_Receive_IT+0x26>
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e016      	b.n	8001f56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Receive_IT+0x38>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e00f      	b.n	8001f56 <HAL_UART_Receive_IT+0x58>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fa1b 	bl	8002386 <UART_Start_Receive_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	e000      	b.n	8001f56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x52>
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 facb 	bl	8002546 <UART_Receive_IT>
      return;
 8001fb0:	e17c      	b.n	80022ac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80b1 	beq.w	800211c <HAL_UART_IRQHandler+0x1bc>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_UART_IRQHandler+0x70>
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x90>
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_UART_IRQHandler+0xb0>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f043 0202 	orr.w	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_UART_IRQHandler+0xd0>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00f      	beq.n	800205a <HAL_UART_IRQHandler+0xfa>
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <HAL_UART_IRQHandler+0xee>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0208 	orr.w	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 811f 	beq.w	80022a2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_UART_IRQHandler+0x11e>
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa64 	bl	8002546 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <HAL_UART_IRQHandler+0x146>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d031      	beq.n	800210a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9a6 	bl	80023f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d023      	beq.n	8002102 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d013      	beq.n	80020fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4a77      	ldr	r2, [pc, #476]	; (80022b4 <HAL_UART_IRQHandler+0x354>)
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f842 	bl	8001168 <HAL_DMA_Abort_IT>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f4:	4610      	mov	r0, r2
 80020f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	e00e      	b.n	8002118 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8e5 	bl	80022ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002100:	e00a      	b.n	8002118 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8e1 	bl	80022ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	e006      	b.n	8002118 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8dd 	bl	80022ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002116:	e0c4      	b.n	80022a2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002118:	bf00      	nop
    return;
 800211a:	e0c2      	b.n	80022a2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	2b01      	cmp	r3, #1
 8002122:	f040 80a1 	bne.w	8002268 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 809b 	beq.w	8002268 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8095 	beq.w	8002268 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04e      	beq.n	8002200 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800216c:	8a3b      	ldrh	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8099 	beq.w	80022a6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002178:	8a3a      	ldrh	r2, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	f080 8093 	bcs.w	80022a6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8a3a      	ldrh	r2, [r7, #16]
 8002184:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b20      	cmp	r3, #32
 800218e:	d02b      	beq.n	80021e8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800219e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0210 	bic.w	r2, r2, #16
 80021dc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff85 	bl	80010f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f86f 	bl	80022dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021fe:	e052      	b.n	80022a6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002208:	b29b      	uxth	r3, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d048      	beq.n	80022aa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d045      	beq.n	80022aa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800222c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0210 	bic.w	r2, r2, #16
 800225a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800225c:	8a7b      	ldrh	r3, [r7, #18]
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f83b 	bl	80022dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002266:	e020      	b.n	80022aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_UART_IRQHandler+0x324>
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f8fb 	bl	8002478 <UART_Transmit_IT>
    return;
 8002282:	e013      	b.n	80022ac <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <HAL_UART_IRQHandler+0x34c>
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f93c 	bl	8002516 <UART_EndTransmit_IT>
    return;
 800229e:	bf00      	nop
 80022a0:	e004      	b.n	80022ac <HAL_UART_IRQHandler+0x34c>
    return;
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <HAL_UART_IRQHandler+0x34c>
      return;
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <HAL_UART_IRQHandler+0x34c>
      return;
 80022aa:	bf00      	nop
  }
}
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08002451 	.word	0x08002451

080022b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002302:	e02c      	b.n	800235e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d028      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0x30>
 8002312:	f7fe fdd7 	bl	8000ec4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	429a      	cmp	r2, r3
 8002320:	d21d      	bcs.n	800235e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002330:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e00f      	b.n	800237e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4013      	ands	r3, r2
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	429a      	cmp	r2, r3
 800237a:	d0c3      	beq.n	8002304 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	4613      	mov	r3, r2
 8002392:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2222      	movs	r2, #34	; 0x22
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800240e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0210 	bic.w	r2, r2, #16
 8002436:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff ff2d 	bl	80022ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b21      	cmp	r3, #33	; 0x21
 800248a:	d13e      	bne.n	800250a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002494:	d114      	bne.n	80024c0 <UART_Transmit_IT+0x48>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d110      	bne.n	80024c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	1c9a      	adds	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	621a      	str	r2, [r3, #32]
 80024be:	e008      	b.n	80024d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	1c59      	adds	r1, r3, #1
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6211      	str	r1, [r2, #32]
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4619      	mov	r1, r3
 80024e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff febe 	bl	80022b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b22      	cmp	r3, #34	; 0x22
 8002558:	f040 8099 	bne.w	800268e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d117      	bne.n	8002596 <UART_Receive_IT+0x50>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002584:	b29a      	uxth	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	1c9a      	adds	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	e026      	b.n	80025e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a8:	d007      	beq.n	80025ba <UART_Receive_IT+0x74>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <UART_Receive_IT+0x82>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e008      	b.n	80025da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4619      	mov	r1, r3
 80025f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d148      	bne.n	800268a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0220 	bic.w	r2, r2, #32
 8002606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b01      	cmp	r3, #1
 8002636:	d123      	bne.n	8002680 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0210 	bic.w	r2, r2, #16
 800264c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d10a      	bne.n	8002672 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fe2f 	bl	80022dc <HAL_UARTEx_RxEventCallback>
 800267e:	e002      	b.n	8002686 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe fa01 	bl	8000a88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e002      	b.n	8002690 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026d2:	f023 030c 	bic.w	r3, r3, #12
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	430b      	orrs	r3, r1
 80026de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <UART_SetConfig+0x114>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d103      	bne.n	8002708 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002700:	f7ff faec 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	e002      	b.n	800270e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fad4 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 800270c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <UART_SetConfig+0x118>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	0119      	lsls	r1, r3, #4
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009a      	lsls	r2, r3, #2
 8002738:	441a      	add	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	fbb2 f2f3 	udiv	r2, r2, r3
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <UART_SetConfig+0x118>)
 8002746:	fba3 0302 	umull	r0, r3, r3, r2
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2064      	movs	r0, #100	; 0x64
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	3332      	adds	r3, #50	; 0x32
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <UART_SetConfig+0x118>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002764:	4419      	add	r1, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <UART_SetConfig+0x118>)
 800277e:	fba3 0302 	umull	r0, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	3332      	adds	r3, #50	; 0x32
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <UART_SetConfig+0x118>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	440a      	add	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013800 	.word	0x40013800
 80027b0:	51eb851f 	.word	0x51eb851f

080027b4 <__errno>:
 80027b4:	4b01      	ldr	r3, [pc, #4]	; (80027bc <__errno+0x8>)
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	2500      	movs	r5, #0
 80027c4:	4e0c      	ldr	r6, [pc, #48]	; (80027f8 <__libc_init_array+0x38>)
 80027c6:	4c0d      	ldr	r4, [pc, #52]	; (80027fc <__libc_init_array+0x3c>)
 80027c8:	1ba4      	subs	r4, r4, r6
 80027ca:	10a4      	asrs	r4, r4, #2
 80027cc:	42a5      	cmp	r5, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	f001 fd3a 	bl	8004248 <_init>
 80027d4:	2500      	movs	r5, #0
 80027d6:	4e0a      	ldr	r6, [pc, #40]	; (8002800 <__libc_init_array+0x40>)
 80027d8:	4c0a      	ldr	r4, [pc, #40]	; (8002804 <__libc_init_array+0x44>)
 80027da:	1ba4      	subs	r4, r4, r6
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	42a5      	cmp	r5, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e8:	4798      	blx	r3
 80027ea:	3501      	adds	r5, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027f2:	4798      	blx	r3
 80027f4:	3501      	adds	r5, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	080044b8 	.word	0x080044b8
 80027fc:	080044b8 	.word	0x080044b8
 8002800:	080044b8 	.word	0x080044b8
 8002804:	080044bc 	.word	0x080044bc

08002808 <memset>:
 8002808:	4603      	mov	r3, r0
 800280a:	4402      	add	r2, r0
 800280c:	4293      	cmp	r3, r2
 800280e:	d100      	bne.n	8002812 <memset+0xa>
 8002810:	4770      	bx	lr
 8002812:	f803 1b01 	strb.w	r1, [r3], #1
 8002816:	e7f9      	b.n	800280c <memset+0x4>

08002818 <__cvt>:
 8002818:	2b00      	cmp	r3, #0
 800281a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800281e:	461e      	mov	r6, r3
 8002820:	bfbb      	ittet	lt
 8002822:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002826:	461e      	movlt	r6, r3
 8002828:	2300      	movge	r3, #0
 800282a:	232d      	movlt	r3, #45	; 0x2d
 800282c:	b088      	sub	sp, #32
 800282e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002830:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002834:	f027 0720 	bic.w	r7, r7, #32
 8002838:	2f46      	cmp	r7, #70	; 0x46
 800283a:	4614      	mov	r4, r2
 800283c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800283e:	700b      	strb	r3, [r1, #0]
 8002840:	d004      	beq.n	800284c <__cvt+0x34>
 8002842:	2f45      	cmp	r7, #69	; 0x45
 8002844:	d100      	bne.n	8002848 <__cvt+0x30>
 8002846:	3501      	adds	r5, #1
 8002848:	2302      	movs	r3, #2
 800284a:	e000      	b.n	800284e <__cvt+0x36>
 800284c:	2303      	movs	r3, #3
 800284e:	aa07      	add	r2, sp, #28
 8002850:	9204      	str	r2, [sp, #16]
 8002852:	aa06      	add	r2, sp, #24
 8002854:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002858:	e9cd 3500 	strd	r3, r5, [sp]
 800285c:	4622      	mov	r2, r4
 800285e:	4633      	mov	r3, r6
 8002860:	f000 fba6 	bl	8002fb0 <_dtoa_r>
 8002864:	2f47      	cmp	r7, #71	; 0x47
 8002866:	4680      	mov	r8, r0
 8002868:	d102      	bne.n	8002870 <__cvt+0x58>
 800286a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800286c:	07db      	lsls	r3, r3, #31
 800286e:	d526      	bpl.n	80028be <__cvt+0xa6>
 8002870:	2f46      	cmp	r7, #70	; 0x46
 8002872:	eb08 0905 	add.w	r9, r8, r5
 8002876:	d111      	bne.n	800289c <__cvt+0x84>
 8002878:	f898 3000 	ldrb.w	r3, [r8]
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d10a      	bne.n	8002896 <__cvt+0x7e>
 8002880:	2200      	movs	r2, #0
 8002882:	2300      	movs	r3, #0
 8002884:	4620      	mov	r0, r4
 8002886:	4631      	mov	r1, r6
 8002888:	f7fe f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800288c:	b918      	cbnz	r0, 8002896 <__cvt+0x7e>
 800288e:	f1c5 0501 	rsb	r5, r5, #1
 8002892:	f8ca 5000 	str.w	r5, [sl]
 8002896:	f8da 3000 	ldr.w	r3, [sl]
 800289a:	4499      	add	r9, r3
 800289c:	2200      	movs	r2, #0
 800289e:	2300      	movs	r3, #0
 80028a0:	4620      	mov	r0, r4
 80028a2:	4631      	mov	r1, r6
 80028a4:	f7fe f880 	bl	80009a8 <__aeabi_dcmpeq>
 80028a8:	b938      	cbnz	r0, 80028ba <__cvt+0xa2>
 80028aa:	2230      	movs	r2, #48	; 0x30
 80028ac:	9b07      	ldr	r3, [sp, #28]
 80028ae:	454b      	cmp	r3, r9
 80028b0:	d205      	bcs.n	80028be <__cvt+0xa6>
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	9107      	str	r1, [sp, #28]
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e7f8      	b.n	80028ac <__cvt+0x94>
 80028ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80028be:	4640      	mov	r0, r8
 80028c0:	9b07      	ldr	r3, [sp, #28]
 80028c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80028c4:	eba3 0308 	sub.w	r3, r3, r8
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	b008      	add	sp, #32
 80028cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028d0 <__exponent>:
 80028d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028d2:	2900      	cmp	r1, #0
 80028d4:	bfb4      	ite	lt
 80028d6:	232d      	movlt	r3, #45	; 0x2d
 80028d8:	232b      	movge	r3, #43	; 0x2b
 80028da:	4604      	mov	r4, r0
 80028dc:	bfb8      	it	lt
 80028de:	4249      	neglt	r1, r1
 80028e0:	2909      	cmp	r1, #9
 80028e2:	f804 2b02 	strb.w	r2, [r4], #2
 80028e6:	7043      	strb	r3, [r0, #1]
 80028e8:	dd21      	ble.n	800292e <__exponent+0x5e>
 80028ea:	f10d 0307 	add.w	r3, sp, #7
 80028ee:	461f      	mov	r7, r3
 80028f0:	260a      	movs	r6, #10
 80028f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80028f6:	fb06 1115 	mls	r1, r6, r5, r1
 80028fa:	2d09      	cmp	r5, #9
 80028fc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002900:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002904:	f103 32ff 	add.w	r2, r3, #4294967295
 8002908:	4629      	mov	r1, r5
 800290a:	dc09      	bgt.n	8002920 <__exponent+0x50>
 800290c:	3130      	adds	r1, #48	; 0x30
 800290e:	3b02      	subs	r3, #2
 8002910:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002914:	42bb      	cmp	r3, r7
 8002916:	4622      	mov	r2, r4
 8002918:	d304      	bcc.n	8002924 <__exponent+0x54>
 800291a:	1a10      	subs	r0, r2, r0
 800291c:	b003      	add	sp, #12
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	4613      	mov	r3, r2
 8002922:	e7e6      	b.n	80028f2 <__exponent+0x22>
 8002924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002928:	f804 2b01 	strb.w	r2, [r4], #1
 800292c:	e7f2      	b.n	8002914 <__exponent+0x44>
 800292e:	2330      	movs	r3, #48	; 0x30
 8002930:	4419      	add	r1, r3
 8002932:	7083      	strb	r3, [r0, #2]
 8002934:	1d02      	adds	r2, r0, #4
 8002936:	70c1      	strb	r1, [r0, #3]
 8002938:	e7ef      	b.n	800291a <__exponent+0x4a>
	...

0800293c <_printf_float>:
 800293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002940:	b091      	sub	sp, #68	; 0x44
 8002942:	460c      	mov	r4, r1
 8002944:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002946:	4693      	mov	fp, r2
 8002948:	461e      	mov	r6, r3
 800294a:	4605      	mov	r5, r0
 800294c:	f001 f8e4 	bl	8003b18 <_localeconv_r>
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	9309      	str	r3, [sp, #36]	; 0x24
 8002956:	f7fd fbfb 	bl	8000150 <strlen>
 800295a:	2300      	movs	r3, #0
 800295c:	930e      	str	r3, [sp, #56]	; 0x38
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	900a      	str	r0, [sp, #40]	; 0x28
 8002962:	3307      	adds	r3, #7
 8002964:	f023 0307 	bic.w	r3, r3, #7
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002970:	f8d4 a000 	ldr.w	sl, [r4]
 8002974:	603a      	str	r2, [r7, #0]
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800297e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002986:	930b      	str	r3, [sp, #44]	; 0x2c
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	4ba6      	ldr	r3, [pc, #664]	; (8002c28 <_printf_float+0x2ec>)
 800298e:	4638      	mov	r0, r7
 8002990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002992:	f7fe f83b 	bl	8000a0c <__aeabi_dcmpun>
 8002996:	bb68      	cbnz	r0, 80029f4 <_printf_float+0xb8>
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <_printf_float+0x2ec>)
 800299e:	4638      	mov	r0, r7
 80029a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029a2:	f7fe f815 	bl	80009d0 <__aeabi_dcmple>
 80029a6:	bb28      	cbnz	r0, 80029f4 <_printf_float+0xb8>
 80029a8:	2200      	movs	r2, #0
 80029aa:	2300      	movs	r3, #0
 80029ac:	4638      	mov	r0, r7
 80029ae:	4649      	mov	r1, r9
 80029b0:	f7fe f804 	bl	80009bc <__aeabi_dcmplt>
 80029b4:	b110      	cbz	r0, 80029bc <_printf_float+0x80>
 80029b6:	232d      	movs	r3, #45	; 0x2d
 80029b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029bc:	4f9b      	ldr	r7, [pc, #620]	; (8002c2c <_printf_float+0x2f0>)
 80029be:	4b9c      	ldr	r3, [pc, #624]	; (8002c30 <_printf_float+0x2f4>)
 80029c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80029c4:	bf98      	it	ls
 80029c6:	461f      	movls	r7, r3
 80029c8:	2303      	movs	r3, #3
 80029ca:	f04f 0900 	mov.w	r9, #0
 80029ce:	6123      	str	r3, [r4, #16]
 80029d0:	f02a 0304 	bic.w	r3, sl, #4
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	9600      	str	r6, [sp, #0]
 80029d8:	465b      	mov	r3, fp
 80029da:	aa0f      	add	r2, sp, #60	; 0x3c
 80029dc:	4621      	mov	r1, r4
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f9e2 	bl	8002da8 <_printf_common>
 80029e4:	3001      	adds	r0, #1
 80029e6:	f040 8090 	bne.w	8002b0a <_printf_float+0x1ce>
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	b011      	add	sp, #68	; 0x44
 80029f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f4:	463a      	mov	r2, r7
 80029f6:	464b      	mov	r3, r9
 80029f8:	4638      	mov	r0, r7
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fe f806 	bl	8000a0c <__aeabi_dcmpun>
 8002a00:	b110      	cbz	r0, 8002a08 <_printf_float+0xcc>
 8002a02:	4f8c      	ldr	r7, [pc, #560]	; (8002c34 <_printf_float+0x2f8>)
 8002a04:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <_printf_float+0x2fc>)
 8002a06:	e7db      	b.n	80029c0 <_printf_float+0x84>
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	a80d      	add	r0, sp, #52	; 0x34
 8002a12:	a90e      	add	r1, sp, #56	; 0x38
 8002a14:	d140      	bne.n	8002a98 <_printf_float+0x15c>
 8002a16:	2306      	movs	r3, #6
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	f04f 0c00 	mov.w	ip, #0
 8002a1e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002a22:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	6022      	str	r2, [r4, #0]
 8002a2a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	463a      	mov	r2, r7
 8002a32:	464b      	mov	r3, r9
 8002a34:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff feed 	bl	8002818 <__cvt>
 8002a3e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002a42:	2b47      	cmp	r3, #71	; 0x47
 8002a44:	4607      	mov	r7, r0
 8002a46:	d109      	bne.n	8002a5c <_printf_float+0x120>
 8002a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a4a:	1cd8      	adds	r0, r3, #3
 8002a4c:	db02      	blt.n	8002a54 <_printf_float+0x118>
 8002a4e:	6862      	ldr	r2, [r4, #4]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	dd47      	ble.n	8002ae4 <_printf_float+0x1a8>
 8002a54:	f1a8 0802 	sub.w	r8, r8, #2
 8002a58:	fa5f f888 	uxtb.w	r8, r8
 8002a5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002a60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a62:	d824      	bhi.n	8002aae <_printf_float+0x172>
 8002a64:	3901      	subs	r1, #1
 8002a66:	4642      	mov	r2, r8
 8002a68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a6c:	910d      	str	r1, [sp, #52]	; 0x34
 8002a6e:	f7ff ff2f 	bl	80028d0 <__exponent>
 8002a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a74:	4681      	mov	r9, r0
 8002a76:	1813      	adds	r3, r2, r0
 8002a78:	2a01      	cmp	r2, #1
 8002a7a:	6123      	str	r3, [r4, #16]
 8002a7c:	dc02      	bgt.n	8002a84 <_printf_float+0x148>
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	07d1      	lsls	r1, r2, #31
 8002a82:	d501      	bpl.n	8002a88 <_printf_float+0x14c>
 8002a84:	3301      	adds	r3, #1
 8002a86:	6123      	str	r3, [r4, #16]
 8002a88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0a2      	beq.n	80029d6 <_printf_float+0x9a>
 8002a90:	232d      	movs	r3, #45	; 0x2d
 8002a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a96:	e79e      	b.n	80029d6 <_printf_float+0x9a>
 8002a98:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002a9c:	f000 816e 	beq.w	8002d7c <_printf_float+0x440>
 8002aa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002aa4:	d1b9      	bne.n	8002a1a <_printf_float+0xde>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1b7      	bne.n	8002a1a <_printf_float+0xde>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e7b4      	b.n	8002a18 <_printf_float+0xdc>
 8002aae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002ab2:	d119      	bne.n	8002ae8 <_printf_float+0x1ac>
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	dd0c      	ble.n	8002ad4 <_printf_float+0x198>
 8002aba:	6121      	str	r1, [r4, #16]
 8002abc:	b913      	cbnz	r3, 8002ac4 <_printf_float+0x188>
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	07d2      	lsls	r2, r2, #31
 8002ac2:	d502      	bpl.n	8002aca <_printf_float+0x18e>
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	440b      	add	r3, r1
 8002ac8:	6123      	str	r3, [r4, #16]
 8002aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002acc:	f04f 0900 	mov.w	r9, #0
 8002ad0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ad2:	e7d9      	b.n	8002a88 <_printf_float+0x14c>
 8002ad4:	b913      	cbnz	r3, 8002adc <_printf_float+0x1a0>
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	07d0      	lsls	r0, r2, #31
 8002ada:	d501      	bpl.n	8002ae0 <_printf_float+0x1a4>
 8002adc:	3302      	adds	r3, #2
 8002ade:	e7f3      	b.n	8002ac8 <_printf_float+0x18c>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e7f1      	b.n	8002ac8 <_printf_float+0x18c>
 8002ae4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002ae8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002aec:	4293      	cmp	r3, r2
 8002aee:	db05      	blt.n	8002afc <_printf_float+0x1c0>
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	6123      	str	r3, [r4, #16]
 8002af4:	07d1      	lsls	r1, r2, #31
 8002af6:	d5e8      	bpl.n	8002aca <_printf_float+0x18e>
 8002af8:	3301      	adds	r3, #1
 8002afa:	e7e5      	b.n	8002ac8 <_printf_float+0x18c>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bfcc      	ite	gt
 8002b00:	2301      	movgt	r3, #1
 8002b02:	f1c3 0302 	rsble	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	e7de      	b.n	8002ac8 <_printf_float+0x18c>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	055a      	lsls	r2, r3, #21
 8002b0e:	d407      	bmi.n	8002b20 <_printf_float+0x1e4>
 8002b10:	6923      	ldr	r3, [r4, #16]
 8002b12:	463a      	mov	r2, r7
 8002b14:	4659      	mov	r1, fp
 8002b16:	4628      	mov	r0, r5
 8002b18:	47b0      	blx	r6
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d129      	bne.n	8002b72 <_printf_float+0x236>
 8002b1e:	e764      	b.n	80029ea <_printf_float+0xae>
 8002b20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002b24:	f240 80d7 	bls.w	8002cd6 <_printf_float+0x39a>
 8002b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f7fd ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8002b34:	b388      	cbz	r0, 8002b9a <_printf_float+0x25e>
 8002b36:	2301      	movs	r3, #1
 8002b38:	4a40      	ldr	r2, [pc, #256]	; (8002c3c <_printf_float+0x300>)
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	47b0      	blx	r6
 8002b40:	3001      	adds	r0, #1
 8002b42:	f43f af52 	beq.w	80029ea <_printf_float+0xae>
 8002b46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	db02      	blt.n	8002b54 <_printf_float+0x218>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	07d8      	lsls	r0, r3, #31
 8002b52:	d50e      	bpl.n	8002b72 <_printf_float+0x236>
 8002b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b58:	4659      	mov	r1, fp
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	47b0      	blx	r6
 8002b5e:	3001      	adds	r0, #1
 8002b60:	f43f af43 	beq.w	80029ea <_printf_float+0xae>
 8002b64:	2700      	movs	r7, #0
 8002b66:	f104 081a 	add.w	r8, r4, #26
 8002b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	42bb      	cmp	r3, r7
 8002b70:	dc09      	bgt.n	8002b86 <_printf_float+0x24a>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	079f      	lsls	r7, r3, #30
 8002b76:	f100 80fd 	bmi.w	8002d74 <_printf_float+0x438>
 8002b7a:	68e0      	ldr	r0, [r4, #12]
 8002b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b7e:	4298      	cmp	r0, r3
 8002b80:	bfb8      	it	lt
 8002b82:	4618      	movlt	r0, r3
 8002b84:	e733      	b.n	80029ee <_printf_float+0xb2>
 8002b86:	2301      	movs	r3, #1
 8002b88:	4642      	mov	r2, r8
 8002b8a:	4659      	mov	r1, fp
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	47b0      	blx	r6
 8002b90:	3001      	adds	r0, #1
 8002b92:	f43f af2a 	beq.w	80029ea <_printf_float+0xae>
 8002b96:	3701      	adds	r7, #1
 8002b98:	e7e7      	b.n	8002b6a <_printf_float+0x22e>
 8002b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dc2b      	bgt.n	8002bf8 <_printf_float+0x2bc>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <_printf_float+0x300>)
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	47b0      	blx	r6
 8002baa:	3001      	adds	r0, #1
 8002bac:	f43f af1d 	beq.w	80029ea <_printf_float+0xae>
 8002bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bb2:	b923      	cbnz	r3, 8002bbe <_printf_float+0x282>
 8002bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bb6:	b913      	cbnz	r3, 8002bbe <_printf_float+0x282>
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	07d9      	lsls	r1, r3, #31
 8002bbc:	d5d9      	bpl.n	8002b72 <_printf_float+0x236>
 8002bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	47b0      	blx	r6
 8002bc8:	3001      	adds	r0, #1
 8002bca:	f43f af0e 	beq.w	80029ea <_printf_float+0xae>
 8002bce:	f04f 0800 	mov.w	r8, #0
 8002bd2:	f104 091a 	add.w	r9, r4, #26
 8002bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bd8:	425b      	negs	r3, r3
 8002bda:	4543      	cmp	r3, r8
 8002bdc:	dc01      	bgt.n	8002be2 <_printf_float+0x2a6>
 8002bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002be0:	e797      	b.n	8002b12 <_printf_float+0x1d6>
 8002be2:	2301      	movs	r3, #1
 8002be4:	464a      	mov	r2, r9
 8002be6:	4659      	mov	r1, fp
 8002be8:	4628      	mov	r0, r5
 8002bea:	47b0      	blx	r6
 8002bec:	3001      	adds	r0, #1
 8002bee:	f43f aefc 	beq.w	80029ea <_printf_float+0xae>
 8002bf2:	f108 0801 	add.w	r8, r8, #1
 8002bf6:	e7ee      	b.n	8002bd6 <_printf_float+0x29a>
 8002bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	bfa8      	it	ge
 8002c00:	461a      	movge	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	4690      	mov	r8, r2
 8002c06:	dd07      	ble.n	8002c18 <_printf_float+0x2dc>
 8002c08:	4613      	mov	r3, r2
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	463a      	mov	r2, r7
 8002c0e:	4628      	mov	r0, r5
 8002c10:	47b0      	blx	r6
 8002c12:	3001      	adds	r0, #1
 8002c14:	f43f aee9 	beq.w	80029ea <_printf_float+0xae>
 8002c18:	f104 031a 	add.w	r3, r4, #26
 8002c1c:	f04f 0a00 	mov.w	sl, #0
 8002c20:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c26:	e015      	b.n	8002c54 <_printf_float+0x318>
 8002c28:	7fefffff 	.word	0x7fefffff
 8002c2c:	08004290 	.word	0x08004290
 8002c30:	0800428c 	.word	0x0800428c
 8002c34:	08004298 	.word	0x08004298
 8002c38:	08004294 	.word	0x08004294
 8002c3c:	0800429c 	.word	0x0800429c
 8002c40:	2301      	movs	r3, #1
 8002c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c44:	4659      	mov	r1, fp
 8002c46:	4628      	mov	r0, r5
 8002c48:	47b0      	blx	r6
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	f43f aecd 	beq.w	80029ea <_printf_float+0xae>
 8002c50:	f10a 0a01 	add.w	sl, sl, #1
 8002c54:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002c58:	eba9 0308 	sub.w	r3, r9, r8
 8002c5c:	4553      	cmp	r3, sl
 8002c5e:	dcef      	bgt.n	8002c40 <_printf_float+0x304>
 8002c60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c64:	429a      	cmp	r2, r3
 8002c66:	444f      	add	r7, r9
 8002c68:	db14      	blt.n	8002c94 <_printf_float+0x358>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	07da      	lsls	r2, r3, #31
 8002c6e:	d411      	bmi.n	8002c94 <_printf_float+0x358>
 8002c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c74:	eba3 0209 	sub.w	r2, r3, r9
 8002c78:	eba3 0901 	sub.w	r9, r3, r1
 8002c7c:	4591      	cmp	r9, r2
 8002c7e:	bfa8      	it	ge
 8002c80:	4691      	movge	r9, r2
 8002c82:	f1b9 0f00 	cmp.w	r9, #0
 8002c86:	dc0d      	bgt.n	8002ca4 <_printf_float+0x368>
 8002c88:	2700      	movs	r7, #0
 8002c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c8e:	f104 081a 	add.w	r8, r4, #26
 8002c92:	e018      	b.n	8002cc6 <_printf_float+0x38a>
 8002c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c98:	4659      	mov	r1, fp
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	47b0      	blx	r6
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d1e6      	bne.n	8002c70 <_printf_float+0x334>
 8002ca2:	e6a2      	b.n	80029ea <_printf_float+0xae>
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	463a      	mov	r2, r7
 8002ca8:	4659      	mov	r1, fp
 8002caa:	4628      	mov	r0, r5
 8002cac:	47b0      	blx	r6
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d1ea      	bne.n	8002c88 <_printf_float+0x34c>
 8002cb2:	e69a      	b.n	80029ea <_printf_float+0xae>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4642      	mov	r2, r8
 8002cb8:	4659      	mov	r1, fp
 8002cba:	4628      	mov	r0, r5
 8002cbc:	47b0      	blx	r6
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	f43f ae93 	beq.w	80029ea <_printf_float+0xae>
 8002cc4:	3701      	adds	r7, #1
 8002cc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	eba3 0309 	sub.w	r3, r3, r9
 8002cd0:	42bb      	cmp	r3, r7
 8002cd2:	dcef      	bgt.n	8002cb4 <_printf_float+0x378>
 8002cd4:	e74d      	b.n	8002b72 <_printf_float+0x236>
 8002cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cd8:	2a01      	cmp	r2, #1
 8002cda:	dc01      	bgt.n	8002ce0 <_printf_float+0x3a4>
 8002cdc:	07db      	lsls	r3, r3, #31
 8002cde:	d538      	bpl.n	8002d52 <_printf_float+0x416>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	463a      	mov	r2, r7
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	47b0      	blx	r6
 8002cea:	3001      	adds	r0, #1
 8002cec:	f43f ae7d 	beq.w	80029ea <_printf_float+0xae>
 8002cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	47b0      	blx	r6
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	f107 0701 	add.w	r7, r7, #1
 8002d00:	f43f ae73 	beq.w	80029ea <_printf_float+0xae>
 8002d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8002d10:	2300      	movs	r3, #0
 8002d12:	f7fd fe49 	bl	80009a8 <__aeabi_dcmpeq>
 8002d16:	b9c0      	cbnz	r0, 8002d4a <_printf_float+0x40e>
 8002d18:	4643      	mov	r3, r8
 8002d1a:	463a      	mov	r2, r7
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	4628      	mov	r0, r5
 8002d20:	47b0      	blx	r6
 8002d22:	3001      	adds	r0, #1
 8002d24:	d10d      	bne.n	8002d42 <_printf_float+0x406>
 8002d26:	e660      	b.n	80029ea <_printf_float+0xae>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	4659      	mov	r1, fp
 8002d2e:	4628      	mov	r0, r5
 8002d30:	47b0      	blx	r6
 8002d32:	3001      	adds	r0, #1
 8002d34:	f43f ae59 	beq.w	80029ea <_printf_float+0xae>
 8002d38:	3701      	adds	r7, #1
 8002d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	42bb      	cmp	r3, r7
 8002d40:	dcf2      	bgt.n	8002d28 <_printf_float+0x3ec>
 8002d42:	464b      	mov	r3, r9
 8002d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d48:	e6e4      	b.n	8002b14 <_printf_float+0x1d8>
 8002d4a:	2700      	movs	r7, #0
 8002d4c:	f104 081a 	add.w	r8, r4, #26
 8002d50:	e7f3      	b.n	8002d3a <_printf_float+0x3fe>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e7e1      	b.n	8002d1a <_printf_float+0x3de>
 8002d56:	2301      	movs	r3, #1
 8002d58:	4642      	mov	r2, r8
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	47b0      	blx	r6
 8002d60:	3001      	adds	r0, #1
 8002d62:	f43f ae42 	beq.w	80029ea <_printf_float+0xae>
 8002d66:	3701      	adds	r7, #1
 8002d68:	68e3      	ldr	r3, [r4, #12]
 8002d6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	42bb      	cmp	r3, r7
 8002d70:	dcf1      	bgt.n	8002d56 <_printf_float+0x41a>
 8002d72:	e702      	b.n	8002b7a <_printf_float+0x23e>
 8002d74:	2700      	movs	r7, #0
 8002d76:	f104 0819 	add.w	r8, r4, #25
 8002d7a:	e7f5      	b.n	8002d68 <_printf_float+0x42c>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f43f ae94 	beq.w	8002aaa <_printf_float+0x16e>
 8002d82:	f04f 0c00 	mov.w	ip, #0
 8002d86:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002d8a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002d8e:	6022      	str	r2, [r4, #0]
 8002d90:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002d94:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	463a      	mov	r2, r7
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f7ff fd3a 	bl	8002818 <__cvt>
 8002da4:	4607      	mov	r7, r0
 8002da6:	e64f      	b.n	8002a48 <_printf_float+0x10c>

08002da8 <_printf_common>:
 8002da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dac:	4691      	mov	r9, r2
 8002dae:	461f      	mov	r7, r3
 8002db0:	688a      	ldr	r2, [r1, #8]
 8002db2:	690b      	ldr	r3, [r1, #16]
 8002db4:	4606      	mov	r6, r0
 8002db6:	4293      	cmp	r3, r2
 8002db8:	bfb8      	it	lt
 8002dba:	4613      	movlt	r3, r2
 8002dbc:	f8c9 3000 	str.w	r3, [r9]
 8002dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dca:	b112      	cbz	r2, 8002dd2 <_printf_common+0x2a>
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f8c9 3000 	str.w	r3, [r9]
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	0699      	lsls	r1, r3, #26
 8002dd6:	bf42      	ittt	mi
 8002dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ddc:	3302      	addmi	r3, #2
 8002dde:	f8c9 3000 	strmi.w	r3, [r9]
 8002de2:	6825      	ldr	r5, [r4, #0]
 8002de4:	f015 0506 	ands.w	r5, r5, #6
 8002de8:	d107      	bne.n	8002dfa <_printf_common+0x52>
 8002dea:	f104 0a19 	add.w	sl, r4, #25
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	f8d9 2000 	ldr.w	r2, [r9]
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	42ab      	cmp	r3, r5
 8002df8:	dc29      	bgt.n	8002e4e <_printf_common+0xa6>
 8002dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	3300      	adds	r3, #0
 8002e02:	bf18      	it	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	0692      	lsls	r2, r2, #26
 8002e08:	d42e      	bmi.n	8002e68 <_printf_common+0xc0>
 8002e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e0e:	4639      	mov	r1, r7
 8002e10:	4630      	mov	r0, r6
 8002e12:	47c0      	blx	r8
 8002e14:	3001      	adds	r0, #1
 8002e16:	d021      	beq.n	8002e5c <_printf_common+0xb4>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	68e5      	ldr	r5, [r4, #12]
 8002e1c:	f003 0306 	and.w	r3, r3, #6
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	bf18      	it	ne
 8002e24:	2500      	movne	r5, #0
 8002e26:	f8d9 2000 	ldr.w	r2, [r9]
 8002e2a:	f04f 0900 	mov.w	r9, #0
 8002e2e:	bf08      	it	eq
 8002e30:	1aad      	subeq	r5, r5, r2
 8002e32:	68a3      	ldr	r3, [r4, #8]
 8002e34:	6922      	ldr	r2, [r4, #16]
 8002e36:	bf08      	it	eq
 8002e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bfc4      	itt	gt
 8002e40:	1a9b      	subgt	r3, r3, r2
 8002e42:	18ed      	addgt	r5, r5, r3
 8002e44:	341a      	adds	r4, #26
 8002e46:	454d      	cmp	r5, r9
 8002e48:	d11a      	bne.n	8002e80 <_printf_common+0xd8>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e008      	b.n	8002e60 <_printf_common+0xb8>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4639      	mov	r1, r7
 8002e54:	4630      	mov	r0, r6
 8002e56:	47c0      	blx	r8
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_printf_common+0xbc>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7c2      	b.n	8002dee <_printf_common+0x46>
 8002e68:	2030      	movs	r0, #48	; 0x30
 8002e6a:	18e1      	adds	r1, r4, r3
 8002e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e76:	4422      	add	r2, r4
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e7e:	e7c4      	b.n	8002e0a <_printf_common+0x62>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4622      	mov	r2, r4
 8002e84:	4639      	mov	r1, r7
 8002e86:	4630      	mov	r0, r6
 8002e88:	47c0      	blx	r8
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0e6      	beq.n	8002e5c <_printf_common+0xb4>
 8002e8e:	f109 0901 	add.w	r9, r9, #1
 8002e92:	e7d8      	b.n	8002e46 <_printf_common+0x9e>

08002e94 <quorem>:
 8002e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e98:	6903      	ldr	r3, [r0, #16]
 8002e9a:	690c      	ldr	r4, [r1, #16]
 8002e9c:	4680      	mov	r8, r0
 8002e9e:	42a3      	cmp	r3, r4
 8002ea0:	f2c0 8084 	blt.w	8002fac <quorem+0x118>
 8002ea4:	3c01      	subs	r4, #1
 8002ea6:	f101 0714 	add.w	r7, r1, #20
 8002eaa:	f100 0614 	add.w	r6, r0, #20
 8002eae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002eb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ebc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002ec0:	eb06 030c 	add.w	r3, r6, ip
 8002ec4:	eb07 090c 	add.w	r9, r7, ip
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	b39d      	cbz	r5, 8002f34 <quorem+0xa0>
 8002ecc:	f04f 0a00 	mov.w	sl, #0
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	46b6      	mov	lr, r6
 8002ed4:	46d3      	mov	fp, sl
 8002ed6:	f850 2b04 	ldr.w	r2, [r0], #4
 8002eda:	b293      	uxth	r3, r2
 8002edc:	fb05 a303 	mla	r3, r5, r3, sl
 8002ee0:	0c12      	lsrs	r2, r2, #16
 8002ee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002ee6:	fb05 a202 	mla	r2, r5, r2, sl
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	ebab 0303 	sub.w	r3, fp, r3
 8002ef0:	f8de b000 	ldr.w	fp, [lr]
 8002ef4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002ef8:	fa1f fb8b 	uxth.w	fp, fp
 8002efc:	445b      	add	r3, fp
 8002efe:	fa1f fb82 	uxth.w	fp, r2
 8002f02:	f8de 2000 	ldr.w	r2, [lr]
 8002f06:	4581      	cmp	r9, r0
 8002f08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f16:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002f1a:	f84e 3b04 	str.w	r3, [lr], #4
 8002f1e:	d2da      	bcs.n	8002ed6 <quorem+0x42>
 8002f20:	f856 300c 	ldr.w	r3, [r6, ip]
 8002f24:	b933      	cbnz	r3, 8002f34 <quorem+0xa0>
 8002f26:	9b01      	ldr	r3, [sp, #4]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	429e      	cmp	r6, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	d331      	bcc.n	8002f94 <quorem+0x100>
 8002f30:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f34:	4640      	mov	r0, r8
 8002f36:	f001 f825 	bl	8003f84 <__mcmp>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	db26      	blt.n	8002f8c <quorem+0xf8>
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f04f 0c00 	mov.w	ip, #0
 8002f44:	3501      	adds	r5, #1
 8002f46:	f857 1b04 	ldr.w	r1, [r7], #4
 8002f4a:	f8d0 e000 	ldr.w	lr, [r0]
 8002f4e:	b28b      	uxth	r3, r1
 8002f50:	ebac 0303 	sub.w	r3, ip, r3
 8002f54:	fa1f f28e 	uxth.w	r2, lr
 8002f58:	4413      	add	r3, r2
 8002f5a:	0c0a      	lsrs	r2, r1, #16
 8002f5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f6a:	45b9      	cmp	r9, r7
 8002f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002f70:	f840 3b04 	str.w	r3, [r0], #4
 8002f74:	d2e7      	bcs.n	8002f46 <quorem+0xb2>
 8002f76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002f7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002f7e:	b92a      	cbnz	r2, 8002f8c <quorem+0xf8>
 8002f80:	3b04      	subs	r3, #4
 8002f82:	429e      	cmp	r6, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	d30b      	bcc.n	8002fa0 <quorem+0x10c>
 8002f88:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	b003      	add	sp, #12
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	3b04      	subs	r3, #4
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d1c9      	bne.n	8002f30 <quorem+0x9c>
 8002f9c:	3c01      	subs	r4, #1
 8002f9e:	e7c4      	b.n	8002f2a <quorem+0x96>
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	3b04      	subs	r3, #4
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d1ef      	bne.n	8002f88 <quorem+0xf4>
 8002fa8:	3c01      	subs	r4, #1
 8002faa:	e7ea      	b.n	8002f82 <quorem+0xee>
 8002fac:	2000      	movs	r0, #0
 8002fae:	e7ee      	b.n	8002f8e <quorem+0xfa>

08002fb0 <_dtoa_r>:
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	461f      	mov	r7, r3
 8002fb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002fba:	b095      	sub	sp, #84	; 0x54
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002fc2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002fc6:	b93d      	cbnz	r5, 8002fd8 <_dtoa_r+0x28>
 8002fc8:	2010      	movs	r0, #16
 8002fca:	f000 fdb3 	bl	8003b34 <malloc>
 8002fce:	6260      	str	r0, [r4, #36]	; 0x24
 8002fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002fd4:	6005      	str	r5, [r0, #0]
 8002fd6:	60c5      	str	r5, [r0, #12]
 8002fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	b151      	cbz	r1, 8002ff4 <_dtoa_r+0x44>
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4093      	lsls	r3, r2
 8002fe4:	604a      	str	r2, [r1, #4]
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 fdea 	bl	8003bc2 <_Bfree>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	1e3b      	subs	r3, r7, #0
 8002ff6:	bfaf      	iteee	ge
 8002ff8:	2300      	movge	r3, #0
 8002ffa:	2201      	movlt	r2, #1
 8002ffc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003000:	9303      	strlt	r3, [sp, #12]
 8003002:	bfac      	ite	ge
 8003004:	f8c8 3000 	strge.w	r3, [r8]
 8003008:	f8c8 2000 	strlt.w	r2, [r8]
 800300c:	4bae      	ldr	r3, [pc, #696]	; (80032c8 <_dtoa_r+0x318>)
 800300e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003012:	ea33 0308 	bics.w	r3, r3, r8
 8003016:	d11b      	bne.n	8003050 <_dtoa_r+0xa0>
 8003018:	f242 730f 	movw	r3, #9999	; 0x270f
 800301c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	9b02      	ldr	r3, [sp, #8]
 8003022:	b923      	cbnz	r3, 800302e <_dtoa_r+0x7e>
 8003024:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003028:	2800      	cmp	r0, #0
 800302a:	f000 8545 	beq.w	8003ab8 <_dtoa_r+0xb08>
 800302e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003030:	b953      	cbnz	r3, 8003048 <_dtoa_r+0x98>
 8003032:	4ba6      	ldr	r3, [pc, #664]	; (80032cc <_dtoa_r+0x31c>)
 8003034:	e021      	b.n	800307a <_dtoa_r+0xca>
 8003036:	4ba6      	ldr	r3, [pc, #664]	; (80032d0 <_dtoa_r+0x320>)
 8003038:	9306      	str	r3, [sp, #24]
 800303a:	3308      	adds	r3, #8
 800303c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	9806      	ldr	r0, [sp, #24]
 8003042:	b015      	add	sp, #84	; 0x54
 8003044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003048:	4ba0      	ldr	r3, [pc, #640]	; (80032cc <_dtoa_r+0x31c>)
 800304a:	9306      	str	r3, [sp, #24]
 800304c:	3303      	adds	r3, #3
 800304e:	e7f5      	b.n	800303c <_dtoa_r+0x8c>
 8003050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003054:	2200      	movs	r2, #0
 8003056:	2300      	movs	r3, #0
 8003058:	4630      	mov	r0, r6
 800305a:	4639      	mov	r1, r7
 800305c:	f7fd fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8003060:	4682      	mov	sl, r0
 8003062:	b160      	cbz	r0, 800307e <_dtoa_r+0xce>
 8003064:	2301      	movs	r3, #1
 8003066:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8520 	beq.w	8003ab2 <_dtoa_r+0xb02>
 8003072:	4b98      	ldr	r3, [pc, #608]	; (80032d4 <_dtoa_r+0x324>)
 8003074:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	9306      	str	r3, [sp, #24]
 800307c:	e7e0      	b.n	8003040 <_dtoa_r+0x90>
 800307e:	ab12      	add	r3, sp, #72	; 0x48
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	ab13      	add	r3, sp, #76	; 0x4c
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4632      	mov	r2, r6
 8003088:	463b      	mov	r3, r7
 800308a:	4620      	mov	r0, r4
 800308c:	f000 fff2 	bl	8004074 <__d2b>
 8003090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003094:	4683      	mov	fp, r0
 8003096:	2d00      	cmp	r5, #0
 8003098:	d07d      	beq.n	8003196 <_dtoa_r+0x1e6>
 800309a:	46b0      	mov	r8, r6
 800309c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80030a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80030a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80030a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80030ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80030b0:	2200      	movs	r2, #0
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <_dtoa_r+0x328>)
 80030b4:	4640      	mov	r0, r8
 80030b6:	4649      	mov	r1, r9
 80030b8:	f7fd f856 	bl	8000168 <__aeabi_dsub>
 80030bc:	a37c      	add	r3, pc, #496	; (adr r3, 80032b0 <_dtoa_r+0x300>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd fa09 	bl	80004d8 <__aeabi_dmul>
 80030c6:	a37c      	add	r3, pc, #496	; (adr r3, 80032b8 <_dtoa_r+0x308>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd f84e 	bl	800016c <__adddf3>
 80030d0:	4606      	mov	r6, r0
 80030d2:	4628      	mov	r0, r5
 80030d4:	460f      	mov	r7, r1
 80030d6:	f7fd f995 	bl	8000404 <__aeabi_i2d>
 80030da:	a379      	add	r3, pc, #484	; (adr r3, 80032c0 <_dtoa_r+0x310>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f7fd f9fa 	bl	80004d8 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4630      	mov	r0, r6
 80030ea:	4639      	mov	r1, r7
 80030ec:	f7fd f83e 	bl	800016c <__adddf3>
 80030f0:	4606      	mov	r6, r0
 80030f2:	460f      	mov	r7, r1
 80030f4:	f7fd fca0 	bl	8000a38 <__aeabi_d2iz>
 80030f8:	2200      	movs	r2, #0
 80030fa:	4682      	mov	sl, r0
 80030fc:	2300      	movs	r3, #0
 80030fe:	4630      	mov	r0, r6
 8003100:	4639      	mov	r1, r7
 8003102:	f7fd fc5b 	bl	80009bc <__aeabi_dcmplt>
 8003106:	b148      	cbz	r0, 800311c <_dtoa_r+0x16c>
 8003108:	4650      	mov	r0, sl
 800310a:	f7fd f97b 	bl	8000404 <__aeabi_i2d>
 800310e:	4632      	mov	r2, r6
 8003110:	463b      	mov	r3, r7
 8003112:	f7fd fc49 	bl	80009a8 <__aeabi_dcmpeq>
 8003116:	b908      	cbnz	r0, 800311c <_dtoa_r+0x16c>
 8003118:	f10a 3aff 	add.w	sl, sl, #4294967295
 800311c:	f1ba 0f16 	cmp.w	sl, #22
 8003120:	d85a      	bhi.n	80031d8 <_dtoa_r+0x228>
 8003122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003126:	496d      	ldr	r1, [pc, #436]	; (80032dc <_dtoa_r+0x32c>)
 8003128:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800312c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003130:	f7fd fc62 	bl	80009f8 <__aeabi_dcmpgt>
 8003134:	2800      	cmp	r0, #0
 8003136:	d051      	beq.n	80031dc <_dtoa_r+0x22c>
 8003138:	2300      	movs	r3, #0
 800313a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800313e:	930d      	str	r3, [sp, #52]	; 0x34
 8003140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003142:	1b5d      	subs	r5, r3, r5
 8003144:	1e6b      	subs	r3, r5, #1
 8003146:	9307      	str	r3, [sp, #28]
 8003148:	bf43      	ittte	mi
 800314a:	2300      	movmi	r3, #0
 800314c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003150:	9307      	strmi	r3, [sp, #28]
 8003152:	f04f 0900 	movpl.w	r9, #0
 8003156:	f1ba 0f00 	cmp.w	sl, #0
 800315a:	db41      	blt.n	80031e0 <_dtoa_r+0x230>
 800315c:	9b07      	ldr	r3, [sp, #28]
 800315e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003162:	4453      	add	r3, sl
 8003164:	9307      	str	r3, [sp, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	9308      	str	r3, [sp, #32]
 800316a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800316c:	2b09      	cmp	r3, #9
 800316e:	f200 808f 	bhi.w	8003290 <_dtoa_r+0x2e0>
 8003172:	2b05      	cmp	r3, #5
 8003174:	bfc4      	itt	gt
 8003176:	3b04      	subgt	r3, #4
 8003178:	931e      	strgt	r3, [sp, #120]	; 0x78
 800317a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800317c:	bfc8      	it	gt
 800317e:	2500      	movgt	r5, #0
 8003180:	f1a3 0302 	sub.w	r3, r3, #2
 8003184:	bfd8      	it	le
 8003186:	2501      	movle	r5, #1
 8003188:	2b03      	cmp	r3, #3
 800318a:	f200 808d 	bhi.w	80032a8 <_dtoa_r+0x2f8>
 800318e:	e8df f003 	tbb	[pc, r3]
 8003192:	7d7b      	.short	0x7d7b
 8003194:	6f2f      	.short	0x6f2f
 8003196:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800319a:	441d      	add	r5, r3
 800319c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80031a0:	2820      	cmp	r0, #32
 80031a2:	dd13      	ble.n	80031cc <_dtoa_r+0x21c>
 80031a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80031a8:	9b02      	ldr	r3, [sp, #8]
 80031aa:	fa08 f800 	lsl.w	r8, r8, r0
 80031ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80031b2:	fa23 f000 	lsr.w	r0, r3, r0
 80031b6:	ea48 0000 	orr.w	r0, r8, r0
 80031ba:	f7fd f913 	bl	80003e4 <__aeabi_ui2d>
 80031be:	2301      	movs	r3, #1
 80031c0:	4680      	mov	r8, r0
 80031c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80031c6:	3d01      	subs	r5, #1
 80031c8:	9310      	str	r3, [sp, #64]	; 0x40
 80031ca:	e771      	b.n	80030b0 <_dtoa_r+0x100>
 80031cc:	9b02      	ldr	r3, [sp, #8]
 80031ce:	f1c0 0020 	rsb	r0, r0, #32
 80031d2:	fa03 f000 	lsl.w	r0, r3, r0
 80031d6:	e7f0      	b.n	80031ba <_dtoa_r+0x20a>
 80031d8:	2301      	movs	r3, #1
 80031da:	e7b0      	b.n	800313e <_dtoa_r+0x18e>
 80031dc:	900d      	str	r0, [sp, #52]	; 0x34
 80031de:	e7af      	b.n	8003140 <_dtoa_r+0x190>
 80031e0:	f1ca 0300 	rsb	r3, sl, #0
 80031e4:	9308      	str	r3, [sp, #32]
 80031e6:	2300      	movs	r3, #0
 80031e8:	eba9 090a 	sub.w	r9, r9, sl
 80031ec:	930c      	str	r3, [sp, #48]	; 0x30
 80031ee:	e7bc      	b.n	800316a <_dtoa_r+0x1ba>
 80031f0:	2301      	movs	r3, #1
 80031f2:	9309      	str	r3, [sp, #36]	; 0x24
 80031f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	dd74      	ble.n	80032e4 <_dtoa_r+0x334>
 80031fa:	4698      	mov	r8, r3
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	2200      	movs	r2, #0
 8003200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003202:	6072      	str	r2, [r6, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	f102 0014 	add.w	r0, r2, #20
 800320a:	4298      	cmp	r0, r3
 800320c:	6871      	ldr	r1, [r6, #4]
 800320e:	d96e      	bls.n	80032ee <_dtoa_r+0x33e>
 8003210:	4620      	mov	r0, r4
 8003212:	f000 fca2 	bl	8003b5a <_Balloc>
 8003216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003218:	6030      	str	r0, [r6, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b8 0f0e 	cmp.w	r8, #14
 8003220:	9306      	str	r3, [sp, #24]
 8003222:	f200 80ed 	bhi.w	8003400 <_dtoa_r+0x450>
 8003226:	2d00      	cmp	r5, #0
 8003228:	f000 80ea 	beq.w	8003400 <_dtoa_r+0x450>
 800322c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003230:	f1ba 0f00 	cmp.w	sl, #0
 8003234:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003238:	dd77      	ble.n	800332a <_dtoa_r+0x37a>
 800323a:	4a28      	ldr	r2, [pc, #160]	; (80032dc <_dtoa_r+0x32c>)
 800323c:	f00a 030f 	and.w	r3, sl, #15
 8003240:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003248:	06f0      	lsls	r0, r6, #27
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003252:	d568      	bpl.n	8003326 <_dtoa_r+0x376>
 8003254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <_dtoa_r+0x330>)
 800325a:	2503      	movs	r5, #3
 800325c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003260:	f7fd fa64 	bl	800072c <__aeabi_ddiv>
 8003264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003268:	f006 060f 	and.w	r6, r6, #15
 800326c:	4f1c      	ldr	r7, [pc, #112]	; (80032e0 <_dtoa_r+0x330>)
 800326e:	e04f      	b.n	8003310 <_dtoa_r+0x360>
 8003270:	2301      	movs	r3, #1
 8003272:	9309      	str	r3, [sp, #36]	; 0x24
 8003274:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003276:	4453      	add	r3, sl
 8003278:	f103 0801 	add.w	r8, r3, #1
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	4643      	mov	r3, r8
 8003280:	2b01      	cmp	r3, #1
 8003282:	bfb8      	it	lt
 8003284:	2301      	movlt	r3, #1
 8003286:	e7ba      	b.n	80031fe <_dtoa_r+0x24e>
 8003288:	2300      	movs	r3, #0
 800328a:	e7b2      	b.n	80031f2 <_dtoa_r+0x242>
 800328c:	2300      	movs	r3, #0
 800328e:	e7f0      	b.n	8003272 <_dtoa_r+0x2c2>
 8003290:	2501      	movs	r5, #1
 8003292:	2300      	movs	r3, #0
 8003294:	9509      	str	r5, [sp, #36]	; 0x24
 8003296:	931e      	str	r3, [sp, #120]	; 0x78
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	2200      	movs	r2, #0
 800329e:	9304      	str	r3, [sp, #16]
 80032a0:	4698      	mov	r8, r3
 80032a2:	2312      	movs	r3, #18
 80032a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80032a6:	e7aa      	b.n	80031fe <_dtoa_r+0x24e>
 80032a8:	2301      	movs	r3, #1
 80032aa:	9309      	str	r3, [sp, #36]	; 0x24
 80032ac:	e7f4      	b.n	8003298 <_dtoa_r+0x2e8>
 80032ae:	bf00      	nop
 80032b0:	636f4361 	.word	0x636f4361
 80032b4:	3fd287a7 	.word	0x3fd287a7
 80032b8:	8b60c8b3 	.word	0x8b60c8b3
 80032bc:	3fc68a28 	.word	0x3fc68a28
 80032c0:	509f79fb 	.word	0x509f79fb
 80032c4:	3fd34413 	.word	0x3fd34413
 80032c8:	7ff00000 	.word	0x7ff00000
 80032cc:	080042a7 	.word	0x080042a7
 80032d0:	0800429e 	.word	0x0800429e
 80032d4:	0800429d 	.word	0x0800429d
 80032d8:	3ff80000 	.word	0x3ff80000
 80032dc:	080042d8 	.word	0x080042d8
 80032e0:	080042b0 	.word	0x080042b0
 80032e4:	2301      	movs	r3, #1
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	4698      	mov	r8, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	e7da      	b.n	80032a4 <_dtoa_r+0x2f4>
 80032ee:	3101      	adds	r1, #1
 80032f0:	6071      	str	r1, [r6, #4]
 80032f2:	0052      	lsls	r2, r2, #1
 80032f4:	e787      	b.n	8003206 <_dtoa_r+0x256>
 80032f6:	07f1      	lsls	r1, r6, #31
 80032f8:	d508      	bpl.n	800330c <_dtoa_r+0x35c>
 80032fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003302:	f7fd f8e9 	bl	80004d8 <__aeabi_dmul>
 8003306:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800330a:	3501      	adds	r5, #1
 800330c:	1076      	asrs	r6, r6, #1
 800330e:	3708      	adds	r7, #8
 8003310:	2e00      	cmp	r6, #0
 8003312:	d1f0      	bne.n	80032f6 <_dtoa_r+0x346>
 8003314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800331c:	f7fd fa06 	bl	800072c <__aeabi_ddiv>
 8003320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003324:	e01b      	b.n	800335e <_dtoa_r+0x3ae>
 8003326:	2502      	movs	r5, #2
 8003328:	e7a0      	b.n	800326c <_dtoa_r+0x2bc>
 800332a:	f000 80a4 	beq.w	8003476 <_dtoa_r+0x4c6>
 800332e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003332:	f1ca 0600 	rsb	r6, sl, #0
 8003336:	4ba0      	ldr	r3, [pc, #640]	; (80035b8 <_dtoa_r+0x608>)
 8003338:	f006 020f 	and.w	r2, r6, #15
 800333c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd f8c8 	bl	80004d8 <__aeabi_dmul>
 8003348:	2502      	movs	r5, #2
 800334a:	2300      	movs	r3, #0
 800334c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003350:	4f9a      	ldr	r7, [pc, #616]	; (80035bc <_dtoa_r+0x60c>)
 8003352:	1136      	asrs	r6, r6, #4
 8003354:	2e00      	cmp	r6, #0
 8003356:	f040 8083 	bne.w	8003460 <_dtoa_r+0x4b0>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e0      	bne.n	8003320 <_dtoa_r+0x370>
 800335e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 808a 	beq.w	800347a <_dtoa_r+0x4ca>
 8003366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800336a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800336e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003372:	2200      	movs	r2, #0
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <_dtoa_r+0x610>)
 8003376:	f7fd fb21 	bl	80009bc <__aeabi_dcmplt>
 800337a:	2800      	cmp	r0, #0
 800337c:	d07d      	beq.n	800347a <_dtoa_r+0x4ca>
 800337e:	f1b8 0f00 	cmp.w	r8, #0
 8003382:	d07a      	beq.n	800347a <_dtoa_r+0x4ca>
 8003384:	9b04      	ldr	r3, [sp, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	dd36      	ble.n	80033f8 <_dtoa_r+0x448>
 800338a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800338e:	2200      	movs	r2, #0
 8003390:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <_dtoa_r+0x614>)
 8003392:	f7fd f8a1 	bl	80004d8 <__aeabi_dmul>
 8003396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800339a:	9e04      	ldr	r6, [sp, #16]
 800339c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80033a0:	3501      	adds	r5, #1
 80033a2:	4628      	mov	r0, r5
 80033a4:	f7fd f82e 	bl	8000404 <__aeabi_i2d>
 80033a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033ac:	f7fd f894 	bl	80004d8 <__aeabi_dmul>
 80033b0:	2200      	movs	r2, #0
 80033b2:	4b85      	ldr	r3, [pc, #532]	; (80035c8 <_dtoa_r+0x618>)
 80033b4:	f7fc feda 	bl	800016c <__adddf3>
 80033b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80033bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80033c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	d15c      	bne.n	8003480 <_dtoa_r+0x4d0>
 80033c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <_dtoa_r+0x61c>)
 80033ce:	f7fc fecb 	bl	8000168 <__aeabi_dsub>
 80033d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033d4:	462b      	mov	r3, r5
 80033d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033da:	f7fd fb0d 	bl	80009f8 <__aeabi_dcmpgt>
 80033de:	2800      	cmp	r0, #0
 80033e0:	f040 8281 	bne.w	80038e6 <_dtoa_r+0x936>
 80033e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80033ee:	f7fd fae5 	bl	80009bc <__aeabi_dcmplt>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	f040 8275 	bne.w	80038e2 <_dtoa_r+0x932>
 80033f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80033fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003402:	2b00      	cmp	r3, #0
 8003404:	f2c0 814b 	blt.w	800369e <_dtoa_r+0x6ee>
 8003408:	f1ba 0f0e 	cmp.w	sl, #14
 800340c:	f300 8147 	bgt.w	800369e <_dtoa_r+0x6ee>
 8003410:	4b69      	ldr	r3, [pc, #420]	; (80035b8 <_dtoa_r+0x608>)
 8003412:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800341e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003420:	2b00      	cmp	r3, #0
 8003422:	f280 80d7 	bge.w	80035d4 <_dtoa_r+0x624>
 8003426:	f1b8 0f00 	cmp.w	r8, #0
 800342a:	f300 80d3 	bgt.w	80035d4 <_dtoa_r+0x624>
 800342e:	f040 8257 	bne.w	80038e0 <_dtoa_r+0x930>
 8003432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003436:	2200      	movs	r2, #0
 8003438:	4b64      	ldr	r3, [pc, #400]	; (80035cc <_dtoa_r+0x61c>)
 800343a:	f7fd f84d 	bl	80004d8 <__aeabi_dmul>
 800343e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003442:	f7fd facf 	bl	80009e4 <__aeabi_dcmpge>
 8003446:	4646      	mov	r6, r8
 8003448:	4647      	mov	r7, r8
 800344a:	2800      	cmp	r0, #0
 800344c:	f040 822d 	bne.w	80038aa <_dtoa_r+0x8fa>
 8003450:	9b06      	ldr	r3, [sp, #24]
 8003452:	9a06      	ldr	r2, [sp, #24]
 8003454:	1c5d      	adds	r5, r3, #1
 8003456:	2331      	movs	r3, #49	; 0x31
 8003458:	f10a 0a01 	add.w	sl, sl, #1
 800345c:	7013      	strb	r3, [r2, #0]
 800345e:	e228      	b.n	80038b2 <_dtoa_r+0x902>
 8003460:	07f2      	lsls	r2, r6, #31
 8003462:	d505      	bpl.n	8003470 <_dtoa_r+0x4c0>
 8003464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003468:	f7fd f836 	bl	80004d8 <__aeabi_dmul>
 800346c:	2301      	movs	r3, #1
 800346e:	3501      	adds	r5, #1
 8003470:	1076      	asrs	r6, r6, #1
 8003472:	3708      	adds	r7, #8
 8003474:	e76e      	b.n	8003354 <_dtoa_r+0x3a4>
 8003476:	2502      	movs	r5, #2
 8003478:	e771      	b.n	800335e <_dtoa_r+0x3ae>
 800347a:	4657      	mov	r7, sl
 800347c:	4646      	mov	r6, r8
 800347e:	e790      	b.n	80033a2 <_dtoa_r+0x3f2>
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <_dtoa_r+0x608>)
 8003482:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003486:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800348a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d048      	beq.n	8003522 <_dtoa_r+0x572>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	2000      	movs	r0, #0
 8003496:	494e      	ldr	r1, [pc, #312]	; (80035d0 <_dtoa_r+0x620>)
 8003498:	f7fd f948 	bl	800072c <__aeabi_ddiv>
 800349c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034a0:	f7fc fe62 	bl	8000168 <__aeabi_dsub>
 80034a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034a8:	9d06      	ldr	r5, [sp, #24]
 80034aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ae:	f7fd fac3 	bl	8000a38 <__aeabi_d2iz>
 80034b2:	9011      	str	r0, [sp, #68]	; 0x44
 80034b4:	f7fc ffa6 	bl	8000404 <__aeabi_i2d>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034c0:	f7fc fe52 	bl	8000168 <__aeabi_dsub>
 80034c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034ca:	3330      	adds	r3, #48	; 0x30
 80034cc:	f805 3b01 	strb.w	r3, [r5], #1
 80034d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034d4:	f7fd fa72 	bl	80009bc <__aeabi_dcmplt>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d163      	bne.n	80035a4 <_dtoa_r+0x5f4>
 80034dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034e0:	2000      	movs	r0, #0
 80034e2:	4937      	ldr	r1, [pc, #220]	; (80035c0 <_dtoa_r+0x610>)
 80034e4:	f7fc fe40 	bl	8000168 <__aeabi_dsub>
 80034e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034ec:	f7fd fa66 	bl	80009bc <__aeabi_dcmplt>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	f040 80b5 	bne.w	8003660 <_dtoa_r+0x6b0>
 80034f6:	9b06      	ldr	r3, [sp, #24]
 80034f8:	1aeb      	subs	r3, r5, r3
 80034fa:	429e      	cmp	r6, r3
 80034fc:	f77f af7c 	ble.w	80033f8 <_dtoa_r+0x448>
 8003500:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003504:	2200      	movs	r2, #0
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <_dtoa_r+0x614>)
 8003508:	f7fc ffe6 	bl	80004d8 <__aeabi_dmul>
 800350c:	2200      	movs	r2, #0
 800350e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <_dtoa_r+0x614>)
 8003518:	f7fc ffde 	bl	80004d8 <__aeabi_dmul>
 800351c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003520:	e7c3      	b.n	80034aa <_dtoa_r+0x4fa>
 8003522:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003526:	f7fc ffd7 	bl	80004d8 <__aeabi_dmul>
 800352a:	9b06      	ldr	r3, [sp, #24]
 800352c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003530:	199d      	adds	r5, r3, r6
 8003532:	461e      	mov	r6, r3
 8003534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003538:	f7fd fa7e 	bl	8000a38 <__aeabi_d2iz>
 800353c:	9011      	str	r0, [sp, #68]	; 0x44
 800353e:	f7fc ff61 	bl	8000404 <__aeabi_i2d>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800354a:	f7fc fe0d 	bl	8000168 <__aeabi_dsub>
 800354e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003554:	3330      	adds	r3, #48	; 0x30
 8003556:	f806 3b01 	strb.w	r3, [r6], #1
 800355a:	42ae      	cmp	r6, r5
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	d124      	bne.n	80035ac <_dtoa_r+0x5fc>
 8003562:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <_dtoa_r+0x620>)
 8003568:	f7fc fe00 	bl	800016c <__adddf3>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003574:	f7fd fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8003578:	2800      	cmp	r0, #0
 800357a:	d171      	bne.n	8003660 <_dtoa_r+0x6b0>
 800357c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003580:	2000      	movs	r0, #0
 8003582:	4913      	ldr	r1, [pc, #76]	; (80035d0 <_dtoa_r+0x620>)
 8003584:	f7fc fdf0 	bl	8000168 <__aeabi_dsub>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003590:	f7fd fa14 	bl	80009bc <__aeabi_dcmplt>
 8003594:	2800      	cmp	r0, #0
 8003596:	f43f af2f 	beq.w	80033f8 <_dtoa_r+0x448>
 800359a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800359e:	1e6a      	subs	r2, r5, #1
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d001      	beq.n	80035a8 <_dtoa_r+0x5f8>
 80035a4:	46ba      	mov	sl, r7
 80035a6:	e04a      	b.n	800363e <_dtoa_r+0x68e>
 80035a8:	4615      	mov	r5, r2
 80035aa:	e7f6      	b.n	800359a <_dtoa_r+0x5ea>
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <_dtoa_r+0x614>)
 80035ae:	f7fc ff93 	bl	80004d8 <__aeabi_dmul>
 80035b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035b6:	e7bd      	b.n	8003534 <_dtoa_r+0x584>
 80035b8:	080042d8 	.word	0x080042d8
 80035bc:	080042b0 	.word	0x080042b0
 80035c0:	3ff00000 	.word	0x3ff00000
 80035c4:	40240000 	.word	0x40240000
 80035c8:	401c0000 	.word	0x401c0000
 80035cc:	40140000 	.word	0x40140000
 80035d0:	3fe00000 	.word	0x3fe00000
 80035d4:	9d06      	ldr	r5, [sp, #24]
 80035d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80035da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035de:	4630      	mov	r0, r6
 80035e0:	4639      	mov	r1, r7
 80035e2:	f7fd f8a3 	bl	800072c <__aeabi_ddiv>
 80035e6:	f7fd fa27 	bl	8000a38 <__aeabi_d2iz>
 80035ea:	4681      	mov	r9, r0
 80035ec:	f7fc ff0a 	bl	8000404 <__aeabi_i2d>
 80035f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4630      	mov	r0, r6
 80035fe:	4639      	mov	r1, r7
 8003600:	f7fc fdb2 	bl	8000168 <__aeabi_dsub>
 8003604:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003608:	f805 6b01 	strb.w	r6, [r5], #1
 800360c:	9e06      	ldr	r6, [sp, #24]
 800360e:	4602      	mov	r2, r0
 8003610:	1bae      	subs	r6, r5, r6
 8003612:	45b0      	cmp	r8, r6
 8003614:	460b      	mov	r3, r1
 8003616:	d135      	bne.n	8003684 <_dtoa_r+0x6d4>
 8003618:	f7fc fda8 	bl	800016c <__adddf3>
 800361c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003620:	4606      	mov	r6, r0
 8003622:	460f      	mov	r7, r1
 8003624:	f7fd f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8003628:	b9c8      	cbnz	r0, 800365e <_dtoa_r+0x6ae>
 800362a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800362e:	4630      	mov	r0, r6
 8003630:	4639      	mov	r1, r7
 8003632:	f7fd f9b9 	bl	80009a8 <__aeabi_dcmpeq>
 8003636:	b110      	cbz	r0, 800363e <_dtoa_r+0x68e>
 8003638:	f019 0f01 	tst.w	r9, #1
 800363c:	d10f      	bne.n	800365e <_dtoa_r+0x6ae>
 800363e:	4659      	mov	r1, fp
 8003640:	4620      	mov	r0, r4
 8003642:	f000 fabe 	bl	8003bc2 <_Bfree>
 8003646:	2300      	movs	r3, #0
 8003648:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800364a:	702b      	strb	r3, [r5, #0]
 800364c:	f10a 0301 	add.w	r3, sl, #1
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003654:	2b00      	cmp	r3, #0
 8003656:	f43f acf3 	beq.w	8003040 <_dtoa_r+0x90>
 800365a:	601d      	str	r5, [r3, #0]
 800365c:	e4f0      	b.n	8003040 <_dtoa_r+0x90>
 800365e:	4657      	mov	r7, sl
 8003660:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003664:	1e6b      	subs	r3, r5, #1
 8003666:	2a39      	cmp	r2, #57	; 0x39
 8003668:	d106      	bne.n	8003678 <_dtoa_r+0x6c8>
 800366a:	9a06      	ldr	r2, [sp, #24]
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <_dtoa_r+0x6d0>
 8003670:	2330      	movs	r3, #48	; 0x30
 8003672:	7013      	strb	r3, [r2, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	3701      	adds	r7, #1
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	3201      	adds	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e791      	b.n	80035a4 <_dtoa_r+0x5f4>
 8003680:	461d      	mov	r5, r3
 8003682:	e7ed      	b.n	8003660 <_dtoa_r+0x6b0>
 8003684:	2200      	movs	r2, #0
 8003686:	4b99      	ldr	r3, [pc, #612]	; (80038ec <_dtoa_r+0x93c>)
 8003688:	f7fc ff26 	bl	80004d8 <__aeabi_dmul>
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	4606      	mov	r6, r0
 8003692:	460f      	mov	r7, r1
 8003694:	f7fd f988 	bl	80009a8 <__aeabi_dcmpeq>
 8003698:	2800      	cmp	r0, #0
 800369a:	d09e      	beq.n	80035da <_dtoa_r+0x62a>
 800369c:	e7cf      	b.n	800363e <_dtoa_r+0x68e>
 800369e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	f000 8088 	beq.w	80037b6 <_dtoa_r+0x806>
 80036a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80036a8:	2a01      	cmp	r2, #1
 80036aa:	dc6d      	bgt.n	8003788 <_dtoa_r+0x7d8>
 80036ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d066      	beq.n	8003780 <_dtoa_r+0x7d0>
 80036b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80036b6:	464d      	mov	r5, r9
 80036b8:	9e08      	ldr	r6, [sp, #32]
 80036ba:	9a07      	ldr	r2, [sp, #28]
 80036bc:	2101      	movs	r1, #1
 80036be:	441a      	add	r2, r3
 80036c0:	4620      	mov	r0, r4
 80036c2:	4499      	add	r9, r3
 80036c4:	9207      	str	r2, [sp, #28]
 80036c6:	f000 fb1c 	bl	8003d02 <__i2b>
 80036ca:	4607      	mov	r7, r0
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	dd0b      	ble.n	80036e8 <_dtoa_r+0x738>
 80036d0:	9b07      	ldr	r3, [sp, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	dd08      	ble.n	80036e8 <_dtoa_r+0x738>
 80036d6:	42ab      	cmp	r3, r5
 80036d8:	bfa8      	it	ge
 80036da:	462b      	movge	r3, r5
 80036dc:	9a07      	ldr	r2, [sp, #28]
 80036de:	eba9 0903 	sub.w	r9, r9, r3
 80036e2:	1aed      	subs	r5, r5, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	9307      	str	r3, [sp, #28]
 80036e8:	9b08      	ldr	r3, [sp, #32]
 80036ea:	b1eb      	cbz	r3, 8003728 <_dtoa_r+0x778>
 80036ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d065      	beq.n	80037be <_dtoa_r+0x80e>
 80036f2:	b18e      	cbz	r6, 8003718 <_dtoa_r+0x768>
 80036f4:	4639      	mov	r1, r7
 80036f6:	4632      	mov	r2, r6
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 fba1 	bl	8003e40 <__pow5mult>
 80036fe:	465a      	mov	r2, fp
 8003700:	4601      	mov	r1, r0
 8003702:	4607      	mov	r7, r0
 8003704:	4620      	mov	r0, r4
 8003706:	f000 fb05 	bl	8003d14 <__multiply>
 800370a:	4659      	mov	r1, fp
 800370c:	900a      	str	r0, [sp, #40]	; 0x28
 800370e:	4620      	mov	r0, r4
 8003710:	f000 fa57 	bl	8003bc2 <_Bfree>
 8003714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003716:	469b      	mov	fp, r3
 8003718:	9b08      	ldr	r3, [sp, #32]
 800371a:	1b9a      	subs	r2, r3, r6
 800371c:	d004      	beq.n	8003728 <_dtoa_r+0x778>
 800371e:	4659      	mov	r1, fp
 8003720:	4620      	mov	r0, r4
 8003722:	f000 fb8d 	bl	8003e40 <__pow5mult>
 8003726:	4683      	mov	fp, r0
 8003728:	2101      	movs	r1, #1
 800372a:	4620      	mov	r0, r4
 800372c:	f000 fae9 	bl	8003d02 <__i2b>
 8003730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003732:	4606      	mov	r6, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 81c6 	beq.w	8003ac6 <_dtoa_r+0xb16>
 800373a:	461a      	mov	r2, r3
 800373c:	4601      	mov	r1, r0
 800373e:	4620      	mov	r0, r4
 8003740:	f000 fb7e 	bl	8003e40 <__pow5mult>
 8003744:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003746:	4606      	mov	r6, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	dc3e      	bgt.n	80037ca <_dtoa_r+0x81a>
 800374c:	9b02      	ldr	r3, [sp, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d137      	bne.n	80037c2 <_dtoa_r+0x812>
 8003752:	9b03      	ldr	r3, [sp, #12]
 8003754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003758:	2b00      	cmp	r3, #0
 800375a:	d134      	bne.n	80037c6 <_dtoa_r+0x816>
 800375c:	9b03      	ldr	r3, [sp, #12]
 800375e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003762:	0d1b      	lsrs	r3, r3, #20
 8003764:	051b      	lsls	r3, r3, #20
 8003766:	b12b      	cbz	r3, 8003774 <_dtoa_r+0x7c4>
 8003768:	9b07      	ldr	r3, [sp, #28]
 800376a:	f109 0901 	add.w	r9, r9, #1
 800376e:	3301      	adds	r3, #1
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	2301      	movs	r3, #1
 8003774:	9308      	str	r3, [sp, #32]
 8003776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d128      	bne.n	80037ce <_dtoa_r+0x81e>
 800377c:	2001      	movs	r0, #1
 800377e:	e02e      	b.n	80037de <_dtoa_r+0x82e>
 8003780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003782:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003786:	e796      	b.n	80036b6 <_dtoa_r+0x706>
 8003788:	9b08      	ldr	r3, [sp, #32]
 800378a:	f108 36ff 	add.w	r6, r8, #4294967295
 800378e:	42b3      	cmp	r3, r6
 8003790:	bfb7      	itett	lt
 8003792:	9b08      	ldrlt	r3, [sp, #32]
 8003794:	1b9e      	subge	r6, r3, r6
 8003796:	1af2      	sublt	r2, r6, r3
 8003798:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800379a:	bfbf      	itttt	lt
 800379c:	9608      	strlt	r6, [sp, #32]
 800379e:	189b      	addlt	r3, r3, r2
 80037a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80037a2:	2600      	movlt	r6, #0
 80037a4:	f1b8 0f00 	cmp.w	r8, #0
 80037a8:	bfb9      	ittee	lt
 80037aa:	eba9 0508 	sublt.w	r5, r9, r8
 80037ae:	2300      	movlt	r3, #0
 80037b0:	464d      	movge	r5, r9
 80037b2:	4643      	movge	r3, r8
 80037b4:	e781      	b.n	80036ba <_dtoa_r+0x70a>
 80037b6:	9e08      	ldr	r6, [sp, #32]
 80037b8:	464d      	mov	r5, r9
 80037ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80037bc:	e786      	b.n	80036cc <_dtoa_r+0x71c>
 80037be:	9a08      	ldr	r2, [sp, #32]
 80037c0:	e7ad      	b.n	800371e <_dtoa_r+0x76e>
 80037c2:	2300      	movs	r3, #0
 80037c4:	e7d6      	b.n	8003774 <_dtoa_r+0x7c4>
 80037c6:	9b02      	ldr	r3, [sp, #8]
 80037c8:	e7d4      	b.n	8003774 <_dtoa_r+0x7c4>
 80037ca:	2300      	movs	r3, #0
 80037cc:	9308      	str	r3, [sp, #32]
 80037ce:	6933      	ldr	r3, [r6, #16]
 80037d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80037d4:	6918      	ldr	r0, [r3, #16]
 80037d6:	f000 fa46 	bl	8003c66 <__hi0bits>
 80037da:	f1c0 0020 	rsb	r0, r0, #32
 80037de:	9b07      	ldr	r3, [sp, #28]
 80037e0:	4418      	add	r0, r3
 80037e2:	f010 001f 	ands.w	r0, r0, #31
 80037e6:	d047      	beq.n	8003878 <_dtoa_r+0x8c8>
 80037e8:	f1c0 0320 	rsb	r3, r0, #32
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	dd3b      	ble.n	8003868 <_dtoa_r+0x8b8>
 80037f0:	9b07      	ldr	r3, [sp, #28]
 80037f2:	f1c0 001c 	rsb	r0, r0, #28
 80037f6:	4481      	add	r9, r0
 80037f8:	4405      	add	r5, r0
 80037fa:	4403      	add	r3, r0
 80037fc:	9307      	str	r3, [sp, #28]
 80037fe:	f1b9 0f00 	cmp.w	r9, #0
 8003802:	dd05      	ble.n	8003810 <_dtoa_r+0x860>
 8003804:	4659      	mov	r1, fp
 8003806:	464a      	mov	r2, r9
 8003808:	4620      	mov	r0, r4
 800380a:	f000 fb67 	bl	8003edc <__lshift>
 800380e:	4683      	mov	fp, r0
 8003810:	9b07      	ldr	r3, [sp, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	dd05      	ble.n	8003822 <_dtoa_r+0x872>
 8003816:	4631      	mov	r1, r6
 8003818:	461a      	mov	r2, r3
 800381a:	4620      	mov	r0, r4
 800381c:	f000 fb5e 	bl	8003edc <__lshift>
 8003820:	4606      	mov	r6, r0
 8003822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003824:	b353      	cbz	r3, 800387c <_dtoa_r+0x8cc>
 8003826:	4631      	mov	r1, r6
 8003828:	4658      	mov	r0, fp
 800382a:	f000 fbab 	bl	8003f84 <__mcmp>
 800382e:	2800      	cmp	r0, #0
 8003830:	da24      	bge.n	800387c <_dtoa_r+0x8cc>
 8003832:	2300      	movs	r3, #0
 8003834:	4659      	mov	r1, fp
 8003836:	220a      	movs	r2, #10
 8003838:	4620      	mov	r0, r4
 800383a:	f000 f9d9 	bl	8003bf0 <__multadd>
 800383e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003840:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003844:	4683      	mov	fp, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8144 	beq.w	8003ad4 <_dtoa_r+0xb24>
 800384c:	2300      	movs	r3, #0
 800384e:	4639      	mov	r1, r7
 8003850:	220a      	movs	r2, #10
 8003852:	4620      	mov	r0, r4
 8003854:	f000 f9cc 	bl	8003bf0 <__multadd>
 8003858:	9b04      	ldr	r3, [sp, #16]
 800385a:	4607      	mov	r7, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	dc4d      	bgt.n	80038fc <_dtoa_r+0x94c>
 8003860:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003862:	2b02      	cmp	r3, #2
 8003864:	dd4a      	ble.n	80038fc <_dtoa_r+0x94c>
 8003866:	e011      	b.n	800388c <_dtoa_r+0x8dc>
 8003868:	d0c9      	beq.n	80037fe <_dtoa_r+0x84e>
 800386a:	9a07      	ldr	r2, [sp, #28]
 800386c:	331c      	adds	r3, #28
 800386e:	441a      	add	r2, r3
 8003870:	4499      	add	r9, r3
 8003872:	441d      	add	r5, r3
 8003874:	4613      	mov	r3, r2
 8003876:	e7c1      	b.n	80037fc <_dtoa_r+0x84c>
 8003878:	4603      	mov	r3, r0
 800387a:	e7f6      	b.n	800386a <_dtoa_r+0x8ba>
 800387c:	f1b8 0f00 	cmp.w	r8, #0
 8003880:	dc36      	bgt.n	80038f0 <_dtoa_r+0x940>
 8003882:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003884:	2b02      	cmp	r3, #2
 8003886:	dd33      	ble.n	80038f0 <_dtoa_r+0x940>
 8003888:	f8cd 8010 	str.w	r8, [sp, #16]
 800388c:	9b04      	ldr	r3, [sp, #16]
 800388e:	b963      	cbnz	r3, 80038aa <_dtoa_r+0x8fa>
 8003890:	4631      	mov	r1, r6
 8003892:	2205      	movs	r2, #5
 8003894:	4620      	mov	r0, r4
 8003896:	f000 f9ab 	bl	8003bf0 <__multadd>
 800389a:	4601      	mov	r1, r0
 800389c:	4606      	mov	r6, r0
 800389e:	4658      	mov	r0, fp
 80038a0:	f000 fb70 	bl	8003f84 <__mcmp>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f73f add3 	bgt.w	8003450 <_dtoa_r+0x4a0>
 80038aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038ac:	9d06      	ldr	r5, [sp, #24]
 80038ae:	ea6f 0a03 	mvn.w	sl, r3
 80038b2:	f04f 0900 	mov.w	r9, #0
 80038b6:	4631      	mov	r1, r6
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 f982 	bl	8003bc2 <_Bfree>
 80038be:	2f00      	cmp	r7, #0
 80038c0:	f43f aebd 	beq.w	800363e <_dtoa_r+0x68e>
 80038c4:	f1b9 0f00 	cmp.w	r9, #0
 80038c8:	d005      	beq.n	80038d6 <_dtoa_r+0x926>
 80038ca:	45b9      	cmp	r9, r7
 80038cc:	d003      	beq.n	80038d6 <_dtoa_r+0x926>
 80038ce:	4649      	mov	r1, r9
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 f976 	bl	8003bc2 <_Bfree>
 80038d6:	4639      	mov	r1, r7
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 f972 	bl	8003bc2 <_Bfree>
 80038de:	e6ae      	b.n	800363e <_dtoa_r+0x68e>
 80038e0:	2600      	movs	r6, #0
 80038e2:	4637      	mov	r7, r6
 80038e4:	e7e1      	b.n	80038aa <_dtoa_r+0x8fa>
 80038e6:	46ba      	mov	sl, r7
 80038e8:	4637      	mov	r7, r6
 80038ea:	e5b1      	b.n	8003450 <_dtoa_r+0x4a0>
 80038ec:	40240000 	.word	0x40240000
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80f3 	beq.w	8003ae2 <_dtoa_r+0xb32>
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	dd05      	ble.n	800390c <_dtoa_r+0x95c>
 8003900:	4639      	mov	r1, r7
 8003902:	462a      	mov	r2, r5
 8003904:	4620      	mov	r0, r4
 8003906:	f000 fae9 	bl	8003edc <__lshift>
 800390a:	4607      	mov	r7, r0
 800390c:	9b08      	ldr	r3, [sp, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04c      	beq.n	80039ac <_dtoa_r+0x9fc>
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4620      	mov	r0, r4
 8003916:	f000 f920 	bl	8003b5a <_Balloc>
 800391a:	4605      	mov	r5, r0
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	f107 010c 	add.w	r1, r7, #12
 8003922:	3202      	adds	r2, #2
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	300c      	adds	r0, #12
 8003928:	f000 f90c 	bl	8003b44 <memcpy>
 800392c:	2201      	movs	r2, #1
 800392e:	4629      	mov	r1, r5
 8003930:	4620      	mov	r0, r4
 8003932:	f000 fad3 	bl	8003edc <__lshift>
 8003936:	46b9      	mov	r9, r7
 8003938:	4607      	mov	r7, r0
 800393a:	9b06      	ldr	r3, [sp, #24]
 800393c:	9307      	str	r3, [sp, #28]
 800393e:	9b02      	ldr	r3, [sp, #8]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	9308      	str	r3, [sp, #32]
 8003946:	4631      	mov	r1, r6
 8003948:	4658      	mov	r0, fp
 800394a:	f7ff faa3 	bl	8002e94 <quorem>
 800394e:	4649      	mov	r1, r9
 8003950:	4605      	mov	r5, r0
 8003952:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003956:	4658      	mov	r0, fp
 8003958:	f000 fb14 	bl	8003f84 <__mcmp>
 800395c:	463a      	mov	r2, r7
 800395e:	9002      	str	r0, [sp, #8]
 8003960:	4631      	mov	r1, r6
 8003962:	4620      	mov	r0, r4
 8003964:	f000 fb28 	bl	8003fb8 <__mdiff>
 8003968:	68c3      	ldr	r3, [r0, #12]
 800396a:	4602      	mov	r2, r0
 800396c:	bb03      	cbnz	r3, 80039b0 <_dtoa_r+0xa00>
 800396e:	4601      	mov	r1, r0
 8003970:	9009      	str	r0, [sp, #36]	; 0x24
 8003972:	4658      	mov	r0, fp
 8003974:	f000 fb06 	bl	8003f84 <__mcmp>
 8003978:	4603      	mov	r3, r0
 800397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397c:	4611      	mov	r1, r2
 800397e:	4620      	mov	r0, r4
 8003980:	9309      	str	r3, [sp, #36]	; 0x24
 8003982:	f000 f91e 	bl	8003bc2 <_Bfree>
 8003986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003988:	b9a3      	cbnz	r3, 80039b4 <_dtoa_r+0xa04>
 800398a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800398c:	b992      	cbnz	r2, 80039b4 <_dtoa_r+0xa04>
 800398e:	9a08      	ldr	r2, [sp, #32]
 8003990:	b982      	cbnz	r2, 80039b4 <_dtoa_r+0xa04>
 8003992:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003996:	d029      	beq.n	80039ec <_dtoa_r+0xa3c>
 8003998:	9b02      	ldr	r3, [sp, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	dd01      	ble.n	80039a2 <_dtoa_r+0x9f2>
 800399e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80039a2:	9b07      	ldr	r3, [sp, #28]
 80039a4:	1c5d      	adds	r5, r3, #1
 80039a6:	f883 8000 	strb.w	r8, [r3]
 80039aa:	e784      	b.n	80038b6 <_dtoa_r+0x906>
 80039ac:	4638      	mov	r0, r7
 80039ae:	e7c2      	b.n	8003936 <_dtoa_r+0x986>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e7e3      	b.n	800397c <_dtoa_r+0x9cc>
 80039b4:	9a02      	ldr	r2, [sp, #8]
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	db04      	blt.n	80039c4 <_dtoa_r+0xa14>
 80039ba:	d123      	bne.n	8003a04 <_dtoa_r+0xa54>
 80039bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80039be:	bb0a      	cbnz	r2, 8003a04 <_dtoa_r+0xa54>
 80039c0:	9a08      	ldr	r2, [sp, #32]
 80039c2:	b9fa      	cbnz	r2, 8003a04 <_dtoa_r+0xa54>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	ddec      	ble.n	80039a2 <_dtoa_r+0x9f2>
 80039c8:	4659      	mov	r1, fp
 80039ca:	2201      	movs	r2, #1
 80039cc:	4620      	mov	r0, r4
 80039ce:	f000 fa85 	bl	8003edc <__lshift>
 80039d2:	4631      	mov	r1, r6
 80039d4:	4683      	mov	fp, r0
 80039d6:	f000 fad5 	bl	8003f84 <__mcmp>
 80039da:	2800      	cmp	r0, #0
 80039dc:	dc03      	bgt.n	80039e6 <_dtoa_r+0xa36>
 80039de:	d1e0      	bne.n	80039a2 <_dtoa_r+0x9f2>
 80039e0:	f018 0f01 	tst.w	r8, #1
 80039e4:	d0dd      	beq.n	80039a2 <_dtoa_r+0x9f2>
 80039e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80039ea:	d1d8      	bne.n	800399e <_dtoa_r+0x9ee>
 80039ec:	9b07      	ldr	r3, [sp, #28]
 80039ee:	9a07      	ldr	r2, [sp, #28]
 80039f0:	1c5d      	adds	r5, r3, #1
 80039f2:	2339      	movs	r3, #57	; 0x39
 80039f4:	7013      	strb	r3, [r2, #0]
 80039f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039fa:	1e6a      	subs	r2, r5, #1
 80039fc:	2b39      	cmp	r3, #57	; 0x39
 80039fe:	d04d      	beq.n	8003a9c <_dtoa_r+0xaec>
 8003a00:	3301      	adds	r3, #1
 8003a02:	e052      	b.n	8003aaa <_dtoa_r+0xafa>
 8003a04:	9a07      	ldr	r2, [sp, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f102 0501 	add.w	r5, r2, #1
 8003a0c:	dd06      	ble.n	8003a1c <_dtoa_r+0xa6c>
 8003a0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003a12:	d0eb      	beq.n	80039ec <_dtoa_r+0xa3c>
 8003a14:	f108 0801 	add.w	r8, r8, #1
 8003a18:	9b07      	ldr	r3, [sp, #28]
 8003a1a:	e7c4      	b.n	80039a6 <_dtoa_r+0x9f6>
 8003a1c:	9b06      	ldr	r3, [sp, #24]
 8003a1e:	9a04      	ldr	r2, [sp, #16]
 8003a20:	1aeb      	subs	r3, r5, r3
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003a28:	d021      	beq.n	8003a6e <_dtoa_r+0xabe>
 8003a2a:	4659      	mov	r1, fp
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	220a      	movs	r2, #10
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 f8dd 	bl	8003bf0 <__multadd>
 8003a36:	45b9      	cmp	r9, r7
 8003a38:	4683      	mov	fp, r0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f04f 020a 	mov.w	r2, #10
 8003a42:	4649      	mov	r1, r9
 8003a44:	4620      	mov	r0, r4
 8003a46:	d105      	bne.n	8003a54 <_dtoa_r+0xaa4>
 8003a48:	f000 f8d2 	bl	8003bf0 <__multadd>
 8003a4c:	4681      	mov	r9, r0
 8003a4e:	4607      	mov	r7, r0
 8003a50:	9507      	str	r5, [sp, #28]
 8003a52:	e778      	b.n	8003946 <_dtoa_r+0x996>
 8003a54:	f000 f8cc 	bl	8003bf0 <__multadd>
 8003a58:	4639      	mov	r1, r7
 8003a5a:	4681      	mov	r9, r0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	220a      	movs	r2, #10
 8003a60:	4620      	mov	r0, r4
 8003a62:	f000 f8c5 	bl	8003bf0 <__multadd>
 8003a66:	4607      	mov	r7, r0
 8003a68:	e7f2      	b.n	8003a50 <_dtoa_r+0xaa0>
 8003a6a:	f04f 0900 	mov.w	r9, #0
 8003a6e:	4659      	mov	r1, fp
 8003a70:	2201      	movs	r2, #1
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 fa32 	bl	8003edc <__lshift>
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4683      	mov	fp, r0
 8003a7c:	f000 fa82 	bl	8003f84 <__mcmp>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	dcb8      	bgt.n	80039f6 <_dtoa_r+0xa46>
 8003a84:	d102      	bne.n	8003a8c <_dtoa_r+0xadc>
 8003a86:	f018 0f01 	tst.w	r8, #1
 8003a8a:	d1b4      	bne.n	80039f6 <_dtoa_r+0xa46>
 8003a8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a90:	1e6a      	subs	r2, r5, #1
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	f47f af0f 	bne.w	80038b6 <_dtoa_r+0x906>
 8003a98:	4615      	mov	r5, r2
 8003a9a:	e7f7      	b.n	8003a8c <_dtoa_r+0xadc>
 8003a9c:	9b06      	ldr	r3, [sp, #24]
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d105      	bne.n	8003aae <_dtoa_r+0xafe>
 8003aa2:	2331      	movs	r3, #49	; 0x31
 8003aa4:	9a06      	ldr	r2, [sp, #24]
 8003aa6:	f10a 0a01 	add.w	sl, sl, #1
 8003aaa:	7013      	strb	r3, [r2, #0]
 8003aac:	e703      	b.n	80038b6 <_dtoa_r+0x906>
 8003aae:	4615      	mov	r5, r2
 8003ab0:	e7a1      	b.n	80039f6 <_dtoa_r+0xa46>
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <_dtoa_r+0xb60>)
 8003ab4:	f7ff bae1 	b.w	800307a <_dtoa_r+0xca>
 8003ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f47f aabb 	bne.w	8003036 <_dtoa_r+0x86>
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <_dtoa_r+0xb64>)
 8003ac2:	f7ff bada 	b.w	800307a <_dtoa_r+0xca>
 8003ac6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f77f ae3f 	ble.w	800374c <_dtoa_r+0x79c>
 8003ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ad0:	9308      	str	r3, [sp, #32]
 8003ad2:	e653      	b.n	800377c <_dtoa_r+0x7cc>
 8003ad4:	9b04      	ldr	r3, [sp, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	dc03      	bgt.n	8003ae2 <_dtoa_r+0xb32>
 8003ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	f73f aed5 	bgt.w	800388c <_dtoa_r+0x8dc>
 8003ae2:	9d06      	ldr	r5, [sp, #24]
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	4658      	mov	r0, fp
 8003ae8:	f7ff f9d4 	bl	8002e94 <quorem>
 8003aec:	9b06      	ldr	r3, [sp, #24]
 8003aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003af2:	f805 8b01 	strb.w	r8, [r5], #1
 8003af6:	9a04      	ldr	r2, [sp, #16]
 8003af8:	1aeb      	subs	r3, r5, r3
 8003afa:	429a      	cmp	r2, r3
 8003afc:	ddb5      	ble.n	8003a6a <_dtoa_r+0xaba>
 8003afe:	4659      	mov	r1, fp
 8003b00:	2300      	movs	r3, #0
 8003b02:	220a      	movs	r2, #10
 8003b04:	4620      	mov	r0, r4
 8003b06:	f000 f873 	bl	8003bf0 <__multadd>
 8003b0a:	4683      	mov	fp, r0
 8003b0c:	e7ea      	b.n	8003ae4 <_dtoa_r+0xb34>
 8003b0e:	bf00      	nop
 8003b10:	0800429c 	.word	0x0800429c
 8003b14:	0800429e 	.word	0x0800429e

08003b18 <_localeconv_r>:
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <_localeconv_r+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a18      	ldr	r0, [r3, #32]
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <_localeconv_r+0x18>)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	bf08      	it	eq
 8003b24:	4618      	moveq	r0, r3
 8003b26:	30f0      	adds	r0, #240	; 0xf0
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c
 8003b30:	20000070 	.word	0x20000070

08003b34 <malloc>:
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <malloc+0xc>)
 8003b36:	4601      	mov	r1, r0
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f000 baf9 	b.w	8004130 <_malloc_r>
 8003b3e:	bf00      	nop
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <memcpy>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	1e43      	subs	r3, r0, #1
 8003b48:	440a      	add	r2, r1
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	d100      	bne.n	8003b50 <memcpy+0xc>
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b58:	e7f7      	b.n	8003b4a <memcpy+0x6>

08003b5a <_Balloc>:
 8003b5a:	b570      	push	{r4, r5, r6, lr}
 8003b5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b5e:	4604      	mov	r4, r0
 8003b60:	460e      	mov	r6, r1
 8003b62:	b93d      	cbnz	r5, 8003b74 <_Balloc+0x1a>
 8003b64:	2010      	movs	r0, #16
 8003b66:	f7ff ffe5 	bl	8003b34 <malloc>
 8003b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8003b6c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b70:	6005      	str	r5, [r0, #0]
 8003b72:	60c5      	str	r5, [r0, #12]
 8003b74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003b76:	68eb      	ldr	r3, [r5, #12]
 8003b78:	b183      	cbz	r3, 8003b9c <_Balloc+0x42>
 8003b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003b82:	b9b8      	cbnz	r0, 8003bb4 <_Balloc+0x5a>
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f506 	lsl.w	r5, r1, r6
 8003b8a:	1d6a      	adds	r2, r5, #5
 8003b8c:	0092      	lsls	r2, r2, #2
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fabf 	bl	8004112 <_calloc_r>
 8003b94:	b160      	cbz	r0, 8003bb0 <_Balloc+0x56>
 8003b96:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003b9a:	e00e      	b.n	8003bba <_Balloc+0x60>
 8003b9c:	2221      	movs	r2, #33	; 0x21
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 fab6 	bl	8004112 <_calloc_r>
 8003ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ba8:	60e8      	str	r0, [r5, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e4      	bne.n	8003b7a <_Balloc+0x20>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	6802      	ldr	r2, [r0, #0]
 8003bb6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003bc0:	e7f7      	b.n	8003bb2 <_Balloc+0x58>

08003bc2 <_Bfree>:
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	b93c      	cbnz	r4, 8003bdc <_Bfree+0x1a>
 8003bcc:	2010      	movs	r0, #16
 8003bce:	f7ff ffb1 	bl	8003b34 <malloc>
 8003bd2:	6270      	str	r0, [r6, #36]	; 0x24
 8003bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003bd8:	6004      	str	r4, [r0, #0]
 8003bda:	60c4      	str	r4, [r0, #12]
 8003bdc:	b13d      	cbz	r5, 8003bee <_Bfree+0x2c>
 8003bde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003be0:	686a      	ldr	r2, [r5, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003be8:	6029      	str	r1, [r5, #0]
 8003bea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003bee:	bd70      	pop	{r4, r5, r6, pc}

08003bf0 <__multadd>:
 8003bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf4:	461f      	mov	r7, r3
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	690d      	ldr	r5, [r1, #16]
 8003bfe:	f101 0c14 	add.w	ip, r1, #20
 8003c02:	f8dc 0000 	ldr.w	r0, [ip]
 8003c06:	3301      	adds	r3, #1
 8003c08:	b281      	uxth	r1, r0
 8003c0a:	fb02 7101 	mla	r1, r2, r1, r7
 8003c0e:	0c00      	lsrs	r0, r0, #16
 8003c10:	0c0f      	lsrs	r7, r1, #16
 8003c12:	fb02 7000 	mla	r0, r2, r0, r7
 8003c16:	b289      	uxth	r1, r1
 8003c18:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003c1c:	429d      	cmp	r5, r3
 8003c1e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003c22:	f84c 1b04 	str.w	r1, [ip], #4
 8003c26:	dcec      	bgt.n	8003c02 <__multadd+0x12>
 8003c28:	b1d7      	cbz	r7, 8003c60 <__multadd+0x70>
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dc12      	bgt.n	8003c56 <__multadd+0x66>
 8003c30:	6861      	ldr	r1, [r4, #4]
 8003c32:	4630      	mov	r0, r6
 8003c34:	3101      	adds	r1, #1
 8003c36:	f7ff ff90 	bl	8003b5a <_Balloc>
 8003c3a:	4680      	mov	r8, r0
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	f104 010c 	add.w	r1, r4, #12
 8003c42:	3202      	adds	r2, #2
 8003c44:	0092      	lsls	r2, r2, #2
 8003c46:	300c      	adds	r0, #12
 8003c48:	f7ff ff7c 	bl	8003b44 <memcpy>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7ff ffb7 	bl	8003bc2 <_Bfree>
 8003c54:	4644      	mov	r4, r8
 8003c56:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c5a:	3501      	adds	r5, #1
 8003c5c:	615f      	str	r7, [r3, #20]
 8003c5e:	6125      	str	r5, [r4, #16]
 8003c60:	4620      	mov	r0, r4
 8003c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c66 <__hi0bits>:
 8003c66:	0c02      	lsrs	r2, r0, #16
 8003c68:	0412      	lsls	r2, r2, #16
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	b9b2      	cbnz	r2, 8003c9c <__hi0bits+0x36>
 8003c6e:	0403      	lsls	r3, r0, #16
 8003c70:	2010      	movs	r0, #16
 8003c72:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003c76:	bf04      	itt	eq
 8003c78:	021b      	lsleq	r3, r3, #8
 8003c7a:	3008      	addeq	r0, #8
 8003c7c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003c80:	bf04      	itt	eq
 8003c82:	011b      	lsleq	r3, r3, #4
 8003c84:	3004      	addeq	r0, #4
 8003c86:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c8a:	bf04      	itt	eq
 8003c8c:	009b      	lsleq	r3, r3, #2
 8003c8e:	3002      	addeq	r0, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db06      	blt.n	8003ca2 <__hi0bits+0x3c>
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	d503      	bpl.n	8003ca0 <__hi0bits+0x3a>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	4770      	bx	lr
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7e8      	b.n	8003c72 <__hi0bits+0xc>
 8003ca0:	2020      	movs	r0, #32
 8003ca2:	4770      	bx	lr

08003ca4 <__lo0bits>:
 8003ca4:	6803      	ldr	r3, [r0, #0]
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	f013 0207 	ands.w	r2, r3, #7
 8003cac:	d00b      	beq.n	8003cc6 <__lo0bits+0x22>
 8003cae:	07da      	lsls	r2, r3, #31
 8003cb0:	d423      	bmi.n	8003cfa <__lo0bits+0x56>
 8003cb2:	0798      	lsls	r0, r3, #30
 8003cb4:	bf49      	itett	mi
 8003cb6:	085b      	lsrmi	r3, r3, #1
 8003cb8:	089b      	lsrpl	r3, r3, #2
 8003cba:	2001      	movmi	r0, #1
 8003cbc:	600b      	strmi	r3, [r1, #0]
 8003cbe:	bf5c      	itt	pl
 8003cc0:	600b      	strpl	r3, [r1, #0]
 8003cc2:	2002      	movpl	r0, #2
 8003cc4:	4770      	bx	lr
 8003cc6:	b298      	uxth	r0, r3
 8003cc8:	b9a8      	cbnz	r0, 8003cf6 <__lo0bits+0x52>
 8003cca:	2010      	movs	r0, #16
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cd2:	bf04      	itt	eq
 8003cd4:	0a1b      	lsreq	r3, r3, #8
 8003cd6:	3008      	addeq	r0, #8
 8003cd8:	071a      	lsls	r2, r3, #28
 8003cda:	bf04      	itt	eq
 8003cdc:	091b      	lsreq	r3, r3, #4
 8003cde:	3004      	addeq	r0, #4
 8003ce0:	079a      	lsls	r2, r3, #30
 8003ce2:	bf04      	itt	eq
 8003ce4:	089b      	lsreq	r3, r3, #2
 8003ce6:	3002      	addeq	r0, #2
 8003ce8:	07da      	lsls	r2, r3, #31
 8003cea:	d402      	bmi.n	8003cf2 <__lo0bits+0x4e>
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	d006      	beq.n	8003cfe <__lo0bits+0x5a>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	4770      	bx	lr
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	e7e9      	b.n	8003cce <__lo0bits+0x2a>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	4770      	bx	lr
 8003cfe:	2020      	movs	r0, #32
 8003d00:	4770      	bx	lr

08003d02 <__i2b>:
 8003d02:	b510      	push	{r4, lr}
 8003d04:	460c      	mov	r4, r1
 8003d06:	2101      	movs	r1, #1
 8003d08:	f7ff ff27 	bl	8003b5a <_Balloc>
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	6144      	str	r4, [r0, #20]
 8003d10:	6102      	str	r2, [r0, #16]
 8003d12:	bd10      	pop	{r4, pc}

08003d14 <__multiply>:
 8003d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d18:	4614      	mov	r4, r2
 8003d1a:	690a      	ldr	r2, [r1, #16]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	4688      	mov	r8, r1
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bfbe      	ittt	lt
 8003d24:	460b      	movlt	r3, r1
 8003d26:	46a0      	movlt	r8, r4
 8003d28:	461c      	movlt	r4, r3
 8003d2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003d2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003d36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d3a:	eb07 0609 	add.w	r6, r7, r9
 8003d3e:	42b3      	cmp	r3, r6
 8003d40:	bfb8      	it	lt
 8003d42:	3101      	addlt	r1, #1
 8003d44:	f7ff ff09 	bl	8003b5a <_Balloc>
 8003d48:	f100 0514 	add.w	r5, r0, #20
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	2200      	movs	r2, #0
 8003d50:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003d54:	4573      	cmp	r3, lr
 8003d56:	d316      	bcc.n	8003d86 <__multiply+0x72>
 8003d58:	f104 0214 	add.w	r2, r4, #20
 8003d5c:	f108 0114 	add.w	r1, r8, #20
 8003d60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003d64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	9201      	str	r2, [sp, #4]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d80c      	bhi.n	8003d8c <__multiply+0x78>
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	dd03      	ble.n	8003d7e <__multiply+0x6a>
 8003d76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d05d      	beq.n	8003e3a <__multiply+0x126>
 8003d7e:	6106      	str	r6, [r0, #16]
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d86:	f843 2b04 	str.w	r2, [r3], #4
 8003d8a:	e7e3      	b.n	8003d54 <__multiply+0x40>
 8003d8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8003d90:	f1bb 0f00 	cmp.w	fp, #0
 8003d94:	d023      	beq.n	8003dde <__multiply+0xca>
 8003d96:	4689      	mov	r9, r1
 8003d98:	46ac      	mov	ip, r5
 8003d9a:	f04f 0800 	mov.w	r8, #0
 8003d9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8003da2:	f8dc a000 	ldr.w	sl, [ip]
 8003da6:	b2a3      	uxth	r3, r4
 8003da8:	fa1f fa8a 	uxth.w	sl, sl
 8003dac:	fb0b a303 	mla	r3, fp, r3, sl
 8003db0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003db4:	f8dc 4000 	ldr.w	r4, [ip]
 8003db8:	4443      	add	r3, r8
 8003dba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003dbe:	fb0b 840a 	mla	r4, fp, sl, r8
 8003dc2:	46e2      	mov	sl, ip
 8003dc4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003dce:	454f      	cmp	r7, r9
 8003dd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003dd4:	f84a 3b04 	str.w	r3, [sl], #4
 8003dd8:	d82b      	bhi.n	8003e32 <__multiply+0x11e>
 8003dda:	f8cc 8004 	str.w	r8, [ip, #4]
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	3204      	adds	r2, #4
 8003de2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003de6:	f1ba 0f00 	cmp.w	sl, #0
 8003dea:	d020      	beq.n	8003e2e <__multiply+0x11a>
 8003dec:	4689      	mov	r9, r1
 8003dee:	46a8      	mov	r8, r5
 8003df0:	f04f 0b00 	mov.w	fp, #0
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	f8b9 c000 	ldrh.w	ip, [r9]
 8003dfa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	fb0a 440c 	mla	r4, sl, ip, r4
 8003e04:	46c4      	mov	ip, r8
 8003e06:	445c      	add	r4, fp
 8003e08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003e0c:	f84c 3b04 	str.w	r3, [ip], #4
 8003e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8003e14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	fb0a b303 	mla	r3, sl, r3, fp
 8003e1e:	454f      	cmp	r7, r9
 8003e20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003e24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003e28:	d805      	bhi.n	8003e36 <__multiply+0x122>
 8003e2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e2e:	3504      	adds	r5, #4
 8003e30:	e79b      	b.n	8003d6a <__multiply+0x56>
 8003e32:	46d4      	mov	ip, sl
 8003e34:	e7b3      	b.n	8003d9e <__multiply+0x8a>
 8003e36:	46e0      	mov	r8, ip
 8003e38:	e7dd      	b.n	8003df6 <__multiply+0xe2>
 8003e3a:	3e01      	subs	r6, #1
 8003e3c:	e799      	b.n	8003d72 <__multiply+0x5e>
	...

08003e40 <__pow5mult>:
 8003e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	4615      	mov	r5, r2
 8003e46:	f012 0203 	ands.w	r2, r2, #3
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	d007      	beq.n	8003e60 <__pow5mult+0x20>
 8003e50:	4c21      	ldr	r4, [pc, #132]	; (8003ed8 <__pow5mult+0x98>)
 8003e52:	3a01      	subs	r2, #1
 8003e54:	2300      	movs	r3, #0
 8003e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e5a:	f7ff fec9 	bl	8003bf0 <__multadd>
 8003e5e:	4607      	mov	r7, r0
 8003e60:	10ad      	asrs	r5, r5, #2
 8003e62:	d035      	beq.n	8003ed0 <__pow5mult+0x90>
 8003e64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e66:	b93c      	cbnz	r4, 8003e78 <__pow5mult+0x38>
 8003e68:	2010      	movs	r0, #16
 8003e6a:	f7ff fe63 	bl	8003b34 <malloc>
 8003e6e:	6270      	str	r0, [r6, #36]	; 0x24
 8003e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e74:	6004      	str	r4, [r0, #0]
 8003e76:	60c4      	str	r4, [r0, #12]
 8003e78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e80:	b94c      	cbnz	r4, 8003e96 <__pow5mult+0x56>
 8003e82:	f240 2171 	movw	r1, #625	; 0x271
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff ff3b 	bl	8003d02 <__i2b>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4604      	mov	r4, r0
 8003e90:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e94:	6003      	str	r3, [r0, #0]
 8003e96:	f04f 0800 	mov.w	r8, #0
 8003e9a:	07eb      	lsls	r3, r5, #31
 8003e9c:	d50a      	bpl.n	8003eb4 <__pow5mult+0x74>
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff ff36 	bl	8003d14 <__multiply>
 8003ea8:	4681      	mov	r9, r0
 8003eaa:	4639      	mov	r1, r7
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff fe88 	bl	8003bc2 <_Bfree>
 8003eb2:	464f      	mov	r7, r9
 8003eb4:	106d      	asrs	r5, r5, #1
 8003eb6:	d00b      	beq.n	8003ed0 <__pow5mult+0x90>
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	b938      	cbnz	r0, 8003ecc <__pow5mult+0x8c>
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7ff ff27 	bl	8003d14 <__multiply>
 8003ec6:	6020      	str	r0, [r4, #0]
 8003ec8:	f8c0 8000 	str.w	r8, [r0]
 8003ecc:	4604      	mov	r4, r0
 8003ece:	e7e4      	b.n	8003e9a <__pow5mult+0x5a>
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ed6:	bf00      	nop
 8003ed8:	080043a0 	.word	0x080043a0

08003edc <__lshift>:
 8003edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	4607      	mov	r7, r0
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003eec:	eb0a 0903 	add.w	r9, sl, r3
 8003ef0:	6849      	ldr	r1, [r1, #4]
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	f109 0501 	add.w	r5, r9, #1
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	db32      	blt.n	8003f62 <__lshift+0x86>
 8003efc:	4638      	mov	r0, r7
 8003efe:	f7ff fe2c 	bl	8003b5a <_Balloc>
 8003f02:	2300      	movs	r3, #0
 8003f04:	4680      	mov	r8, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	f100 0114 	add.w	r1, r0, #20
 8003f0c:	4553      	cmp	r3, sl
 8003f0e:	db2b      	blt.n	8003f68 <__lshift+0x8c>
 8003f10:	6920      	ldr	r0, [r4, #16]
 8003f12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f16:	f104 0314 	add.w	r3, r4, #20
 8003f1a:	f016 021f 	ands.w	r2, r6, #31
 8003f1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f26:	d025      	beq.n	8003f74 <__lshift+0x98>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f1c2 0e20 	rsb	lr, r2, #32
 8003f2e:	468a      	mov	sl, r1
 8003f30:	681e      	ldr	r6, [r3, #0]
 8003f32:	4096      	lsls	r6, r2
 8003f34:	4330      	orrs	r0, r6
 8003f36:	f84a 0b04 	str.w	r0, [sl], #4
 8003f3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8003f3e:	459c      	cmp	ip, r3
 8003f40:	fa20 f00e 	lsr.w	r0, r0, lr
 8003f44:	d814      	bhi.n	8003f70 <__lshift+0x94>
 8003f46:	6048      	str	r0, [r1, #4]
 8003f48:	b108      	cbz	r0, 8003f4e <__lshift+0x72>
 8003f4a:	f109 0502 	add.w	r5, r9, #2
 8003f4e:	3d01      	subs	r5, #1
 8003f50:	4638      	mov	r0, r7
 8003f52:	f8c8 5010 	str.w	r5, [r8, #16]
 8003f56:	4621      	mov	r1, r4
 8003f58:	f7ff fe33 	bl	8003bc2 <_Bfree>
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f62:	3101      	adds	r1, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	e7c7      	b.n	8003ef8 <__lshift+0x1c>
 8003f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	e7cd      	b.n	8003f0c <__lshift+0x30>
 8003f70:	4651      	mov	r1, sl
 8003f72:	e7dc      	b.n	8003f2e <__lshift+0x52>
 8003f74:	3904      	subs	r1, #4
 8003f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7a:	459c      	cmp	ip, r3
 8003f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f80:	d8f9      	bhi.n	8003f76 <__lshift+0x9a>
 8003f82:	e7e4      	b.n	8003f4e <__lshift+0x72>

08003f84 <__mcmp>:
 8003f84:	6903      	ldr	r3, [r0, #16]
 8003f86:	690a      	ldr	r2, [r1, #16]
 8003f88:	b530      	push	{r4, r5, lr}
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	d10c      	bne.n	8003fa8 <__mcmp+0x24>
 8003f8e:	0092      	lsls	r2, r2, #2
 8003f90:	3014      	adds	r0, #20
 8003f92:	3114      	adds	r1, #20
 8003f94:	1884      	adds	r4, r0, r2
 8003f96:	4411      	add	r1, r2
 8003f98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003fa0:	4295      	cmp	r5, r2
 8003fa2:	d003      	beq.n	8003fac <__mcmp+0x28>
 8003fa4:	d305      	bcc.n	8003fb2 <__mcmp+0x2e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd30      	pop	{r4, r5, pc}
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d3f3      	bcc.n	8003f98 <__mcmp+0x14>
 8003fb0:	e7fa      	b.n	8003fa8 <__mcmp+0x24>
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	e7f7      	b.n	8003fa8 <__mcmp+0x24>

08003fb8 <__mdiff>:
 8003fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	f7ff ffdd 	bl	8003f84 <__mcmp>
 8003fca:	1e06      	subs	r6, r0, #0
 8003fcc:	d108      	bne.n	8003fe0 <__mdiff+0x28>
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	f7ff fdc2 	bl	8003b5a <_Balloc>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	bfa4      	itt	ge
 8003fe2:	4623      	movge	r3, r4
 8003fe4:	462c      	movge	r4, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	6861      	ldr	r1, [r4, #4]
 8003fea:	bfa6      	itte	ge
 8003fec:	461d      	movge	r5, r3
 8003fee:	2600      	movge	r6, #0
 8003ff0:	2601      	movlt	r6, #1
 8003ff2:	f7ff fdb2 	bl	8003b5a <_Balloc>
 8003ff6:	f04f 0e00 	mov.w	lr, #0
 8003ffa:	60c6      	str	r6, [r0, #12]
 8003ffc:	692b      	ldr	r3, [r5, #16]
 8003ffe:	6926      	ldr	r6, [r4, #16]
 8004000:	f104 0214 	add.w	r2, r4, #20
 8004004:	f105 0914 	add.w	r9, r5, #20
 8004008:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800400c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004010:	f100 0114 	add.w	r1, r0, #20
 8004014:	f852 ab04 	ldr.w	sl, [r2], #4
 8004018:	f859 5b04 	ldr.w	r5, [r9], #4
 800401c:	fa1f f38a 	uxth.w	r3, sl
 8004020:	4473      	add	r3, lr
 8004022:	b2ac      	uxth	r4, r5
 8004024:	1b1b      	subs	r3, r3, r4
 8004026:	0c2c      	lsrs	r4, r5, #16
 8004028:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800402c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004036:	45c8      	cmp	r8, r9
 8004038:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800403c:	4694      	mov	ip, r2
 800403e:	f841 4b04 	str.w	r4, [r1], #4
 8004042:	d8e7      	bhi.n	8004014 <__mdiff+0x5c>
 8004044:	45bc      	cmp	ip, r7
 8004046:	d304      	bcc.n	8004052 <__mdiff+0x9a>
 8004048:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800404c:	b183      	cbz	r3, 8004070 <__mdiff+0xb8>
 800404e:	6106      	str	r6, [r0, #16]
 8004050:	e7c4      	b.n	8003fdc <__mdiff+0x24>
 8004052:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004056:	b2a2      	uxth	r2, r4
 8004058:	4472      	add	r2, lr
 800405a:	1413      	asrs	r3, r2, #16
 800405c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004060:	b292      	uxth	r2, r2
 8004062:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004066:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800406a:	f841 2b04 	str.w	r2, [r1], #4
 800406e:	e7e9      	b.n	8004044 <__mdiff+0x8c>
 8004070:	3e01      	subs	r6, #1
 8004072:	e7e9      	b.n	8004048 <__mdiff+0x90>

08004074 <__d2b>:
 8004074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004078:	461c      	mov	r4, r3
 800407a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800407e:	2101      	movs	r1, #1
 8004080:	4690      	mov	r8, r2
 8004082:	f7ff fd6a 	bl	8003b5a <_Balloc>
 8004086:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800408a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800408e:	4607      	mov	r7, r0
 8004090:	bb34      	cbnz	r4, 80040e0 <__d2b+0x6c>
 8004092:	9201      	str	r2, [sp, #4]
 8004094:	f1b8 0200 	subs.w	r2, r8, #0
 8004098:	d027      	beq.n	80040ea <__d2b+0x76>
 800409a:	a802      	add	r0, sp, #8
 800409c:	f840 2d08 	str.w	r2, [r0, #-8]!
 80040a0:	f7ff fe00 	bl	8003ca4 <__lo0bits>
 80040a4:	9900      	ldr	r1, [sp, #0]
 80040a6:	b1f0      	cbz	r0, 80040e6 <__d2b+0x72>
 80040a8:	9a01      	ldr	r2, [sp, #4]
 80040aa:	f1c0 0320 	rsb	r3, r0, #32
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	430b      	orrs	r3, r1
 80040b4:	40c2      	lsrs	r2, r0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	9201      	str	r2, [sp, #4]
 80040ba:	9b01      	ldr	r3, [sp, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf14      	ite	ne
 80040c0:	2102      	movne	r1, #2
 80040c2:	2101      	moveq	r1, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	6139      	str	r1, [r7, #16]
 80040c8:	b1c4      	cbz	r4, 80040fc <__d2b+0x88>
 80040ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80040ce:	4404      	add	r4, r0
 80040d0:	6034      	str	r4, [r6, #0]
 80040d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80040d6:	6028      	str	r0, [r5, #0]
 80040d8:	4638      	mov	r0, r7
 80040da:	b002      	add	sp, #8
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040e4:	e7d5      	b.n	8004092 <__d2b+0x1e>
 80040e6:	6179      	str	r1, [r7, #20]
 80040e8:	e7e7      	b.n	80040ba <__d2b+0x46>
 80040ea:	a801      	add	r0, sp, #4
 80040ec:	f7ff fdda 	bl	8003ca4 <__lo0bits>
 80040f0:	2101      	movs	r1, #1
 80040f2:	9b01      	ldr	r3, [sp, #4]
 80040f4:	6139      	str	r1, [r7, #16]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	3020      	adds	r0, #32
 80040fa:	e7e5      	b.n	80040c8 <__d2b+0x54>
 80040fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004100:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004104:	6030      	str	r0, [r6, #0]
 8004106:	6918      	ldr	r0, [r3, #16]
 8004108:	f7ff fdad 	bl	8003c66 <__hi0bits>
 800410c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004110:	e7e1      	b.n	80040d6 <__d2b+0x62>

08004112 <_calloc_r>:
 8004112:	b538      	push	{r3, r4, r5, lr}
 8004114:	fb02 f401 	mul.w	r4, r2, r1
 8004118:	4621      	mov	r1, r4
 800411a:	f000 f809 	bl	8004130 <_malloc_r>
 800411e:	4605      	mov	r5, r0
 8004120:	b118      	cbz	r0, 800412a <_calloc_r+0x18>
 8004122:	4622      	mov	r2, r4
 8004124:	2100      	movs	r1, #0
 8004126:	f7fe fb6f 	bl	8002808 <memset>
 800412a:	4628      	mov	r0, r5
 800412c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004130 <_malloc_r>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	1ccd      	adds	r5, r1, #3
 8004134:	f025 0503 	bic.w	r5, r5, #3
 8004138:	3508      	adds	r5, #8
 800413a:	2d0c      	cmp	r5, #12
 800413c:	bf38      	it	cc
 800413e:	250c      	movcc	r5, #12
 8004140:	2d00      	cmp	r5, #0
 8004142:	4606      	mov	r6, r0
 8004144:	db01      	blt.n	800414a <_malloc_r+0x1a>
 8004146:	42a9      	cmp	r1, r5
 8004148:	d903      	bls.n	8004152 <_malloc_r+0x22>
 800414a:	230c      	movs	r3, #12
 800414c:	6033      	str	r3, [r6, #0]
 800414e:	2000      	movs	r0, #0
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	f000 f869 	bl	8004228 <__malloc_lock>
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <_malloc_r+0xac>)
 8004158:	6814      	ldr	r4, [r2, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	b991      	cbnz	r1, 8004184 <_malloc_r+0x54>
 800415e:	4c20      	ldr	r4, [pc, #128]	; (80041e0 <_malloc_r+0xb0>)
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	b91b      	cbnz	r3, 800416c <_malloc_r+0x3c>
 8004164:	4630      	mov	r0, r6
 8004166:	f000 f83d 	bl	80041e4 <_sbrk_r>
 800416a:	6020      	str	r0, [r4, #0]
 800416c:	4629      	mov	r1, r5
 800416e:	4630      	mov	r0, r6
 8004170:	f000 f838 	bl	80041e4 <_sbrk_r>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d124      	bne.n	80041c2 <_malloc_r+0x92>
 8004178:	230c      	movs	r3, #12
 800417a:	4630      	mov	r0, r6
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	f000 f854 	bl	800422a <__malloc_unlock>
 8004182:	e7e4      	b.n	800414e <_malloc_r+0x1e>
 8004184:	680b      	ldr	r3, [r1, #0]
 8004186:	1b5b      	subs	r3, r3, r5
 8004188:	d418      	bmi.n	80041bc <_malloc_r+0x8c>
 800418a:	2b0b      	cmp	r3, #11
 800418c:	d90f      	bls.n	80041ae <_malloc_r+0x7e>
 800418e:	600b      	str	r3, [r1, #0]
 8004190:	18cc      	adds	r4, r1, r3
 8004192:	50cd      	str	r5, [r1, r3]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f848 	bl	800422a <__malloc_unlock>
 800419a:	f104 000b 	add.w	r0, r4, #11
 800419e:	1d23      	adds	r3, r4, #4
 80041a0:	f020 0007 	bic.w	r0, r0, #7
 80041a4:	1ac3      	subs	r3, r0, r3
 80041a6:	d0d3      	beq.n	8004150 <_malloc_r+0x20>
 80041a8:	425a      	negs	r2, r3
 80041aa:	50e2      	str	r2, [r4, r3]
 80041ac:	e7d0      	b.n	8004150 <_malloc_r+0x20>
 80041ae:	684b      	ldr	r3, [r1, #4]
 80041b0:	428c      	cmp	r4, r1
 80041b2:	bf16      	itet	ne
 80041b4:	6063      	strne	r3, [r4, #4]
 80041b6:	6013      	streq	r3, [r2, #0]
 80041b8:	460c      	movne	r4, r1
 80041ba:	e7eb      	b.n	8004194 <_malloc_r+0x64>
 80041bc:	460c      	mov	r4, r1
 80041be:	6849      	ldr	r1, [r1, #4]
 80041c0:	e7cc      	b.n	800415c <_malloc_r+0x2c>
 80041c2:	1cc4      	adds	r4, r0, #3
 80041c4:	f024 0403 	bic.w	r4, r4, #3
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d005      	beq.n	80041d8 <_malloc_r+0xa8>
 80041cc:	1a21      	subs	r1, r4, r0
 80041ce:	4630      	mov	r0, r6
 80041d0:	f000 f808 	bl	80041e4 <_sbrk_r>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0cf      	beq.n	8004178 <_malloc_r+0x48>
 80041d8:	6025      	str	r5, [r4, #0]
 80041da:	e7db      	b.n	8004194 <_malloc_r+0x64>
 80041dc:	200001fc 	.word	0x200001fc
 80041e0:	20000200 	.word	0x20000200

080041e4 <_sbrk_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	2300      	movs	r3, #0
 80041e8:	4c05      	ldr	r4, [pc, #20]	; (8004200 <_sbrk_r+0x1c>)
 80041ea:	4605      	mov	r5, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	f7fc fdae 	bl	8000d50 <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_sbrk_r+0x1a>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_sbrk_r+0x1a>
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	20000250 	.word	0x20000250

08004204 <__ascii_mbtowc>:
 8004204:	b082      	sub	sp, #8
 8004206:	b901      	cbnz	r1, 800420a <__ascii_mbtowc+0x6>
 8004208:	a901      	add	r1, sp, #4
 800420a:	b142      	cbz	r2, 800421e <__ascii_mbtowc+0x1a>
 800420c:	b14b      	cbz	r3, 8004222 <__ascii_mbtowc+0x1e>
 800420e:	7813      	ldrb	r3, [r2, #0]
 8004210:	600b      	str	r3, [r1, #0]
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	1c10      	adds	r0, r2, #0
 8004216:	bf18      	it	ne
 8004218:	2001      	movne	r0, #1
 800421a:	b002      	add	sp, #8
 800421c:	4770      	bx	lr
 800421e:	4610      	mov	r0, r2
 8004220:	e7fb      	b.n	800421a <__ascii_mbtowc+0x16>
 8004222:	f06f 0001 	mvn.w	r0, #1
 8004226:	e7f8      	b.n	800421a <__ascii_mbtowc+0x16>

08004228 <__malloc_lock>:
 8004228:	4770      	bx	lr

0800422a <__malloc_unlock>:
 800422a:	4770      	bx	lr

0800422c <__ascii_wctomb>:
 800422c:	b149      	cbz	r1, 8004242 <__ascii_wctomb+0x16>
 800422e:	2aff      	cmp	r2, #255	; 0xff
 8004230:	bf8b      	itete	hi
 8004232:	238a      	movhi	r3, #138	; 0x8a
 8004234:	700a      	strbls	r2, [r1, #0]
 8004236:	6003      	strhi	r3, [r0, #0]
 8004238:	2001      	movls	r0, #1
 800423a:	bf88      	it	hi
 800423c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004240:	4770      	bx	lr
 8004242:	4608      	mov	r0, r1
 8004244:	4770      	bx	lr
	...

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
