
C6_SCAN_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002784  08002784  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002784  08002784  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002784  08002784  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800278c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000009c  08002828  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002828  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c08  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014da  00000000  00000000  00027ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  000291a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  00029a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d4c  00000000  00000000  0002a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a212  00000000  00000000  00041014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082416  00000000  00000000  0004b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd63c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  000cd68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002708 	.word	0x08002708

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08002708 	.word	0x08002708

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000156:	f000 fa91 	bl	800067c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800015a:	f000 f857 	bl	800020c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015e:	f000 f8e9 	bl	8000334 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000162:	f000 f88f 	bl	8000284 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000166:	f000 f8bb 	bl	80002e0 <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1000);
 800016a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016e:	f000 fae7 	bl	8000740 <HAL_Delay>

		HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8000172:	f242 7310 	movw	r3, #10000	; 0x2710
 8000176:	221a      	movs	r2, #26
 8000178:	491d      	ldr	r1, [pc, #116]	; (80001f0 <main+0xa4>)
 800017a:	481e      	ldr	r0, [pc, #120]	; (80001f4 <main+0xa8>)
 800017c:	f001 fcad 	bl	8001ada <HAL_UART_Transmit>
		for (i = 1; i < 128; i++) {
 8000180:	2301      	movs	r3, #1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e028      	b.n	80001d8 <main+0x8c>
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	b29b      	uxth	r3, r3
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	b299      	uxth	r1, r3
 800018e:	2302      	movs	r3, #2
 8000190:	2202      	movs	r2, #2
 8000192:	4819      	ldr	r0, [pc, #100]	; (80001f8 <main+0xac>)
 8000194:	f000 feb4 	bl	8000f00 <HAL_I2C_IsDeviceReady>
 8000198:	4603      	mov	r3, r0
 800019a:	71bb      	strb	r3, [r7, #6]
			if (ret != HAL_OK) {
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d007      	beq.n	80001b2 <main+0x66>
				HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80001a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80001a6:	2204      	movs	r2, #4
 80001a8:	4914      	ldr	r1, [pc, #80]	; (80001fc <main+0xb0>)
 80001aa:	4812      	ldr	r0, [pc, #72]	; (80001f4 <main+0xa8>)
 80001ac:	f001 fc95 	bl	8001ada <HAL_UART_Transmit>
 80001b0:	e00f      	b.n	80001d2 <main+0x86>
			} else if (ret == HAL_OK) {
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d10c      	bne.n	80001d2 <main+0x86>
				sprintf((char*) Buffer, "0x%X", i);
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	461a      	mov	r2, r3
 80001bc:	4910      	ldr	r1, [pc, #64]	; (8000200 <main+0xb4>)
 80001be:	4811      	ldr	r0, [pc, #68]	; (8000204 <main+0xb8>)
 80001c0:	f001 fe28 	bl	8001e14 <siprintf>
				HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 80001c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80001c8:	2219      	movs	r2, #25
 80001ca:	490e      	ldr	r1, [pc, #56]	; (8000204 <main+0xb8>)
 80001cc:	4809      	ldr	r0, [pc, #36]	; (80001f4 <main+0xa8>)
 80001ce:	f001 fc84 	bl	8001ada <HAL_UART_Transmit>
		for (i = 1; i < 128; i++) {
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	dad2      	bge.n	8000186 <main+0x3a>
			}
		}
		HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 80001e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80001e4:	220b      	movs	r2, #11
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <main+0xbc>)
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0xa8>)
 80001ea:	f001 fc76 	bl	8001ada <HAL_UART_Transmit>
		HAL_Delay(1000);
 80001ee:	e7bc      	b.n	800016a <main+0x1e>
 80001f0:	20000004 	.word	0x20000004
 80001f4:	2000010c 	.word	0x2000010c
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	20000000 	.word	0x20000000
 8000200:	08002720 	.word	0x08002720
 8000204:	20000150 	.word	0x20000150
 8000208:	20000020 	.word	0x20000020

0800020c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fdf2 	bl	8001e04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ffe2 	bl	800120c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
		Error_Handler();
 800024e:	f000 f8c9 	bl	80003e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fa50 	bl	8001710 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
		Error_Handler();
 8000276:	f000 f8b5 	bl	80003e4 <Error_Handler>
	}
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_I2C1_Init+0x50>)
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <MX_I2C1_Init+0x54>)
 800028c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_I2C1_Init+0x50>)
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <MX_I2C1_Init+0x58>)
 8000292:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_I2C1_Init+0x50>)
 80002c2:	f000 fcd9 	bl	8000c78 <HAL_I2C_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80002cc:	f000 f88a 	bl	80003e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000b8 	.word	0x200000b8
 80002d8:	40005400 	.word	0x40005400
 80002dc:	000186a0 	.word	0x000186a0

080002e0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_USART1_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000318:	f001 fb92 	bl	8001a40 <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000322:	f000 f85f 	bl	80003e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000010c 	.word	0x2000010c
 8000330:	40013800 	.word	0x40013800

08000334 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_GPIO_Init+0xa8>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a23      	ldr	r2, [pc, #140]	; (80003dc <MX_GPIO_Init+0xa8>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0310 	and.w	r3, r3, #16
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a17      	ldr	r2, [pc, #92]	; (80003dc <MX_GPIO_Init+0xa8>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <MX_GPIO_Init+0xa8>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_ONBOAR_GPIO_Port, LED_ONBOAR_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ae:	480c      	ldr	r0, [pc, #48]	; (80003e0 <MX_GPIO_Init+0xac>)
 80003b0:	f000 fc4a 	bl	8000c48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_ONBOAR_Pin */
	GPIO_InitStruct.Pin = LED_ONBOAR_Pin;
 80003b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_ONBOAR_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_GPIO_Init+0xac>)
 80003ce:	f000 fabf 	bl	8000950 <HAL_GPIO_Init>

}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40011000 	.word	0x40011000

080003e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <HAL_I2C_MspInit+0x70>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d123      	bne.n	80004bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800048c:	23c0      	movs	r3, #192	; 0xc0
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000490:	2312      	movs	r3, #18
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <HAL_I2C_MspInit+0x78>)
 80004a0:	f000 fa56 	bl	8000950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 80004aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ae:	61d3      	str	r3, [r2, #28]
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_I2C_MspInit+0x74>)
 80004b2:	69db      	ldr	r3, [r3, #28]
 80004b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40005400 	.word	0x40005400
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <HAL_UART_MspInit+0x8c>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d131      	bne.n	8000554 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1a      	ldr	r2, [pc, #104]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_UART_MspInit+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <HAL_UART_MspInit+0x90>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_UART_MspInit+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000526:	2302      	movs	r3, #2
 8000528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <HAL_UART_MspInit+0x94>)
 8000536:	f000 fa0b 	bl	8000950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <HAL_UART_MspInit+0x94>)
 8000550:	f000 f9fe 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40013800 	.word	0x40013800
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f8ab 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f001 fbe2 	bl	8001db0 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20002800 	.word	0x20002800
 8000618:	00000400 	.word	0x00000400
 800061c:	2000016c 	.word	0x2000016c
 8000620:	20000188 	.word	0x20000188

08000624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000656:	f7ff ffe5 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f001 fbaf 	bl	8001dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fd75 	bl	800014c <main>
  bx lr
 8000662:	4770      	bx	lr
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800066c:	0800278c 	.word	0x0800278c
  ldr r2, =_sbss
 8000670:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000674:	20000184 	.word	0x20000184

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f92b 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	200f      	movs	r0, #15
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff feaa 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f935 	bl	8000936 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f90b 	bl	80008fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000034 	.word	0x20000034
 8000704:	20000030 	.word	0x20000030

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x20>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000034 	.word	0x20000034
 8000728:	20000170 	.word	0x20000170

0800072c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_GetTick+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000170 	.word	0x20000170

08000740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff fff0 	bl	800072c <HAL_GetTick>
 800074c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d005      	beq.n	8000766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_Delay+0x44>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000766:	bf00      	nop
 8000768:	f7ff ffe0 	bl	800072c <HAL_GetTick>
 800076c:	4602      	mov	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8f7      	bhi.n	8000768 <HAL_Delay+0x28>
  {
  }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000034 	.word	0x20000034

08000788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ba:	4a04      	ldr	r2, [pc, #16]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60d3      	str	r3, [r2, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <__NVIC_GetPriorityGrouping+0x18>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	f003 0307 	and.w	r3, r3, #7
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff90 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff49 	bl	8000788 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff5e 	bl	80007d0 <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff90 	bl	8000840 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffb0 	bl	80008a4 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b480      	push	{r7}
 8000952:	b08b      	sub	sp, #44	; 0x2c
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000962:	e161      	b.n	8000c28 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000964:	2201      	movs	r2, #1
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	429a      	cmp	r2, r3
 800097e:	f040 8150 	bne.w	8000c22 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	4a97      	ldr	r2, [pc, #604]	; (8000be4 <HAL_GPIO_Init+0x294>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d05e      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 800098c:	4a95      	ldr	r2, [pc, #596]	; (8000be4 <HAL_GPIO_Init+0x294>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d875      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 8000992:	4a95      	ldr	r2, [pc, #596]	; (8000be8 <HAL_GPIO_Init+0x298>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d058      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 8000998:	4a93      	ldr	r2, [pc, #588]	; (8000be8 <HAL_GPIO_Init+0x298>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d86f      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 800099e:	4a93      	ldr	r2, [pc, #588]	; (8000bec <HAL_GPIO_Init+0x29c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d052      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009a4:	4a91      	ldr	r2, [pc, #580]	; (8000bec <HAL_GPIO_Init+0x29c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d869      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009aa:	4a91      	ldr	r2, [pc, #580]	; (8000bf0 <HAL_GPIO_Init+0x2a0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d04c      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009b0:	4a8f      	ldr	r2, [pc, #572]	; (8000bf0 <HAL_GPIO_Init+0x2a0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d863      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009b6:	4a8f      	ldr	r2, [pc, #572]	; (8000bf4 <HAL_GPIO_Init+0x2a4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d046      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009bc:	4a8d      	ldr	r2, [pc, #564]	; (8000bf4 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d85d      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009c2:	2b12      	cmp	r3, #18
 80009c4:	d82a      	bhi.n	8000a1c <HAL_GPIO_Init+0xcc>
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d859      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <HAL_GPIO_Init+0x80>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	08000a4b 	.word	0x08000a4b
 80009d4:	08000a25 	.word	0x08000a25
 80009d8:	08000a37 	.word	0x08000a37
 80009dc:	08000a79 	.word	0x08000a79
 80009e0:	08000a7f 	.word	0x08000a7f
 80009e4:	08000a7f 	.word	0x08000a7f
 80009e8:	08000a7f 	.word	0x08000a7f
 80009ec:	08000a7f 	.word	0x08000a7f
 80009f0:	08000a7f 	.word	0x08000a7f
 80009f4:	08000a7f 	.word	0x08000a7f
 80009f8:	08000a7f 	.word	0x08000a7f
 80009fc:	08000a7f 	.word	0x08000a7f
 8000a00:	08000a7f 	.word	0x08000a7f
 8000a04:	08000a7f 	.word	0x08000a7f
 8000a08:	08000a7f 	.word	0x08000a7f
 8000a0c:	08000a7f 	.word	0x08000a7f
 8000a10:	08000a7f 	.word	0x08000a7f
 8000a14:	08000a2d 	.word	0x08000a2d
 8000a18:	08000a41 	.word	0x08000a41
 8000a1c:	4a76      	ldr	r2, [pc, #472]	; (8000bf8 <HAL_GPIO_Init+0x2a8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a22:	e02c      	b.n	8000a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e029      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	3304      	adds	r3, #4
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e024      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e01f      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	330c      	adds	r3, #12
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e01a      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a52:	2304      	movs	r3, #4
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e013      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d105      	bne.n	8000a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a60:	2308      	movs	r3, #8
 8000a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	611a      	str	r2, [r3, #16]
          break;
 8000a6a:	e009      	b.n	8000a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	615a      	str	r2, [r3, #20]
          break;
 8000a76:	e003      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          break;
 8000a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d801      	bhi.n	8000a8a <HAL_GPIO_Init+0x13a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <HAL_GPIO_Init+0x13e>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d802      	bhi.n	8000a9c <HAL_GPIO_Init+0x14c>
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	e002      	b.n	8000aa2 <HAL_GPIO_Init+0x152>
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	3b08      	subs	r3, #8
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	6a39      	ldr	r1, [r7, #32]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	431a      	orrs	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 80a9 	beq.w	8000c22 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_GPIO_Init+0x2ac>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a49      	ldr	r2, [pc, #292]	; (8000bfc <HAL_GPIO_Init+0x2ac>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <HAL_GPIO_Init+0x2ac>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ae8:	4a45      	ldr	r2, [pc, #276]	; (8000c00 <HAL_GPIO_Init+0x2b0>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <HAL_GPIO_Init+0x2b4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1e0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3c      	ldr	r2, [pc, #240]	; (8000c08 <HAL_GPIO_Init+0x2b8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1dc>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <HAL_GPIO_Init+0x2bc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1d8>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b30:	2300      	movs	r3, #0
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b42:	492f      	ldr	r1, [pc, #188]	; (8000c00 <HAL_GPIO_Init+0x2b0>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	492b      	ldr	r1, [pc, #172]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4927      	ldr	r1, [pc, #156]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	4921      	ldr	r1, [pc, #132]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	491d      	ldr	r1, [pc, #116]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	4917      	ldr	r1, [pc, #92]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4913      	ldr	r1, [pc, #76]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d01f      	beq.n	8000c14 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	490d      	ldr	r1, [pc, #52]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
 8000be0:	e01f      	b.n	8000c22 <HAL_GPIO_Init+0x2d2>
 8000be2:	bf00      	nop
 8000be4:	10320000 	.word	0x10320000
 8000be8:	10310000 	.word	0x10310000
 8000bec:	10220000 	.word	0x10220000
 8000bf0:	10210000 	.word	0x10210000
 8000bf4:	10120000 	.word	0x10120000
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_GPIO_Init+0x2f4>)
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4909      	ldr	r1, [pc, #36]	; (8000c44 <HAL_GPIO_Init+0x2f4>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	3301      	adds	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f47f ae96 	bne.w	8000964 <HAL_GPIO_Init+0x14>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	372c      	adds	r7, #44	; 0x2c
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c58:	787b      	ldrb	r3, [r7, #1]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c64:	e003      	b.n	8000c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e12b      	b.n	8000ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d106      	bne.n	8000ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fbd8 	bl	8000454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2224      	movs	r2, #36	; 0x24
 8000ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cdc:	f000 fe6a 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8000ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4a81      	ldr	r2, [pc, #516]	; (8000eec <HAL_I2C_Init+0x274>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d807      	bhi.n	8000cfc <HAL_I2C_Init+0x84>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4a80      	ldr	r2, [pc, #512]	; (8000ef0 <HAL_I2C_Init+0x278>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bf94      	ite	ls
 8000cf4:	2301      	movls	r3, #1
 8000cf6:	2300      	movhi	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e006      	b.n	8000d0a <HAL_I2C_Init+0x92>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4a7d      	ldr	r2, [pc, #500]	; (8000ef4 <HAL_I2C_Init+0x27c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	bf94      	ite	ls
 8000d04:	2301      	movls	r3, #1
 8000d06:	2300      	movhi	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e0e7      	b.n	8000ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a78      	ldr	r2, [pc, #480]	; (8000ef8 <HAL_I2C_Init+0x280>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <HAL_I2C_Init+0x274>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d802      	bhi.n	8000d4c <HAL_I2C_Init+0xd4>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	e009      	b.n	8000d60 <HAL_I2C_Init+0xe8>
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d52:	fb02 f303 	mul.w	r3, r2, r3
 8000d56:	4a69      	ldr	r2, [pc, #420]	; (8000efc <HAL_I2C_Init+0x284>)
 8000d58:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	3301      	adds	r3, #1
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	495c      	ldr	r1, [pc, #368]	; (8000eec <HAL_I2C_Init+0x274>)
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d819      	bhi.n	8000db4 <HAL_I2C_Init+0x13c>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1e59      	subs	r1, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d8e:	1c59      	adds	r1, r3, #1
 8000d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d94:	400b      	ands	r3, r1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00a      	beq.n	8000db0 <HAL_I2C_Init+0x138>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1e59      	subs	r1, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dae:	e051      	b.n	8000e54 <HAL_I2C_Init+0x1dc>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e04f      	b.n	8000e54 <HAL_I2C_Init+0x1dc>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_I2C_Init+0x168>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6859      	ldr	r1, [r3, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	440b      	add	r3, r1
 8000dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	e012      	b.n	8000e06 <HAL_I2C_Init+0x18e>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	1e58      	subs	r0, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6859      	ldr	r1, [r3, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	0099      	lsls	r1, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_I2C_Init+0x196>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e022      	b.n	8000e54 <HAL_I2C_Init+0x1dc>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10e      	bne.n	8000e34 <HAL_I2C_Init+0x1bc>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1e58      	subs	r0, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6859      	ldr	r1, [r3, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	440b      	add	r3, r1
 8000e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e32:	e00f      	b.n	8000e54 <HAL_I2C_Init+0x1dc>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1e58      	subs	r0, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6859      	ldr	r1, [r3, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	0099      	lsls	r1, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	6809      	ldr	r1, [r1, #0]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69da      	ldr	r2, [r3, #28]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6911      	ldr	r1, [r2, #16]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68d2      	ldr	r2, [r2, #12]
 8000e8e:	4311      	orrs	r1, r2
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	000186a0 	.word	0x000186a0
 8000ef0:	001e847f 	.word	0x001e847f
 8000ef4:	003d08ff 	.word	0x003d08ff
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	10624dd3 	.word	0x10624dd3

08000f00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fc0c 	bl	800072c <HAL_GetTick>
 8000f14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	f040 8111 	bne.w	800114a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4988      	ldr	r1, [pc, #544]	; (8001154 <HAL_I2C_IsDeviceReady+0x254>)
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f912 	bl	800115c <I2C_WaitOnFlagUntilTimeout>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e104      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_I2C_IsDeviceReady+0x50>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e0fd      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d007      	beq.n	8000f76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2224      	movs	r2, #36	; 0x24
 8000f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2200      	movs	r2, #0
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a70      	ldr	r2, [pc, #448]	; (8001158 <HAL_I2C_IsDeviceReady+0x258>)
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f8d0 	bl	800115c <I2C_WaitOnFlagUntilTimeout>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00d      	beq.n	8000fde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd0:	d103      	bne.n	8000fda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0b6      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000fec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fb9d 	bl	800072c <HAL_GetTick>
 8000ff2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001022:	e025      	b.n	8001070 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001024:	f7ff fb82 	bl	800072c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d302      	bcc.n	800103a <HAL_I2C_IsDeviceReady+0x13a>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	22a0      	movs	r2, #160	; 0xa0
 800103e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b02      	cmp	r3, #2
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2ba0      	cmp	r3, #160	; 0xa0
 800107a:	d005      	beq.n	8001088 <HAL_I2C_IsDeviceReady+0x188>
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_I2C_IsDeviceReady+0x188>
 8001082:	7dbb      	ldrb	r3, [r7, #22]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0cd      	beq.n	8001024 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2220      	movs	r2, #32
 800108c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d129      	bne.n	80010f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2319      	movs	r3, #25
 80010ca:	2201      	movs	r2, #1
 80010cc:	4921      	ldr	r1, [pc, #132]	; (8001154 <HAL_I2C_IsDeviceReady+0x254>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f844 	bl	800115c <I2C_WaitOnFlagUntilTimeout>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e036      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2220      	movs	r2, #32
 80010e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e02c      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001100:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800110a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2319      	movs	r3, #25
 8001112:	2201      	movs	r2, #1
 8001114:	490f      	ldr	r1, [pc, #60]	; (8001154 <HAL_I2C_IsDeviceReady+0x254>)
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f820 	bl	800115c <I2C_WaitOnFlagUntilTimeout>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e012      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	3301      	adds	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	f4ff af32 	bcc.w	8000f9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2220      	movs	r2, #32
 800113a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800114a:	2302      	movs	r3, #2
  }
}
 800114c:	4618      	mov	r0, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	00100002 	.word	0x00100002
 8001158:	ffff0000 	.word	0xffff0000

0800115c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800116c:	e025      	b.n	80011ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d021      	beq.n	80011ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001176:	f7ff fad9 	bl	800072c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d302      	bcc.n	800118c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d116      	bne.n	80011ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f043 0220 	orr.w	r2, r3, #32
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e023      	b.n	8001202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d10d      	bne.n	80011e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4013      	ands	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	e00c      	b.n	80011fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4013      	ands	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d0b6      	beq.n	800116e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e272      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8087 	beq.w	800133a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122c:	4b92      	ldr	r3, [pc, #584]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b04      	cmp	r3, #4
 8001236:	d00c      	beq.n	8001252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d112      	bne.n	800126a <HAL_RCC_OscConfig+0x5e>
 8001244:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d06c      	beq.n	8001338 <HAL_RCC_OscConfig+0x12c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d168      	bne.n	8001338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e24c      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x76>
 8001274:	4b80      	ldr	r3, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a7f      	ldr	r2, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e02e      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0xbc>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fa20 	bl	800072c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fa1c 	bl	800072c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e200      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe4>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fa0c 	bl	800072c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fa08 	bl	800072c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1ec      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x10c>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x18c>
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x176>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c0      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4939      	ldr	r1, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff f9c1 	bl	800072c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff f9bd 	bl	800072c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a1      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff f9a0 	bl	800072c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff f99c 	bl	800072c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e180      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d03a      	beq.n	8001490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d019      	beq.n	8001456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_RCC_OscConfig+0x274>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff f980 	bl	800072c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff f97c 	bl	800072c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e160      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fad8 	bl	8001a04 <RCC_Delay>
 8001454:	e01c      	b.n	8001490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_RCC_OscConfig+0x274>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff f966 	bl	800072c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001462:	e00f      	b.n	8001484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff f962 	bl	800072c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d908      	bls.n	8001484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e146      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	42420000 	.word	0x42420000
 8001480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e9      	bne.n	8001464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a6 	beq.w	80015ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7e      	ldr	r2, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f923 	bl	800072c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff f91f 	bl	800072c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e103      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x312>
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e02d      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x334>
 8001526:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x356>
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f8d3 	bl	800072c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff f8cf 	bl	800072c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0b1      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x37e>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f8bd 	bl	800072c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff f8b9 	bl	800072c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e09b      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8087 	beq.w	8001702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d061      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d146      	bne.n	8001696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff f88d 	bl	800072c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff f889 	bl	800072c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e06d      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d108      	bne.n	8001650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4921      	ldr	r1, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a19      	ldr	r1, [r3, #32]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	430b      	orrs	r3, r1
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff f85d 	bl	800072c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff f859 	bl	800072c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e03d      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x46a>
 8001694:	e035      	b.n	8001702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f846 	bl	800072c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff f842 	bl	800072c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e026      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x498>
 80016c2:	e01e      	b.n	8001702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e019      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x500>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d0      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4965      	ldr	r1, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800178e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d040      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e073      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4936      	ldr	r1, [pc, #216]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7fe ff94 	bl	800072c <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7fe ff90 	bl	800072c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e053      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d210      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0207 	bic.w	r2, r3, #7
 8001846:	4922      	ldr	r1, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1cc>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1d0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fef2 	bl	80006a8 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	08002738 	.word	0x08002738
 80018dc:	2000002c 	.word	0x2000002c
 80018e0:	20000030 	.word	0x20000030

080018e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b490      	push	{r4, r7}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_GetSysClockFreq+0xac>)
 80018ec:	1d3c      	adds	r4, r7, #4
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f4:	f240 2301 	movw	r3, #513	; 0x201
 80018f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x46>
 8001922:	e02b      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001926:	623b      	str	r3, [r7, #32]
      break;
 8001928:	e02b      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3328      	adds	r3, #40	; 0x28
 8001934:	443b      	add	r3, r7
 8001936:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800193a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0c5b      	lsrs	r3, r3, #17
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	3328      	adds	r3, #40	; 0x28
 8001952:	443b      	add	r3, r7
 8001954:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001958:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195e:	fb03 f202 	mul.w	r2, r3, r2
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e004      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	623b      	str	r3, [r7, #32]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	6a3b      	ldr	r3, [r7, #32]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bc90      	pop	{r4, r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	08002728 	.word	0x08002728
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	003d0900 	.word	0x003d0900

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	2000002c 	.word	0x2000002c

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff2 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08002748 	.word	0x08002748

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0adb      	lsrs	r3, r3, #11
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08002748 	.word	0x08002748

08001a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <RCC_Delay+0x34>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <RCC_Delay+0x38>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a5b      	lsrs	r3, r3, #9
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a20:	bf00      	nop
  }
  while (Delay --);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	60fa      	str	r2, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f9      	bne.n	8001a20 <RCC_Delay+0x1c>
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	2000002c 	.word	0x2000002c
 8001a3c:	10624dd3 	.word	0x10624dd3

08001a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e03f      	b.n	8001ad2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fd32 	bl	80004d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f905 	bl	8001c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b08a      	sub	sp, #40	; 0x28
 8001ade:	af02      	add	r7, sp, #8
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d17c      	bne.n	8001bf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_UART_Transmit+0x2c>
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e075      	b.n	8001bf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_UART_Transmit+0x3e>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e06e      	b.n	8001bf6 <HAL_UART_Transmit+0x11c>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2221      	movs	r2, #33	; 0x21
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b2e:	f7fe fdfd 	bl	800072c <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b48:	d108      	bne.n	8001b5c <HAL_UART_Transmit+0x82>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	e003      	b.n	8001b64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b6c:	e02a      	b.n	8001bc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f840 	bl	8001bfe <UART_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e036      	b.n	8001bf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	e007      	b.n	8001bb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1cf      	bne.n	8001b6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f810 	bl	8001bfe <UART_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
  }
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c0e:	e02c      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d028      	beq.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c1e:	f7fe fd85 	bl	800072c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d21d      	bcs.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e00f      	b.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0c3      	beq.n	8001c10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cce:	f023 030c 	bic.w	r3, r3, #12
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <UART_SetConfig+0x114>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cfc:	f7ff fe6e 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	e002      	b.n	8001d0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d04:	f7ff fe56 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8001d08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <UART_SetConfig+0x118>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	0119      	lsls	r1, r3, #4
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <UART_SetConfig+0x118>)
 8001d42:	fba3 0302 	umull	r0, r3, r3, r2
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2064      	movs	r0, #100	; 0x64
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	3332      	adds	r3, #50	; 0x32
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	4419      	add	r1, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <UART_SetConfig+0x118>)
 8001d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2064      	movs	r0, #100	; 0x64
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013800 	.word	0x40013800
 8001dac:	51eb851f 	.word	0x51eb851f

08001db0 <__errno>:
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <__errno+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000038 	.word	0x20000038

08001dbc <__libc_init_array>:
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	4d0c      	ldr	r5, [pc, #48]	; (8001df4 <__libc_init_array+0x38>)
 8001dc2:	4c0d      	ldr	r4, [pc, #52]	; (8001df8 <__libc_init_array+0x3c>)
 8001dc4:	1b64      	subs	r4, r4, r5
 8001dc6:	10a4      	asrs	r4, r4, #2
 8001dc8:	42a6      	cmp	r6, r4
 8001dca:	d109      	bne.n	8001de0 <__libc_init_array+0x24>
 8001dcc:	f000 fc9c 	bl	8002708 <_init>
 8001dd0:	2600      	movs	r6, #0
 8001dd2:	4d0a      	ldr	r5, [pc, #40]	; (8001dfc <__libc_init_array+0x40>)
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <__libc_init_array+0x44>)
 8001dd6:	1b64      	subs	r4, r4, r5
 8001dd8:	10a4      	asrs	r4, r4, #2
 8001dda:	42a6      	cmp	r6, r4
 8001ddc:	d105      	bne.n	8001dea <__libc_init_array+0x2e>
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
 8001de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de4:	4798      	blx	r3
 8001de6:	3601      	adds	r6, #1
 8001de8:	e7ee      	b.n	8001dc8 <__libc_init_array+0xc>
 8001dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dee:	4798      	blx	r3
 8001df0:	3601      	adds	r6, #1
 8001df2:	e7f2      	b.n	8001dda <__libc_init_array+0x1e>
 8001df4:	08002784 	.word	0x08002784
 8001df8:	08002784 	.word	0x08002784
 8001dfc:	08002784 	.word	0x08002784
 8001e00:	08002788 	.word	0x08002788

08001e04 <memset>:
 8001e04:	4603      	mov	r3, r0
 8001e06:	4402      	add	r2, r0
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <memset+0xa>
 8001e0c:	4770      	bx	lr
 8001e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e12:	e7f9      	b.n	8001e08 <memset+0x4>

08001e14 <siprintf>:
 8001e14:	b40e      	push	{r1, r2, r3}
 8001e16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e1a:	b500      	push	{lr}
 8001e1c:	b09c      	sub	sp, #112	; 0x70
 8001e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8001e20:	9002      	str	r0, [sp, #8]
 8001e22:	9006      	str	r0, [sp, #24]
 8001e24:	9107      	str	r1, [sp, #28]
 8001e26:	9104      	str	r1, [sp, #16]
 8001e28:	4808      	ldr	r0, [pc, #32]	; (8001e4c <siprintf+0x38>)
 8001e2a:	4909      	ldr	r1, [pc, #36]	; (8001e50 <siprintf+0x3c>)
 8001e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e30:	9105      	str	r1, [sp, #20]
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	a902      	add	r1, sp, #8
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f000 f868 	bl	8001f0c <_svfiprintf_r>
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	9b02      	ldr	r3, [sp, #8]
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	b01c      	add	sp, #112	; 0x70
 8001e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e48:	b003      	add	sp, #12
 8001e4a:	4770      	bx	lr
 8001e4c:	20000038 	.word	0x20000038
 8001e50:	ffff0208 	.word	0xffff0208

08001e54 <__ssputs_r>:
 8001e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e58:	688e      	ldr	r6, [r1, #8]
 8001e5a:	4682      	mov	sl, r0
 8001e5c:	429e      	cmp	r6, r3
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4690      	mov	r8, r2
 8001e62:	461f      	mov	r7, r3
 8001e64:	d838      	bhi.n	8001ed8 <__ssputs_r+0x84>
 8001e66:	898a      	ldrh	r2, [r1, #12]
 8001e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e6c:	d032      	beq.n	8001ed4 <__ssputs_r+0x80>
 8001e6e:	6825      	ldr	r5, [r4, #0]
 8001e70:	6909      	ldr	r1, [r1, #16]
 8001e72:	3301      	adds	r3, #1
 8001e74:	eba5 0901 	sub.w	r9, r5, r1
 8001e78:	6965      	ldr	r5, [r4, #20]
 8001e7a:	444b      	add	r3, r9
 8001e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e84:	106d      	asrs	r5, r5, #1
 8001e86:	429d      	cmp	r5, r3
 8001e88:	bf38      	it	cc
 8001e8a:	461d      	movcc	r5, r3
 8001e8c:	0553      	lsls	r3, r2, #21
 8001e8e:	d531      	bpl.n	8001ef4 <__ssputs_r+0xa0>
 8001e90:	4629      	mov	r1, r5
 8001e92:	f000 fb6f 	bl	8002574 <_malloc_r>
 8001e96:	4606      	mov	r6, r0
 8001e98:	b950      	cbnz	r0, 8001eb0 <__ssputs_r+0x5c>
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f8ca 3000 	str.w	r3, [sl]
 8001ea4:	89a3      	ldrh	r3, [r4, #12]
 8001ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eaa:	81a3      	strh	r3, [r4, #12]
 8001eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	6921      	ldr	r1, [r4, #16]
 8001eb4:	f000 face 	bl	8002454 <memcpy>
 8001eb8:	89a3      	ldrh	r3, [r4, #12]
 8001eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	6126      	str	r6, [r4, #16]
 8001ec6:	444e      	add	r6, r9
 8001ec8:	6026      	str	r6, [r4, #0]
 8001eca:	463e      	mov	r6, r7
 8001ecc:	6165      	str	r5, [r4, #20]
 8001ece:	eba5 0509 	sub.w	r5, r5, r9
 8001ed2:	60a5      	str	r5, [r4, #8]
 8001ed4:	42be      	cmp	r6, r7
 8001ed6:	d900      	bls.n	8001eda <__ssputs_r+0x86>
 8001ed8:	463e      	mov	r6, r7
 8001eda:	4632      	mov	r2, r6
 8001edc:	4641      	mov	r1, r8
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	f000 fac6 	bl	8002470 <memmove>
 8001ee4:	68a3      	ldr	r3, [r4, #8]
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	1b9b      	subs	r3, r3, r6
 8001eea:	60a3      	str	r3, [r4, #8]
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	4433      	add	r3, r6
 8001ef0:	6023      	str	r3, [r4, #0]
 8001ef2:	e7db      	b.n	8001eac <__ssputs_r+0x58>
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	f000 fbb1 	bl	800265c <_realloc_r>
 8001efa:	4606      	mov	r6, r0
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d1e1      	bne.n	8001ec4 <__ssputs_r+0x70>
 8001f00:	4650      	mov	r0, sl
 8001f02:	6921      	ldr	r1, [r4, #16]
 8001f04:	f000 face 	bl	80024a4 <_free_r>
 8001f08:	e7c7      	b.n	8001e9a <__ssputs_r+0x46>
	...

08001f0c <_svfiprintf_r>:
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	4698      	mov	r8, r3
 8001f12:	898b      	ldrh	r3, [r1, #12]
 8001f14:	4607      	mov	r7, r0
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	460d      	mov	r5, r1
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	b09d      	sub	sp, #116	; 0x74
 8001f1e:	d50e      	bpl.n	8001f3e <_svfiprintf_r+0x32>
 8001f20:	690b      	ldr	r3, [r1, #16]
 8001f22:	b963      	cbnz	r3, 8001f3e <_svfiprintf_r+0x32>
 8001f24:	2140      	movs	r1, #64	; 0x40
 8001f26:	f000 fb25 	bl	8002574 <_malloc_r>
 8001f2a:	6028      	str	r0, [r5, #0]
 8001f2c:	6128      	str	r0, [r5, #16]
 8001f2e:	b920      	cbnz	r0, 8001f3a <_svfiprintf_r+0x2e>
 8001f30:	230c      	movs	r3, #12
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	e0d1      	b.n	80020de <_svfiprintf_r+0x1d2>
 8001f3a:	2340      	movs	r3, #64	; 0x40
 8001f3c:	616b      	str	r3, [r5, #20]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	9309      	str	r3, [sp, #36]	; 0x24
 8001f42:	2320      	movs	r3, #32
 8001f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f48:	2330      	movs	r3, #48	; 0x30
 8001f4a:	f04f 0901 	mov.w	r9, #1
 8001f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80020f8 <_svfiprintf_r+0x1ec>
 8001f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	469a      	mov	sl, r3
 8001f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f62:	b10a      	cbz	r2, 8001f68 <_svfiprintf_r+0x5c>
 8001f64:	2a25      	cmp	r2, #37	; 0x25
 8001f66:	d1f9      	bne.n	8001f5c <_svfiprintf_r+0x50>
 8001f68:	ebba 0b04 	subs.w	fp, sl, r4
 8001f6c:	d00b      	beq.n	8001f86 <_svfiprintf_r+0x7a>
 8001f6e:	465b      	mov	r3, fp
 8001f70:	4622      	mov	r2, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	4638      	mov	r0, r7
 8001f76:	f7ff ff6d 	bl	8001e54 <__ssputs_r>
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	f000 80aa 	beq.w	80020d4 <_svfiprintf_r+0x1c8>
 8001f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f82:	445a      	add	r2, fp
 8001f84:	9209      	str	r2, [sp, #36]	; 0x24
 8001f86:	f89a 3000 	ldrb.w	r3, [sl]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80a2 	beq.w	80020d4 <_svfiprintf_r+0x1c8>
 8001f90:	2300      	movs	r3, #0
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295
 8001f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f9a:	f10a 0a01 	add.w	sl, sl, #1
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	9307      	str	r3, [sp, #28]
 8001fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa8:	4654      	mov	r4, sl
 8001faa:	2205      	movs	r2, #5
 8001fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb0:	4851      	ldr	r0, [pc, #324]	; (80020f8 <_svfiprintf_r+0x1ec>)
 8001fb2:	f000 fa41 	bl	8002438 <memchr>
 8001fb6:	9a04      	ldr	r2, [sp, #16]
 8001fb8:	b9d8      	cbnz	r0, 8001ff2 <_svfiprintf_r+0xe6>
 8001fba:	06d0      	lsls	r0, r2, #27
 8001fbc:	bf44      	itt	mi
 8001fbe:	2320      	movmi	r3, #32
 8001fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fc4:	0711      	lsls	r1, r2, #28
 8001fc6:	bf44      	itt	mi
 8001fc8:	232b      	movmi	r3, #43	; 0x2b
 8001fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fce:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8001fd4:	d015      	beq.n	8002002 <_svfiprintf_r+0xf6>
 8001fd6:	4654      	mov	r4, sl
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f04f 0c0a 	mov.w	ip, #10
 8001fde:	9a07      	ldr	r2, [sp, #28]
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe6:	3b30      	subs	r3, #48	; 0x30
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d94e      	bls.n	800208a <_svfiprintf_r+0x17e>
 8001fec:	b1b0      	cbz	r0, 800201c <_svfiprintf_r+0x110>
 8001fee:	9207      	str	r2, [sp, #28]
 8001ff0:	e014      	b.n	800201c <_svfiprintf_r+0x110>
 8001ff2:	eba0 0308 	sub.w	r3, r0, r8
 8001ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	46a2      	mov	sl, r4
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	e7d2      	b.n	8001fa8 <_svfiprintf_r+0x9c>
 8002002:	9b03      	ldr	r3, [sp, #12]
 8002004:	1d19      	adds	r1, r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9103      	str	r1, [sp, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	bfbb      	ittet	lt
 800200e:	425b      	neglt	r3, r3
 8002010:	f042 0202 	orrlt.w	r2, r2, #2
 8002014:	9307      	strge	r3, [sp, #28]
 8002016:	9307      	strlt	r3, [sp, #28]
 8002018:	bfb8      	it	lt
 800201a:	9204      	strlt	r2, [sp, #16]
 800201c:	7823      	ldrb	r3, [r4, #0]
 800201e:	2b2e      	cmp	r3, #46	; 0x2e
 8002020:	d10c      	bne.n	800203c <_svfiprintf_r+0x130>
 8002022:	7863      	ldrb	r3, [r4, #1]
 8002024:	2b2a      	cmp	r3, #42	; 0x2a
 8002026:	d135      	bne.n	8002094 <_svfiprintf_r+0x188>
 8002028:	9b03      	ldr	r3, [sp, #12]
 800202a:	3402      	adds	r4, #2
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	9203      	str	r2, [sp, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	bfb8      	it	lt
 8002036:	f04f 33ff 	movlt.w	r3, #4294967295
 800203a:	9305      	str	r3, [sp, #20]
 800203c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80020fc <_svfiprintf_r+0x1f0>
 8002040:	2203      	movs	r2, #3
 8002042:	4650      	mov	r0, sl
 8002044:	7821      	ldrb	r1, [r4, #0]
 8002046:	f000 f9f7 	bl	8002438 <memchr>
 800204a:	b140      	cbz	r0, 800205e <_svfiprintf_r+0x152>
 800204c:	2340      	movs	r3, #64	; 0x40
 800204e:	eba0 000a 	sub.w	r0, r0, sl
 8002052:	fa03 f000 	lsl.w	r0, r3, r0
 8002056:	9b04      	ldr	r3, [sp, #16]
 8002058:	3401      	adds	r4, #1
 800205a:	4303      	orrs	r3, r0
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002062:	2206      	movs	r2, #6
 8002064:	4826      	ldr	r0, [pc, #152]	; (8002100 <_svfiprintf_r+0x1f4>)
 8002066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800206a:	f000 f9e5 	bl	8002438 <memchr>
 800206e:	2800      	cmp	r0, #0
 8002070:	d038      	beq.n	80020e4 <_svfiprintf_r+0x1d8>
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <_svfiprintf_r+0x1f8>)
 8002074:	bb1b      	cbnz	r3, 80020be <_svfiprintf_r+0x1b2>
 8002076:	9b03      	ldr	r3, [sp, #12]
 8002078:	3307      	adds	r3, #7
 800207a:	f023 0307 	bic.w	r3, r3, #7
 800207e:	3308      	adds	r3, #8
 8002080:	9303      	str	r3, [sp, #12]
 8002082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002084:	4433      	add	r3, r6
 8002086:	9309      	str	r3, [sp, #36]	; 0x24
 8002088:	e767      	b.n	8001f5a <_svfiprintf_r+0x4e>
 800208a:	460c      	mov	r4, r1
 800208c:	2001      	movs	r0, #1
 800208e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002092:	e7a5      	b.n	8001fe0 <_svfiprintf_r+0xd4>
 8002094:	2300      	movs	r3, #0
 8002096:	f04f 0c0a 	mov.w	ip, #10
 800209a:	4619      	mov	r1, r3
 800209c:	3401      	adds	r4, #1
 800209e:	9305      	str	r3, [sp, #20]
 80020a0:	4620      	mov	r0, r4
 80020a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020a6:	3a30      	subs	r2, #48	; 0x30
 80020a8:	2a09      	cmp	r2, #9
 80020aa:	d903      	bls.n	80020b4 <_svfiprintf_r+0x1a8>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0c5      	beq.n	800203c <_svfiprintf_r+0x130>
 80020b0:	9105      	str	r1, [sp, #20]
 80020b2:	e7c3      	b.n	800203c <_svfiprintf_r+0x130>
 80020b4:	4604      	mov	r4, r0
 80020b6:	2301      	movs	r3, #1
 80020b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80020bc:	e7f0      	b.n	80020a0 <_svfiprintf_r+0x194>
 80020be:	ab03      	add	r3, sp, #12
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	462a      	mov	r2, r5
 80020c4:	4638      	mov	r0, r7
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_svfiprintf_r+0x1fc>)
 80020c8:	a904      	add	r1, sp, #16
 80020ca:	f3af 8000 	nop.w
 80020ce:	1c42      	adds	r2, r0, #1
 80020d0:	4606      	mov	r6, r0
 80020d2:	d1d6      	bne.n	8002082 <_svfiprintf_r+0x176>
 80020d4:	89ab      	ldrh	r3, [r5, #12]
 80020d6:	065b      	lsls	r3, r3, #25
 80020d8:	f53f af2c 	bmi.w	8001f34 <_svfiprintf_r+0x28>
 80020dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020de:	b01d      	add	sp, #116	; 0x74
 80020e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e4:	ab03      	add	r3, sp, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	462a      	mov	r2, r5
 80020ea:	4638      	mov	r0, r7
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <_svfiprintf_r+0x1fc>)
 80020ee:	a904      	add	r1, sp, #16
 80020f0:	f000 f87c 	bl	80021ec <_printf_i>
 80020f4:	e7eb      	b.n	80020ce <_svfiprintf_r+0x1c2>
 80020f6:	bf00      	nop
 80020f8:	08002750 	.word	0x08002750
 80020fc:	08002756 	.word	0x08002756
 8002100:	0800275a 	.word	0x0800275a
 8002104:	00000000 	.word	0x00000000
 8002108:	08001e55 	.word	0x08001e55

0800210c <_printf_common>:
 800210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002110:	4616      	mov	r6, r2
 8002112:	4699      	mov	r9, r3
 8002114:	688a      	ldr	r2, [r1, #8]
 8002116:	690b      	ldr	r3, [r1, #16]
 8002118:	4607      	mov	r7, r0
 800211a:	4293      	cmp	r3, r2
 800211c:	bfb8      	it	lt
 800211e:	4613      	movlt	r3, r2
 8002120:	6033      	str	r3, [r6, #0]
 8002122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002126:	460c      	mov	r4, r1
 8002128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800212c:	b10a      	cbz	r2, 8002132 <_printf_common+0x26>
 800212e:	3301      	adds	r3, #1
 8002130:	6033      	str	r3, [r6, #0]
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	0699      	lsls	r1, r3, #26
 8002136:	bf42      	ittt	mi
 8002138:	6833      	ldrmi	r3, [r6, #0]
 800213a:	3302      	addmi	r3, #2
 800213c:	6033      	strmi	r3, [r6, #0]
 800213e:	6825      	ldr	r5, [r4, #0]
 8002140:	f015 0506 	ands.w	r5, r5, #6
 8002144:	d106      	bne.n	8002154 <_printf_common+0x48>
 8002146:	f104 0a19 	add.w	sl, r4, #25
 800214a:	68e3      	ldr	r3, [r4, #12]
 800214c:	6832      	ldr	r2, [r6, #0]
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	42ab      	cmp	r3, r5
 8002152:	dc28      	bgt.n	80021a6 <_printf_common+0x9a>
 8002154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002158:	1e13      	subs	r3, r2, #0
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	bf18      	it	ne
 800215e:	2301      	movne	r3, #1
 8002160:	0692      	lsls	r2, r2, #26
 8002162:	d42d      	bmi.n	80021c0 <_printf_common+0xb4>
 8002164:	4649      	mov	r1, r9
 8002166:	4638      	mov	r0, r7
 8002168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800216c:	47c0      	blx	r8
 800216e:	3001      	adds	r0, #1
 8002170:	d020      	beq.n	80021b4 <_printf_common+0xa8>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	68e5      	ldr	r5, [r4, #12]
 8002176:	f003 0306 	and.w	r3, r3, #6
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf18      	it	ne
 800217e:	2500      	movne	r5, #0
 8002180:	6832      	ldr	r2, [r6, #0]
 8002182:	f04f 0600 	mov.w	r6, #0
 8002186:	68a3      	ldr	r3, [r4, #8]
 8002188:	bf08      	it	eq
 800218a:	1aad      	subeq	r5, r5, r2
 800218c:	6922      	ldr	r2, [r4, #16]
 800218e:	bf08      	it	eq
 8002190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002194:	4293      	cmp	r3, r2
 8002196:	bfc4      	itt	gt
 8002198:	1a9b      	subgt	r3, r3, r2
 800219a:	18ed      	addgt	r5, r5, r3
 800219c:	341a      	adds	r4, #26
 800219e:	42b5      	cmp	r5, r6
 80021a0:	d11a      	bne.n	80021d8 <_printf_common+0xcc>
 80021a2:	2000      	movs	r0, #0
 80021a4:	e008      	b.n	80021b8 <_printf_common+0xac>
 80021a6:	2301      	movs	r3, #1
 80021a8:	4652      	mov	r2, sl
 80021aa:	4649      	mov	r1, r9
 80021ac:	4638      	mov	r0, r7
 80021ae:	47c0      	blx	r8
 80021b0:	3001      	adds	r0, #1
 80021b2:	d103      	bne.n	80021bc <_printf_common+0xb0>
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021bc:	3501      	adds	r5, #1
 80021be:	e7c4      	b.n	800214a <_printf_common+0x3e>
 80021c0:	2030      	movs	r0, #48	; 0x30
 80021c2:	18e1      	adds	r1, r4, r3
 80021c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021ce:	4422      	add	r2, r4
 80021d0:	3302      	adds	r3, #2
 80021d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021d6:	e7c5      	b.n	8002164 <_printf_common+0x58>
 80021d8:	2301      	movs	r3, #1
 80021da:	4622      	mov	r2, r4
 80021dc:	4649      	mov	r1, r9
 80021de:	4638      	mov	r0, r7
 80021e0:	47c0      	blx	r8
 80021e2:	3001      	adds	r0, #1
 80021e4:	d0e6      	beq.n	80021b4 <_printf_common+0xa8>
 80021e6:	3601      	adds	r6, #1
 80021e8:	e7d9      	b.n	800219e <_printf_common+0x92>
	...

080021ec <_printf_i>:
 80021ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021f0:	7e0f      	ldrb	r7, [r1, #24]
 80021f2:	4691      	mov	r9, r2
 80021f4:	2f78      	cmp	r7, #120	; 0x78
 80021f6:	4680      	mov	r8, r0
 80021f8:	460c      	mov	r4, r1
 80021fa:	469a      	mov	sl, r3
 80021fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002202:	d807      	bhi.n	8002214 <_printf_i+0x28>
 8002204:	2f62      	cmp	r7, #98	; 0x62
 8002206:	d80a      	bhi.n	800221e <_printf_i+0x32>
 8002208:	2f00      	cmp	r7, #0
 800220a:	f000 80d9 	beq.w	80023c0 <_printf_i+0x1d4>
 800220e:	2f58      	cmp	r7, #88	; 0x58
 8002210:	f000 80a4 	beq.w	800235c <_printf_i+0x170>
 8002214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800221c:	e03a      	b.n	8002294 <_printf_i+0xa8>
 800221e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002222:	2b15      	cmp	r3, #21
 8002224:	d8f6      	bhi.n	8002214 <_printf_i+0x28>
 8002226:	a101      	add	r1, pc, #4	; (adr r1, 800222c <_printf_i+0x40>)
 8002228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800222c:	08002285 	.word	0x08002285
 8002230:	08002299 	.word	0x08002299
 8002234:	08002215 	.word	0x08002215
 8002238:	08002215 	.word	0x08002215
 800223c:	08002215 	.word	0x08002215
 8002240:	08002215 	.word	0x08002215
 8002244:	08002299 	.word	0x08002299
 8002248:	08002215 	.word	0x08002215
 800224c:	08002215 	.word	0x08002215
 8002250:	08002215 	.word	0x08002215
 8002254:	08002215 	.word	0x08002215
 8002258:	080023a7 	.word	0x080023a7
 800225c:	080022c9 	.word	0x080022c9
 8002260:	08002389 	.word	0x08002389
 8002264:	08002215 	.word	0x08002215
 8002268:	08002215 	.word	0x08002215
 800226c:	080023c9 	.word	0x080023c9
 8002270:	08002215 	.word	0x08002215
 8002274:	080022c9 	.word	0x080022c9
 8002278:	08002215 	.word	0x08002215
 800227c:	08002215 	.word	0x08002215
 8002280:	08002391 	.word	0x08002391
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	1d1a      	adds	r2, r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	602a      	str	r2, [r5, #0]
 800228c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002294:	2301      	movs	r3, #1
 8002296:	e0a4      	b.n	80023e2 <_printf_i+0x1f6>
 8002298:	6820      	ldr	r0, [r4, #0]
 800229a:	6829      	ldr	r1, [r5, #0]
 800229c:	0606      	lsls	r6, r0, #24
 800229e:	f101 0304 	add.w	r3, r1, #4
 80022a2:	d50a      	bpl.n	80022ba <_printf_i+0xce>
 80022a4:	680e      	ldr	r6, [r1, #0]
 80022a6:	602b      	str	r3, [r5, #0]
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	da03      	bge.n	80022b4 <_printf_i+0xc8>
 80022ac:	232d      	movs	r3, #45	; 0x2d
 80022ae:	4276      	negs	r6, r6
 80022b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022b4:	230a      	movs	r3, #10
 80022b6:	485e      	ldr	r0, [pc, #376]	; (8002430 <_printf_i+0x244>)
 80022b8:	e019      	b.n	80022ee <_printf_i+0x102>
 80022ba:	680e      	ldr	r6, [r1, #0]
 80022bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022c0:	602b      	str	r3, [r5, #0]
 80022c2:	bf18      	it	ne
 80022c4:	b236      	sxthne	r6, r6
 80022c6:	e7ef      	b.n	80022a8 <_printf_i+0xbc>
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	1d19      	adds	r1, r3, #4
 80022ce:	6029      	str	r1, [r5, #0]
 80022d0:	0601      	lsls	r1, r0, #24
 80022d2:	d501      	bpl.n	80022d8 <_printf_i+0xec>
 80022d4:	681e      	ldr	r6, [r3, #0]
 80022d6:	e002      	b.n	80022de <_printf_i+0xf2>
 80022d8:	0646      	lsls	r6, r0, #25
 80022da:	d5fb      	bpl.n	80022d4 <_printf_i+0xe8>
 80022dc:	881e      	ldrh	r6, [r3, #0]
 80022de:	2f6f      	cmp	r7, #111	; 0x6f
 80022e0:	bf0c      	ite	eq
 80022e2:	2308      	moveq	r3, #8
 80022e4:	230a      	movne	r3, #10
 80022e6:	4852      	ldr	r0, [pc, #328]	; (8002430 <_printf_i+0x244>)
 80022e8:	2100      	movs	r1, #0
 80022ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022ee:	6865      	ldr	r5, [r4, #4]
 80022f0:	2d00      	cmp	r5, #0
 80022f2:	bfa8      	it	ge
 80022f4:	6821      	ldrge	r1, [r4, #0]
 80022f6:	60a5      	str	r5, [r4, #8]
 80022f8:	bfa4      	itt	ge
 80022fa:	f021 0104 	bicge.w	r1, r1, #4
 80022fe:	6021      	strge	r1, [r4, #0]
 8002300:	b90e      	cbnz	r6, 8002306 <_printf_i+0x11a>
 8002302:	2d00      	cmp	r5, #0
 8002304:	d04d      	beq.n	80023a2 <_printf_i+0x1b6>
 8002306:	4615      	mov	r5, r2
 8002308:	fbb6 f1f3 	udiv	r1, r6, r3
 800230c:	fb03 6711 	mls	r7, r3, r1, r6
 8002310:	5dc7      	ldrb	r7, [r0, r7]
 8002312:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002316:	4637      	mov	r7, r6
 8002318:	42bb      	cmp	r3, r7
 800231a:	460e      	mov	r6, r1
 800231c:	d9f4      	bls.n	8002308 <_printf_i+0x11c>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d10b      	bne.n	800233a <_printf_i+0x14e>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	07de      	lsls	r6, r3, #31
 8002326:	d508      	bpl.n	800233a <_printf_i+0x14e>
 8002328:	6923      	ldr	r3, [r4, #16]
 800232a:	6861      	ldr	r1, [r4, #4]
 800232c:	4299      	cmp	r1, r3
 800232e:	bfde      	ittt	le
 8002330:	2330      	movle	r3, #48	; 0x30
 8002332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800233a:	1b52      	subs	r2, r2, r5
 800233c:	6122      	str	r2, [r4, #16]
 800233e:	464b      	mov	r3, r9
 8002340:	4621      	mov	r1, r4
 8002342:	4640      	mov	r0, r8
 8002344:	f8cd a000 	str.w	sl, [sp]
 8002348:	aa03      	add	r2, sp, #12
 800234a:	f7ff fedf 	bl	800210c <_printf_common>
 800234e:	3001      	adds	r0, #1
 8002350:	d14c      	bne.n	80023ec <_printf_i+0x200>
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	b004      	add	sp, #16
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	4834      	ldr	r0, [pc, #208]	; (8002430 <_printf_i+0x244>)
 800235e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002362:	6829      	ldr	r1, [r5, #0]
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	f851 6b04 	ldr.w	r6, [r1], #4
 800236a:	6029      	str	r1, [r5, #0]
 800236c:	061d      	lsls	r5, r3, #24
 800236e:	d514      	bpl.n	800239a <_printf_i+0x1ae>
 8002370:	07df      	lsls	r7, r3, #31
 8002372:	bf44      	itt	mi
 8002374:	f043 0320 	orrmi.w	r3, r3, #32
 8002378:	6023      	strmi	r3, [r4, #0]
 800237a:	b91e      	cbnz	r6, 8002384 <_printf_i+0x198>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	2310      	movs	r3, #16
 8002386:	e7af      	b.n	80022e8 <_printf_i+0xfc>
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f043 0320 	orr.w	r3, r3, #32
 800238e:	6023      	str	r3, [r4, #0]
 8002390:	2378      	movs	r3, #120	; 0x78
 8002392:	4828      	ldr	r0, [pc, #160]	; (8002434 <_printf_i+0x248>)
 8002394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002398:	e7e3      	b.n	8002362 <_printf_i+0x176>
 800239a:	0659      	lsls	r1, r3, #25
 800239c:	bf48      	it	mi
 800239e:	b2b6      	uxthmi	r6, r6
 80023a0:	e7e6      	b.n	8002370 <_printf_i+0x184>
 80023a2:	4615      	mov	r5, r2
 80023a4:	e7bb      	b.n	800231e <_printf_i+0x132>
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	6826      	ldr	r6, [r4, #0]
 80023aa:	1d18      	adds	r0, r3, #4
 80023ac:	6961      	ldr	r1, [r4, #20]
 80023ae:	6028      	str	r0, [r5, #0]
 80023b0:	0635      	lsls	r5, r6, #24
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	d501      	bpl.n	80023ba <_printf_i+0x1ce>
 80023b6:	6019      	str	r1, [r3, #0]
 80023b8:	e002      	b.n	80023c0 <_printf_i+0x1d4>
 80023ba:	0670      	lsls	r0, r6, #25
 80023bc:	d5fb      	bpl.n	80023b6 <_printf_i+0x1ca>
 80023be:	8019      	strh	r1, [r3, #0]
 80023c0:	2300      	movs	r3, #0
 80023c2:	4615      	mov	r5, r2
 80023c4:	6123      	str	r3, [r4, #16]
 80023c6:	e7ba      	b.n	800233e <_printf_i+0x152>
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	1d1a      	adds	r2, r3, #4
 80023ce:	602a      	str	r2, [r5, #0]
 80023d0:	681d      	ldr	r5, [r3, #0]
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	4628      	mov	r0, r5
 80023d6:	f000 f82f 	bl	8002438 <memchr>
 80023da:	b108      	cbz	r0, 80023e0 <_printf_i+0x1f4>
 80023dc:	1b40      	subs	r0, r0, r5
 80023de:	6060      	str	r0, [r4, #4]
 80023e0:	6863      	ldr	r3, [r4, #4]
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	2300      	movs	r3, #0
 80023e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ea:	e7a8      	b.n	800233e <_printf_i+0x152>
 80023ec:	462a      	mov	r2, r5
 80023ee:	4649      	mov	r1, r9
 80023f0:	4640      	mov	r0, r8
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	47d0      	blx	sl
 80023f6:	3001      	adds	r0, #1
 80023f8:	d0ab      	beq.n	8002352 <_printf_i+0x166>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	079b      	lsls	r3, r3, #30
 80023fe:	d413      	bmi.n	8002428 <_printf_i+0x23c>
 8002400:	68e0      	ldr	r0, [r4, #12]
 8002402:	9b03      	ldr	r3, [sp, #12]
 8002404:	4298      	cmp	r0, r3
 8002406:	bfb8      	it	lt
 8002408:	4618      	movlt	r0, r3
 800240a:	e7a4      	b.n	8002356 <_printf_i+0x16a>
 800240c:	2301      	movs	r3, #1
 800240e:	4632      	mov	r2, r6
 8002410:	4649      	mov	r1, r9
 8002412:	4640      	mov	r0, r8
 8002414:	47d0      	blx	sl
 8002416:	3001      	adds	r0, #1
 8002418:	d09b      	beq.n	8002352 <_printf_i+0x166>
 800241a:	3501      	adds	r5, #1
 800241c:	68e3      	ldr	r3, [r4, #12]
 800241e:	9903      	ldr	r1, [sp, #12]
 8002420:	1a5b      	subs	r3, r3, r1
 8002422:	42ab      	cmp	r3, r5
 8002424:	dcf2      	bgt.n	800240c <_printf_i+0x220>
 8002426:	e7eb      	b.n	8002400 <_printf_i+0x214>
 8002428:	2500      	movs	r5, #0
 800242a:	f104 0619 	add.w	r6, r4, #25
 800242e:	e7f5      	b.n	800241c <_printf_i+0x230>
 8002430:	08002761 	.word	0x08002761
 8002434:	08002772 	.word	0x08002772

08002438 <memchr>:
 8002438:	4603      	mov	r3, r0
 800243a:	b510      	push	{r4, lr}
 800243c:	b2c9      	uxtb	r1, r1
 800243e:	4402      	add	r2, r0
 8002440:	4293      	cmp	r3, r2
 8002442:	4618      	mov	r0, r3
 8002444:	d101      	bne.n	800244a <memchr+0x12>
 8002446:	2000      	movs	r0, #0
 8002448:	e003      	b.n	8002452 <memchr+0x1a>
 800244a:	7804      	ldrb	r4, [r0, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	428c      	cmp	r4, r1
 8002450:	d1f6      	bne.n	8002440 <memchr+0x8>
 8002452:	bd10      	pop	{r4, pc}

08002454 <memcpy>:
 8002454:	440a      	add	r2, r1
 8002456:	4291      	cmp	r1, r2
 8002458:	f100 33ff 	add.w	r3, r0, #4294967295
 800245c:	d100      	bne.n	8002460 <memcpy+0xc>
 800245e:	4770      	bx	lr
 8002460:	b510      	push	{r4, lr}
 8002462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002466:	4291      	cmp	r1, r2
 8002468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800246c:	d1f9      	bne.n	8002462 <memcpy+0xe>
 800246e:	bd10      	pop	{r4, pc}

08002470 <memmove>:
 8002470:	4288      	cmp	r0, r1
 8002472:	b510      	push	{r4, lr}
 8002474:	eb01 0402 	add.w	r4, r1, r2
 8002478:	d902      	bls.n	8002480 <memmove+0x10>
 800247a:	4284      	cmp	r4, r0
 800247c:	4623      	mov	r3, r4
 800247e:	d807      	bhi.n	8002490 <memmove+0x20>
 8002480:	1e43      	subs	r3, r0, #1
 8002482:	42a1      	cmp	r1, r4
 8002484:	d008      	beq.n	8002498 <memmove+0x28>
 8002486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800248a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800248e:	e7f8      	b.n	8002482 <memmove+0x12>
 8002490:	4601      	mov	r1, r0
 8002492:	4402      	add	r2, r0
 8002494:	428a      	cmp	r2, r1
 8002496:	d100      	bne.n	800249a <memmove+0x2a>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800249e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024a2:	e7f7      	b.n	8002494 <memmove+0x24>

080024a4 <_free_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4605      	mov	r5, r0
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d040      	beq.n	800252e <_free_r+0x8a>
 80024ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b0:	1f0c      	subs	r4, r1, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	18e4      	addlt	r4, r4, r3
 80024b8:	f000 f910 	bl	80026dc <__malloc_lock>
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <_free_r+0x8c>)
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	b933      	cbnz	r3, 80024d0 <_free_r+0x2c>
 80024c2:	6063      	str	r3, [r4, #4]
 80024c4:	6014      	str	r4, [r2, #0]
 80024c6:	4628      	mov	r0, r5
 80024c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024cc:	f000 b90c 	b.w	80026e8 <__malloc_unlock>
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d908      	bls.n	80024e6 <_free_r+0x42>
 80024d4:	6820      	ldr	r0, [r4, #0]
 80024d6:	1821      	adds	r1, r4, r0
 80024d8:	428b      	cmp	r3, r1
 80024da:	bf01      	itttt	eq
 80024dc:	6819      	ldreq	r1, [r3, #0]
 80024de:	685b      	ldreq	r3, [r3, #4]
 80024e0:	1809      	addeq	r1, r1, r0
 80024e2:	6021      	streq	r1, [r4, #0]
 80024e4:	e7ed      	b.n	80024c2 <_free_r+0x1e>
 80024e6:	461a      	mov	r2, r3
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	b10b      	cbz	r3, 80024f0 <_free_r+0x4c>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d9fa      	bls.n	80024e6 <_free_r+0x42>
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	1850      	adds	r0, r2, r1
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d10b      	bne.n	8002510 <_free_r+0x6c>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	4401      	add	r1, r0
 80024fc:	1850      	adds	r0, r2, r1
 80024fe:	4283      	cmp	r3, r0
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	d1e0      	bne.n	80024c6 <_free_r+0x22>
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4401      	add	r1, r0
 800250a:	6011      	str	r1, [r2, #0]
 800250c:	6053      	str	r3, [r2, #4]
 800250e:	e7da      	b.n	80024c6 <_free_r+0x22>
 8002510:	d902      	bls.n	8002518 <_free_r+0x74>
 8002512:	230c      	movs	r3, #12
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	e7d6      	b.n	80024c6 <_free_r+0x22>
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	1821      	adds	r1, r4, r0
 800251c:	428b      	cmp	r3, r1
 800251e:	bf01      	itttt	eq
 8002520:	6819      	ldreq	r1, [r3, #0]
 8002522:	685b      	ldreq	r3, [r3, #4]
 8002524:	1809      	addeq	r1, r1, r0
 8002526:	6021      	streq	r1, [r4, #0]
 8002528:	6063      	str	r3, [r4, #4]
 800252a:	6054      	str	r4, [r2, #4]
 800252c:	e7cb      	b.n	80024c6 <_free_r+0x22>
 800252e:	bd38      	pop	{r3, r4, r5, pc}
 8002530:	20000174 	.word	0x20000174

08002534 <sbrk_aligned>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4e0e      	ldr	r6, [pc, #56]	; (8002570 <sbrk_aligned+0x3c>)
 8002538:	460c      	mov	r4, r1
 800253a:	6831      	ldr	r1, [r6, #0]
 800253c:	4605      	mov	r5, r0
 800253e:	b911      	cbnz	r1, 8002546 <sbrk_aligned+0x12>
 8002540:	f000 f8bc 	bl	80026bc <_sbrk_r>
 8002544:	6030      	str	r0, [r6, #0]
 8002546:	4621      	mov	r1, r4
 8002548:	4628      	mov	r0, r5
 800254a:	f000 f8b7 	bl	80026bc <_sbrk_r>
 800254e:	1c43      	adds	r3, r0, #1
 8002550:	d00a      	beq.n	8002568 <sbrk_aligned+0x34>
 8002552:	1cc4      	adds	r4, r0, #3
 8002554:	f024 0403 	bic.w	r4, r4, #3
 8002558:	42a0      	cmp	r0, r4
 800255a:	d007      	beq.n	800256c <sbrk_aligned+0x38>
 800255c:	1a21      	subs	r1, r4, r0
 800255e:	4628      	mov	r0, r5
 8002560:	f000 f8ac 	bl	80026bc <_sbrk_r>
 8002564:	3001      	adds	r0, #1
 8002566:	d101      	bne.n	800256c <sbrk_aligned+0x38>
 8002568:	f04f 34ff 	mov.w	r4, #4294967295
 800256c:	4620      	mov	r0, r4
 800256e:	bd70      	pop	{r4, r5, r6, pc}
 8002570:	20000178 	.word	0x20000178

08002574 <_malloc_r>:
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002578:	1ccd      	adds	r5, r1, #3
 800257a:	f025 0503 	bic.w	r5, r5, #3
 800257e:	3508      	adds	r5, #8
 8002580:	2d0c      	cmp	r5, #12
 8002582:	bf38      	it	cc
 8002584:	250c      	movcc	r5, #12
 8002586:	2d00      	cmp	r5, #0
 8002588:	4607      	mov	r7, r0
 800258a:	db01      	blt.n	8002590 <_malloc_r+0x1c>
 800258c:	42a9      	cmp	r1, r5
 800258e:	d905      	bls.n	800259c <_malloc_r+0x28>
 8002590:	230c      	movs	r3, #12
 8002592:	2600      	movs	r6, #0
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4630      	mov	r0, r6
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800259c:	4e2e      	ldr	r6, [pc, #184]	; (8002658 <_malloc_r+0xe4>)
 800259e:	f000 f89d 	bl	80026dc <__malloc_lock>
 80025a2:	6833      	ldr	r3, [r6, #0]
 80025a4:	461c      	mov	r4, r3
 80025a6:	bb34      	cbnz	r4, 80025f6 <_malloc_r+0x82>
 80025a8:	4629      	mov	r1, r5
 80025aa:	4638      	mov	r0, r7
 80025ac:	f7ff ffc2 	bl	8002534 <sbrk_aligned>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	4604      	mov	r4, r0
 80025b4:	d14d      	bne.n	8002652 <_malloc_r+0xde>
 80025b6:	6834      	ldr	r4, [r6, #0]
 80025b8:	4626      	mov	r6, r4
 80025ba:	2e00      	cmp	r6, #0
 80025bc:	d140      	bne.n	8002640 <_malloc_r+0xcc>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	4631      	mov	r1, r6
 80025c2:	4638      	mov	r0, r7
 80025c4:	eb04 0803 	add.w	r8, r4, r3
 80025c8:	f000 f878 	bl	80026bc <_sbrk_r>
 80025cc:	4580      	cmp	r8, r0
 80025ce:	d13a      	bne.n	8002646 <_malloc_r+0xd2>
 80025d0:	6821      	ldr	r1, [r4, #0]
 80025d2:	3503      	adds	r5, #3
 80025d4:	1a6d      	subs	r5, r5, r1
 80025d6:	f025 0503 	bic.w	r5, r5, #3
 80025da:	3508      	adds	r5, #8
 80025dc:	2d0c      	cmp	r5, #12
 80025de:	bf38      	it	cc
 80025e0:	250c      	movcc	r5, #12
 80025e2:	4638      	mov	r0, r7
 80025e4:	4629      	mov	r1, r5
 80025e6:	f7ff ffa5 	bl	8002534 <sbrk_aligned>
 80025ea:	3001      	adds	r0, #1
 80025ec:	d02b      	beq.n	8002646 <_malloc_r+0xd2>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	442b      	add	r3, r5
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	e00e      	b.n	8002614 <_malloc_r+0xa0>
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	1b52      	subs	r2, r2, r5
 80025fa:	d41e      	bmi.n	800263a <_malloc_r+0xc6>
 80025fc:	2a0b      	cmp	r2, #11
 80025fe:	d916      	bls.n	800262e <_malloc_r+0xba>
 8002600:	1961      	adds	r1, r4, r5
 8002602:	42a3      	cmp	r3, r4
 8002604:	6025      	str	r5, [r4, #0]
 8002606:	bf18      	it	ne
 8002608:	6059      	strne	r1, [r3, #4]
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	bf08      	it	eq
 800260e:	6031      	streq	r1, [r6, #0]
 8002610:	5162      	str	r2, [r4, r5]
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	4638      	mov	r0, r7
 8002616:	f104 060b 	add.w	r6, r4, #11
 800261a:	f000 f865 	bl	80026e8 <__malloc_unlock>
 800261e:	f026 0607 	bic.w	r6, r6, #7
 8002622:	1d23      	adds	r3, r4, #4
 8002624:	1af2      	subs	r2, r6, r3
 8002626:	d0b6      	beq.n	8002596 <_malloc_r+0x22>
 8002628:	1b9b      	subs	r3, r3, r6
 800262a:	50a3      	str	r3, [r4, r2]
 800262c:	e7b3      	b.n	8002596 <_malloc_r+0x22>
 800262e:	6862      	ldr	r2, [r4, #4]
 8002630:	42a3      	cmp	r3, r4
 8002632:	bf0c      	ite	eq
 8002634:	6032      	streq	r2, [r6, #0]
 8002636:	605a      	strne	r2, [r3, #4]
 8002638:	e7ec      	b.n	8002614 <_malloc_r+0xa0>
 800263a:	4623      	mov	r3, r4
 800263c:	6864      	ldr	r4, [r4, #4]
 800263e:	e7b2      	b.n	80025a6 <_malloc_r+0x32>
 8002640:	4634      	mov	r4, r6
 8002642:	6876      	ldr	r6, [r6, #4]
 8002644:	e7b9      	b.n	80025ba <_malloc_r+0x46>
 8002646:	230c      	movs	r3, #12
 8002648:	4638      	mov	r0, r7
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	f000 f84c 	bl	80026e8 <__malloc_unlock>
 8002650:	e7a1      	b.n	8002596 <_malloc_r+0x22>
 8002652:	6025      	str	r5, [r4, #0]
 8002654:	e7de      	b.n	8002614 <_malloc_r+0xa0>
 8002656:	bf00      	nop
 8002658:	20000174 	.word	0x20000174

0800265c <_realloc_r>:
 800265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002660:	4680      	mov	r8, r0
 8002662:	4614      	mov	r4, r2
 8002664:	460e      	mov	r6, r1
 8002666:	b921      	cbnz	r1, 8002672 <_realloc_r+0x16>
 8002668:	4611      	mov	r1, r2
 800266a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800266e:	f7ff bf81 	b.w	8002574 <_malloc_r>
 8002672:	b92a      	cbnz	r2, 8002680 <_realloc_r+0x24>
 8002674:	f7ff ff16 	bl	80024a4 <_free_r>
 8002678:	4625      	mov	r5, r4
 800267a:	4628      	mov	r0, r5
 800267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002680:	f000 f838 	bl	80026f4 <_malloc_usable_size_r>
 8002684:	4284      	cmp	r4, r0
 8002686:	4607      	mov	r7, r0
 8002688:	d802      	bhi.n	8002690 <_realloc_r+0x34>
 800268a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800268e:	d812      	bhi.n	80026b6 <_realloc_r+0x5a>
 8002690:	4621      	mov	r1, r4
 8002692:	4640      	mov	r0, r8
 8002694:	f7ff ff6e 	bl	8002574 <_malloc_r>
 8002698:	4605      	mov	r5, r0
 800269a:	2800      	cmp	r0, #0
 800269c:	d0ed      	beq.n	800267a <_realloc_r+0x1e>
 800269e:	42bc      	cmp	r4, r7
 80026a0:	4622      	mov	r2, r4
 80026a2:	4631      	mov	r1, r6
 80026a4:	bf28      	it	cs
 80026a6:	463a      	movcs	r2, r7
 80026a8:	f7ff fed4 	bl	8002454 <memcpy>
 80026ac:	4631      	mov	r1, r6
 80026ae:	4640      	mov	r0, r8
 80026b0:	f7ff fef8 	bl	80024a4 <_free_r>
 80026b4:	e7e1      	b.n	800267a <_realloc_r+0x1e>
 80026b6:	4635      	mov	r5, r6
 80026b8:	e7df      	b.n	800267a <_realloc_r+0x1e>
	...

080026bc <_sbrk_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	2300      	movs	r3, #0
 80026c0:	4d05      	ldr	r5, [pc, #20]	; (80026d8 <_sbrk_r+0x1c>)
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	602b      	str	r3, [r5, #0]
 80026c8:	f7fd ff76 	bl	80005b8 <_sbrk>
 80026cc:	1c43      	adds	r3, r0, #1
 80026ce:	d102      	bne.n	80026d6 <_sbrk_r+0x1a>
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	b103      	cbz	r3, 80026d6 <_sbrk_r+0x1a>
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	2000017c 	.word	0x2000017c

080026dc <__malloc_lock>:
 80026dc:	4801      	ldr	r0, [pc, #4]	; (80026e4 <__malloc_lock+0x8>)
 80026de:	f000 b811 	b.w	8002704 <__retarget_lock_acquire_recursive>
 80026e2:	bf00      	nop
 80026e4:	20000180 	.word	0x20000180

080026e8 <__malloc_unlock>:
 80026e8:	4801      	ldr	r0, [pc, #4]	; (80026f0 <__malloc_unlock+0x8>)
 80026ea:	f000 b80c 	b.w	8002706 <__retarget_lock_release_recursive>
 80026ee:	bf00      	nop
 80026f0:	20000180 	.word	0x20000180

080026f4 <_malloc_usable_size_r>:
 80026f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f8:	1f18      	subs	r0, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bfbc      	itt	lt
 80026fe:	580b      	ldrlt	r3, [r1, r0]
 8002700:	18c0      	addlt	r0, r0, r3
 8002702:	4770      	bx	lr

08002704 <__retarget_lock_acquire_recursive>:
 8002704:	4770      	bx	lr

08002706 <__retarget_lock_release_recursive>:
 8002706:	4770      	bx	lr

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
