
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004000  08004000  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08004000  08004000  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004000  08004000  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000040  08004048  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004048  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e041  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd0  00000000  00000000  0002e0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00030080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00030f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836f  00000000  00000000  00031cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e996  00000000  00000000  0004a067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d077  00000000  00000000  000589fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5a74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  000e5ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fb0 	.word	0x08003fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08003fb0 	.word	0x08003fb0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <check_out>:
uint8_t DataRx[20];
uint8_t bufferRx[32];
uint8_t indexx;
uint8_t flag_Rx = 0;
uint8_t num = 0, num1 = 0, num2 = 0, num3 = 0, num4 = 0, num5 = 0;
void check_out() {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	if (strcmp((char*) DataRx, "1\r\n") == 0) {
 8000174:	4920      	ldr	r1, [pc, #128]	; (80001f8 <check_out+0x88>)
 8000176:	4821      	ldr	r0, [pc, #132]	; (80001fc <check_out+0x8c>)
 8000178:	f7ff ffe8 	bl	800014c <strcmp>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d103      	bne.n	800018a <check_out+0x1a>
		num1 = 0;
 8000182:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <check_out+0x90>)
 8000184:	2200      	movs	r2, #0
 8000186:	701a      	strb	r2, [r3, #0]
 8000188:	e01f      	b.n	80001ca <check_out+0x5a>
	} else if (strcmp((char*) DataRx, "2\r\n") == 0) {
 800018a:	491e      	ldr	r1, [pc, #120]	; (8000204 <check_out+0x94>)
 800018c:	481b      	ldr	r0, [pc, #108]	; (80001fc <check_out+0x8c>)
 800018e:	f7ff ffdd 	bl	800014c <strcmp>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d103      	bne.n	80001a0 <check_out+0x30>
		num2 = 0;
 8000198:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <check_out+0x98>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
 800019e:	e014      	b.n	80001ca <check_out+0x5a>
	} else if (strcmp((char*) DataRx, "3\r\n") == 0) {
 80001a0:	491a      	ldr	r1, [pc, #104]	; (800020c <check_out+0x9c>)
 80001a2:	4816      	ldr	r0, [pc, #88]	; (80001fc <check_out+0x8c>)
 80001a4:	f7ff ffd2 	bl	800014c <strcmp>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d103      	bne.n	80001b6 <check_out+0x46>
		num3 = 0;
 80001ae:	4b18      	ldr	r3, [pc, #96]	; (8000210 <check_out+0xa0>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
 80001b4:	e009      	b.n	80001ca <check_out+0x5a>
	} else if (strcmp((char*) DataRx, "4\r\n") == 0) {
 80001b6:	4917      	ldr	r1, [pc, #92]	; (8000214 <check_out+0xa4>)
 80001b8:	4810      	ldr	r0, [pc, #64]	; (80001fc <check_out+0x8c>)
 80001ba:	f7ff ffc7 	bl	800014c <strcmp>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d102      	bne.n	80001ca <check_out+0x5a>
		num4 = 0;
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <check_out+0xa8>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
	}
	num--;
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <check_out+0xac>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <check_out+0xac>)
 80001d4:	701a      	strb	r2, [r3, #0]
	if (num == 0) {
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <check_out+0xac>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d102      	bne.n	80001e4 <check_out+0x74>
		num = 0;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <check_out+0xac>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
	}
	t_prev3 = HAL_GetTick();
 80001e4:	f001 f8e0 	bl	80013a8 <HAL_GetTick>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <check_out+0xb0>)
 80001ec:	6013      	str	r3, [r2, #0]
	Status2 = 1;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <check_out+0xb4>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	701a      	strb	r2, [r3, #0]
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08003fc8 	.word	0x08003fc8
 80001fc:	200000e8 	.word	0x200000e8
 8000200:	2000006e 	.word	0x2000006e
 8000204:	08003fcc 	.word	0x08003fcc
 8000208:	2000006f 	.word	0x2000006f
 800020c:	08003fd0 	.word	0x08003fd0
 8000210:	20000070 	.word	0x20000070
 8000214:	08003fd4 	.word	0x08003fd4
 8000218:	20000071 	.word	0x20000071
 800021c:	2000006d 	.word	0x2000006d
 8000220:	20000068 	.word	0x20000068
 8000224:	2000005e 	.word	0x2000005e

08000228 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	460b      	mov	r3, r1
 8000232:	807b      	strh	r3, [r7, #2]
	flag_Rx = 1;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_UARTEx_RxEventCallback+0x24>)
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, DataRx, sizeof(DataRx));
 800023a:	2214      	movs	r2, #20
 800023c:	4904      	ldr	r1, [pc, #16]	; (8000250 <HAL_UARTEx_RxEventCallback+0x28>)
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000240:	f003 fa5f 	bl	8003702 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000006c 	.word	0x2000006c
 8000250:	200000e8 	.word	0x200000e8
 8000254:	2000007c 	.word	0x2000007c

08000258 <NumWrite>:
uint8_t segmentNumber[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
		0x80, 0x90 };

void NumWrite(uint8_t number) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, ((number >> 0) & 0x01));
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000270:	4827      	ldr	r0, [pc, #156]	; (8000310 <NumWrite+0xb8>)
 8000272:	f001 fbe5 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, ((number >> 1) & 0x01));
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	085b      	lsrs	r3, r3, #1
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000288:	4821      	ldr	r0, [pc, #132]	; (8000310 <NumWrite+0xb8>)
 800028a:	f001 fbd9 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, ((number >> 2) & 0x01));
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	089b      	lsrs	r3, r3, #2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a0:	481c      	ldr	r0, [pc, #112]	; (8000314 <NumWrite+0xbc>)
 80002a2:	f001 fbcd 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, ((number >> 3) & 0x01));
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4815      	ldr	r0, [pc, #84]	; (8000310 <NumWrite+0xb8>)
 80002ba:	f001 fbc1 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, ((number >> 4) & 0x01));
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	091b      	lsrs	r3, r3, #4
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d0:	480f      	ldr	r0, [pc, #60]	; (8000310 <NumWrite+0xb8>)
 80002d2:	f001 fbb5 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, ((number >> 5) & 0x01));
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	095b      	lsrs	r3, r3, #5
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	461a      	mov	r2, r3
 80002e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <NumWrite+0xc0>)
 80002ea:	f001 fba9 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, ((number >> 6) & 0x01));
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	099b      	lsrs	r3, r3, #6
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000300:	4805      	ldr	r0, [pc, #20]	; (8000318 <NumWrite+0xc0>)
 8000302:	f001 fb9d 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010800 	.word	0x40010800
 8000314:	40011000 	.word	0x40011000
 8000318:	40010c00 	.word	0x40010c00

0800031c <servo_in_ON>:
void servo_in_ON() {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 750);  // duty cycle is 2ms
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <servo_in_ON+0x18>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	20000160 	.word	0x20000160

08000338 <servo_in_OFF>:
void servo_in_OFF() {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);  // duty cycle is 1 ms
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <servo_in_OFF+0x14>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	22fa      	movs	r2, #250	; 0xfa
 8000342:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000160 	.word	0x20000160

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000354:	f000 ffd0 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000358:	f000 fa46 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035c:	f000 fb68 	bl	8000a30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000360:	f000 fa86 	bl	8000870 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000364:	f000 faba 	bl	80008dc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000368:	f000 fb38 	bl	80009dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000372:	489f      	ldr	r0, [pc, #636]	; (80005f0 <main+0x2a0>)
 8000374:	f001 fb64 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037e:	489c      	ldr	r0, [pc, #624]	; (80005f0 <main+0x2a0>)
 8000380:	f001 fb5e 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800038a:	489a      	ldr	r0, [pc, #616]	; (80005f4 <main+0x2a4>)
 800038c:	f001 fb58 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000396:	4896      	ldr	r0, [pc, #600]	; (80005f0 <main+0x2a0>)
 8000398:	f001 fb52 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	4893      	ldr	r0, [pc, #588]	; (80005f0 <main+0x2a0>)
 80003a4:	f001 fb4c 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ae:	4892      	ldr	r0, [pc, #584]	; (80005f8 <main+0x2a8>)
 80003b0:	f001 fb46 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ba:	488f      	ldr	r0, [pc, #572]	; (80005f8 <main+0x2a8>)
 80003bc:	f001 fb40 	bl	8001a40 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, 0);

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, DataRx, sizeof(DataRx));
 80003c0:	2214      	movs	r2, #20
 80003c2:	498e      	ldr	r1, [pc, #568]	; (80005fc <main+0x2ac>)
 80003c4:	488e      	ldr	r0, [pc, #568]	; (8000600 <main+0x2b0>)
 80003c6:	f003 f99c 	bl	8003702 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003ca:	2104      	movs	r1, #4
 80003cc:	488d      	ldr	r0, [pc, #564]	; (8000604 <main+0x2b4>)
 80003ce:	f002 fadd 	bl	800298c <HAL_TIM_PWM_Start>
	TM_MFRC522_Init();
 80003d2:	f000 fbed 	bl	8000bb0 <TM_MFRC522_Init>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 2);
 80003d6:	2202      	movs	r2, #2
 80003d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003dc:	4885      	ldr	r0, [pc, #532]	; (80005f4 <main+0x2a4>)
 80003de:	f001 fb2f 	bl	8001a40 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	4884      	ldr	r0, [pc, #528]	; (80005f8 <main+0x2a8>)
 80003e8:	f001 fb2a 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	4881      	ldr	r0, [pc, #516]	; (80005f8 <main+0x2a8>)
 80003f2:	f001 fb25 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y3_GPIO_Port, Y3_Pin, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2120      	movs	r1, #32
 80003fa:	487f      	ldr	r0, [pc, #508]	; (80005f8 <main+0x2a8>)
 80003fc:	f001 fb20 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y4_GPIO_Port, Y4_Pin, 1);
 8000400:	2201      	movs	r2, #1
 8000402:	2110      	movs	r1, #16
 8000404:	487c      	ldr	r0, [pc, #496]	; (80005f8 <main+0x2a8>)
 8000406:	f001 fb1b 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y5_GPIO_Port, Y5_Pin, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000410:	4879      	ldr	r0, [pc, #484]	; (80005f8 <main+0x2a8>)
 8000412:	f001 fb15 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y6_GPIO_Port, Y4_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	2110      	movs	r1, #16
 800041a:	4877      	ldr	r0, [pc, #476]	; (80005f8 <main+0x2a8>)
 800041c:	f001 fb10 	bl	8001a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y7_GPIO_Port, Y5_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000426:	4872      	ldr	r0, [pc, #456]	; (80005f0 <main+0x2a0>)
 8000428:	f001 fb0a 	bl	8001a40 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (flag_Rx == 1) {
 800042c:	4b76      	ldr	r3, [pc, #472]	; (8000608 <main+0x2b8>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10d      	bne.n	8000450 <main+0x100>
			check_out();
 8000434:	f7ff fe9c 	bl	8000170 <check_out>
			memset(DataRx, 0, strlen((char*) DataRx));
 8000438:	4870      	ldr	r0, [pc, #448]	; (80005fc <main+0x2ac>)
 800043a:	f7ff fe91 	bl	8000160 <strlen>
 800043e:	4603      	mov	r3, r0
 8000440:	461a      	mov	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	486d      	ldr	r0, [pc, #436]	; (80005fc <main+0x2ac>)
 8000446:	f003 fdab 	bl	8003fa0 <memset>
			flag_Rx = 0;
 800044a:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <main+0x2b8>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - t_prev >= 100) {
 8000450:	f000 ffaa 	bl	80013a8 <HAL_GetTick>
 8000454:	4602      	mov	r2, r0
 8000456:	4b6d      	ldr	r3, [pc, #436]	; (800060c <main+0x2bc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	2b63      	cmp	r3, #99	; 0x63
 800045e:	f240 811a 	bls.w	8000696 <main+0x346>
			num = num1 + num2 + num3 + num4 + num5;
 8000462:	4b6b      	ldr	r3, [pc, #428]	; (8000610 <main+0x2c0>)
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b6b      	ldr	r3, [pc, #428]	; (8000614 <main+0x2c4>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b6a      	ldr	r3, [pc, #424]	; (8000618 <main+0x2c8>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4413      	add	r3, r2
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b69      	ldr	r3, [pc, #420]	; (800061c <main+0x2cc>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4413      	add	r3, r2
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b68      	ldr	r3, [pc, #416]	; (8000620 <main+0x2d0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4413      	add	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b67      	ldr	r3, [pc, #412]	; (8000624 <main+0x2d4>)
 8000488:	701a      	strb	r2, [r3, #0]
			if (!TM_MFRC522_Request(PICC_REQIDL, CardID)) {
 800048a:	4967      	ldr	r1, [pc, #412]	; (8000628 <main+0x2d8>)
 800048c:	2026      	movs	r0, #38	; 0x26
 800048e:	f000 fc76 	bl	8000d7e <TM_MFRC522_Request>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	f040 80f6 	bne.w	8000686 <main+0x336>
				if (!TM_MFRC522_Anticoll(CardID)) {
 800049a:	4863      	ldr	r0, [pc, #396]	; (8000628 <main+0x2d8>)
 800049c:	f000 fd63 	bl	8000f66 <TM_MFRC522_Anticoll>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	f040 80ea 	bne.w	800067c <main+0x32c>
					if (TM_MFRC522_Compare(CardID, MyID1) != MI_OK
 80004a8:	4960      	ldr	r1, [pc, #384]	; (800062c <main+0x2dc>)
 80004aa:	485f      	ldr	r0, [pc, #380]	; (8000628 <main+0x2d8>)
 80004ac:	f000 fba4 	bl	8000bf8 <TM_MFRC522_Compare>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d024      	beq.n	8000500 <main+0x1b0>
							&& TM_MFRC522_Compare(CardID, MyID2) != MI_OK
 80004b6:	495e      	ldr	r1, [pc, #376]	; (8000630 <main+0x2e0>)
 80004b8:	485b      	ldr	r0, [pc, #364]	; (8000628 <main+0x2d8>)
 80004ba:	f000 fb9d 	bl	8000bf8 <TM_MFRC522_Compare>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d01d      	beq.n	8000500 <main+0x1b0>
							&& TM_MFRC522_Compare(CardID, MyID3) != MI_OK
 80004c4:	495b      	ldr	r1, [pc, #364]	; (8000634 <main+0x2e4>)
 80004c6:	4858      	ldr	r0, [pc, #352]	; (8000628 <main+0x2d8>)
 80004c8:	f000 fb96 	bl	8000bf8 <TM_MFRC522_Compare>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d016      	beq.n	8000500 <main+0x1b0>
							&& TM_MFRC522_Compare(CardID, MyID4) != MI_OK
 80004d2:	4959      	ldr	r1, [pc, #356]	; (8000638 <main+0x2e8>)
 80004d4:	4854      	ldr	r0, [pc, #336]	; (8000628 <main+0x2d8>)
 80004d6:	f000 fb8f 	bl	8000bf8 <TM_MFRC522_Compare>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00f      	beq.n	8000500 <main+0x1b0>
							&& TM_MFRC522_Compare(CardID, MyID5) != MI_OK) {
 80004e0:	4956      	ldr	r1, [pc, #344]	; (800063c <main+0x2ec>)
 80004e2:	4851      	ldr	r0, [pc, #324]	; (8000628 <main+0x2d8>)
 80004e4:	f000 fb88 	bl	8000bf8 <TM_MFRC522_Compare>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <main+0x1b0>
						Status = 1;
 80004ee:	4b54      	ldr	r3, [pc, #336]	; (8000640 <main+0x2f0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Y7_GPIO_Port, Y7_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fa:	483d      	ldr	r0, [pc, #244]	; (80005f0 <main+0x2a0>)
 80004fc:	f001 faa0 	bl	8001a40 <HAL_GPIO_WritePin>
					}
					if (num >= 4) {
 8000500:	4b48      	ldr	r3, [pc, #288]	; (8000624 <main+0x2d4>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d909      	bls.n	800051c <main+0x1cc>
						Status1 = 1;
 8000508:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <main+0x2f4>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Y6_GPIO_Port, Y6_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	4838      	ldr	r0, [pc, #224]	; (80005f8 <main+0x2a8>)
 8000516:	f001 fa93 	bl	8001a40 <HAL_GPIO_WritePin>
 800051a:	e0af      	b.n	800067c <main+0x32c>
					} else {
						if (TM_MFRC522_Compare(CardID, MyID1) == MI_OK) {
 800051c:	4943      	ldr	r1, [pc, #268]	; (800062c <main+0x2dc>)
 800051e:	4842      	ldr	r0, [pc, #264]	; (8000628 <main+0x2d8>)
 8000520:	f000 fb6a 	bl	8000bf8 <TM_MFRC522_Compare>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d112      	bne.n	8000550 <main+0x200>
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
 800052e:	4830      	ldr	r0, [pc, #192]	; (80005f0 <main+0x2a0>)
 8000530:	f001 fa86 	bl	8001a40 <HAL_GPIO_WritePin>
							servo_in_ON();
 8000534:	f7ff fef2 	bl	800031c <servo_in_ON>
							num1 = 1;
 8000538:	4b35      	ldr	r3, [pc, #212]	; (8000610 <main+0x2c0>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
							Status1 = 1;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <main+0x2f4>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	482b      	ldr	r0, [pc, #172]	; (80005f8 <main+0x2a8>)
 800054a:	f001 fa79 	bl	8001a40 <HAL_GPIO_WritePin>
 800054e:	e095      	b.n	800067c <main+0x32c>
						} else if (TM_MFRC522_Compare(CardID, MyID2) == MI_OK) {
 8000550:	4937      	ldr	r1, [pc, #220]	; (8000630 <main+0x2e0>)
 8000552:	4835      	ldr	r0, [pc, #212]	; (8000628 <main+0x2d8>)
 8000554:	f000 fb50 	bl	8000bf8 <TM_MFRC522_Compare>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d112      	bne.n	8000584 <main+0x234>
							HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2108      	movs	r1, #8
 8000562:	4823      	ldr	r0, [pc, #140]	; (80005f0 <main+0x2a0>)
 8000564:	f001 fa6c 	bl	8001a40 <HAL_GPIO_WritePin>
							servo_in_ON();
 8000568:	f7ff fed8 	bl	800031c <servo_in_ON>
							num2 = 1;
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <main+0x2c4>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
							Status1 = 1;
 8000572:	4b34      	ldr	r3, [pc, #208]	; (8000644 <main+0x2f4>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2140      	movs	r1, #64	; 0x40
 800057c:	481e      	ldr	r0, [pc, #120]	; (80005f8 <main+0x2a8>)
 800057e:	f001 fa5f 	bl	8001a40 <HAL_GPIO_WritePin>
 8000582:	e07b      	b.n	800067c <main+0x32c>
						} else if (TM_MFRC522_Compare(CardID, MyID3) == MI_OK) {
 8000584:	492b      	ldr	r1, [pc, #172]	; (8000634 <main+0x2e4>)
 8000586:	4828      	ldr	r0, [pc, #160]	; (8000628 <main+0x2d8>)
 8000588:	f000 fb36 	bl	8000bf8 <TM_MFRC522_Compare>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d113      	bne.n	80005ba <main+0x26a>
							HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4817      	ldr	r0, [pc, #92]	; (80005f8 <main+0x2a8>)
 800059a:	f001 fa51 	bl	8001a40 <HAL_GPIO_WritePin>
							servo_in_ON();
 800059e:	f7ff febd 	bl	800031c <servo_in_ON>
							num3 = 1;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <main+0x2c8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
							Status1 = 1;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <main+0x2f4>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Y3_GPIO_Port, Y3_Pin, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2120      	movs	r1, #32
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <main+0x2a8>)
 80005b4:	f001 fa44 	bl	8001a40 <HAL_GPIO_WritePin>
 80005b8:	e060      	b.n	800067c <main+0x32c>
						} else if (TM_MFRC522_Compare(CardID, MyID4) == MI_OK) {
 80005ba:	491f      	ldr	r1, [pc, #124]	; (8000638 <main+0x2e8>)
 80005bc:	481a      	ldr	r0, [pc, #104]	; (8000628 <main+0x2d8>)
 80005be:	f000 fb1b 	bl	8000bf8 <TM_MFRC522_Compare>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d13f      	bne.n	8000648 <main+0x2f8>
							HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x2a0>)
 80005d0:	f001 fa36 	bl	8001a40 <HAL_GPIO_WritePin>
							servo_in_ON();
 80005d4:	f7ff fea2 	bl	800031c <servo_in_ON>
							num4 = 1;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <main+0x2cc>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
							Status1 = 1;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0x2f4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Y4_GPIO_Port, Y4_Pin, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <main+0x2a8>)
 80005ea:	f001 fa29 	bl	8001a40 <HAL_GPIO_WritePin>
 80005ee:	e045      	b.n	800067c <main+0x32c>
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40011000 	.word	0x40011000
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	200000e8 	.word	0x200000e8
 8000600:	2000007c 	.word	0x2000007c
 8000604:	20000160 	.word	0x20000160
 8000608:	2000006c 	.word	0x2000006c
 800060c:	20000060 	.word	0x20000060
 8000610:	2000006e 	.word	0x2000006e
 8000614:	2000006f 	.word	0x2000006f
 8000618:	20000070 	.word	0x20000070
 800061c:	20000071 	.word	0x20000071
 8000620:	20000072 	.word	0x20000072
 8000624:	2000006d 	.word	0x2000006d
 8000628:	200001a8 	.word	0x200001a8
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000010 	.word	0x20000010
 8000638:	20000018 	.word	0x20000018
 800063c:	20000020 	.word	0x20000020
 8000640:	2000005c 	.word	0x2000005c
 8000644:	2000005d 	.word	0x2000005d
						} else if (TM_MFRC522_Compare(CardID, MyID5) == MI_OK) {
 8000648:	495a      	ldr	r1, [pc, #360]	; (80007b4 <main+0x464>)
 800064a:	485b      	ldr	r0, [pc, #364]	; (80007b8 <main+0x468>)
 800064c:	f000 fad4 	bl	8000bf8 <TM_MFRC522_Compare>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d112      	bne.n	800067c <main+0x32c>
							HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065c:	4857      	ldr	r0, [pc, #348]	; (80007bc <main+0x46c>)
 800065e:	f001 f9ef 	bl	8001a40 <HAL_GPIO_WritePin>
							servo_in_ON();
 8000662:	f7ff fe5b 	bl	800031c <servo_in_ON>
							num5 = 1;
 8000666:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <main+0x470>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
							Status1 = 1;
 800066c:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <main+0x474>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Y4_GPIO_Port, Y4_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	4854      	ldr	r0, [pc, #336]	; (80007c8 <main+0x478>)
 8000678:	f001 f9e2 	bl	8001a40 <HAL_GPIO_WritePin>
						}
					}

				}
				t_prev2 = HAL_GetTick();
 800067c:	f000 fe94 	bl	80013a8 <HAL_GetTick>
 8000680:	4603      	mov	r3, r0
 8000682:	4a52      	ldr	r2, [pc, #328]	; (80007cc <main+0x47c>)
 8000684:	6013      	str	r3, [r2, #0]
			}
			Status1 = 1;
 8000686:	4b4f      	ldr	r3, [pc, #316]	; (80007c4 <main+0x474>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
			t_prev = HAL_GetTick();
 800068c:	f000 fe8c 	bl	80013a8 <HAL_GetTick>
 8000690:	4603      	mov	r3, r0
 8000692:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <main+0x480>)
 8000694:	6013      	str	r3, [r2, #0]
		}
		NumWrite(segmentNumber[num]);
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <main+0x484>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <main+0x488>)
 800069e:	5c9b      	ldrb	r3, [r3, r2]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fdd9 	bl	8000258 <NumWrite>
		if (Status2 == 1) {
 80006a6:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <main+0x48c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d11b      	bne.n	80006e6 <main+0x396>
			HAL_GPIO_WritePin(Y5_GPIO_Port, Y5_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	4844      	ldr	r0, [pc, #272]	; (80007c8 <main+0x478>)
 80006b6:	f001 f9c3 	bl	8001a40 <HAL_GPIO_WritePin>
			if (HAL_GetTick() - t_prev3 >= 100) {
 80006ba:	f000 fe75 	bl	80013a8 <HAL_GetTick>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b47      	ldr	r3, [pc, #284]	; (80007e0 <main+0x490>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b63      	cmp	r3, #99	; 0x63
 80006c8:	d90d      	bls.n	80006e6 <main+0x396>
				Status2 = 0;
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <main+0x48c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Y5_GPIO_Port, Y5_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	483c      	ldr	r0, [pc, #240]	; (80007c8 <main+0x478>)
 80006d8:	f001 f9b2 	bl	8001a40 <HAL_GPIO_WritePin>
				t_prev3 = HAL_GetTick();
 80006dc:	f000 fe64 	bl	80013a8 <HAL_GetTick>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <main+0x490>)
 80006e4:	6013      	str	r3, [r2, #0]
			}
		}
		if (Status1 == 1) {
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <main+0x474>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	f47f ae9e 	bne.w	800042c <main+0xdc>
			if (HAL_GetTick() - t_prev2 >= 5000) {			// 5000
 80006f0:	f000 fe5a 	bl	80013a8 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b35      	ldr	r3, [pc, #212]	; (80007cc <main+0x47c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	f241 3287 	movw	r2, #4999	; 0x1387
 8000700:	4293      	cmp	r3, r2
 8000702:	f67f ae93 	bls.w	800042c <main+0xdc>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	482c      	ldr	r0, [pc, #176]	; (80007bc <main+0x46c>)
 800070c:	f001 f998 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2108      	movs	r1, #8
 8000714:	4829      	ldr	r0, [pc, #164]	; (80007bc <main+0x46c>)
 8000716:	f001 f993 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	4829      	ldr	r0, [pc, #164]	; (80007c8 <main+0x478>)
 8000722:	f001 f98d 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	4823      	ldr	r0, [pc, #140]	; (80007bc <main+0x46c>)
 800072e:	f001 f987 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	4824      	ldr	r0, [pc, #144]	; (80007c8 <main+0x478>)
 8000738:	f001 f982 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4821      	ldr	r0, [pc, #132]	; (80007c8 <main+0x478>)
 8000742:	f001 f97d 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y3_GPIO_Port, Y3_Pin, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	2120      	movs	r1, #32
 800074a:	481f      	ldr	r0, [pc, #124]	; (80007c8 <main+0x478>)
 800074c:	f001 f978 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y4_GPIO_Port, Y4_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	2110      	movs	r1, #16
 8000754:	481c      	ldr	r0, [pc, #112]	; (80007c8 <main+0x478>)
 8000756:	f001 f973 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y5_GPIO_Port, Y5_Pin, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000760:	4819      	ldr	r0, [pc, #100]	; (80007c8 <main+0x478>)
 8000762:	f001 f96d 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y6_GPIO_Port, Y6_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4816      	ldr	r0, [pc, #88]	; (80007c8 <main+0x478>)
 800076e:	f001 f967 	bl	8001a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y7_GPIO_Port, Y7_Pin, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <main+0x46c>)
 800077a:	f001 f961 	bl	8001a40 <HAL_GPIO_WritePin>
				servo_in_OFF();
 800077e:	f7ff fddb 	bl	8000338 <servo_in_OFF>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <main+0x494>)
 800078a:	f001 f959 	bl	8001a40 <HAL_GPIO_WritePin>
				t_prev2 = HAL_GetTick();
 800078e:	f000 fe0b 	bl	80013a8 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <main+0x47c>)
 8000796:	6013      	str	r3, [r2, #0]

				memset(CardID, 0, strlen((char*) CardID));
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <main+0x468>)
 800079a:	f7ff fce1 	bl	8000160 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <main+0x468>)
 80007a6:	f003 fbfb 	bl	8003fa0 <memset>
				Status1 = 0;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <main+0x474>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
		if (flag_Rx == 1) {
 80007b0:	e63c      	b.n	800042c <main+0xdc>
 80007b2:	bf00      	nop
 80007b4:	20000020 	.word	0x20000020
 80007b8:	200001a8 	.word	0x200001a8
 80007bc:	40010800 	.word	0x40010800
 80007c0:	20000072 	.word	0x20000072
 80007c4:	2000005d 	.word	0x2000005d
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	20000064 	.word	0x20000064
 80007d0:	20000060 	.word	0x20000060
 80007d4:	2000006d 	.word	0x2000006d
 80007d8:	20000028 	.word	0x20000028
 80007dc:	2000005e 	.word	0x2000005e
 80007e0:	20000068 	.word	0x20000068
 80007e4:	40011000 	.word	0x40011000

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b090      	sub	sp, #64	; 0x40
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2228      	movs	r2, #40	; 0x28
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fbd2 	bl	8003fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000826:	2300      	movs	r3, #0
 8000828:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f91e 	bl	8001a70 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800083a:	f000 f98b 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb89 	bl	8001f70 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000864:	f000 f976 	bl	8000b54 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3740      	adds	r7, #64	; 0x40
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI1_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008c2:	f001 fcef 	bl	80022a4 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f942 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000108 	.word	0x20000108
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_TIM2_Init+0xfc>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000916:	220f      	movs	r2, #15
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_TIM2_Init+0xfc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000922:	f242 720f 	movw	r2, #9999	; 0x270f
 8000926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_TIM2_Init+0xfc>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000934:	4828      	ldr	r0, [pc, #160]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000936:	f001 ff81 	bl	800283c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000940:	f000 f908 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000952:	f002 fa83 	bl	8002e5c <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800095c:	f000 f8fa 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000960:	481d      	ldr	r0, [pc, #116]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000962:	f001 ffba 	bl	80028da <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800096c:	f000 f8f2 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4619      	mov	r1, r3
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <MX_TIM2_Init+0xfc>)
 8000980:	f002 fe02 	bl	8003588 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800098a:	f000 f8e3 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM2_Init+0xfc>)
 80009a6:	f002 f99b 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009b0:	f000 f8d0 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2204      	movs	r2, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM2_Init+0xfc>)
 80009bc:	f002 f990 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009c6:	f000 f8c5 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM2_Init+0xfc>)
 80009cc:	f000 fba8 	bl	8001120 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3738      	adds	r7, #56	; 0x38
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000160 	.word	0x20000160

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART3_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a14:	f002 fe28 	bl	8003668 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f899 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_GPIO_Init+0x114>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|C_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000aaa:	4827      	ldr	r0, [pc, #156]	; (8000b48 <MX_GPIO_Init+0x118>)
 8000aac:	f000 ffc8 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|SS_Pin|E_Pin
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f649 711c 	movw	r1, #40732	; 0x9f1c
 8000ab6:	4825      	ldr	r0, [pc, #148]	; (8000b4c <MX_GPIO_Init+0x11c>)
 8000ab8:	f000 ffc2 	bl	8001a40 <HAL_GPIO_WritePin>
                          |D_Pin|LED4_Pin|B_Pin|A_Pin
                          |Y7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RFID_Pin|LED3_Pin|H_Pin|G_Pin
 8000abc:	2200      	movs	r2, #0
 8000abe:	f24f 31f1 	movw	r1, #62449	; 0xf3f1
 8000ac2:	4823      	ldr	r0, [pc, #140]	; (8000b50 <MX_GPIO_Init+0x120>)
 8000ac4:	f000 ffbc 	bl	8001a40 <HAL_GPIO_WritePin>
                          |F_Pin|Y4_Pin|Y3_Pin|Y2_Pin
                          |Y1_Pin|Y6_Pin|Y5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin C_Pin */
  GPIO_InitStruct.Pin = LED_Pin|C_Pin;
 8000ac8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <MX_GPIO_Init+0x118>)
 8000ae2:	f000 fe29 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin SS_Pin E_Pin
                           D_Pin LED4_Pin B_Pin A_Pin
                           Y7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|SS_Pin|E_Pin
 8000ae6:	f649 731c 	movw	r3, #40732	; 0x9f1c
 8000aea:	613b      	str	r3, [r7, #16]
                          |D_Pin|LED4_Pin|B_Pin|A_Pin
                          |Y7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	4813      	ldr	r0, [pc, #76]	; (8000b4c <MX_GPIO_Init+0x11c>)
 8000b00:	f000 fe1a 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RFID_Pin LED3_Pin H_Pin G_Pin
                           F_Pin Y4_Pin Y3_Pin Y2_Pin
                           Y1_Pin Y6_Pin Y5_Pin */
  GPIO_InitStruct.Pin = LED_RFID_Pin|LED3_Pin|H_Pin|G_Pin
 8000b04:	f24f 33f1 	movw	r3, #62449	; 0xf3f1
 8000b08:	613b      	str	r3, [r7, #16]
                          |F_Pin|Y4_Pin|Y3_Pin|Y2_Pin
                          |Y1_Pin|Y6_Pin|Y5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_GPIO_Init+0x120>)
 8000b1e:	f000 fe0b 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMTHANH_Pin */
  GPIO_InitStruct.Pin = AMTHANH_Pin;
 8000b22:	2302      	movs	r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AMTHANH_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <MX_GPIO_Init+0x120>)
 8000b36:	f000 fdff 	bl	8001738 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m; 
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8000b6e:	bf00      	nop
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <TM_SPI_Send+0x4c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d1f8      	bne.n	8000b70 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 010c 	add.w	r1, r7, #12
 8000b86:	230a      	movs	r3, #10
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <TM_SPI_Send+0x4c>)
 8000b8e:	f001 fc0d 	bl	80023ac <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8000b92:	bf00      	nop
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <TM_SPI_Send+0x4c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	2b80      	cmp	r3, #128	; 0x80
 8000ba0:	d0f8      	beq.n	8000b94 <TM_SPI_Send+0x34>
	return data_re[0];
 8000ba2:	7a3b      	ldrb	r3, [r7, #8]
	
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000108 	.word	0x20000108

08000bb0 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8000bb4:	f000 f8db 	bl	8000d6e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000bb8:	218d      	movs	r1, #141	; 0x8d
 8000bba:	202a      	movs	r0, #42	; 0x2a
 8000bbc:	f000 f83c 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000bc0:	213e      	movs	r1, #62	; 0x3e
 8000bc2:	202b      	movs	r0, #43	; 0x2b
 8000bc4:	f000 f838 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000bc8:	211e      	movs	r1, #30
 8000bca:	202d      	movs	r0, #45	; 0x2d
 8000bcc:	f000 f834 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	202c      	movs	r0, #44	; 0x2c
 8000bd4:	f000 f830 	bl	8000c38 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8000bd8:	2170      	movs	r1, #112	; 0x70
 8000bda:	2026      	movs	r0, #38	; 0x26
 8000bdc:	f000 f82c 	bl	8000c38 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	2015      	movs	r0, #21
 8000be4:	f000 f828 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000be8:	213d      	movs	r1, #61	; 0x3d
 8000bea:	2011      	movs	r0, #17
 8000bec:	f000 f824 	bl	8000c38 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8000bf0:	f000 f8a8 	bl	8000d44 <TM_MFRC522_AntennaOn>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <TM_MFRC522_Compare>:
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
	return status;
}

TM_MFRC522_Status_t TM_MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 1; i < 5; i++) {
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e00e      	b.n	8000c26 <TM_MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) {
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	440b      	add	r3, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d001      	beq.n	8000c20 <TM_MFRC522_Compare+0x28>
			return MI_ERR;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e006      	b.n	8000c2e <TM_MFRC522_Compare+0x36>
	for (i = 1; i < 5; i++) {
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d9ed      	bls.n	8000c08 <TM_MFRC522_Compare+0x10>
		}
	}
	return MI_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <TM_MFRC522_WriteRegister>:


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <TM_MFRC522_WriteRegister+0x48>)
 8000c4e:	f000 fef7 	bl	8001a40 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff7e 	bl	8000b60 <TM_SPI_Send>
	//Send data	
	TM_SPI_Send(val);
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff7a 	bl	8000b60 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2110      	movs	r1, #16
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <TM_MFRC522_WriteRegister+0x48>)
 8000c72:	f000 fee5 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800

08000c84 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2110      	movs	r1, #16
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <TM_MFRC522_ReadRegister+0x4c>)
 8000c94:	f000 fed4 	bl	8001a40 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);	
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff57 	bl	8000b60 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff54 	bl	8000b60 <TM_SPI_Send>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <TM_MFRC522_ReadRegister+0x4c>)
 8000cc2:	f000 febd 	bl	8001a40 <HAL_GPIO_WritePin>

	return val;	
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffcc 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff9c 	bl	8000c38 <TM_MFRC522_WriteRegister>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460a      	mov	r2, r1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffb2 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff7e 	bl	8000c38 <TM_MFRC522_WriteRegister>
} 
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000d4a:	2014      	movs	r0, #20
 8000d4c:	f7ff ff9a 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000d5e:	2103      	movs	r1, #3
 8000d60:	2014      	movs	r0, #20
 8000d62:	f7ff ffb7 	bl	8000cd4 <TM_MFRC522_SetBitMask>
	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000d72:	210f      	movs	r1, #15
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff5f 	bl	8000c38 <TM_MFRC522_WriteRegister>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af02      	add	r7, sp, #8
 8000d84:	4603      	mov	r3, r0
 8000d86:	6039      	str	r1, [r7, #0]
 8000d88:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000d8a:	2107      	movs	r1, #7
 8000d8c:	200d      	movs	r0, #13
 8000d8e:	f7ff ff53 	bl	8000c38 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	200c      	movs	r0, #12
 8000da6:	f000 f80f 	bl	8000dc8 <TM_MFRC522_ToCard>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {    
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <TM_MFRC522_Request+0x3c>
 8000db4:	89bb      	ldrh	r3, [r7, #12]
 8000db6:	2b10      	cmp	r3, #16
 8000db8:	d001      	beq.n	8000dbe <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b0c      	cmp	r3, #12
 8000dea:	d006      	beq.n	8000dfa <TM_MFRC522_ToCard+0x32>
 8000dec:	2b0e      	cmp	r3, #14
 8000dee:	d109      	bne.n	8000e04 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000df0:	2312      	movs	r3, #18
 8000df2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000df4:	2310      	movs	r3, #16
 8000df6:	757b      	strb	r3, [r7, #21]
			break;
 8000df8:	e005      	b.n	8000e06 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000dfa:	2377      	movs	r3, #119	; 0x77
 8000dfc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000dfe:	2330      	movs	r3, #48	; 0x30
 8000e00:	757b      	strb	r3, [r7, #21]
			break;
 8000e02:	e000      	b.n	8000e06 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000e04:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e06:	7dbb      	ldrb	r3, [r7, #22]
 8000e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff11 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f7ff ff75 	bl	8000d08 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	200a      	movs	r0, #10
 8000e22:	f7ff ff57 	bl	8000cd4 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000e26:	2100      	movs	r1, #0
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff ff05 	bl	8000c38 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8000e2e:	2300      	movs	r3, #0
 8000e30:	827b      	strh	r3, [r7, #18]
 8000e32:	e00a      	b.n	8000e4a <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000e34:	8a7b      	ldrh	r3, [r7, #18]
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	2009      	movs	r0, #9
 8000e40:	f7ff fefa 	bl	8000c38 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000e44:	8a7b      	ldrh	r3, [r7, #18]
 8000e46:	3301      	adds	r3, #1
 8000e48:	827b      	strh	r3, [r7, #18]
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	8a7a      	ldrh	r2, [r7, #18]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3ef      	bcc.n	8000e34 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4619      	mov	r1, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff feed 	bl	8000c38 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b0c      	cmp	r3, #12
 8000e62:	d103      	bne.n	8000e6c <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	200d      	movs	r0, #13
 8000e68:	f7ff ff34 	bl	8000cd4 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000e6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e70:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000e72:	2004      	movs	r0, #4
 8000e74:	f7ff ff06 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	753b      	strb	r3, [r7, #20]
		i--;
 8000e7c:	8a7b      	ldrh	r3, [r7, #18]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000e82:	8a7b      	ldrh	r3, [r7, #18]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00a      	beq.n	8000e9e <TM_MFRC522_ToCard+0xd6>
 8000e88:	7d3b      	ldrb	r3, [r7, #20]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <TM_MFRC522_ToCard+0xd6>
 8000e92:	7d3a      	ldrb	r2, [r7, #20]
 8000e94:	7d7b      	ldrb	r3, [r7, #21]
 8000e96:	4013      	ands	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0e9      	beq.n	8000e72 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff ff31 	bl	8000d08 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d057      	beq.n	8000f5c <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000eac:	2006      	movs	r0, #6
 8000eae:	f7ff fee9 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f003 031b 	and.w	r3, r3, #27
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d14d      	bne.n	8000f58 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000ec0:	7d3a      	ldrb	r2, [r7, #20]
 8000ec2:	7dbb      	ldrb	r3, [r7, #22]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b0c      	cmp	r3, #12
 8000ed8:	d140      	bne.n	8000f5c <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f7ff fed2 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000ee4:	200c      	movs	r0, #12
 8000ee6:	f7ff fecd 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000ef2:	7c7b      	ldrb	r3, [r7, #17]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00b      	beq.n	8000f10 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000ef8:	7d3b      	ldrb	r3, [r7, #20]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	7c7b      	ldrb	r3, [r7, #17]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	e005      	b.n	8000f1c <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000f1c:	7d3b      	ldrb	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000f22:	2301      	movs	r3, #1
 8000f24:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000f26:	7d3b      	ldrb	r3, [r7, #20]
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	d901      	bls.n	8000f30 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000f30:	2300      	movs	r3, #0
 8000f32:	827b      	strh	r3, [r7, #18]
 8000f34:	e00a      	b.n	8000f4c <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	18d4      	adds	r4, r2, r3
 8000f3c:	2009      	movs	r0, #9
 8000f3e:	f7ff fea1 	bl	8000c84 <TM_MFRC522_ReadRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000f46:	8a7b      	ldrh	r3, [r7, #18]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	827b      	strh	r3, [r7, #18]
 8000f4c:	7d3b      	ldrb	r3, [r7, #20]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	8a7a      	ldrh	r2, [r7, #18]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3ef      	bcc.n	8000f36 <TM_MFRC522_ToCard+0x16e>
 8000f56:	e001      	b.n	8000f5c <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000f58:	2302      	movs	r3, #2
 8000f5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af02      	add	r7, sp, #8
 8000f6c:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000f72:	2100      	movs	r1, #0
 8000f74:	200d      	movs	r0, #13
 8000f76:	f7ff fe5f 	bl	8000c38 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2293      	movs	r2, #147	; 0x93
 8000f7e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	2220      	movs	r2, #32
 8000f86:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000f88:	f107 030a 	add.w	r3, r7, #10
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2202      	movs	r2, #2
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	200c      	movs	r0, #12
 8000f96:	f7ff ff17 	bl	8000dc8 <TM_MFRC522_ToCard>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d118      	bne.n	8000fd6 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
 8000fa8:	e009      	b.n	8000fbe <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	73bb      	strb	r3, [r7, #14]
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d9f2      	bls.n	8000faa <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_MspInit+0x5c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_MspInit+0x5c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x60>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_MspInit+0x60>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d12f      	bne.n	80010c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 80010a8:	f000 fb46 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ac:	2340      	movs	r3, #64	; 0x40
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 80010c0:	f000 fb3a 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d113      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	201c      	movs	r0, #28
 8001108:	f000 fa2f 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800110c:	201c      	movs	r0, #28
 800110e:	f000 fa48 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113e:	d117      	bne.n	8001170 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_MspPostInit+0x58>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_TIM_MspPostInit+0x58>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_TIM_MspPostInit+0x58>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001158:	2303      	movs	r3, #3
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <HAL_TIM_MspPostInit+0x5c>)
 800116c:	f000 fae4 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800

08001180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <HAL_UART_MspInit+0x9c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d139      	bne.n	8001214 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011aa:	61d3      	str	r3, [r2, #28]
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_UART_MspInit+0xa0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <HAL_UART_MspInit+0xa4>)
 80011e6:	f000 faa7 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <HAL_UART_MspInit+0xa4>)
 8001200:	f000 fa9a 	bl	8001738 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2027      	movs	r0, #39	; 0x27
 800120a:	f000 f9ae 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800120e:	2027      	movs	r0, #39	; 0x27
 8001210:	f000 f9c7 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40004800 	.word	0x40004800
 8001220:	40021000 	.word	0x40021000
 8001224:	40010c00 	.word	0x40010c00

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 f889 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM2_IRQHandler+0x10>)
 800127e:	f001 fc27 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000160 	.word	0x20000160

0800128c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <USART3_IRQHandler+0x10>)
 8001292:	f002 fa85 	bl	80037a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000007c 	.word	0x2000007c

080012a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012d2:	f7ff ffe5 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f002 fe3f 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012da:	f7ff f839 	bl	8000350 <main>
  bx lr
 80012de:	4770      	bx	lr
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80012e8:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 80012ec:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80012f0:	200001b4 	.word	0x200001b4

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f923 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fe64 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f93b 	bl	80015be <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f903 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000034 	.word	0x20000034
 800137c:	2000003c 	.word	0x2000003c
 8001380:	20000038 	.word	0x20000038

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <HAL_IncTick+0x20>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	200001b0 	.word	0x200001b0

080013a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_GetTick+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	200001b0 	.word	0x200001b0

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <__NVIC_EnableIRQ+0x34>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff90 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff2d 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff42 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff90 	bl	80014ac <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5f 	bl	8001458 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff35 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffa2 	bl	8001510 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d008      	beq.n	80015fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e020      	b.n	8001640 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800165e:	2b02      	cmp	r3, #2
 8001660:	d005      	beq.n	800166e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2204      	movs	r2, #4
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e051      	b.n	8001712 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 020e 	bic.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_DMA_Abort_IT+0xd0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d029      	beq.n	80016ec <HAL_DMA_Abort_IT+0xa0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_DMA_Abort_IT+0xd4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d022      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x9c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_DMA_Abort_IT+0xd8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d01a      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x96>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_DMA_Abort_IT+0xdc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_Abort_IT+0x90>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_DMA_Abort_IT+0xe0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00a      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x8a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_DMA_Abort_IT+0xe4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d102      	bne.n	80016d0 <HAL_DMA_Abort_IT+0x84>
 80016ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ce:	e00e      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d4:	e00b      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016da:	e008      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	e005      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	e002      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016e8:	2310      	movs	r3, #16
 80016ea:	e000      	b.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 80016ec:	2301      	movs	r3, #1
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_DMA_Abort_IT+0xe8>)
 80016f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
    } 
  }
  return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020008 	.word	0x40020008
 8001720:	4002001c 	.word	0x4002001c
 8001724:	40020030 	.word	0x40020030
 8001728:	40020044 	.word	0x40020044
 800172c:	40020058 	.word	0x40020058
 8001730:	4002006c 	.word	0x4002006c
 8001734:	40020000 	.word	0x40020000

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b08b      	sub	sp, #44	; 0x2c
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e169      	b.n	8001a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800174c:	2201      	movs	r2, #1
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 8158 	bne.w	8001a1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a9a      	ldr	r2, [pc, #616]	; (80019d8 <HAL_GPIO_Init+0x2a0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d05e      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001774:	4a98      	ldr	r2, [pc, #608]	; (80019d8 <HAL_GPIO_Init+0x2a0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d875      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 800177a:	4a98      	ldr	r2, [pc, #608]	; (80019dc <HAL_GPIO_Init+0x2a4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d058      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001780:	4a96      	ldr	r2, [pc, #600]	; (80019dc <HAL_GPIO_Init+0x2a4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d86f      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 8001786:	4a96      	ldr	r2, [pc, #600]	; (80019e0 <HAL_GPIO_Init+0x2a8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d052      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 800178c:	4a94      	ldr	r2, [pc, #592]	; (80019e0 <HAL_GPIO_Init+0x2a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d869      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 8001792:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <HAL_GPIO_Init+0x2ac>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d04c      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001798:	4a92      	ldr	r2, [pc, #584]	; (80019e4 <HAL_GPIO_Init+0x2ac>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d863      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 800179e:	4a92      	ldr	r2, [pc, #584]	; (80019e8 <HAL_GPIO_Init+0x2b0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d046      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 80017a4:	4a90      	ldr	r2, [pc, #576]	; (80019e8 <HAL_GPIO_Init+0x2b0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d85d      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d82a      	bhi.n	8001804 <HAL_GPIO_Init+0xcc>
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d859      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 80017b2:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <HAL_GPIO_Init+0x80>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	08001833 	.word	0x08001833
 80017bc:	0800180d 	.word	0x0800180d
 80017c0:	0800181f 	.word	0x0800181f
 80017c4:	08001861 	.word	0x08001861
 80017c8:	08001867 	.word	0x08001867
 80017cc:	08001867 	.word	0x08001867
 80017d0:	08001867 	.word	0x08001867
 80017d4:	08001867 	.word	0x08001867
 80017d8:	08001867 	.word	0x08001867
 80017dc:	08001867 	.word	0x08001867
 80017e0:	08001867 	.word	0x08001867
 80017e4:	08001867 	.word	0x08001867
 80017e8:	08001867 	.word	0x08001867
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001867 	.word	0x08001867
 80017f4:	08001867 	.word	0x08001867
 80017f8:	08001867 	.word	0x08001867
 80017fc:	08001815 	.word	0x08001815
 8001800:	08001829 	.word	0x08001829
 8001804:	4a79      	ldr	r2, [pc, #484]	; (80019ec <HAL_GPIO_Init+0x2b4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800180a:	e02c      	b.n	8001866 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e029      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	3304      	adds	r3, #4
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e024      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	3308      	adds	r3, #8
 8001824:	623b      	str	r3, [r7, #32]
          break;
 8001826:	e01f      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	330c      	adds	r3, #12
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e01a      	b.n	8001868 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800183a:	2304      	movs	r3, #4
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e013      	b.n	8001868 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	611a      	str	r2, [r3, #16]
          break;
 8001852:	e009      	b.n	8001868 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001854:	2308      	movs	r3, #8
 8001856:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	615a      	str	r2, [r3, #20]
          break;
 800185e:	e003      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x130>
          break;
 8001866:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	; 0xff
 800186c:	d801      	bhi.n	8001872 <HAL_GPIO_Init+0x13a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_Init+0x13e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2bff      	cmp	r3, #255	; 0xff
 800187c:	d802      	bhi.n	8001884 <HAL_GPIO_Init+0x14c>
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x152>
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	3b08      	subs	r3, #8
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	210f      	movs	r1, #15
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80b1 	beq.w	8001a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a4c      	ldr	r2, [pc, #304]	; (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d0:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_GPIO_Init+0x2bc>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_GPIO_Init+0x2c0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_GPIO_Init+0x1ec>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <HAL_GPIO_Init+0x2c4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1e8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3e      	ldr	r2, [pc, #248]	; (8001a00 <HAL_GPIO_Init+0x2c8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1e4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3d      	ldr	r2, [pc, #244]	; (8001a04 <HAL_GPIO_Init+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1e0>
 8001914:	2303      	movs	r3, #3
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001918:	2304      	movs	r3, #4
 800191a:	e004      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 800191c:	2302      	movs	r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001924:	2300      	movs	r3, #0
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001936:	492f      	ldr	r1, [pc, #188]	; (80019f4 <HAL_GPIO_Init+0x2bc>)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	492c      	ldr	r1, [pc, #176]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4928      	ldr	r1, [pc, #160]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	491e      	ldr	r1, [pc, #120]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001990:	4013      	ands	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4918      	ldr	r1, [pc, #96]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4914      	ldr	r1, [pc, #80]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d021      	beq.n	8001a0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
 80019d4:	e021      	b.n	8001a1a <HAL_GPIO_Init+0x2e2>
 80019d6:	bf00      	nop
 80019d8:	10320000 	.word	0x10320000
 80019dc:	10310000 	.word	0x10310000
 80019e0:	10220000 	.word	0x10220000
 80019e4:	10210000 	.word	0x10210000
 80019e8:	10120000 	.word	0x10120000
 80019ec:	10110000 	.word	0x10110000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40011400 	.word	0x40011400
 8001a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_GPIO_Init+0x304>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <HAL_GPIO_Init+0x304>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f47f ae8e 	bne.w	800174c <HAL_GPIO_Init+0x14>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	372c      	adds	r7, #44	; 0x2c
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e26c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b89      	ldr	r3, [pc, #548]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x12c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d168      	bne.n	8001b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e246      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x76>
 8001ad8:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7f      	ldr	r2, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xbc>
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fc2c 	bl	80013a8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fc28 	bl	80013a8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1fa      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe4>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc18 	bl	80013a8 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fc14 	bl	80013a8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1e6      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x10c>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d063      	beq.n	8001c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1ba      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4939      	ldr	r1, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e03a      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fbcd 	bl	80013a8 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fbc9 	bl	80013a8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e19b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fbac 	bl	80013a8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fba8 	bl	80013a8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e17a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03a      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fb8c 	bl	80013a8 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fb88 	bl	80013a8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e15a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fad8 	bl	8002268 <RCC_Delay>
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fb72 	bl	80013a8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fb6e 	bl	80013a8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e140      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	42420000 	.word	0x42420000
 8001ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b9e      	ldr	r3, [pc, #632]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e9      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a6 	beq.w	8001e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a93      	ldr	r2, [pc, #588]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8a      	ldr	r2, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb2f 	bl	80013a8 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff fb2b 	bl	80013a8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0fd      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x312>
 8001d74:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e02d      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x334>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	e01c      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x356>
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a6c      	ldr	r2, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fadf 	bl	80013a8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fadb 	bl	80013a8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0ab      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ee      	beq.n	8001dee <HAL_RCC_OscConfig+0x37e>
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fac9 	bl	80013a8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fac5 	bl	80013a8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e095      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d105      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8081 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d061      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d146      	bne.n	8001efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff fa99 	bl	80013a8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff fa95 	bl	80013a8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e067      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	492d      	ldr	r1, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fa69 	bl	80013a8 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fa65 	bl	80013a8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e037      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x46a>
 8001ef8:	e02f      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fa52 	bl	80013a8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fa4e 	bl	80013a8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e020      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x498>
 8001f26:	e018      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420060 	.word	0x42420060

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff f9a2 	bl	80013a8 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f99e 	bl	80013a8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f900 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	08003fe8 	.word	0x08003fe8
 800213c:	20000034 	.word	0x20000034
 8002140:	20000038 	.word	0x20000038

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800214c:	1d3c      	adds	r4, r7, #4
 800214e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002154:	f240 2301 	movw	r3, #513	; 0x201
 8002158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x40>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x46>
 8002182:	e02d      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002186:	623b      	str	r3, [r7, #32]
      break;
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002196:	4413      	add	r3, r2
 8002198:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800219c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c5b      	lsrs	r3, r3, #17
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b6:	4413      	add	r3, r2
 80021b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	fb02 f203 	mul.w	r2, r2, r3
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	623b      	str	r3, [r7, #32]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc90      	pop	{r4, r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	08003fd8 	.word	0x08003fd8
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	003d0900 	.word	0x003d0900

08002204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_RCC_GetHCLKFreq+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000034 	.word	0x20000034

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800221c:	f7ff fff2 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	08003ff8 	.word	0x08003ff8

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002244:	f7ff ffde 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08003ff8 	.word	0x08003ff8

08002268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCC_Delay+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <RCC_Delay+0x38>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002284:	bf00      	nop
  }
  while (Delay --);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f9      	bne.n	8002284 <RCC_Delay+0x1c>
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	20000034 	.word	0x20000034
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e076      	b.n	80023a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c6:	d009      	beq.n	80022dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
 80022ce:	e005      	b.n	80022dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fea4 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	0c1a      	lsrs	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f002 0204 	and.w	r2, r2, #4
 8002382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ba:	2301      	movs	r3, #1
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x26>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e18a      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x33c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023da:	f7fe ffe5 	bl	80013a8 <HAL_GetTick>
 80023de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d00f      	beq.n	800241c <HAL_SPI_TransmitReceive+0x70>
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002402:	d107      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x68>
 800240c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002410:	2b04      	cmp	r3, #4
 8002412:	d003      	beq.n	800241c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002414:	2302      	movs	r3, #2
 8002416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800241a:	e15b      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_SPI_TransmitReceive+0x82>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_TransmitReceive+0x82>
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002434:	e14e      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b04      	cmp	r3, #4
 8002440:	d003      	beq.n	800244a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d007      	beq.n	800249e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a6:	d178      	bne.n	800259a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_TransmitReceive+0x10a>
 80024b0:	8b7b      	ldrh	r3, [r7, #26]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d166      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024da:	e053      	b.n	8002584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d11b      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x176>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d016      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x176>
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d113      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	1c9a      	adds	r2, r3, #2
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d119      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x1b8>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d014      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	b292      	uxth	r2, r2
 8002546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	1c9a      	adds	r2, r3, #2
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002564:	f7fe ff20 	bl	80013a8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002570:	429a      	cmp	r2, r3
 8002572:	d807      	bhi.n	8002584 <HAL_SPI_TransmitReceive+0x1d8>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d003      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002582:	e0a7      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1a6      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x130>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1a1      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x130>
 8002598:	e07c      	b.n	8002694 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x1fc>
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d16b      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ce:	e057      	b.n	8002680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d11c      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x26c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <HAL_SPI_TransmitReceive+0x26c>
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d114      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d119      	bne.n	800265a <HAL_SPI_TransmitReceive+0x2ae>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002656:	2301      	movs	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800265a:	f7fe fea5 	bl	80013a8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002666:	429a      	cmp	r2, r3
 8002668:	d803      	bhi.n	8002672 <HAL_SPI_TransmitReceive+0x2c6>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d102      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x2cc>
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800267e:	e029      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1a2      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x224>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d19d      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8b1 	bl	8002800 <SPI_EndRxTxTransaction>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026b0:	e010      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10b      	bne.n	80026d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	e000      	b.n	80026d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002700:	f7fe fe52 	bl	80013a8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4413      	add	r3, r2
 800270e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002710:	f7fe fe4a 	bl	80013a8 <HAL_GetTick>
 8002714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	015b      	lsls	r3, r3, #5
 800271c:	0d1b      	lsrs	r3, r3, #20
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	fb02 f303 	mul.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002726:	e054      	b.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d050      	beq.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002730:	f7fe fe3a 	bl	80013a8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	429a      	cmp	r2, r3
 800273e:	d902      	bls.n	8002746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d13d      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275e:	d111      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	d004      	beq.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d107      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278c:	d10f      	bne.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e017      	b.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d19b      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000034 	.word	0x20000034

08002800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2200      	movs	r2, #0
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ff6a 	bl	80026f0 <SPI_WaitFlagStateUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e000      	b.n	8002834 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fc38 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fbe0 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e041      	b.n	8002970 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f839 	bl	8002978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 fb91 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
	...

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e015      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e05e      	b.n	8002abc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x82>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd7e 	bl	8003540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_PWM_Start+0x13c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_TIM_PWM_Start+0x140>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d010      	beq.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa78 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa6b 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fa7a 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa4e 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa41 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa50 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fa24 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa17 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fa26 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f9fa 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f9ed 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f9fc 	bl	800301a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9c8 	bl	8002fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fceb 	bl	8003656 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9c0 	bl	800302c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0220 	mvn.w	r2, #32
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fcb6 	bl	8003644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0ac      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	f200 809f 	bhi.w	8002e48 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d45 	.word	0x08002d45
 8002d14:	08002e49 	.word	0x08002e49
 8002d18:	08002e49 	.word	0x08002e49
 8002d1c:	08002e49 	.word	0x08002e49
 8002d20:	08002d85 	.word	0x08002d85
 8002d24:	08002e49 	.word	0x08002e49
 8002d28:	08002e49 	.word	0x08002e49
 8002d2c:	08002e49 	.word	0x08002e49
 8002d30:	08002dc7 	.word	0x08002dc7
 8002d34:	08002e49 	.word	0x08002e49
 8002d38:	08002e49 	.word	0x08002e49
 8002d3c:	08002e49 	.word	0x08002e49
 8002d40:	08002e07 	.word	0x08002e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f9da 	bl	8003104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6999      	ldr	r1, [r3, #24]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]
      break;
 8002d82:	e062      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fa20 	bl	80031d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]
      break;
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fa69 	bl	80032a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0208 	orr.w	r2, r2, #8
 8002de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0204 	bic.w	r2, r2, #4
 8002df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69d9      	ldr	r1, [r3, #28]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	61da      	str	r2, [r3, #28]
      break;
 8002e04:	e021      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fab3 	bl	8003378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	61da      	str	r2, [r3, #28]
      break;
 8002e46:	e000      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_ConfigClockSource+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0b3      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x180>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d03e      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0xd0>
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	f200 8087 	bhi.w	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	f000 8085 	beq.w	8002fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d87f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ec4:	2b70      	cmp	r3, #112	; 0x70
 8002ec6:	d01a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xa2>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d87b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b60      	cmp	r3, #96	; 0x60
 8002ece:	d050      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x116>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d877      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b50      	cmp	r3, #80	; 0x50
 8002ed6:	d03c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0xf6>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d873      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d058      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x136>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d86f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b30      	cmp	r3, #48	; 0x30
 8002ee6:	d064      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d86b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d060      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x156>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d867      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05c      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x156>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d05a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002efc:	e062      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f000 faf8 	bl	8003502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
      break;
 8002f2a:	e04e      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f000 fae1 	bl	8003502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4e:	609a      	str	r2, [r3, #8]
      break;
 8002f50:	e03b      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 fa58 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2150      	movs	r1, #80	; 0x50
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 faaf 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8002f70:	e02b      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa76 	bl	8003470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2160      	movs	r1, #96	; 0x60
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa9f 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8002f90:	e01b      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fa38 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa8f 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e00b      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 fa86 	bl	80034ce <TIM_ITRx_SetConfig>
        break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d007      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <TIM_Base_SetConfig+0xbc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0x30>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <TIM_Base_SetConfig+0xc0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <TIM_Base_SetConfig+0xbc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <TIM_Base_SetConfig+0xc0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <TIM_Base_SetConfig+0xb8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800

08003104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0201 	bic.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 0302 	bic.w	r3, r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <TIM_OC1_SetConfig+0xc8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d10c      	bne.n	800317a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0308 	bic.w	r3, r3, #8
 8003166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <TIM_OC1_SetConfig+0xc8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d111      	bne.n	80031a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00

080031d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0210 	bic.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0320 	bic.w	r3, r3, #32
 800321a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <TIM_OC2_SetConfig+0xd0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d10d      	bne.n	800324c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <TIM_OC2_SetConfig+0xd0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d113      	bne.n	800327c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800325a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC3_SetConfig+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10d      	bne.n	800331e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC3_SetConfig+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <TIM_OC4_SetConfig+0x98>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d109      	bne.n	80033ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0210 	bic.w	r2, r3, #16
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f043 0307 	orr.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	431a      	orrs	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800359c:	2302      	movs	r3, #2
 800359e:	e046      	b.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d009      	beq.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a10      	ldr	r2, [pc, #64]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10c      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03f      	b.n	80036fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fd76 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fbc5 	bl	8003e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	d13c      	bne.n	8003796 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e035      	b.n	8003798 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8003736:	2302      	movs	r3, #2
 8003738:	e02e      	b.n	8003798 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	461a      	mov	r2, r3
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f9eb 	bl	8003b2a <UART_Start_Receive_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	2b01      	cmp	r3, #1
 8003764:	d113      	bne.n	800378e <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0210 	orr.w	r2, r2, #16
 800378a:	60da      	str	r2, [r3, #12]
 800378c:	e001      	b.n	8003792 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	e000      	b.n	8003798 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_UART_IRQHandler+0x52>
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa7d 	bl	8003cea <UART_Receive_IT>
      return;
 80037f0:	e17b      	b.n	8003aea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80b1 	beq.w	800395c <HAL_UART_IRQHandler+0x1bc>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_UART_IRQHandler+0x70>
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80a6 	beq.w	800395c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_UART_IRQHandler+0x90>
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_UART_IRQHandler+0xb0>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_UART_IRQHandler+0xd0>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0204 	orr.w	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00f      	beq.n	800389a <HAL_UART_IRQHandler+0xfa>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_UART_IRQHandler+0xee>
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f043 0208 	orr.w	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 811e 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_UART_IRQHandler+0x11e>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fa16 	bl	8003cea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <HAL_UART_IRQHandler+0x146>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d031      	beq.n	800394a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f958 	bl	8003b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d023      	beq.n	8003942 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	4a76      	ldr	r2, [pc, #472]	; (8003af0 <HAL_UART_IRQHandler+0x350>)
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fe94 	bl	800164c <HAL_DMA_Abort_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003934:	4610      	mov	r0, r2
 8003936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e00e      	b.n	8003958 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8ec 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e00a      	b.n	8003958 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8e8 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e006      	b.n	8003958 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8e4 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003956:	e0c3      	b.n	8003ae0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	bf00      	nop
    return;
 800395a:	e0c1      	b.n	8003ae0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 80a1 	bne.w	8003aa8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 809b 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8095 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04e      	beq.n	8003a40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039ac:	8a3b      	ldrh	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8098 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039b8:	8a3a      	ldrh	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	f080 8092 	bcs.w	8003ae4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8a3a      	ldrh	r2, [r7, #16]
 80039c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d02b      	beq.n	8003a28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0210 	bic.w	r2, r2, #16
 8003a1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fdd7 	bl	80015d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fc fbf5 	bl	8000228 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a3e:	e051      	b.n	8003ae4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d047      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a58:	8a7b      	ldrh	r3, [r7, #18]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0210 	bic.w	r2, r2, #16
 8003a9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a9c:	8a7b      	ldrh	r3, [r7, #18]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fc fbc1 	bl	8000228 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003aa6:	e01f      	b.n	8003ae8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x324>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8ad 	bl	8003c1c <UART_Transmit_IT>
    return;
 8003ac2:	e012      	b.n	8003aea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_UART_IRQHandler+0x34a>
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8ee 	bl	8003cba <UART_EndTransmit_IT>
    return;
 8003ade:	e004      	b.n	8003aea <HAL_UART_IRQHandler+0x34a>
    return;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <HAL_UART_IRQHandler+0x34a>
      return;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_UART_IRQHandler+0x34a>
      return;
 8003ae8:	bf00      	nop
  }
}
 8003aea:	3728      	adds	r7, #40	; 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	08003bf5 	.word	0x08003bf5

08003af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2222      	movs	r2, #34	; 0x22
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0210 	bic.w	r2, r2, #16
 8003bda:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff ff82 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b21      	cmp	r3, #33	; 0x21
 8003c2e:	d13e      	bne.n	8003cae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d114      	bne.n	8003c64 <UART_Transmit_IT+0x48>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d110      	bne.n	8003c64 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]
 8003c62:	e008      	b.n	8003c76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1c59      	adds	r1, r3, #1
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6211      	str	r1, [r2, #32]
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4619      	mov	r1, r3
 8003c84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff0a 	bl	8003af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	f040 8099 	bne.w	8003e32 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d117      	bne.n	8003d3a <UART_Receive_IT+0x50>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
 8003d38:	e026      	b.n	8003d88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d007      	beq.n	8003d5e <UART_Receive_IT+0x74>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <UART_Receive_IT+0x82>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e008      	b.n	8003d7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4619      	mov	r1, r3
 8003d96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d148      	bne.n	8003e2e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0220 	bic.w	r2, r2, #32
 8003daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d123      	bne.n	8003e24 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0210 	bic.w	r2, r2, #16
 8003df0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d10a      	bne.n	8003e16 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fc fa03 	bl	8000228 <HAL_UARTEx_RxEventCallback>
 8003e22:	e002      	b.n	8003e2a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fe6e 	bl	8003b06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e002      	b.n	8003e34 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e76:	f023 030c 	bic.w	r3, r3, #12
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <UART_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe f9cc 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	e002      	b.n	8003eb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7fe f9b4 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	4a22      	ldr	r2, [pc, #136]	; (8003f54 <UART_SetConfig+0x118>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	0119      	lsls	r1, r3, #4
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <UART_SetConfig+0x118>)
 8003eea:	fba3 0302 	umull	r0, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2064      	movs	r0, #100	; 0x64
 8003ef2:	fb00 f303 	mul.w	r3, r0, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <UART_SetConfig+0x118>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	4419      	add	r1, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <UART_SetConfig+0x118>)
 8003f22:	fba3 0302 	umull	r0, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2064      	movs	r0, #100	; 0x64
 8003f2a:	fb00 f303 	mul.w	r3, r0, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	3332      	adds	r3, #50	; 0x32
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <UART_SetConfig+0x118>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	440a      	add	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40013800 	.word	0x40013800
 8003f54:	51eb851f 	.word	0x51eb851f

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	4d0c      	ldr	r5, [pc, #48]	; (8003f90 <__libc_init_array+0x38>)
 8003f5e:	4c0d      	ldr	r4, [pc, #52]	; (8003f94 <__libc_init_array+0x3c>)
 8003f60:	1b64      	subs	r4, r4, r5
 8003f62:	10a4      	asrs	r4, r4, #2
 8003f64:	42a6      	cmp	r6, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	f000 f822 	bl	8003fb0 <_init>
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	4d0a      	ldr	r5, [pc, #40]	; (8003f98 <__libc_init_array+0x40>)
 8003f70:	4c0a      	ldr	r4, [pc, #40]	; (8003f9c <__libc_init_array+0x44>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f80:	4798      	blx	r3
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8a:	4798      	blx	r3
 8003f8c:	3601      	adds	r6, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	08004000 	.word	0x08004000
 8003f94:	08004000 	.word	0x08004000
 8003f98:	08004000 	.word	0x08004000
 8003f9c:	08004004 	.word	0x08004004

08003fa0 <memset>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4402      	add	r2, r0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memset+0xa>
 8003fa8:	4770      	bx	lr
 8003faa:	f803 1b01 	strb.w	r1, [r3], #1
 8003fae:	e7f9      	b.n	8003fa4 <memset+0x4>

08003fb0 <_init>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr

08003fbc <_fini>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr
