
SMARTHOME_BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08007b48  08007b48  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b48  08007b48  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200000b0  08007c00  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08007c00  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154c7  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7d  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00038320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00039538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019822  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165bf  00000000  00000000  00053e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093091  00000000  00000000  0006a409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd49a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f0  00000000  00000000  000fd4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080079e8 	.word	0x080079e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080079e8 	.word	0x080079e8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2iz>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d215      	bcs.n	8000946 <__aeabi_d2iz+0x36>
 800091a:	d511      	bpl.n	8000940 <__aeabi_d2iz+0x30>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d912      	bls.n	800094c <__aeabi_d2iz+0x3c>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000936:	fa23 f002 	lsr.w	r0, r3, r2
 800093a:	bf18      	it	ne
 800093c:	4240      	negne	r0, r0
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d105      	bne.n	8000958 <__aeabi_d2iz+0x48>
 800094c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000950:	bf08      	it	eq
 8000952:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000956:	4770      	bx	lr
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__aeabi_d2uiz>:
 8000960:	004a      	lsls	r2, r1, #1
 8000962:	d211      	bcs.n	8000988 <__aeabi_d2uiz+0x28>
 8000964:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000968:	d211      	bcs.n	800098e <__aeabi_d2uiz+0x2e>
 800096a:	d50d      	bpl.n	8000988 <__aeabi_d2uiz+0x28>
 800096c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000970:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000974:	d40e      	bmi.n	8000994 <__aeabi_d2uiz+0x34>
 8000976:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	4770      	bx	lr
 8000988:	f04f 0000 	mov.w	r0, #0
 800098c:	4770      	bx	lr
 800098e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000992:	d102      	bne.n	800099a <__aeabi_d2uiz+0x3a>
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	4770      	bx	lr
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	4770      	bx	lr

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <DWT_Delay_Init+0x58>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <DWT_Delay_Init+0x58>)
 8000a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a4e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <DWT_Delay_Init+0x58>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <DWT_Delay_Init+0x58>)
 8000a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a5a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000a7a:	bf00      	nop
    __ASM volatile ("NOP");
 8000a7c:	bf00      	nop
    __ASM volatile ("NOP");
 8000a7e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <DWT_Delay_Init+0x5c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e000      	b.n	8000a8e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000a8c:	2301      	movs	r3, #1
    }
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000edf0 	.word	0xe000edf0
 8000a9c:	e0001000 	.word	0xe0001000

08000aa0 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
    uint8_t i = 0, j = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	77bb      	strb	r3, [r7, #30]

    DWT_Delay_Init();
 8000abc:	f7ff ffc0 	bl	8000a40 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	e0e7      	b.n	8000c96 <STEPPERS_Init+0x1f6>
    {
    	for(j=0; j<4; j++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	77bb      	strb	r3, [r7, #30]
 8000aca:	e06d      	b.n	8000ba8 <STEPPERS_Init+0x108>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8000acc:	7ffa      	ldrb	r2, [r7, #31]
 8000ace:	7fb9      	ldrb	r1, [r7, #30]
 8000ad0:	487c      	ldr	r0, [pc, #496]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000ade:	4a7a      	ldr	r2, [pc, #488]	; (8000cc8 <STEPPERS_Init+0x228>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d10c      	bne.n	8000afe <STEPPERS_Init+0x5e>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a78      	ldr	r2, [pc, #480]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b76      	ldr	r3, [pc, #472]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	e030      	b.n	8000b60 <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8000afe:	7ffa      	ldrb	r2, [r7, #31]
 8000b00:	7fb9      	ldrb	r1, [r7, #30]
 8000b02:	4870      	ldr	r0, [pc, #448]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b10:	4a6f      	ldr	r2, [pc, #444]	; (8000cd0 <STEPPERS_Init+0x230>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10c      	bne.n	8000b30 <STEPPERS_Init+0x90>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a6c      	ldr	r2, [pc, #432]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	e017      	b.n	8000b60 <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8000b30:	7ffa      	ldrb	r2, [r7, #31]
 8000b32:	7fb9      	ldrb	r1, [r7, #30]
 8000b34:	4863      	ldr	r0, [pc, #396]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b42:	4a64      	ldr	r2, [pc, #400]	; (8000cd4 <STEPPERS_Init+0x234>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d10b      	bne.n	8000b60 <STEPPERS_Init+0xc0>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b60      	ldr	r3, [pc, #384]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a5f      	ldr	r2, [pc, #380]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b5d      	ldr	r3, [pc, #372]	; (8000ccc <STEPPERS_Init+0x22c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8000b60:	7ffa      	ldrb	r2, [r7, #31]
 8000b62:	7fb9      	ldrb	r1, [r7, #30]
 8000b64:	4857      	ldr	r0, [pc, #348]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000b76:	60fb      	str	r3, [r7, #12]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8000b84:	7ffa      	ldrb	r2, [r7, #31]
 8000b86:	7fb9      	ldrb	r1, [r7, #30]
 8000b88:	484e      	ldr	r0, [pc, #312]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	1a9b      	subs	r3, r3, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b96:	f107 020c 	add.w	r2, r7, #12
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 f955 	bl	8003e4c <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8000ba2:	7fbb      	ldrb	r3, [r7, #30]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	77bb      	strb	r3, [r7, #30]
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d98e      	bls.n	8000acc <STEPPERS_Init+0x2c>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8000bae:	7ffa      	ldrb	r2, [r7, #31]
 8000bb0:	4949      	ldr	r1, [pc, #292]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3311      	adds	r3, #17
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8000bc2:	7ffa      	ldrb	r2, [r7, #31]
 8000bc4:	4944      	ldr	r1, [pc, #272]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	330f      	adds	r3, #15
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8000bd6:	7ffa      	ldrb	r2, [r7, #31]
 8000bd8:	493f      	ldr	r1, [pc, #252]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8000be8:	7ffa      	ldrb	r2, [r7, #31]
 8000bea:	493b      	ldr	r1, [pc, #236]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8000bfc:	7ffa      	ldrb	r2, [r7, #31]
 8000bfe:	4936      	ldr	r1, [pc, #216]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8000c10:	7ffa      	ldrb	r2, [r7, #31]
 8000c12:	4931      	ldr	r1, [pc, #196]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	330e      	adds	r3, #14
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8000c24:	7ffa      	ldrb	r2, [r7, #31]
 8000c26:	4927      	ldr	r1, [pc, #156]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	331b      	adds	r3, #27
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d00a      	beq.n	8000c50 <STEPPERS_Init+0x1b0>
 8000c3a:	7ffa      	ldrb	r2, [r7, #31]
 8000c3c:	4921      	ldr	r1, [pc, #132]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	331b      	adds	r3, #27
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <STEPPERS_Init+0x1c6>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8000c50:	7ffa      	ldrb	r2, [r7, #31]
 8000c52:	4921      	ldr	r1, [pc, #132]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3310      	adds	r3, #16
 8000c60:	2204      	movs	r2, #4
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e014      	b.n	8000c90 <STEPPERS_Init+0x1f0>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8000c66:	7ffa      	ldrb	r2, [r7, #31]
 8000c68:	4916      	ldr	r1, [pc, #88]	; (8000cc4 <STEPPERS_Init+0x224>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	331b      	adds	r3, #27
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d109      	bne.n	8000c90 <STEPPERS_Init+0x1f0>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8000c7c:	7ffa      	ldrb	r2, [r7, #31]
 8000c7e:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <STEPPERS_Init+0x238>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	3310      	adds	r3, #16
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8000c90:	7ffb      	ldrb	r3, [r7, #31]
 8000c92:	3301      	adds	r3, #1
 8000c94:	77fb      	strb	r3, [r7, #31]
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f43f af14 	beq.w	8000ac6 <STEPPERS_Init+0x26>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <STEPPERS_Init+0x230>)
 8000cb6:	f003 f8c9 	bl	8003e4c <HAL_GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08007ab8 	.word	0x08007ab8
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	200000cc 	.word	0x200000cc

08000cdc <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8000d00:	f7ff fece 	bl	8000aa0 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8000d04:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <STEPPERS_Init_TMR+0x90>)
 8000d0e:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2263      	movs	r2, #99	; 0x63
 8000d14:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f004 fc55 	bl	80055e0 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f004 ff5a 	bl	8005bfc <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f005 fabc 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f004 fcd9 	bl	8005714 <HAL_TIM_Base_Start_IT>
    }
}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40000800 	.word	0x40000800

08000d70 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4928      	ldr	r1, [pc, #160]	; (8000e28 <STEPPER_SetSpeed+0xb8>)
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	330c      	adds	r3, #12
 8000d94:	88ba      	ldrh	r2, [r7, #4]
 8000d96:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	4924      	ldr	r1, [pc, #144]	; (8000e2c <STEPPER_SetSpeed+0xbc>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	331b      	adds	r3, #27
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d10b      	bne.n	8000dc6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	491e      	ldr	r1, [pc, #120]	; (8000e2c <STEPPER_SetSpeed+0xbc>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e009      	b.n	8000dda <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	4918      	ldr	r1, [pc, #96]	; (8000e2c <STEPPER_SetSpeed+0xbc>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb08 	bl	80003f8 <__aeabi_ui2d>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	a10c      	add	r1, pc, #48	; (adr r1, 8000e20 <STEPPER_SetSpeed+0xb0>)
 8000dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df2:	f7ff fca5 	bl	8000740 <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	79fc      	ldrb	r4, [r7, #7]
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fdae 	bl	8000960 <__aeabi_d2uiz>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <STEPPER_SetSpeed+0xb8>)
 8000e08:	4623      	mov	r3, r4
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4423      	add	r3, r4
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3308      	adds	r3, #8
 8000e14:	601a      	str	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40ed4c00 	.word	0x40ed4c00
 8000e28:	200000cc 	.word	0x200000cc
 8000e2c:	08007ab8 	.word	0x08007ab8

08000e30 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	4999      	ldr	r1, [pc, #612]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	331a      	adds	r3, #26
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f040 81c5 	bne.w	80011dc <STEPPER_One_Step+0x3ac>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	4993      	ldr	r1, [pc, #588]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	331b      	adds	r3, #27
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 8088 	bne.w	8000f7a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	498d      	ldr	r1, [pc, #564]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	4989      	ldr	r1, [pc, #548]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3310      	adds	r3, #16
 8000e8a:	8819      	ldrh	r1, [r3, #0]
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4c86      	ldr	r4, [pc, #536]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4423      	add	r3, r4
 8000e9a:	330f      	adds	r3, #15
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b82      	ldr	r3, [pc, #520]	; (80010ac <STEPPER_One_Step+0x27c>)
 8000ea2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f003 f96b 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8000eac:	79fa      	ldrb	r2, [r7, #7]
 8000eae:	497d      	ldr	r1, [pc, #500]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	3304      	adds	r3, #4
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	4978      	ldr	r1, [pc, #480]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	3312      	adds	r3, #18
 8000ece:	8819      	ldrh	r1, [r3, #0]
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	4c75      	ldr	r4, [pc, #468]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4423      	add	r3, r4
 8000ede:	330f      	adds	r3, #15
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4a72      	ldr	r2, [pc, #456]	; (80010ac <STEPPER_One_Step+0x27c>)
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f003 f949 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	496c      	ldr	r1, [pc, #432]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	3308      	adds	r3, #8
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	4967      	ldr	r1, [pc, #412]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3314      	adds	r3, #20
 8000f12:	8819      	ldrh	r1, [r3, #0]
 8000f14:	79fa      	ldrb	r2, [r7, #7]
 8000f16:	4c64      	ldr	r4, [pc, #400]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4423      	add	r3, r4
 8000f22:	330f      	adds	r3, #15
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4a61      	ldr	r2, [pc, #388]	; (80010ac <STEPPER_One_Step+0x27c>)
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f003 f927 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	495b      	ldr	r1, [pc, #364]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	330c      	adds	r3, #12
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	4956      	ldr	r1, [pc, #344]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	3316      	adds	r3, #22
 8000f56:	8819      	ldrh	r1, [r3, #0]
 8000f58:	79fa      	ldrb	r2, [r7, #7]
 8000f5a:	4c53      	ldr	r4, [pc, #332]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4423      	add	r3, r4
 8000f66:	330f      	adds	r3, #15
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4a50      	ldr	r2, [pc, #320]	; (80010ac <STEPPER_One_Step+0x27c>)
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f003 f905 	bl	8004182 <HAL_GPIO_WritePin>
 8000f78:	e135      	b.n	80011e6 <STEPPER_One_Step+0x3b6>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	4949      	ldr	r1, [pc, #292]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	331b      	adds	r3, #27
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8091 	bne.w	80010b4 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	4943      	ldr	r1, [pc, #268]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	493f      	ldr	r1, [pc, #252]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	8819      	ldrh	r1, [r3, #0]
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4c3c      	ldr	r4, [pc, #240]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4423      	add	r3, r4
 8000fc2:	330f      	adds	r3, #15
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <STEPPER_One_Step+0x280>)
 8000fca:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f003 f8d7 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	4933      	ldr	r1, [pc, #204]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	492e      	ldr	r1, [pc, #184]	; (80010a4 <STEPPER_One_Step+0x274>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3312      	adds	r3, #18
 8000ff6:	8819      	ldrh	r1, [r3, #0]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	4c2b      	ldr	r4, [pc, #172]	; (80010a8 <STEPPER_One_Step+0x278>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4423      	add	r3, r4
 8001006:	330f      	adds	r3, #15
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <STEPPER_One_Step+0x280>)
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	461a      	mov	r2, r3
 8001014:	f003 f8b5 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001018:	79fa      	ldrb	r2, [r7, #7]
 800101a:	4922      	ldr	r1, [pc, #136]	; (80010a4 <STEPPER_One_Step+0x274>)
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3308      	adds	r3, #8
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	491d      	ldr	r1, [pc, #116]	; (80010a4 <STEPPER_One_Step+0x274>)
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3314      	adds	r3, #20
 800103a:	8819      	ldrh	r1, [r3, #0]
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	4c1a      	ldr	r4, [pc, #104]	; (80010a8 <STEPPER_One_Step+0x278>)
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4423      	add	r3, r4
 800104a:	330f      	adds	r3, #15
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <STEPPER_One_Step+0x280>)
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	461a      	mov	r2, r3
 8001058:	f003 f893 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	4911      	ldr	r1, [pc, #68]	; (80010a4 <STEPPER_One_Step+0x274>)
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	330c      	adds	r3, #12
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <STEPPER_One_Step+0x274>)
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3316      	adds	r3, #22
 800107e:	8819      	ldrh	r1, [r3, #0]
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	4c09      	ldr	r4, [pc, #36]	; (80010a8 <STEPPER_One_Step+0x278>)
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4423      	add	r3, r4
 800108e:	330f      	adds	r3, #15
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <STEPPER_One_Step+0x280>)
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	461a      	mov	r2, r3
 800109c:	f003 f871 	bl	8004182 <HAL_GPIO_WritePin>
 80010a0:	e0a1      	b.n	80011e6 <STEPPER_One_Step+0x3b6>
 80010a2:	bf00      	nop
 80010a4:	08007ab8 	.word	0x08007ab8
 80010a8:	200000cc 	.word	0x200000cc
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	498b      	ldr	r1, [pc, #556]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	331b      	adds	r3, #27
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	f040 808d 	bne.w	80011e6 <STEPPER_One_Step+0x3b6>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	4985      	ldr	r1, [pc, #532]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	4981      	ldr	r1, [pc, #516]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	3310      	adds	r3, #16
 80010ec:	8819      	ldrh	r1, [r3, #0]
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4c7d      	ldr	r4, [pc, #500]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4423      	add	r3, r4
 80010fc:	330f      	adds	r3, #15
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b7a      	ldr	r3, [pc, #488]	; (80012ec <STEPPER_One_Step+0x4bc>)
 8001104:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001108:	461a      	mov	r2, r3
 800110a:	f003 f83a 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	4974      	ldr	r1, [pc, #464]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4970      	ldr	r1, [pc, #448]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	3312      	adds	r3, #18
 8001130:	8819      	ldrh	r1, [r3, #0]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	4c6c      	ldr	r4, [pc, #432]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4423      	add	r3, r4
 8001140:	330f      	adds	r3, #15
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4a69      	ldr	r2, [pc, #420]	; (80012ec <STEPPER_One_Step+0x4bc>)
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	461a      	mov	r2, r3
 800114e:	f003 f818 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	4963      	ldr	r1, [pc, #396]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3308      	adds	r3, #8
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	495f      	ldr	r1, [pc, #380]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3314      	adds	r3, #20
 8001174:	8819      	ldrh	r1, [r3, #0]
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4c5b      	ldr	r4, [pc, #364]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4423      	add	r3, r4
 8001184:	330f      	adds	r3, #15
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4a58      	ldr	r2, [pc, #352]	; (80012ec <STEPPER_One_Step+0x4bc>)
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	461a      	mov	r2, r3
 8001192:	f002 fff6 	bl	8004182 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	4952      	ldr	r1, [pc, #328]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	330c      	adds	r3, #12
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	494e      	ldr	r1, [pc, #312]	; (80012e4 <STEPPER_One_Step+0x4b4>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3316      	adds	r3, #22
 80011b8:	8819      	ldrh	r1, [r3, #0]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	4c4a      	ldr	r4, [pc, #296]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4423      	add	r3, r4
 80011c8:	330f      	adds	r3, #15
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4a47      	ldr	r2, [pc, #284]	; (80012ec <STEPPER_One_Step+0x4bc>)
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	461a      	mov	r2, r3
 80011d6:	f002 ffd4 	bl	8004182 <HAL_GPIO_WritePin>
 80011da:	e004      	b.n	80011e6 <STEPPER_One_Step+0x3b6>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 80011dc:	79fa      	ldrb	r2, [r7, #7]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	493f      	ldr	r1, [pc, #252]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3311      	adds	r3, #17
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d132      	bne.n	8001262 <STEPPER_One_Step+0x432>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	493a      	ldr	r1, [pc, #232]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	330f      	adds	r3, #15
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d112      	bne.n	8001238 <STEPPER_One_Step+0x408>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8001212:	79f9      	ldrb	r1, [r7, #7]
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	4834      	ldr	r0, [pc, #208]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4403      	add	r3, r0
 8001222:	3310      	adds	r3, #16
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	4930      	ldr	r1, [pc, #192]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	330f      	adds	r3, #15
 8001234:	4602      	mov	r2, r0
 8001236:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	330f      	adds	r3, #15
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	3b01      	subs	r3, #1
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	4926      	ldr	r1, [pc, #152]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	330f      	adds	r3, #15
 800125c:	4602      	mov	r2, r0
 800125e:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8001260:	e03c      	b.n	80012dc <STEPPER_One_Step+0x4ac>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	4920      	ldr	r1, [pc, #128]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	3311      	adds	r3, #17
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d131      	bne.n	80012dc <STEPPER_One_Step+0x4ac>
		gs_STEPPER_info[i].Step_Index++;
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	491b      	ldr	r1, [pc, #108]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	330f      	adds	r3, #15
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	4916      	ldr	r1, [pc, #88]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	330f      	adds	r3, #15
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	4911      	ldr	r1, [pc, #68]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	330f      	adds	r3, #15
 80012b0:	7819      	ldrb	r1, [r3, #0]
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4403      	add	r3, r0
 80012c0:	3310      	adds	r3, #16
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4299      	cmp	r1, r3
 80012c6:	d109      	bne.n	80012dc <STEPPER_One_Step+0x4ac>
			gs_STEPPER_info[i].Step_Index = 0;
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4907      	ldr	r1, [pc, #28]	; (80012e8 <STEPPER_One_Step+0x4b8>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	330f      	adds	r3, #15
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	08007ab8 	.word	0x08007ab8
 80012e8:	200000cc 	.word	0x200000cc
 80012ec:	20000020 	.word	0x20000020

080012f0 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	4910      	ldr	r1, [pc, #64]	; (8001344 <STEPPER_Step_NonBlocking+0x54>)
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4419      	add	r1, r3
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <STEPPER_Step_NonBlocking+0x54>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4403      	add	r3, r0
 8001322:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4907      	ldr	r1, [pc, #28]	; (8001344 <STEPPER_Step_NonBlocking+0x54>)
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3311      	adds	r3, #17
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	701a      	strb	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200000cc 	.word	0x200000cc

08001348 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a34      	ldr	r2, [pc, #208]	; (800142c <STEPPER_TMR_OVF_ISR+0xe4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d162      	bne.n	8001424 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e05c      	b.n	800141e <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	4932      	ldr	r1, [pc, #200]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	3304      	adds	r3, #4
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	482d      	ldr	r0, [pc, #180]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4403      	add	r3, r0
 8001384:	3308      	adds	r3, #8
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4299      	cmp	r1, r3
 800138a:	d333      	bcc.n	80013f4 <STEPPER_TMR_OVF_ISR+0xac>
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	4928      	ldr	r1, [pc, #160]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	330e      	adds	r3, #14
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d028      	beq.n	80013f4 <STEPPER_TMR_OVF_ISR+0xac>
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	4922      	ldr	r1, [pc, #136]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01e      	beq.n	80013f4 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fd39 	bl	8000e30 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	491b      	ldr	r1, [pc, #108]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1e59      	subs	r1, r3, #1
 80013d0:	4817      	ldr	r0, [pc, #92]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	4913      	ldr	r1, [pc, #76]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3304      	adds	r3, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e011      	b.n	8001418 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	490e      	ldr	r1, [pc, #56]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1c59      	adds	r1, r3, #1
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <STEPPER_TMR_OVF_ISR+0xe8>)
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4403      	add	r3, r0
 8001414:	3304      	adds	r3, #4
 8001416:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d09f      	beq.n	8001364 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40000800 	.word	0x40000800
 8001430:	200000cc 	.word	0x200000cc

08001434 <bt_release_callback>:
#include "button.h"

// ----------------- FUNCTION ---------------
__weak void bt_press_callback(Button_t *button) {
}
__weak void bt_release_callback(Button_t *button) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <bt_press_timout_callback>:
__weak void bt_press_timout_callback(Button_t *button) {
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <bt_handle>:
void bt_handle(Button_t *button) {	// GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(button->PORT, button->PIN);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	889b      	ldrh	r3, [r3, #4]
 8001468:	4619      	mov	r1, r3
 800146a:	4610      	mov	r0, r2
 800146c:	f002 fe72 	bl	8004154 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	73fb      	strb	r3, [r7, #15]
	if (state != button->btn_filter) {		/// loc nhieu nut nhan
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	429a      	cmp	r2, r3
 800147c:	d007      	beq.n	800148e <bt_handle+0x36>
		button->btn_filter = state;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	719a      	strb	r2, [r3, #6]
		button->t_debounce = HAL_GetTick();
 8001484:	f001 fc8a 	bl	8002d9c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60da      	str	r2, [r3, #12]
	}
	if (HAL_GetTick() - button->t_debounce >= 15) {		/// het khoang thoi gian nhieu
 800148e:	f001 fc85 	bl	8002d9c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b0e      	cmp	r3, #14
 800149c:	d91f      	bls.n	80014de <bt_handle+0x86>
		button->btn_current = state;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	721a      	strb	r2, [r3, #8]
		if (button->btn_current != button->btn_last) {			// dang nhan
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a1a      	ldrb	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	79db      	ldrb	r3, [r3, #7]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d016      	beq.n	80014de <bt_handle+0x86>
			if (button->btn_current == 0) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a1b      	ldrb	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <bt_handle+0x78>
				button->time_start_press = HAL_GetTick();
 80014b8:	f001 fc70 	bl	8002d9c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
				button->is_press = 1;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	751a      	strb	r2, [r3, #20]
				bt_press_callback(button);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fc4d 	bl	8001d68 <bt_press_callback>
 80014ce:	e002      	b.n	80014d6 <bt_handle+0x7e>
			} else {
				bt_release_callback(button);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffaf 	bl	8001434 <bt_release_callback>
			}
			button->btn_last = button->btn_current;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7a1a      	ldrb	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	71da      	strb	r2, [r3, #7]
		}
	}
	if (button->is_press && HAL_GetTick() - button->time_start_press >= 3000) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7d1b      	ldrb	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00f      	beq.n	8001506 <bt_handle+0xae>
 80014e6:	f001 fc59 	bl	8002d9c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d905      	bls.n	8001506 <bt_handle+0xae>
		button->is_press = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	751a      	strb	r2, [r3, #20]
		bt_press_timout_callback(button);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffa0 	bl	8001446 <bt_press_timout_callback>
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <Button_Init>:
void Button_Init(Button_t *button, GPIO_TypeDef *PORT, uint16_t PIN) {
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	4613      	mov	r3, r2
 800151a:	80fb      	strh	r3, [r7, #6]
	button->PORT = PORT;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	601a      	str	r2, [r3, #0]
	button->PIN = PIN;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	809a      	strh	r2, [r3, #4]
	button->btn_filter = 1;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	719a      	strb	r2, [r3, #6]
	button->btn_last = 1;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	71da      	strb	r2, [r3, #7]
	button->btn_current = 0;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	721a      	strb	r2, [r3, #8]
	button->t_debounce = 0;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
	button->time_start_press = 0;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
	button->is_press = 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	751a      	strb	r2, [r3, #20]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f023 030f 	bic.w	r3, r3, #15
 8001568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f043 030c 	orr.w	r3, r3, #12
 8001576:	b2db      	uxtb	r3, r3
 8001578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	b2db      	uxtb	r3, r3
 8001582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	f043 030c 	orr.w	r3, r3, #12
 800158a:	b2db      	uxtb	r3, r3
 800158c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	b2db      	uxtb	r3, r3
 8001596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2304      	movs	r3, #4
 80015a2:	214e      	movs	r1, #78	; 0x4e
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <lcd_send_cmd+0x5c>)
 80015a6:	f002 ff49 	bl	800443c <HAL_I2C_Master_Transmit>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001a8 	.word	0x200001a8

080015b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f023 030f 	bic.w	r3, r3, #15
 80015c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f043 030d 	orr.w	r3, r3, #13
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	f043 0309 	orr.w	r3, r3, #9
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	f043 030d 	orr.w	r3, r3, #13
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	f043 0309 	orr.w	r3, r3, #9
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015f8:	f107 0208 	add.w	r2, r7, #8
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2304      	movs	r3, #4
 8001602:	214e      	movs	r1, #78	; 0x4e
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <lcd_send_data+0x5c>)
 8001606:	f002 ff19 	bl	800443c <HAL_I2C_Master_Transmit>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200001a8 	.word	0x200001a8

08001618 <lcd_init>:

void lcd_init (void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800161c:	2033      	movs	r0, #51	; 0x33
 800161e:	f7ff ff9b 	bl	8001558 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001622:	2032      	movs	r0, #50	; 0x32
 8001624:	f7ff ff98 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 8001628:	2032      	movs	r0, #50	; 0x32
 800162a:	f001 fbc1 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800162e:	2028      	movs	r0, #40	; 0x28
 8001630:	f7ff ff92 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 8001634:	2032      	movs	r0, #50	; 0x32
 8001636:	f001 fbbb 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff ff8c 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f001 fbb5 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001646:	2006      	movs	r0, #6
 8001648:	f7ff ff86 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 800164c:	2032      	movs	r0, #50	; 0x32
 800164e:	f001 fbaf 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001652:	200c      	movs	r0, #12
 8001654:	f7ff ff80 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 8001658:	2032      	movs	r0, #50	; 0x32
 800165a:	f001 fba9 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800165e:	2002      	movs	r0, #2
 8001660:	f7ff ff7a 	bl	8001558 <lcd_send_cmd>
	HAL_Delay(50);
 8001664:	2032      	movs	r0, #50	; 0x32
 8001666:	f001 fba3 	bl	8002db0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800166a:	2080      	movs	r0, #128	; 0x80
 800166c:	f7ff ff74 	bl	8001558 <lcd_send_cmd>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800167c:	e006      	b.n	800168c <lcd_send_string+0x18>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff96 	bl	80015b8 <lcd_send_data>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f4      	bne.n	800167e <lcd_send_string+0xa>
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff ff58 	bl	8001558 <lcd_send_cmd>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	337f      	adds	r3, #127	; 0x7f
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e008      	b.n	80016e0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3340      	adds	r3, #64	; 0x40
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff38 	bl	8001558 <lcd_send_cmd>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_TIM_PeriodElapsedCallback>:
#define DataSize 32
uint8_t buffer[DataSize];
uint8_t indexx = 0;
uint8_t flag = 0;
uint32_t value_Adc[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe25 	bl	8001348 <STEPPER_TMR_OVF_ISR>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	1a8a      	subs	r2, r1, r2
 8001720:	fb02 f203 	mul.w	r2, r2, r3
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1acb      	subs	r3, r1, r3
 800172a:	fb92 f2f3 	sdiv	r2, r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	4413      	add	r3, r2
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_UARTEx_RxEventCallback+0x24>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, buffer, DataSize);
 800174e:	2220      	movs	r2, #32
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <HAL_UARTEx_RxEventCallback+0x28>)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001754:	f004 ff01 	bl	800655a <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200000e8 	.word	0x200000e8
 8001764:	200002a4 	.word	0x200002a4
 8001768:	2000025c 	.word	0x2000025c

0800176c <microDelay>:

void microDelay(uint16_t delay) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <microDelay+0x2c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800177e:	bf00      	nop
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <microDelay+0x2c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3f9      	bcc.n	8001780 <microDelay+0x14>
		;
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000328 	.word	0x20000328

0800179c <Filter>:

uint16_t Filter(uint16_t m) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
	static uint16_t flag_first = 0, _buff[10], sum;
	const uint16_t _buff_max = 10;
 80017a6:	230a      	movs	r3, #10
 80017a8:	817b      	strh	r3, [r7, #10]
	int i;

	if (flag_first == 0) {
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <Filter+0xd8>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d120      	bne.n	80017f4 <Filter+0x58>
		flag_first = 1;
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <Filter+0xd8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	801a      	strh	r2, [r3, #0]
		for (i = 0, sum = 0; i < _buff_max; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <Filter+0xdc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	e011      	b.n	80017e8 <Filter+0x4c>
			_buff[i] = m;
 80017c4:	492d      	ldr	r1, [pc, #180]	; (800187c <Filter+0xe0>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			sum += _buff[i];
 80017ce:	4a2b      	ldr	r2, [pc, #172]	; (800187c <Filter+0xe0>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <Filter+0xdc>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <Filter+0xdc>)
 80017e0:	801a      	strh	r2, [r3, #0]
		for (i = 0, sum = 0; i < _buff_max; i++) {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	897b      	ldrh	r3, [r7, #10]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbe9      	blt.n	80017c4 <Filter+0x28>
		}
		return m;
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	e03a      	b.n	800186a <Filter+0xce>
	} else {
		sum -= _buff[0];
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <Filter+0xdc>)
 80017f6:	881a      	ldrh	r2, [r3, #0]
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <Filter+0xe0>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <Filter+0xdc>)
 8001802:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < (_buff_max - 1); i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e00b      	b.n	8001822 <Filter+0x86>
			_buff[i] = _buff[i + 1];
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <Filter+0xe0>)
 8001810:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <Filter+0xe0>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < (_buff_max - 1); i++) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	3b01      	subs	r3, #1
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbee      	blt.n	800180a <Filter+0x6e>
		}
		_buff[9] = m;
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <Filter+0xe0>)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	8253      	strh	r3, [r2, #18]
		sum += _buff[9];
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <Filter+0xe0>)
 8001834:	8a5a      	ldrh	r2, [r3, #18]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <Filter+0xdc>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <Filter+0xdc>)
 8001840:	801a      	strh	r2, [r3, #0]

		i = sum / 10.0;
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <Filter+0xdc>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fde6 	bl	8000418 <__aeabi_i2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <Filter+0xe4>)
 8001852:	f7fe ff75 	bl	8000740 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f857 	bl	8000910 <__aeabi_d2iz>
 8001862:	4603      	mov	r3, r0
 8001864:	60fb      	str	r3, [r7, #12]
		return i;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	b29b      	uxth	r3, r3
	}
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000fc 	.word	0x200000fc
 8001878:	200000fe 	.word	0x200000fe
 800187c:	20000100 	.word	0x20000100
 8001880:	40240000 	.word	0x40240000
 8001884:	00000000 	.word	0x00000000

08001888 <value_Gp2y10>:
// ------------------ MQ135 ----------------------

uint32_t value_MQ, value_MQs;
float voltage;
#define SharpGP2Y10_SAMPLINGTIME 280
uint16_t value_Gp2y10(uint16_t value) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	uint16_t value_Dust;
	value = Filter(value);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff81 	bl	800179c <Filter>
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	voltage = (3300 / 4096.0) * value * 11;
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdb9 	bl	8000418 <__aeabi_i2d>
 80018a6:	a31c      	add	r3, pc, #112	; (adr r3, 8001918 <value_Gp2y10+0x90>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe1e 	bl	80004ec <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <value_Gp2y10+0xa8>)
 80018be:	f7fe fe15 	bl	80004ec <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f869 	bl	80009a0 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a18      	ldr	r2, [pc, #96]	; (8001934 <value_Gp2y10+0xac>)
 80018d2:	6013      	str	r3, [r2, #0]
	value_Dust = 0.17 * voltage - 0.1;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <value_Gp2y10+0xac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fdaf 	bl	800043c <__aeabi_f2d>
 80018de:	a310      	add	r3, pc, #64	; (adr r3, 8001920 <value_Gp2y10+0x98>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe02 	bl	80004ec <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001928 <value_Gp2y10+0xa0>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fc41 	bl	800017c <__aeabi_dsub>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f82d 	bl	8000960 <__aeabi_d2uiz>
 8001906:	4603      	mov	r3, r0
 8001908:	81fb      	strh	r3, [r7, #14]
	return value_Dust;
 800190a:	89fb      	ldrh	r3, [r7, #14]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f3af 8000 	nop.w
 8001918:	00000000 	.word	0x00000000
 800191c:	3fe9c800 	.word	0x3fe9c800
 8001920:	5c28f5c3 	.word	0x5c28f5c3
 8001924:	3fc5c28f 	.word	0x3fc5c28f
 8001928:	9999999a 	.word	0x9999999a
 800192c:	3fb99999 	.word	0x3fb99999
 8001930:	40260000 	.word	0x40260000
 8001934:	20000224 	.word	0x20000224

08001938 <get_PPM>:
uint16_t count = 0;
int co2raw = 0;                               //int for raw value of co2
int co2comp = 0;                              //int for compensated co2
int co2ppm = 0;
uint32_t co2now;
uint16_t get_PPM(uint16_t value_mq) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	if (count == 10) {
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <get_PPM+0x94>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d12d      	bne.n	80019a6 <get_PPM+0x6e>
		count = 0;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <get_PPM+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
		co2raw = co2now / 10.0;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <get_PPM+0x98>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fd4f 	bl	80003f8 <__aeabi_ui2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <get_PPM+0x9c>)
 8001960:	f7fe feee 	bl	8000740 <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f7fe ffd0 	bl	8000910 <__aeabi_d2iz>
 8001970:	4603      	mov	r3, r0
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <get_PPM+0xa0>)
 8001974:	6013      	str	r3, [r2, #0]
		co2comp = co2raw - co2Zero;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <get_PPM+0xa0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3b37      	subs	r3, #55	; 0x37
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <get_PPM+0xa4>)
 800197e:	6013      	str	r3, [r2, #0]
		co2ppm = map(co2comp, 0, 4096, 400, 5000);
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <get_PPM+0xa4>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f241 3388 	movw	r3, #5000	; 0x1388
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800198e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001992:	2100      	movs	r1, #0
 8001994:	f7ff feb7 	bl	8001706 <map>
 8001998:	4603      	mov	r3, r0
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <get_PPM+0xa8>)
 800199c:	6013      	str	r3, [r2, #0]
		co2now = 0;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <get_PPM+0x98>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e00b      	b.n	80019be <get_PPM+0x86>
	} else {
		co2now += value_mq;
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <get_PPM+0x98>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <get_PPM+0x98>)
 80019b0:	6013      	str	r3, [r2, #0]
		count++;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <get_PPM+0x94>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <get_PPM+0x94>)
 80019bc:	801a      	strh	r2, [r3, #0]
	}
	return co2ppm;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <get_PPM+0xa8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000ea 	.word	0x200000ea
 80019d0:	200003b4 	.word	0x200003b4
 80019d4:	40240000 	.word	0x40240000
 80019d8:	200000ec 	.word	0x200000ec
 80019dc:	200000f0 	.word	0x200000f0
 80019e0:	200000f4 	.word	0x200000f4

080019e4 <control>:
uint8_t ngu = 0;
uint8_t tam = 0;
uint8_t hanhlang = 0;
uint8_t tt_rem;
uint8_t tt_manual;
void control() {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	if (strcmp((char*) buffer, "MOKHACH\r\n") == 0) {
 80019e8:	494d      	ldr	r1, [pc, #308]	; (8001b20 <control+0x13c>)
 80019ea:	484e      	ldr	r0, [pc, #312]	; (8001b24 <control+0x140>)
 80019ec:	f7fe fbb0 	bl	8000150 <strcmp>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <control+0x1a>
		khach = 1;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <control+0x144>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
	} else if (strcmp((char*) buffer, "MANUAL\r\n") == 0) {
		tt_manual = 1;
	} else if (strcmp((char*) buffer, "AUTO\r\n") == 0) {
		tt_manual = 0;
	}
}
 80019fc:	e08d      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "ROKHACH\r\n") == 0) {
 80019fe:	494b      	ldr	r1, [pc, #300]	; (8001b2c <control+0x148>)
 8001a00:	4848      	ldr	r0, [pc, #288]	; (8001b24 <control+0x140>)
 8001a02:	f7fe fba5 	bl	8000150 <strcmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <control+0x30>
		khach = 2;
 8001a0c:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <control+0x144>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	e082      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "OFFKHACH\r\n") == 0) {
 8001a14:	4946      	ldr	r1, [pc, #280]	; (8001b30 <control+0x14c>)
 8001a16:	4843      	ldr	r0, [pc, #268]	; (8001b24 <control+0x140>)
 8001a18:	f7fe fb9a 	bl	8000150 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <control+0x46>
		khach = 3;
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <control+0x144>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	e077      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "MONGU\r\n") == 0) {
 8001a2a:	4942      	ldr	r1, [pc, #264]	; (8001b34 <control+0x150>)
 8001a2c:	483d      	ldr	r0, [pc, #244]	; (8001b24 <control+0x140>)
 8001a2e:	f7fe fb8f 	bl	8000150 <strcmp>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d103      	bne.n	8001a40 <control+0x5c>
		ngu = 1;
 8001a38:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <control+0x154>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
}
 8001a3e:	e06c      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "RONGU\r\n") == 0) {
 8001a40:	493e      	ldr	r1, [pc, #248]	; (8001b3c <control+0x158>)
 8001a42:	4838      	ldr	r0, [pc, #224]	; (8001b24 <control+0x140>)
 8001a44:	f7fe fb84 	bl	8000150 <strcmp>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <control+0x72>
		ngu = 2;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <control+0x154>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	e061      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "OFFNGU\r\n") == 0) {
 8001a56:	493a      	ldr	r1, [pc, #232]	; (8001b40 <control+0x15c>)
 8001a58:	4832      	ldr	r0, [pc, #200]	; (8001b24 <control+0x140>)
 8001a5a:	f7fe fb79 	bl	8000150 <strcmp>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <control+0x88>
		ngu = 3;
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <control+0x154>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	e056      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "ONLANG\r\n") == 0) {
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <control+0x160>)
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <control+0x140>)
 8001a70:	f7fe fb6e 	bl	8000150 <strcmp>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <control+0x9e>
		hanhlang = 1;
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <control+0x164>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	e04b      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "OFFLANG\r\n") == 0) {
 8001a82:	4932      	ldr	r1, [pc, #200]	; (8001b4c <control+0x168>)
 8001a84:	4827      	ldr	r0, [pc, #156]	; (8001b24 <control+0x140>)
 8001a86:	f7fe fb63 	bl	8000150 <strcmp>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <control+0xb4>
		hanhlang = 0;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <control+0x164>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
}
 8001a96:	e040      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "ONTAM\r\n") == 0) {
 8001a98:	492d      	ldr	r1, [pc, #180]	; (8001b50 <control+0x16c>)
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <control+0x140>)
 8001a9c:	f7fe fb58 	bl	8000150 <strcmp>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <control+0xca>
		tam = 1;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <control+0x170>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
}
 8001aac:	e035      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "OFFTAM\r\n") == 0) {
 8001aae:	492a      	ldr	r1, [pc, #168]	; (8001b58 <control+0x174>)
 8001ab0:	481c      	ldr	r0, [pc, #112]	; (8001b24 <control+0x140>)
 8001ab2:	f7fe fb4d 	bl	8000150 <strcmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <control+0xe0>
		tam = 0;
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <control+0x170>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	e02a      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "ONREM\r\n") == 0) {
 8001ac4:	4925      	ldr	r1, [pc, #148]	; (8001b5c <control+0x178>)
 8001ac6:	4817      	ldr	r0, [pc, #92]	; (8001b24 <control+0x140>)
 8001ac8:	f7fe fb42 	bl	8000150 <strcmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <control+0xf6>
		tt_rem = 1;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <control+0x17c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
}
 8001ad8:	e01f      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "OFFREM\r\n") == 0) {
 8001ada:	4922      	ldr	r1, [pc, #136]	; (8001b64 <control+0x180>)
 8001adc:	4811      	ldr	r0, [pc, #68]	; (8001b24 <control+0x140>)
 8001ade:	f7fe fb37 	bl	8000150 <strcmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <control+0x10c>
		tt_rem = 0;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <control+0x17c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
}
 8001aee:	e014      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "MANUAL\r\n") == 0) {
 8001af0:	491d      	ldr	r1, [pc, #116]	; (8001b68 <control+0x184>)
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <control+0x140>)
 8001af4:	f7fe fb2c 	bl	8000150 <strcmp>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <control+0x122>
		tt_manual = 1;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <control+0x188>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
}
 8001b04:	e009      	b.n	8001b1a <control+0x136>
	} else if (strcmp((char*) buffer, "AUTO\r\n") == 0) {
 8001b06:	491a      	ldr	r1, [pc, #104]	; (8001b70 <control+0x18c>)
 8001b08:	4806      	ldr	r0, [pc, #24]	; (8001b24 <control+0x140>)
 8001b0a:	f7fe fb21 	bl	8000150 <strcmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <control+0x136>
		tt_manual = 0;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <control+0x188>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08007a00 	.word	0x08007a00
 8001b24:	200002a4 	.word	0x200002a4
 8001b28:	200000f8 	.word	0x200000f8
 8001b2c:	08007a0c 	.word	0x08007a0c
 8001b30:	08007a18 	.word	0x08007a18
 8001b34:	08007a24 	.word	0x08007a24
 8001b38:	200000f9 	.word	0x200000f9
 8001b3c:	08007a2c 	.word	0x08007a2c
 8001b40:	08007a34 	.word	0x08007a34
 8001b44:	08007a40 	.word	0x08007a40
 8001b48:	200000fb 	.word	0x200000fb
 8001b4c:	08007a4c 	.word	0x08007a4c
 8001b50:	08007a58 	.word	0x08007a58
 8001b54:	200000fa 	.word	0x200000fa
 8001b58:	08007a60 	.word	0x08007a60
 8001b5c:	08007a6c 	.word	0x08007a6c
 8001b60:	200001a4 	.word	0x200001a4
 8001b64:	08007a74 	.word	0x08007a74
 8001b68:	08007a80 	.word	0x08007a80
 8001b6c:	200002c4 	.word	0x200002c4
 8001b70:	08007a8c 	.word	0x08007a8c

08001b74 <sendData>:
void sendData() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	sprintf((char*) bufferTx, "%ld;%ld;\n", dustDensity, value_MQ);
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <sendData+0x30>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <sendData+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	490a      	ldr	r1, [pc, #40]	; (8001bac <sendData+0x38>)
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <sendData+0x3c>)
 8001b84:	f005 faf6 	bl	8007174 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) bufferTx, strlen((char*) bufferTx),
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <sendData+0x3c>)
 8001b8a:	f7fe faeb 	bl	8000164 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <sendData+0x3c>)
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <sendData+0x40>)
 8001b9a:	f004 fc5b 	bl	8006454 <HAL_UART_Transmit>
			1000);
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000218 	.word	0x20000218
 8001ba8:	2000021c 	.word	0x2000021c
 8001bac:	08007a94 	.word	0x08007a94
 8001bb0:	20000420 	.word	0x20000420
 8001bb4:	2000025c 	.word	0x2000025c

08001bb8 <OnOffLed>:
void OnOffLed(uint8_t k, uint8_t n, uint8_t l, uint8_t t) {
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71bb      	strb	r3, [r7, #6]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	717b      	strb	r3, [r7, #5]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	713b      	strb	r3, [r7, #4]
	switch (k) {
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d020      	beq.n	8001c1e <OnOffLed+0x66>
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	dc2b      	bgt.n	8001c38 <OnOffLed+0x80>
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d002      	beq.n	8001bea <OnOffLed+0x32>
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d00d      	beq.n	8001c04 <OnOffLed+0x4c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		break;
	default:
		break;
 8001be8:	e026      	b.n	8001c38 <OnOffLed+0x80>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001bea:	2201      	movs	r2, #1
 8001bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf0:	4841      	ldr	r0, [pc, #260]	; (8001cf8 <OnOffLed+0x140>)
 8001bf2:	f002 fac6 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfc:	483e      	ldr	r0, [pc, #248]	; (8001cf8 <OnOffLed+0x140>)
 8001bfe:	f002 fac0 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c02:	e01a      	b.n	8001c3a <OnOffLed+0x82>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0a:	483b      	ldr	r0, [pc, #236]	; (8001cf8 <OnOffLed+0x140>)
 8001c0c:	f002 fab9 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c16:	4838      	ldr	r0, [pc, #224]	; (8001cf8 <OnOffLed+0x140>)
 8001c18:	f002 fab3 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c1c:	e00d      	b.n	8001c3a <OnOffLed+0x82>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c24:	4834      	ldr	r0, [pc, #208]	; (8001cf8 <OnOffLed+0x140>)
 8001c26:	f002 faac 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c30:	4831      	ldr	r0, [pc, #196]	; (8001cf8 <OnOffLed+0x140>)
 8001c32:	f002 faa6 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c36:	e000      	b.n	8001c3a <OnOffLed+0x82>
		break;
 8001c38:	bf00      	nop
	}
	switch (n) {
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d020      	beq.n	8001c82 <OnOffLed+0xca>
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	dc2b      	bgt.n	8001c9c <OnOffLed+0xe4>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d002      	beq.n	8001c4e <OnOffLed+0x96>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d00d      	beq.n	8001c68 <OnOffLed+0xb0>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
		break;
	default:
		break;
 8001c4c:	e026      	b.n	8001c9c <OnOffLed+0xe4>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c54:	4829      	ldr	r0, [pc, #164]	; (8001cfc <OnOffLed+0x144>)
 8001c56:	f002 fa94 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c60:	4825      	ldr	r0, [pc, #148]	; (8001cf8 <OnOffLed+0x140>)
 8001c62:	f002 fa8e 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c66:	e01a      	b.n	8001c9e <OnOffLed+0xe6>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <OnOffLed+0x144>)
 8001c70:	f002 fa87 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7a:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <OnOffLed+0x140>)
 8001c7c:	f002 fa81 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c80:	e00d      	b.n	8001c9e <OnOffLed+0xe6>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c88:	481c      	ldr	r0, [pc, #112]	; (8001cfc <OnOffLed+0x144>)
 8001c8a:	f002 fa7a 	bl	8004182 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c94:	4818      	ldr	r0, [pc, #96]	; (8001cf8 <OnOffLed+0x140>)
 8001c96:	f002 fa74 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001c9a:	e000      	b.n	8001c9e <OnOffLed+0xe6>
		break;
 8001c9c:	bf00      	nop
	}
	switch (t) {
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <OnOffLed+0xf2>
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d007      	beq.n	8001cb8 <OnOffLed+0x100>
		break;
	case 1:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
		break;
	default:
		break;
 8001ca8:	e00d      	b.n	8001cc6 <OnOffLed+0x10e>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <OnOffLed+0x148>)
 8001cb2:	f002 fa66 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001cb6:	e006      	b.n	8001cc6 <OnOffLed+0x10e>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <OnOffLed+0x148>)
 8001cc0:	f002 fa5f 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001cc4:	bf00      	nop
	}
	switch (l) {
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <OnOffLed+0x11a>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d007      	beq.n	8001ce0 <OnOffLed+0x128>
		break;
	case 1:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
		break;
	default:
		break;
 8001cd0:	e00d      	b.n	8001cee <OnOffLed+0x136>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd8:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <OnOffLed+0x140>)
 8001cda:	f002 fa52 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001cde:	e006      	b.n	8001cee <OnOffLed+0x136>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <OnOffLed+0x140>)
 8001ce8:	f002 fa4b 	bl	8004182 <HAL_GPIO_WritePin>
		break;
 8001cec:	bf00      	nop
	}
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40010800 	.word	0x40010800

08001d04 <show_lcd>:
uint8_t value1[50], value2[50];
void show_lcd() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8001d08:	f7ff fcc9 	bl	800169e <lcd_clear_display>
	HAL_Delay(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f001 f84f 	bl	8002db0 <HAL_Delay>
	sprintf((char*) value1, "BUI : %d ", dustDensity);
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <show_lcd+0x4c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <show_lcd+0x50>)
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <show_lcd+0x54>)
 8001d1c:	f005 fa2a 	bl	8007174 <siprintf>
	sprintf((char*) value2, "CO2 : %d ", value_MQ);
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <show_lcd+0x58>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	490e      	ldr	r1, [pc, #56]	; (8001d60 <show_lcd+0x5c>)
 8001d28:	480e      	ldr	r0, [pc, #56]	; (8001d64 <show_lcd+0x60>)
 8001d2a:	f005 fa23 	bl	8007174 <siprintf>

	lcd_goto_XY(1, 0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fcbb 	bl	80016ac <lcd_goto_XY>
	lcd_send_string((char*) value1);
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <show_lcd+0x54>)
 8001d38:	f7ff fc9c 	bl	8001674 <lcd_send_string>
	lcd_goto_XY(2, 0);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7ff fcb4 	bl	80016ac <lcd_goto_XY>
	lcd_send_string((char*) value2);
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <show_lcd+0x60>)
 8001d46:	f7ff fc95 	bl	8001674 <lcd_send_string>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000218 	.word	0x20000218
 8001d54:	08007aa0 	.word	0x08007aa0
 8001d58:	20000458 	.word	0x20000458
 8001d5c:	2000021c 	.word	0x2000021c
 8001d60:	08007aac 	.word	0x08007aac
 8001d64:	20000370 	.word	0x20000370

08001d68 <bt_press_callback>:
uint8_t but1, but2, but3, but4, but5;
uint8_t tt_manual;
void bt_press_callback(Button_t *button) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	if (button == &bt1) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <bt_press_callback+0x154>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d125      	bne.n	8001dc4 <bt_press_callback+0x5c>
		if (but1 == 4) {
 8001d78:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <bt_press_callback+0x158>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d102      	bne.n	8001d86 <bt_press_callback+0x1e>
			but1 = 1;
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <bt_press_callback+0x158>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
		}
		switch (but1) {
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <bt_press_callback+0x158>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d00e      	beq.n	8001dac <bt_press_callback+0x44>
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	dc10      	bgt.n	8001db4 <bt_press_callback+0x4c>
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d002      	beq.n	8001d9c <bt_press_callback+0x34>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d004      	beq.n	8001da4 <bt_press_callback+0x3c>
			break;
		case 3:
			khach = 3;
			break;
		default:
			break;
 8001d9a:	e00b      	b.n	8001db4 <bt_press_callback+0x4c>
			khach = 1;
 8001d9c:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <bt_press_callback+0x15c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
			break;
 8001da2:	e008      	b.n	8001db6 <bt_press_callback+0x4e>
			khach = 2;
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <bt_press_callback+0x15c>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
			break;
 8001daa:	e004      	b.n	8001db6 <bt_press_callback+0x4e>
			khach = 3;
 8001dac:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <bt_press_callback+0x15c>)
 8001dae:	2203      	movs	r2, #3
 8001db0:	701a      	strb	r2, [r3, #0]
			break;
 8001db2:	e000      	b.n	8001db6 <bt_press_callback+0x4e>
			break;
 8001db4:	bf00      	nop
		}
		but1++;
 8001db6:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <bt_press_callback+0x158>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <bt_press_callback+0x158>)
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e028      	b.n	8001e16 <bt_press_callback+0xae>
	} else if (button == &bt2) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <bt_press_callback+0x160>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d124      	bne.n	8001e16 <bt_press_callback+0xae>
		if (but2 == 4) {
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <bt_press_callback+0x164>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d102      	bne.n	8001dda <bt_press_callback+0x72>
			but2 = 1;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <bt_press_callback+0x164>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
		}
		switch (but2) {
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <bt_press_callback+0x164>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d00e      	beq.n	8001e00 <bt_press_callback+0x98>
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	dc10      	bgt.n	8001e08 <bt_press_callback+0xa0>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <bt_press_callback+0x88>
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d004      	beq.n	8001df8 <bt_press_callback+0x90>
			break;
		case 3:
			ngu = 3;
			break;
		default:
			break;
 8001dee:	e00b      	b.n	8001e08 <bt_press_callback+0xa0>
			ngu = 1;
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <bt_press_callback+0x168>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
			break;
 8001df6:	e008      	b.n	8001e0a <bt_press_callback+0xa2>
			ngu = 2;
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <bt_press_callback+0x168>)
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	701a      	strb	r2, [r3, #0]
			break;
 8001dfe:	e004      	b.n	8001e0a <bt_press_callback+0xa2>
			ngu = 3;
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <bt_press_callback+0x168>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
			break;
 8001e06:	e000      	b.n	8001e0a <bt_press_callback+0xa2>
			break;
 8001e08:	bf00      	nop
		}
		but2++;
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <bt_press_callback+0x164>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <bt_press_callback+0x164>)
 8001e14:	701a      	strb	r2, [r3, #0]
	}
	if (tt_manual == 1) {
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <bt_press_callback+0x16c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d13b      	bne.n	8001e96 <bt_press_callback+0x12e>
		if (button == &bt3) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <bt_press_callback+0x170>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10b      	bne.n	8001e3e <bt_press_callback+0xd6>
			if (tam == 1) {
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <bt_press_callback+0x174>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d103      	bne.n	8001e36 <bt_press_callback+0xce>
				tam = 0;
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <bt_press_callback+0x174>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
			tt_manual = 0;
		} else {
			tt_manual = 1;
		}
	}
}
 8001e34:	e03e      	b.n	8001eb4 <bt_press_callback+0x14c>
				tam = 1;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <bt_press_callback+0x174>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
}
 8001e3c:	e03a      	b.n	8001eb4 <bt_press_callback+0x14c>
		} else if (button == &bt4) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <bt_press_callback+0x178>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10b      	bne.n	8001e5e <bt_press_callback+0xf6>
			if (hanhlang == 1) {
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <bt_press_callback+0x17c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d103      	bne.n	8001e56 <bt_press_callback+0xee>
				hanhlang = 0;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <bt_press_callback+0x17c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
}
 8001e54:	e02e      	b.n	8001eb4 <bt_press_callback+0x14c>
				hanhlang = 1;
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <bt_press_callback+0x17c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
}
 8001e5c:	e02a      	b.n	8001eb4 <bt_press_callback+0x14c>
		} else if (button == &bt5) {			// REM
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <bt_press_callback+0x180>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d126      	bne.n	8001eb4 <bt_press_callback+0x14c>
			if (tt_rem == 1) {
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <bt_press_callback+0x184>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d109      	bne.n	8001e82 <bt_press_callback+0x11a>
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CW);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fa3b 	bl	80012f0 <STEPPER_Step_NonBlocking>
				tt_rem = 0;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <bt_press_callback+0x184>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	e018      	b.n	8001eb4 <bt_press_callback+0x14c>
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CCW);
 8001e82:	2201      	movs	r2, #1
 8001e84:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff fa31 	bl	80012f0 <STEPPER_Step_NonBlocking>
				tt_rem = 1;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <bt_press_callback+0x184>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	e00e      	b.n	8001eb4 <bt_press_callback+0x14c>
	} else if (button == &bt6) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <bt_press_callback+0x188>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <bt_press_callback+0x14c>
		if (tt_manual == 1) {
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <bt_press_callback+0x16c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <bt_press_callback+0x146>
			tt_manual = 0;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <bt_press_callback+0x16c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
}
 8001eac:	e002      	b.n	8001eb4 <bt_press_callback+0x14c>
			tt_manual = 1;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <bt_press_callback+0x16c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000404 	.word	0x20000404
 8001ec0:	200001a5 	.word	0x200001a5
 8001ec4:	200000f8 	.word	0x200000f8
 8001ec8:	2000012c 	.word	0x2000012c
 8001ecc:	200001fd 	.word	0x200001fd
 8001ed0:	200000f9 	.word	0x200000f9
 8001ed4:	200002c4 	.word	0x200002c4
 8001ed8:	20000144 	.word	0x20000144
 8001edc:	200000fa 	.word	0x200000fa
 8001ee0:	20000440 	.word	0x20000440
 8001ee4:	200000fb 	.word	0x200000fb
 8001ee8:	20000200 	.word	0x20000200
 8001eec:	200001a4 	.word	0x200001a4
 8001ef0:	20000310 	.word	0x20000310

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f000 fef8 	bl	8002cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f9ae 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f000 fbf2 	bl	80026e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f000 fbd2 	bl	80026ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f08:	f000 fba6 	bl	8002658 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001f0c:	f000 fa02 	bl	8002314 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001f10:	f000 fade 	bl	80024d0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f14:	f000 fa8c 	bl	8002430 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001f18:	f000 fa5c 	bl	80023d4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001f1c:	f000 fb4e 	bl	80025bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	Button_Init(&bt1, BT1_GPIO_Port, BT1_Pin);
 8001f20:	2210      	movs	r2, #16
 8001f22:	49ac      	ldr	r1, [pc, #688]	; (80021d4 <main+0x2e0>)
 8001f24:	48ac      	ldr	r0, [pc, #688]	; (80021d8 <main+0x2e4>)
 8001f26:	f7ff faf2 	bl	800150e <Button_Init>
	Button_Init(&bt2, BT2_GPIO_Port, BT2_Pin);
 8001f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2e:	49a9      	ldr	r1, [pc, #676]	; (80021d4 <main+0x2e0>)
 8001f30:	48aa      	ldr	r0, [pc, #680]	; (80021dc <main+0x2e8>)
 8001f32:	f7ff faec 	bl	800150e <Button_Init>
	Button_Init(&bt3, BT3_GPIO_Port, BT3_Pin);
 8001f36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f3a:	49a9      	ldr	r1, [pc, #676]	; (80021e0 <main+0x2ec>)
 8001f3c:	48a9      	ldr	r0, [pc, #676]	; (80021e4 <main+0x2f0>)
 8001f3e:	f7ff fae6 	bl	800150e <Button_Init>
	Button_Init(&bt4, BT4_GPIO_Port, BT4_Pin);
 8001f42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f46:	49a6      	ldr	r1, [pc, #664]	; (80021e0 <main+0x2ec>)
 8001f48:	48a7      	ldr	r0, [pc, #668]	; (80021e8 <main+0x2f4>)
 8001f4a:	f7ff fae0 	bl	800150e <Button_Init>
	Button_Init(&bt5, BT5_GPIO_Port, BT5_Pin);
 8001f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f52:	49a3      	ldr	r1, [pc, #652]	; (80021e0 <main+0x2ec>)
 8001f54:	48a5      	ldr	r0, [pc, #660]	; (80021ec <main+0x2f8>)
 8001f56:	f7ff fada 	bl	800150e <Button_Init>
	Button_Init(&bt6, BT6_GPIO_Port, BT6_Pin);
 8001f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5e:	499d      	ldr	r1, [pc, #628]	; (80021d4 <main+0x2e0>)
 8001f60:	48a3      	ldr	r0, [pc, #652]	; (80021f0 <main+0x2fc>)
 8001f62:	f7ff fad4 	bl	800150e <Button_Init>
	STEPPERS_Init_TMR(&htim4);
 8001f66:	48a3      	ldr	r0, [pc, #652]	; (80021f4 <main+0x300>)
 8001f68:	f7fe feb8 	bl	8000cdc <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 20);
 8001f6c:	2114      	movs	r1, #20
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7fe fefe 	bl	8000d70 <STEPPER_SetSpeed>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, buffer, DataSize);
 8001f74:	2220      	movs	r2, #32
 8001f76:	49a0      	ldr	r1, [pc, #640]	; (80021f8 <main+0x304>)
 8001f78:	48a0      	ldr	r0, [pc, #640]	; (80021fc <main+0x308>)
 8001f7a:	f004 faee 	bl	800655a <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001f7e:	48a0      	ldr	r0, [pc, #640]	; (8002200 <main+0x30c>)
 8001f80:	f001 fb06 	bl	8003590 <HAL_ADCEx_Calibration_Start>

	HAL_TIM_Base_Start(&htim1);
 8001f84:	489f      	ldr	r0, [pc, #636]	; (8002204 <main+0x310>)
 8001f86:	f003 fb7b 	bl	8005680 <HAL_TIM_Base_Start>
	lcd_init();
 8001f8a:	f7ff fb45 	bl	8001618 <lcd_init>
	t_prev = HAL_GetTick();
 8001f8e:	f000 ff05 	bl	8002d9c <HAL_GetTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	499b      	ldr	r1, [pc, #620]	; (8002208 <main+0x314>)
 8001f9c:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		bt_handle(&bt1);
 8001fa0:	488d      	ldr	r0, [pc, #564]	; (80021d8 <main+0x2e4>)
 8001fa2:	f7ff fa59 	bl	8001458 <bt_handle>
		bt_handle(&bt2);
 8001fa6:	488d      	ldr	r0, [pc, #564]	; (80021dc <main+0x2e8>)
 8001fa8:	f7ff fa56 	bl	8001458 <bt_handle>
		bt_handle(&bt3);
 8001fac:	488d      	ldr	r0, [pc, #564]	; (80021e4 <main+0x2f0>)
 8001fae:	f7ff fa53 	bl	8001458 <bt_handle>
		bt_handle(&bt4);
 8001fb2:	488d      	ldr	r0, [pc, #564]	; (80021e8 <main+0x2f4>)
 8001fb4:	f7ff fa50 	bl	8001458 <bt_handle>
		bt_handle(&bt5);
 8001fb8:	488c      	ldr	r0, [pc, #560]	; (80021ec <main+0x2f8>)
 8001fba:	f7ff fa4d 	bl	8001458 <bt_handle>
		bt_handle(&bt6);
 8001fbe:	488c      	ldr	r0, [pc, #560]	; (80021f0 <main+0x2fc>)
 8001fc0:	f7ff fa4a 	bl	8001458 <bt_handle>
		s1 = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	4883      	ldr	r0, [pc, #524]	; (80021d4 <main+0x2e0>)
 8001fc8:	f002 f8c4 	bl	8004154 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b8e      	ldr	r3, [pc, #568]	; (800220c <main+0x318>)
 8001fd2:	701a      	strb	r2, [r3, #0]
		s2 = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 8001fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd8:	487e      	ldr	r0, [pc, #504]	; (80021d4 <main+0x2e0>)
 8001fda:	f002 f8bb 	bl	8004154 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <main+0x31c>)
 8001fe4:	701a      	strb	r2, [r3, #0]
		s3 = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8001fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fea:	487d      	ldr	r0, [pc, #500]	; (80021e0 <main+0x2ec>)
 8001fec:	f002 f8b2 	bl	8004154 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b87      	ldr	r3, [pc, #540]	; (8002214 <main+0x320>)
 8001ff6:	701a      	strb	r2, [r3, #0]
		s4 = HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin);
 8001ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffc:	4878      	ldr	r0, [pc, #480]	; (80021e0 <main+0x2ec>)
 8001ffe:	f002 f8a9 	bl	8004154 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b84      	ldr	r3, [pc, #528]	; (8002218 <main+0x324>)
 8002008:	701a      	strb	r2, [r3, #0]
		s5 = HAL_GPIO_ReadPin(BT5_GPIO_Port, BT5_Pin);
 800200a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200e:	4874      	ldr	r0, [pc, #464]	; (80021e0 <main+0x2ec>)
 8002010:	f002 f8a0 	bl	8004154 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <main+0x328>)
 800201a:	701a      	strb	r2, [r3, #0]
		s6 = HAL_GPIO_ReadPin(BT6_GPIO_Port, BT6_Pin);
 800201c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002020:	486c      	ldr	r0, [pc, #432]	; (80021d4 <main+0x2e0>)
 8002022:	f002 f897 	bl	8004154 <HAL_GPIO_ReadPin>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <main+0x32c>)
 800202c:	701a      	strb	r2, [r3, #0]
		if (flag == 1) {				// check Rx
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <main+0x330>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d128      	bne.n	8002088 <main+0x194>
			control();
 8002036:	f7ff fcd5 	bl	80019e4 <control>
			if (tt_manual == 1) {
 800203a:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <main+0x334>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d116      	bne.n	8002070 <main+0x17c>
				if (tt_rem == 1) {
 8002042:	4b7a      	ldr	r3, [pc, #488]	; (800222c <main+0x338>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d109      	bne.n	800205e <main+0x16a>
					STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CW);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff f94d 	bl	80012f0 <STEPPER_Step_NonBlocking>
					tt_rem = 0;
 8002056:	4b75      	ldr	r3, [pc, #468]	; (800222c <main+0x338>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e008      	b.n	8002070 <main+0x17c>
				} else {
					STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CCW);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff f943 	bl	80012f0 <STEPPER_Step_NonBlocking>
					tt_rem = 1;
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <main+0x338>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
				}
			}
			memset(buffer, 0, strlen((char*) buffer));
 8002070:	4861      	ldr	r0, [pc, #388]	; (80021f8 <main+0x304>)
 8002072:	f7fe f877 	bl	8000164 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	485e      	ldr	r0, [pc, #376]	; (80021f8 <main+0x304>)
 800207e:	f005 f871 	bl	8007164 <memset>
			flag = 0;
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <main+0x330>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
		}
		OnOffLed(khach, ngu, hanhlang, tam);
 8002088:	4b69      	ldr	r3, [pc, #420]	; (8002230 <main+0x33c>)
 800208a:	7818      	ldrb	r0, [r3, #0]
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <main+0x340>)
 800208e:	7819      	ldrb	r1, [r3, #0]
 8002090:	4b69      	ldr	r3, [pc, #420]	; (8002238 <main+0x344>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <main+0x348>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f7ff fd8e 	bl	8001bb8 <OnOffLed>
		if (HAL_GetTick() - t_prev >= 300) {
 800209c:	f000 fe7e 	bl	8002d9c <HAL_GetTick>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <main+0x314>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	1a84      	subs	r4, r0, r2
 80020b0:	eb61 0503 	sbc.w	r5, r1, r3
 80020b4:	f240 122b 	movw	r2, #299	; 0x12b
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	42ab      	cmp	r3, r5
 80020be:	bf08      	it	eq
 80020c0:	42a2      	cmpeq	r2, r4
 80020c2:	d231      	bcs.n	8002128 <main+0x234>

			HAL_GPIO_WritePin(LED_BUI_GPIO_Port, LED_BUI_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2120      	movs	r1, #32
 80020c8:	4842      	ldr	r0, [pc, #264]	; (80021d4 <main+0x2e0>)
 80020ca:	f002 f85a 	bl	8004182 <HAL_GPIO_WritePin>
			microDelay(SharpGP2Y10_SAMPLINGTIME);
 80020ce:	f44f 708c 	mov.w	r0, #280	; 0x118
 80020d2:	f7ff fb4b 	bl	800176c <microDelay>
			HAL_ADC_Start_DMA(&hadc1, value_Adc, 3);
 80020d6:	2203      	movs	r2, #3
 80020d8:	4959      	ldr	r1, [pc, #356]	; (8002240 <main+0x34c>)
 80020da:	4849      	ldr	r0, [pc, #292]	; (8002200 <main+0x30c>)
 80020dc:	f000 ff64 	bl	8002fa8 <HAL_ADC_Start_DMA>
			HAL_GPIO_WritePin(LED_BUI_GPIO_Port, LED_BUI_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2120      	movs	r1, #32
 80020e4:	483b      	ldr	r0, [pc, #236]	; (80021d4 <main+0x2e0>)
 80020e6:	f002 f84c 	bl	8004182 <HAL_GPIO_WritePin>

			dustDensity = value_Gp2y10(value_Adc[0]);
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <main+0x34c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fbc9 	bl	8001888 <value_Gp2y10>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b52      	ldr	r3, [pc, #328]	; (8002244 <main+0x350>)
 80020fc:	601a      	str	r2, [r3, #0]
			value_MQ = get_PPM(value_Adc[1]);
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <main+0x34c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fc17 	bl	8001938 <get_PPM>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <main+0x354>)
 8002110:	601a      	str	r2, [r3, #0]

			sendData();		// send data to Hc-05
 8002112:	f7ff fd2f 	bl	8001b74 <sendData>
			t_prev = HAL_GetTick();
 8002116:	f000 fe41 	bl	8002d9c <HAL_GetTick>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	4939      	ldr	r1, [pc, #228]	; (8002208 <main+0x314>)
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (value_MQ != value_MQs) {
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <main+0x354>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b47      	ldr	r3, [pc, #284]	; (800224c <main+0x358>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d009      	beq.n	8002148 <main+0x254>
			value_MQs = value_MQ;
 8002134:	4b44      	ldr	r3, [pc, #272]	; (8002248 <main+0x354>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a44      	ldr	r2, [pc, #272]	; (800224c <main+0x358>)
 800213a:	6013      	str	r3, [r2, #0]
			dustDensitys = dustDensity;
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <main+0x350>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a43      	ldr	r2, [pc, #268]	; (8002250 <main+0x35c>)
 8002142:	6013      	str	r3, [r2, #0]
			show_lcd();
 8002144:	f7ff fdde 	bl	8001d04 <show_lcd>
		}
		if (tt_manual == 0) {
 8002148:	4b37      	ldr	r3, [pc, #220]	; (8002228 <main+0x334>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f af27 	bne.w	8001fa0 <main+0xac>
			cb_vatcan = HAL_GPIO_ReadPin(CD_GPIO_Port, CD_Pin);
 8002152:	2120      	movs	r1, #32
 8002154:	4822      	ldr	r0, [pc, #136]	; (80021e0 <main+0x2ec>)
 8002156:	f001 fffd 	bl	8004154 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <main+0x360>)
 8002160:	701a      	strb	r2, [r3, #0]
			if (cb_vatcan == 0) {
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <main+0x360>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <main+0x27e>
				tam = 1;
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <main+0x348>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e006      	b.n	8002180 <main+0x28c>
			} else if (cb_vatcan == 1) {
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <main+0x360>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <main+0x28c>
				tam = 0;
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <main+0x348>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
			}
			if (value_Adc[2] > 1500) {			// thay doi gia tri anh sang
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <main+0x34c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002188:	4293      	cmp	r3, r2
 800218a:	d911      	bls.n	80021b0 <main+0x2bc>
				hanhlang = 1;
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <main+0x344>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
				if (tt_rem1 == 0) {
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <main+0x364>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f af02 	bne.w	8001fa0 <main+0xac>
					tt_rem1 = 1;
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <main+0x364>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
					STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CW);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff f8a1 	bl	80012f0 <STEPPER_Step_NonBlocking>
 80021ae:	e6f7      	b.n	8001fa0 <main+0xac>
				}
			} else {
				hanhlang = 0;
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <main+0x344>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
				if (tt_rem1 == 1) {
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <main+0x364>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f47f aef0 	bne.w	8001fa0 <main+0xac>
					tt_rem1 = 0;
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <main+0x364>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
					STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 4000, DIR_CCW);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff f88f 	bl	80012f0 <STEPPER_Step_NonBlocking>
		bt_handle(&bt1);
 80021d2:	e6e5      	b.n	8001fa0 <main+0xac>
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	20000404 	.word	0x20000404
 80021dc:	2000012c 	.word	0x2000012c
 80021e0:	40010800 	.word	0x40010800
 80021e4:	20000144 	.word	0x20000144
 80021e8:	20000440 	.word	0x20000440
 80021ec:	20000200 	.word	0x20000200
 80021f0:	20000310 	.word	0x20000310
 80021f4:	2000015c 	.word	0x2000015c
 80021f8:	200002a4 	.word	0x200002a4
 80021fc:	2000025c 	.word	0x2000025c
 8002200:	20000228 	.word	0x20000228
 8002204:	20000328 	.word	0x20000328
 8002208:	200000e0 	.word	0x200000e0
 800220c:	20000220 	.word	0x20000220
 8002210:	200003b1 	.word	0x200003b1
 8002214:	2000041c 	.word	0x2000041c
 8002218:	200002c5 	.word	0x200002c5
 800221c:	200003a2 	.word	0x200003a2
 8002220:	20000125 	.word	0x20000125
 8002224:	200000e8 	.word	0x200000e8
 8002228:	200002c4 	.word	0x200002c4
 800222c:	200001a4 	.word	0x200001a4
 8002230:	200000f8 	.word	0x200000f8
 8002234:	200000f9 	.word	0x200000f9
 8002238:	200000fb 	.word	0x200000fb
 800223c:	200000fa 	.word	0x200000fa
 8002240:	200003a4 	.word	0x200003a4
 8002244:	20000218 	.word	0x20000218
 8002248:	2000021c 	.word	0x2000021c
 800224c:	20000128 	.word	0x20000128
 8002250:	20000120 	.word	0x20000120
 8002254:	200001fc 	.word	0x200001fc
 8002258:	200003b0 	.word	0x200003b0

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	; 0x50
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	2228      	movs	r2, #40	; 0x28
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f004 ff7a 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800228c:	2301      	movs	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229a:	2301      	movs	r3, #1
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fc1a 	bl	8004aec <HAL_RCC_OscConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022be:	f000 fabf 	bl	8002840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fe84 	bl	8004fec <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80022ea:	f000 faa9 	bl	8002840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022ee:	2302      	movs	r3, #2
 80022f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f804 	bl	8005308 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002306:	f000 fa9b 	bl	8002840 <Error_Handler>
  }
}
 800230a:	bf00      	nop
 800230c:	3750      	adds	r7, #80	; 0x50
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <MX_ADC1_Init+0xbc>)
 8002328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <MX_ADC1_Init+0xb8>)
 800232c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002330:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002334:	2200      	movs	r2, #0
 8002336:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <MX_ADC1_Init+0xb8>)
 800233a:	2200      	movs	r2, #0
 800233c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002340:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <MX_ADC1_Init+0xb8>)
 800234e:	2203      	movs	r2, #3
 8002350:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002352:	481e      	ldr	r0, [pc, #120]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002354:	f000 fd50 	bl	8002df8 <HAL_ADC_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800235e:	f000 fa6f 	bl	8002840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002362:	2306      	movs	r3, #6
 8002364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002366:	2301      	movs	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800236a:	2305      	movs	r3, #5
 800236c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002374:	f000 ff12 	bl	800319c <HAL_ADC_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800237e:	f000 fa5f 	bl	8002840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002386:	2302      	movs	r3, #2
 8002388:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800238a:	2306      	movs	r3, #6
 800238c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4619      	mov	r1, r3
 8002392:	480e      	ldr	r0, [pc, #56]	; (80023cc <MX_ADC1_Init+0xb8>)
 8002394:	f000 ff02 	bl	800319c <HAL_ADC_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800239e:	f000 fa4f 	bl	8002840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023a2:	2304      	movs	r3, #4
 80023a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023a6:	2303      	movs	r3, #3
 80023a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80023aa:	2307      	movs	r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <MX_ADC1_Init+0xb8>)
 80023b4:	f000 fef2 	bl	800319c <HAL_ADC_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80023be:	f000 fa3f 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000228 	.word	0x20000228
 80023d0:	40012400 	.word	0x40012400

080023d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_I2C1_Init+0x50>)
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <MX_I2C1_Init+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_I2C1_Init+0x50>)
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_I2C1_Init+0x58>)
 80023e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_I2C1_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_I2C1_Init+0x50>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_I2C1_Init+0x50>)
 80023f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <MX_I2C1_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_I2C1_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MX_I2C1_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_I2C1_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_I2C1_Init+0x50>)
 8002412:	f001 fecf 	bl	80041b4 <HAL_I2C_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800241c:	f000 fa10 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200001a8 	.word	0x200001a8
 8002428:	40005400 	.word	0x40005400
 800242c:	000186a0 	.word	0x000186a0

08002430 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	463b      	mov	r3, r7
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_TIM1_Init+0x98>)
 800244e:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <MX_TIM1_Init+0x9c>)
 8002450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <MX_TIM1_Init+0x98>)
 8002454:	2247      	movs	r2, #71	; 0x47
 8002456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_TIM1_Init+0x98>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_TIM1_Init+0x98>)
 8002460:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_TIM1_Init+0x98>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_TIM1_Init+0x98>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <MX_TIM1_Init+0x98>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002478:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_TIM1_Init+0x98>)
 800247a:	f003 f8b1 	bl	80055e0 <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002484:	f000 f9dc 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4619      	mov	r1, r3
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <MX_TIM1_Init+0x98>)
 8002496:	f003 fbb1 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024a0:	f000 f9ce 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024ac:	463b      	mov	r3, r7
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_TIM1_Init+0x98>)
 80024b2:	f003 ff0f 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024bc:	f000 f9c0 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000328 	.word	0x20000328
 80024cc:	40012c00 	.word	0x40012c00

080024d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <MX_TIM2_Init+0xe8>)
 800250a:	2247      	movs	r2, #71	; 0x47
 800250c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002516:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800251a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <MX_TIM2_Init+0xe8>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002528:	4823      	ldr	r0, [pc, #140]	; (80025b8 <MX_TIM2_Init+0xe8>)
 800252a:	f003 f859 	bl	80055e0 <HAL_TIM_Base_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002534:	f000 f984 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	4619      	mov	r1, r3
 8002544:	481c      	ldr	r0, [pc, #112]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002546:	f003 fb59 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002550:	f000 f976 	bl	8002840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002554:	4818      	ldr	r0, [pc, #96]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002556:	f003 f92f 	bl	80057b8 <HAL_TIM_PWM_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002560:	f000 f96e 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	4619      	mov	r1, r3
 8002572:	4811      	ldr	r0, [pc, #68]	; (80025b8 <MX_TIM2_Init+0xe8>)
 8002574:	f003 feae 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800257e:	f000 f95f 	bl	8002840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002582:	2360      	movs	r3, #96	; 0x60
 8002584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2204      	movs	r2, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4807      	ldr	r0, [pc, #28]	; (80025b8 <MX_TIM2_Init+0xe8>)
 800259a:	f003 fa6d 	bl	8005a78 <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80025a4:	f000 f94c 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <MX_TIM2_Init+0xe8>)
 80025aa:	f000 fa73 	bl	8002a94 <HAL_TIM_MspPostInit>

}
 80025ae:	bf00      	nop
 80025b0:	3738      	adds	r7, #56	; 0x38
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200003b8 	.word	0x200003b8

080025bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	463b      	mov	r3, r7
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_TIM4_Init+0x94>)
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <MX_TIM4_Init+0x98>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MX_TIM4_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM4_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <MX_TIM4_Init+0x94>)
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <MX_TIM4_Init+0x94>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <MX_TIM4_Init+0x94>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <MX_TIM4_Init+0x94>)
 8002600:	f002 ffee 	bl	80055e0 <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800260a:	f000 f919 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <MX_TIM4_Init+0x94>)
 800261c:	f003 faee 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002626:	f000 f90b 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <MX_TIM4_Init+0x94>)
 8002638:	f003 fe4c 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002642:	f000 f8fd 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000015c 	.word	0x2000015c
 8002654:	40000800 	.word	0x40000800

08002658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <MX_USART1_UART_Init+0x50>)
 8002660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002690:	f003 fe90 	bl	80063b4 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800269a:	f000 f8d1 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000025c 	.word	0x2000025c
 80026a8:	40013800 	.word	0x40013800

080026ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_DMA_Init+0x38>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <MX_DMA_Init+0x38>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6153      	str	r3, [r2, #20]
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_DMA_Init+0x38>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	200b      	movs	r0, #11
 80026d0:	f001 f8e3 	bl	800389a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026d4:	200b      	movs	r0, #11
 80026d6:	f001 f8fc 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000

080026e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <MX_GPIO_Init+0x148>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <MX_GPIO_Init+0x148>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b49      	ldr	r3, [pc, #292]	; (8002830 <MX_GPIO_Init+0x148>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002714:	4b46      	ldr	r3, [pc, #280]	; (8002830 <MX_GPIO_Init+0x148>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a45      	ldr	r2, [pc, #276]	; (8002830 <MX_GPIO_Init+0x148>)
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b43      	ldr	r3, [pc, #268]	; (8002830 <MX_GPIO_Init+0x148>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	4b40      	ldr	r3, [pc, #256]	; (8002830 <MX_GPIO_Init+0x148>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a3f      	ldr	r2, [pc, #252]	; (8002830 <MX_GPIO_Init+0x148>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <MX_GPIO_Init+0x148>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <MX_GPIO_Init+0x148>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <MX_GPIO_Init+0x148>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <MX_GPIO_Init+0x148>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002762:	4834      	ldr	r0, [pc, #208]	; (8002834 <MX_GPIO_Init+0x14c>)
 8002764:	f001 fd0d 	bl	8004182 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800276e:	4832      	ldr	r0, [pc, #200]	; (8002838 <MX_GPIO_Init+0x150>)
 8002770:	f001 fd07 	bl	8004182 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN3_Pin|IN2_Pin|IN1_Pin|LED6_Pin
 8002774:	2200      	movs	r2, #0
 8002776:	f649 5123 	movw	r1, #40227	; 0x9d23
 800277a:	4830      	ldr	r0, [pc, #192]	; (800283c <MX_GPIO_Init+0x154>)
 800277c:	f001 fd01 	bl	8004182 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED1_Pin|LED_BUI_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8002780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2302      	movs	r3, #2
 8002790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4619      	mov	r1, r3
 8002798:	4826      	ldr	r0, [pc, #152]	; (8002834 <MX_GPIO_Init+0x14c>)
 800279a:	f001 fb57 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 800279e:	2320      	movs	r3, #32
 80027a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4619      	mov	r1, r3
 80027b0:	4821      	ldr	r0, [pc, #132]	; (8002838 <MX_GPIO_Init+0x150>)
 80027b2:	f001 fb4b 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|LED5_Pin;
 80027b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	481a      	ldr	r0, [pc, #104]	; (8002838 <MX_GPIO_Init+0x150>)
 80027d0:	f001 fb3c 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN2_Pin IN1_Pin LED6_Pin
                           LED4_Pin LED1_Pin LED_BUI_Pin LED2_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN2_Pin|IN1_Pin|LED6_Pin
 80027d4:	f649 5323 	movw	r3, #40227	; 0x9d23
 80027d8:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED1_Pin|LED_BUI_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	4813      	ldr	r0, [pc, #76]	; (800283c <MX_GPIO_Init+0x154>)
 80027ee:	f001 fb2d 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT6_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT6_Pin|BT1_Pin|BT2_Pin;
 80027f2:	f244 2310 	movw	r3, #16912	; 0x4210
 80027f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_GPIO_Init+0x154>)
 8002808:	f001 fb20 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT5_Pin BT4_Pin BT3_Pin */
  GPIO_InitStruct.Pin = BT5_Pin|BT4_Pin|BT3_Pin;
 800280c:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8002810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_GPIO_Init+0x150>)
 8002822:	f001 fb13 	bl	8003e4c <HAL_GPIO_Init>

}
 8002826:	bf00      	nop
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	40011000 	.word	0x40011000
 8002838:	40010800 	.word	0x40010800
 800283c:	40010c00 	.word	0x40010c00

08002840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002848:	e7fe      	b.n	8002848 <Error_Handler+0x8>
	...

0800284c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_MspInit+0x5c>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_MspInit+0x5c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6193      	str	r3, [r2, #24]
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_MspInit+0x5c>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_MspInit+0x5c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_MspInit+0x5c>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_MspInit+0x60>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_MspInit+0x60>)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000

080028b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_ADC_MspInit+0xbc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d149      	bne.n	8002964 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = MQ_Pin|GPIO_PIN_4|GPIO_PIN_6;
 8002900:	2351      	movs	r3, #81	; 0x51
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002904:	2303      	movs	r3, #3
 8002906:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4819      	ldr	r0, [pc, #100]	; (8002974 <HAL_ADC_MspInit+0xc4>)
 8002910:	f001 fa9c 	bl	8003e4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002916:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_ADC_MspInit+0xcc>)
 8002918:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002932:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800293e:	2220      	movs	r2, #32
 8002940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800294a:	f000 ffdd 	bl	8003908 <HAL_DMA_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002954:	f7ff ff74 	bl	8002840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	4a06      	ldr	r2, [pc, #24]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40012400 	.word	0x40012400
 8002970:	40021000 	.word	0x40021000
 8002974:	40010800 	.word	0x40010800
 8002978:	200002c8 	.word	0x200002c8
 800297c:	40020008 	.word	0x40020008

08002980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_I2C_MspInit+0x70>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029b8:	23c0      	movs	r3, #192	; 0xc0
 80029ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029bc:	2312      	movs	r3, #18
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4619      	mov	r1, r3
 80029ca:	480b      	ldr	r0, [pc, #44]	; (80029f8 <HAL_I2C_MspInit+0x78>)
 80029cc:	f001 fa3e 	bl	8003e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029da:	61d3      	str	r3, [r2, #28]
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_I2C_MspInit+0x74>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40005400 	.word	0x40005400
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010c00 	.word	0x40010c00

080029fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_TIM_Base_MspInit+0x8c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a18:	6193      	str	r3, [r2, #24]
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a26:	e02a      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d10c      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
}
 8002a4a:	e018      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_TIM_Base_MspInit+0x94>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_Base_MspInit+0x90>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201e      	movs	r0, #30
 8002a74:	f000 ff11 	bl	800389a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a78:	201e      	movs	r0, #30
 8002a7a:	f000 ff2a 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d117      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6193      	str	r3, [r2, #24]
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002acc:	2302      	movs	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4619      	mov	r1, r3
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <HAL_TIM_MspPostInit+0x5c>)
 8002ae0:	f001 f9b4 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010800 	.word	0x40010800

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_UART_MspInit+0x9c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d139      	bne.n	8002b88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_UART_MspInit+0xa0>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4619      	mov	r1, r3
 8002b58:	480f      	ldr	r0, [pc, #60]	; (8002b98 <HAL_UART_MspInit+0xa4>)
 8002b5a:	f001 f977 	bl	8003e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4619      	mov	r1, r3
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <HAL_UART_MspInit+0xa4>)
 8002b74:	f001 f96a 	bl	8003e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2025      	movs	r0, #37	; 0x25
 8002b7e:	f000 fe8c 	bl	800389a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b82:	2025      	movs	r0, #37	; 0x25
 8002b84:	f000 fea5 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010800 	.word	0x40010800

08002b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <NMI_Handler+0x4>

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <MemManage_Handler+0x4>

08002bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <BusFault_Handler+0x4>

08002bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <UsageFault_Handler+0x4>

08002bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be2:	f000 f8c9 	bl	8002d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Channel1_IRQHandler+0x10>)
 8002bf2:	f000 fff7 	bl	8003be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200002c8 	.word	0x200002c8

08002c00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <TIM4_IRQHandler+0x10>)
 8002c06:	f002 fe2f 	bl	8005868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000015c 	.word	0x2000015c

08002c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <USART1_IRQHandler+0x10>)
 8002c1a:	f003 fcfb 	bl	8006614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000025c 	.word	0x2000025c

08002c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <_sbrk+0x5c>)
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <_sbrk+0x60>)
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <_sbrk+0x64>)
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <_sbrk+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d207      	bcs.n	8002c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c58:	f004 fa5a 	bl	8007110 <__errno>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	220c      	movs	r2, #12
 8002c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	e009      	b.n	8002c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <_sbrk+0x64>)
 8002c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20005000 	.word	0x20005000
 8002c88:	00000400 	.word	0x00000400
 8002c8c:	20000114 	.word	0x20000114
 8002c90:	200004a0 	.word	0x200004a0

08002c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff fff8 	bl	8002c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ca6:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ca8:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cbc:	4c09      	ldr	r4, [pc, #36]	; (8002ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f004 fa27 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cce:	f7ff f911 	bl	8001ef4 <main>
  bx lr
 8002cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002cdc:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 8002ce0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002ce4:	200004a0 	.word	0x200004a0

08002ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC1_2_IRQHandler>
	...

08002cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_Init+0x28>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_Init+0x28>)
 8002cf6:	f043 0310 	orr.w	r3, r3, #16
 8002cfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cfc:	2003      	movs	r0, #3
 8002cfe:	f000 fdc1 	bl	8003884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f000 f808 	bl	8002d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d08:	f7ff fda0 	bl	800284c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40022000 	.word	0x40022000

08002d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_InitTick+0x54>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_InitTick+0x58>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fdd9 	bl	80038ee <HAL_SYSTICK_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00e      	b.n	8002d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d80a      	bhi.n	8002d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f000 fda1 	bl	800389a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_InitTick+0x5c>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000040 	.word	0x20000040
 8002d70:	20000048 	.word	0x20000048
 8002d74:	20000044 	.word	0x20000044

08002d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_IncTick+0x1c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x20>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <HAL_IncTick+0x20>)
 8002d8a:	6013      	str	r3, [r2, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000048 	.word	0x20000048
 8002d98:	2000048c 	.word	0x2000048c

08002d9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <HAL_GetTick+0x10>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	2000048c 	.word	0x2000048c

08002db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d005      	beq.n	8002dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_Delay+0x44>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd6:	bf00      	nop
 8002dd8:	f7ff ffe0 	bl	8002d9c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d8f7      	bhi.n	8002dd8 <HAL_Delay+0x28>
  {
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000048 	.word	0x20000048

08002df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0be      	b.n	8002f98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fd3a 	bl	80028b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 faff 	bl	8003440 <ADC_ConversionStop_Disable>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 8099 	bne.w	8002f86 <HAL_ADC_Init+0x18e>
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8095 	bne.w	8002f86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e64:	f023 0302 	bic.w	r3, r3, #2
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7b1b      	ldrb	r3, [r3, #12]
 8002e7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e90:	d003      	beq.n	8002e9a <HAL_ADC_Init+0xa2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d102      	bne.n	8002ea0 <HAL_ADC_Init+0xa8>
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADC_Init+0xaa>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7d1b      	ldrb	r3, [r3, #20]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d119      	bne.n	8002ee4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7b1b      	ldrb	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	035a      	lsls	r2, r3, #13
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e00b      	b.n	8002ee4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_ADC_Init+0x1a8>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f14:	d003      	beq.n	8002f1e <HAL_ADC_Init+0x126>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d104      	bne.n	8002f28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	051b      	lsls	r3, r3, #20
 8002f26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_ADC_Init+0x1ac>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d10b      	bne.n	8002f64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f62:	e018      	b.n	8002f96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f023 0312 	bic.w	r3, r3, #18
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f84:	e007      	b.n	8002f96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	f043 0210 	orr.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	ffe1f7fd 	.word	0xffe1f7fd
 8002fa4:	ff1f0efe 	.word	0xff1f0efe

08002fa8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_ADC_Start_DMA+0x1a8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_Start_DMA+0x24>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_ADC_Start_DMA+0x1ac>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d106      	bne.n	8002fda <HAL_ADC_Start_DMA+0x32>
 8002fcc:	4b60      	ldr	r3, [pc, #384]	; (8003150 <HAL_ADC_Start_DMA+0x1a8>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 80b3 	bne.w	8003140 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x40>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e0ae      	b.n	8003146 <HAL_ADC_Start_DMA+0x19e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f9cb 	bl	800338c <ADC_Enable>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 809a 	bne.w	8003136 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4e      	ldr	r2, [pc, #312]	; (8003154 <HAL_ADC_Start_DMA+0x1ac>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d105      	bne.n	800302c <HAL_ADC_Start_DMA+0x84>
 8003020:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <HAL_ADC_Start_DMA+0x1a8>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d026      	beq.n	8003094 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800304e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003056:	e01d      	b.n	8003094 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a39      	ldr	r2, [pc, #228]	; (8003150 <HAL_ADC_Start_DMA+0x1a8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_ADC_Start_DMA+0xd0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a38      	ldr	r2, [pc, #224]	; (8003154 <HAL_ADC_Start_DMA+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10d      	bne.n	8003094 <HAL_ADC_Start_DMA+0xec>
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_ADC_Start_DMA+0x1a8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800308c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f023 0206 	bic.w	r2, r3, #6
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ac:	e002      	b.n	80030b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <HAL_ADC_Start_DMA+0x1b0>)
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <HAL_ADC_Start_DMA+0x1b4>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_ADC_Start_DMA+0x1b8>)
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0202 	mvn.w	r2, #2
 80030dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a18      	ldr	r0, [r3, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	334c      	adds	r3, #76	; 0x4c
 80030f8:	4619      	mov	r1, r3
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f000 fc5d 	bl	80039bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800310c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003110:	d108      	bne.n	8003124 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003120:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003122:	e00f      	b.n	8003144 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003132:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003134:	e006      	b.n	8003144 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800313e:	e001      	b.n	8003144 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40012400 	.word	0x40012400
 8003154:	40012800 	.word	0x40012800
 8003158:	080034c3 	.word	0x080034c3
 800315c:	0800353f 	.word	0x0800353f
 8003160:	0800355b 	.word	0x0800355b

08003164 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x20>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0dc      	b.n	8003376 <HAL_ADC_ConfigChannel+0x1da>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d81c      	bhi.n	8003206 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	3b05      	subs	r3, #5
 80031de:	221f      	movs	r2, #31
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4019      	ands	r1, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b05      	subs	r3, #5
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34
 8003204:	e03c      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d81c      	bhi.n	8003248 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b23      	subs	r3, #35	; 0x23
 8003220:	221f      	movs	r2, #31
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	4019      	ands	r1, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b23      	subs	r3, #35	; 0x23
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
 8003246:	e01b      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b41      	subs	r3, #65	; 0x41
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b41      	subs	r3, #65	; 0x41
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b09      	cmp	r3, #9
 8003286:	d91c      	bls.n	80032c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68d9      	ldr	r1, [r3, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	4019      	ands	r1, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6898      	ldr	r0, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	fa00 f203 	lsl.w	r2, r0, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e019      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	2207      	movs	r2, #7
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	4019      	ands	r1, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6898      	ldr	r0, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d003      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003302:	2b11      	cmp	r3, #17
 8003304:	d132      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_ADC_ConfigChannel+0x1e4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d125      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d126      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800332c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d11a      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_ADC_ConfigChannel+0x1e8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_ADC_ConfigChannel+0x1ec>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9a      	lsrs	r2, r3, #18
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x1b2>
 800335a:	e007      	b.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40012400 	.word	0x40012400
 8003384:	20000040 	.word	0x20000040
 8003388:	431bde83 	.word	0x431bde83

0800338c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d040      	beq.n	800342c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <ADC_Enable+0xac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <ADC_Enable+0xb0>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c8:	e002      	b.n	80033d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d6:	f7ff fce1 	bl	8002d9c <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033dc:	e01f      	b.n	800341e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033de:	f7ff fcdd 	bl	8002d9c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d918      	bls.n	800341e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d011      	beq.n	800341e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d1d8      	bne.n	80033de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000040 	.word	0x20000040
 800343c:	431bde83 	.word	0x431bde83

08003440 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d12e      	bne.n	80034b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800346a:	f7ff fc97 	bl	8002d9c <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003470:	e01b      	b.n	80034aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003472:	f7ff fc93 	bl	8002d9c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d914      	bls.n	80034aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e007      	b.n	80034ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d0dc      	beq.n	8003472 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d127      	bne.n	800352c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034f6:	d115      	bne.n	8003524 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d111      	bne.n	8003524 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fe1d 	bl	8003164 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800352a:	e004      	b.n	8003536 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fe12 	bl	8003176 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff fe01 	bl	8003188 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_ADCEx_Calibration_Start+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e097      	b.n	80036de <HAL_ADCEx_Calibration_Start+0x14e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff42 	bl	8003440 <ADC_ConversionStop_Disable>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fee3 	bl	800338c <ADC_Enable>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 8081 	bne.w	80036d4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035da:	f023 0302 	bic.w	r3, r3, #2
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80035e6:	4b40      	ldr	r3, [pc, #256]	; (80036e8 <HAL_ADCEx_Calibration_Start+0x158>)
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	2002      	movs	r0, #2
 80035ec:	f001 ff42 	bl	8005474 <HAL_RCCEx_GetPeriphCLKFreq>
 80035f0:	4603      	mov	r3, r0
 80035f2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80035f6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80035f8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80035fa:	e002      	b.n	8003602 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003618:	f7ff fbc0 	bl	8002d9c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800361e:	e01b      	b.n	8003658 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003620:	f7ff fbbc 	bl	8002d9c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b0a      	cmp	r3, #10
 800362c:	d914      	bls.n	8003658 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f023 0312 	bic.w	r3, r3, #18
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e042      	b.n	80036de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1dc      	bne.n	8003620 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0204 	orr.w	r2, r2, #4
 8003674:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003676:	f7ff fb91 	bl	8002d9c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800367c:	e01b      	b.n	80036b6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800367e:	f7ff fb8d 	bl	8002d9c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b0a      	cmp	r3, #10
 800368a:	d914      	bls.n	80036b6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f023 0312 	bic.w	r3, r3, #18
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e013      	b.n	80036de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1dc      	bne.n	800367e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f023 0303 	bic.w	r3, r3, #3
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd90      	pop	{r4, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000040 	.word	0x20000040

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <__NVIC_EnableIRQ+0x34>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003850:	d301      	bcc.n	8003856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003852:	2301      	movs	r3, #1
 8003854:	e00f      	b.n	8003876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <SysTick_Config+0x40>)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385e:	210f      	movs	r1, #15
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f7ff ff90 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <SysTick_Config+0x40>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <SysTick_Config+0x40>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000e010 	.word	0xe000e010

08003884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff2d 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ac:	f7ff ff42 	bl	8003734 <__NVIC_GetPriorityGrouping>
 80038b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff ff90 	bl	80037dc <NVIC_EncodePriority>
 80038bc:	4602      	mov	r2, r0
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff5f 	bl	8003788 <__NVIC_SetPriority>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff35 	bl	8003750 <__NVIC_EnableIRQ>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffa2 	bl	8003840 <SysTick_Config>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e043      	b.n	80039a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_DMA_Init+0xa8>)
 8003926:	4413      	add	r3, r2
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_Init+0xac>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_DMA_Init+0xb0>)
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003952:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	bffdfff8 	.word	0xbffdfff8
 80039b4:	cccccccd 	.word	0xcccccccd
 80039b8:	40020000 	.word	0x40020000

080039bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Start_IT+0x20>
 80039d8:	2302      	movs	r3, #2
 80039da:	e04b      	b.n	8003a74 <HAL_DMA_Start_IT+0xb8>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d13a      	bne.n	8003a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9eb 	bl	8003df0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 020e 	orr.w	r2, r2, #14
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e00f      	b.n	8003a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 020a 	orr.w	r2, r2, #10
 8003a52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e005      	b.n	8003a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d008      	beq.n	8003aa6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e020      	b.n	8003ae8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 020e 	bic.w	r2, r2, #14
 8003ab4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d005      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e051      	b.n	8003bbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020e 	bic.w	r2, r2, #14
 8003b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <HAL_DMA_Abort_IT+0xd4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d029      	beq.n	8003b96 <HAL_DMA_Abort_IT+0xa2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_DMA_Abort_IT+0xd8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d022      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x9e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_DMA_Abort_IT+0xdc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01a      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x98>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <HAL_DMA_Abort_IT+0xe0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x92>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_DMA_Abort_IT+0xe4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00a      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x8c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_DMA_Abort_IT+0xe8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <HAL_DMA_Abort_IT+0x86>
 8003b74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b78:	e00e      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b7e:	e00b      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b84:	e008      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8a:	e005      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b90:	e002      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b92:	2310      	movs	r3, #16
 8003b94:	e000      	b.n	8003b98 <HAL_DMA_Abort_IT+0xa4>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <HAL_DMA_Abort_IT+0xec>)
 8003b9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
    } 
  }
  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40020008 	.word	0x40020008
 8003bcc:	4002001c 	.word	0x4002001c
 8003bd0:	40020030 	.word	0x40020030
 8003bd4:	40020044 	.word	0x40020044
 8003bd8:	40020058 	.word	0x40020058
 8003bdc:	4002006c 	.word	0x4002006c
 8003be0:	40020000 	.word	0x40020000

08003be4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2204      	movs	r2, #4
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d04f      	beq.n	8003cac <HAL_DMA_IRQHandler+0xc8>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04a      	beq.n	8003cac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d029      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xae>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <HAL_DMA_IRQHandler+0x1f4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xaa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_DMA_IRQHandler+0x1f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01a      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xa4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a62      	ldr	r2, [pc, #392]	; (8003de0 <HAL_DMA_IRQHandler+0x1fc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d012      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x9e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a60      	ldr	r2, [pc, #384]	; (8003de4 <HAL_DMA_IRQHandler+0x200>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00a      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x98>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	; (8003de8 <HAL_DMA_IRQHandler+0x204>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d102      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x92>
 8003c70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c74:	e00e      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c7a:	e00b      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c80:	e008      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c86:	e005      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8c:	e002      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_IRQHandler+0xb0>
 8003c92:	2304      	movs	r3, #4
 8003c94:	4a55      	ldr	r2, [pc, #340]	; (8003dec <HAL_DMA_IRQHandler+0x208>)
 8003c96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8094 	beq.w	8003dca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003caa:	e08e      	b.n	8003dca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d056      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x186>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d051      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 020a 	bic.w	r2, r2, #10
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d029      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x166>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a37      	ldr	r2, [pc, #220]	; (8003dd8 <HAL_DMA_IRQHandler+0x1f4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x162>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_DMA_IRQHandler+0x1f8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01a      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x15c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_DMA_IRQHandler+0x1fc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d012      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x156>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <HAL_DMA_IRQHandler+0x200>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00a      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x150>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_DMA_IRQHandler+0x204>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d102      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x14a>
 8003d28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d2c:	e00e      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d32:	e00b      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d38:	e008      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d3e:	e005      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d44:	e002      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d46:	2320      	movs	r3, #32
 8003d48:	e000      	b.n	8003d4c <HAL_DMA_IRQHandler+0x168>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_DMA_IRQHandler+0x208>)
 8003d4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d034      	beq.n	8003dca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d68:	e02f      	b.n	8003dca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	2208      	movs	r2, #8
 8003d70:	409a      	lsls	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d028      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x1e8>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 020e 	bic.w	r2, r2, #14
 8003d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003da2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
    }
  }
  return;
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
}
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40020008 	.word	0x40020008
 8003dd8:	4002001c 	.word	0x4002001c
 8003ddc:	40020030 	.word	0x40020030
 8003de0:	40020044 	.word	0x40020044
 8003de4:	40020058 	.word	0x40020058
 8003de8:	4002006c 	.word	0x4002006c
 8003dec:	40020000 	.word	0x40020000

08003df0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d108      	bne.n	8003e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e2e:	e007      	b.n	8003e40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b08b      	sub	sp, #44	; 0x2c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5e:	e169      	b.n	8004134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e60:	2201      	movs	r2, #1
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 8158 	bne.w	800412e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4a9a      	ldr	r2, [pc, #616]	; (80040ec <HAL_GPIO_Init+0x2a0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d05e      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
 8003e88:	4a98      	ldr	r2, [pc, #608]	; (80040ec <HAL_GPIO_Init+0x2a0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d875      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003e8e:	4a98      	ldr	r2, [pc, #608]	; (80040f0 <HAL_GPIO_Init+0x2a4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d058      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
 8003e94:	4a96      	ldr	r2, [pc, #600]	; (80040f0 <HAL_GPIO_Init+0x2a4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d86f      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003e9a:	4a96      	ldr	r2, [pc, #600]	; (80040f4 <HAL_GPIO_Init+0x2a8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d052      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
 8003ea0:	4a94      	ldr	r2, [pc, #592]	; (80040f4 <HAL_GPIO_Init+0x2a8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d869      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003ea6:	4a94      	ldr	r2, [pc, #592]	; (80040f8 <HAL_GPIO_Init+0x2ac>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04c      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
 8003eac:	4a92      	ldr	r2, [pc, #584]	; (80040f8 <HAL_GPIO_Init+0x2ac>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d863      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003eb2:	4a92      	ldr	r2, [pc, #584]	; (80040fc <HAL_GPIO_Init+0x2b0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d046      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
 8003eb8:	4a90      	ldr	r2, [pc, #576]	; (80040fc <HAL_GPIO_Init+0x2b0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d85d      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003ebe:	2b12      	cmp	r3, #18
 8003ec0:	d82a      	bhi.n	8003f18 <HAL_GPIO_Init+0xcc>
 8003ec2:	2b12      	cmp	r3, #18
 8003ec4:	d859      	bhi.n	8003f7a <HAL_GPIO_Init+0x12e>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_GPIO_Init+0x80>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f47 	.word	0x08003f47
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003f33 	.word	0x08003f33
 8003ed8:	08003f75 	.word	0x08003f75
 8003edc:	08003f7b 	.word	0x08003f7b
 8003ee0:	08003f7b 	.word	0x08003f7b
 8003ee4:	08003f7b 	.word	0x08003f7b
 8003ee8:	08003f7b 	.word	0x08003f7b
 8003eec:	08003f7b 	.word	0x08003f7b
 8003ef0:	08003f7b 	.word	0x08003f7b
 8003ef4:	08003f7b 	.word	0x08003f7b
 8003ef8:	08003f7b 	.word	0x08003f7b
 8003efc:	08003f7b 	.word	0x08003f7b
 8003f00:	08003f7b 	.word	0x08003f7b
 8003f04:	08003f7b 	.word	0x08003f7b
 8003f08:	08003f7b 	.word	0x08003f7b
 8003f0c:	08003f7b 	.word	0x08003f7b
 8003f10:	08003f29 	.word	0x08003f29
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	4a79      	ldr	r2, [pc, #484]	; (8004100 <HAL_GPIO_Init+0x2b4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f1e:	e02c      	b.n	8003f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	623b      	str	r3, [r7, #32]
          break;
 8003f26:	e029      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	623b      	str	r3, [r7, #32]
          break;
 8003f30:	e024      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	3308      	adds	r3, #8
 8003f38:	623b      	str	r3, [r7, #32]
          break;
 8003f3a:	e01f      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	330c      	adds	r3, #12
 8003f42:	623b      	str	r3, [r7, #32]
          break;
 8003f44:	e01a      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	623b      	str	r3, [r7, #32]
          break;
 8003f52:	e013      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	611a      	str	r2, [r3, #16]
          break;
 8003f66:	e009      	b.n	8003f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f68:	2308      	movs	r3, #8
 8003f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	615a      	str	r2, [r3, #20]
          break;
 8003f72:	e003      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
          break;
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x130>
          break;
 8003f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2bff      	cmp	r3, #255	; 0xff
 8003f80:	d801      	bhi.n	8003f86 <HAL_GPIO_Init+0x13a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2bff      	cmp	r3, #255	; 0xff
 8003f90:	d802      	bhi.n	8003f98 <HAL_GPIO_Init+0x14c>
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	e002      	b.n	8003f9e <HAL_GPIO_Init+0x152>
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	3b08      	subs	r3, #8
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	210f      	movs	r1, #15
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	401a      	ands	r2, r3
 8003fb0:	6a39      	ldr	r1, [r7, #32]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80b1 	beq.w	800412e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6193      	str	r3, [r2, #24]
 8003fd8:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fe4:	4a48      	ldr	r2, [pc, #288]	; (8004108 <HAL_GPIO_Init+0x2bc>)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <HAL_GPIO_Init+0x2c0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_GPIO_Init+0x1ec>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <HAL_GPIO_Init+0x2c4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00d      	beq.n	8004034 <HAL_GPIO_Init+0x1e8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <HAL_GPIO_Init+0x2c8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <HAL_GPIO_Init+0x1e4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3d      	ldr	r2, [pc, #244]	; (8004118 <HAL_GPIO_Init+0x2cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_GPIO_Init+0x1e0>
 8004028:	2303      	movs	r3, #3
 800402a:	e006      	b.n	800403a <HAL_GPIO_Init+0x1ee>
 800402c:	2304      	movs	r3, #4
 800402e:	e004      	b.n	800403a <HAL_GPIO_Init+0x1ee>
 8004030:	2302      	movs	r3, #2
 8004032:	e002      	b.n	800403a <HAL_GPIO_Init+0x1ee>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_GPIO_Init+0x1ee>
 8004038:	2300      	movs	r3, #0
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	f002 0203 	and.w	r2, r2, #3
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	4093      	lsls	r3, r2
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800404a:	492f      	ldr	r1, [pc, #188]	; (8004108 <HAL_GPIO_Init+0x2bc>)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	492c      	ldr	r1, [pc, #176]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]
 8004070:	e006      	b.n	8004080 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	43db      	mvns	r3, r3
 800407a:	4928      	ldr	r1, [pc, #160]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800407c:	4013      	ands	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4922      	ldr	r1, [pc, #136]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	491e      	ldr	r1, [pc, #120]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4918      	ldr	r1, [pc, #96]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	e006      	b.n	80040d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	4914      	ldr	r1, [pc, #80]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d021      	beq.n	8004120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e021      	b.n	800412e <HAL_GPIO_Init+0x2e2>
 80040ea:	bf00      	nop
 80040ec:	10320000 	.word	0x10320000
 80040f0:	10310000 	.word	0x10310000
 80040f4:	10220000 	.word	0x10220000
 80040f8:	10210000 	.word	0x10210000
 80040fc:	10120000 	.word	0x10120000
 8004100:	10110000 	.word	0x10110000
 8004104:	40021000 	.word	0x40021000
 8004108:	40010000 	.word	0x40010000
 800410c:	40010800 	.word	0x40010800
 8004110:	40010c00 	.word	0x40010c00
 8004114:	40011000 	.word	0x40011000
 8004118:	40011400 	.word	0x40011400
 800411c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_GPIO_Init+0x304>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	43db      	mvns	r3, r3
 8004128:	4909      	ldr	r1, [pc, #36]	; (8004150 <HAL_GPIO_Init+0x304>)
 800412a:	4013      	ands	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	3301      	adds	r3, #1
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	f47f ae8e 	bne.w	8003e60 <HAL_GPIO_Init+0x14>
  }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	372c      	adds	r7, #44	; 0x2c
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	887b      	ldrh	r3, [r7, #2]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e001      	b.n	8004176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	807b      	strh	r3, [r7, #2]
 800418e:	4613      	mov	r3, r2
 8004190:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004192:	787b      	ldrb	r3, [r7, #1]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800419e:	e003      	b.n	80041a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	041a      	lsls	r2, r3, #16
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	611a      	str	r2, [r3, #16]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e12b      	b.n	800441e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fe fbd0 	bl	8002980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004218:	f001 f830 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4a81      	ldr	r2, [pc, #516]	; (8004428 <HAL_I2C_Init+0x274>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d807      	bhi.n	8004238 <HAL_I2C_Init+0x84>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a80      	ldr	r2, [pc, #512]	; (800442c <HAL_I2C_Init+0x278>)
 800422c:	4293      	cmp	r3, r2
 800422e:	bf94      	ite	ls
 8004230:	2301      	movls	r3, #1
 8004232:	2300      	movhi	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e006      	b.n	8004246 <HAL_I2C_Init+0x92>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a7d      	ldr	r2, [pc, #500]	; (8004430 <HAL_I2C_Init+0x27c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	bf94      	ite	ls
 8004240:	2301      	movls	r3, #1
 8004242:	2300      	movhi	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0e7      	b.n	800441e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a78      	ldr	r2, [pc, #480]	; (8004434 <HAL_I2C_Init+0x280>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0c9b      	lsrs	r3, r3, #18
 8004258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a6a      	ldr	r2, [pc, #424]	; (8004428 <HAL_I2C_Init+0x274>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d802      	bhi.n	8004288 <HAL_I2C_Init+0xd4>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3301      	adds	r3, #1
 8004286:	e009      	b.n	800429c <HAL_I2C_Init+0xe8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	4a69      	ldr	r2, [pc, #420]	; (8004438 <HAL_I2C_Init+0x284>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	3301      	adds	r3, #1
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	495c      	ldr	r1, [pc, #368]	; (8004428 <HAL_I2C_Init+0x274>)
 80042b8:	428b      	cmp	r3, r1
 80042ba:	d819      	bhi.n	80042f0 <HAL_I2C_Init+0x13c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e59      	subs	r1, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042d0:	400b      	ands	r3, r1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_I2C_Init+0x138>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e59      	subs	r1, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	e051      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 80042ec:	2304      	movs	r3, #4
 80042ee:	e04f      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d111      	bne.n	800431c <HAL_I2C_Init+0x168>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e012      	b.n	8004342 <HAL_I2C_Init+0x18e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1e58      	subs	r0, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	0099      	lsls	r1, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Init+0x196>
 8004346:	2301      	movs	r3, #1
 8004348:	e022      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10e      	bne.n	8004370 <HAL_I2C_Init+0x1bc>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e58      	subs	r0, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	440b      	add	r3, r1
 8004360:	fbb0 f3f3 	udiv	r3, r0, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436e:	e00f      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e58      	subs	r0, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	0099      	lsls	r1, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	fbb0 f3f3 	udiv	r3, r0, r3
 8004386:	3301      	adds	r3, #1
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6809      	ldr	r1, [r1, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6911      	ldr	r1, [r2, #16]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	4311      	orrs	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	000186a0 	.word	0x000186a0
 800442c:	001e847f 	.word	0x001e847f
 8004430:	003d08ff 	.word	0x003d08ff
 8004434:	431bde83 	.word	0x431bde83
 8004438:	10624dd3 	.word	0x10624dd3

0800443c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	461a      	mov	r2, r3
 8004448:	460b      	mov	r3, r1
 800444a:	817b      	strh	r3, [r7, #10]
 800444c:	4613      	mov	r3, r2
 800444e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004450:	f7fe fca4 	bl	8002d9c <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	f040 80e0 	bne.w	8004624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2319      	movs	r3, #25
 800446a:	2201      	movs	r2, #1
 800446c:	4970      	ldr	r1, [pc, #448]	; (8004630 <HAL_I2C_Master_Transmit+0x1f4>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f964 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	e0d3      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_I2C_Master_Transmit+0x50>
 8004488:	2302      	movs	r3, #2
 800448a:	e0cc      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d007      	beq.n	80044b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2221      	movs	r2, #33	; 0x21
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2210      	movs	r2, #16
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <HAL_I2C_Master_Transmit+0x1f8>)
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044f4:	8979      	ldrh	r1, [r7, #10]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f89c 	bl	8004638 <I2C_MasterRequestWrite>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e08d      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004520:	e066      	b.n	80045f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	6a39      	ldr	r1, [r7, #32]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa22 	bl	8004970 <I2C_WaitOnTXEFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b04      	cmp	r3, #4
 8004538:	d107      	bne.n	800454a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e06b      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b04      	cmp	r3, #4
 800458a:	d11b      	bne.n	80045c4 <HAL_I2C_Master_Transmit+0x188>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	6a39      	ldr	r1, [r7, #32]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fa19 	bl	8004a00 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d107      	bne.n	80045ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e01a      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d194      	bne.n	8004522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	00100002 	.word	0x00100002
 8004634:	ffff0000 	.word	0xffff0000

08004638 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	460b      	mov	r3, r1
 8004646:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d006      	beq.n	8004662 <I2C_MasterRequestWrite+0x2a>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d003      	beq.n	8004662 <I2C_MasterRequestWrite+0x2a>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004660:	d108      	bne.n	8004674 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e00b      	b.n	800468c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	2b12      	cmp	r3, #18
 800467a:	d107      	bne.n	800468c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f84f 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d103      	bne.n	80046bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e035      	b.n	800472c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c8:	d108      	bne.n	80046dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d8:	611a      	str	r2, [r3, #16]
 80046da:	e01b      	b.n	8004714 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	11db      	asrs	r3, r3, #7
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f063 030f 	orn	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	490e      	ldr	r1, [pc, #56]	; (8004734 <I2C_MasterRequestWrite+0xfc>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f898 	bl	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e010      	b.n	800472c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4907      	ldr	r1, [pc, #28]	; (8004738 <I2C_MasterRequestWrite+0x100>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f888 	bl	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	00010008 	.word	0x00010008
 8004738:	00010002 	.word	0x00010002

0800473c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474c:	e048      	b.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d044      	beq.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fe fb21 	bl	8002d9c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d139      	bne.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10d      	bne.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	43da      	mvns	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	e00c      	b.n	80047ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	43da      	mvns	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d116      	bne.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e023      	b.n	8004828 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d10d      	bne.n	8004806 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	e00c      	b.n	8004820 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	43da      	mvns	r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d093      	beq.n	800474e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800483e:	e071      	b.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d123      	bne.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f043 0204 	orr.w	r2, r3, #4
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e067      	b.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d041      	beq.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a0:	f7fe fa7c 	bl	8002d9c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d136      	bne.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10c      	bne.n	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e00b      	b.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e021      	b.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10c      	bne.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e00b      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af6d 	bne.w	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f886 	bl	8004a90 <I2C_IsAcknowledgeFailed>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d028      	beq.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe fa01 	bl	8002d9c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11d      	bne.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d016      	beq.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e007      	b.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d1c3      	bne.n	800497e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a0c:	e034      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f83e 	bl	8004a90 <I2C_IsAcknowledgeFailed>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e034      	b.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d028      	beq.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fe f9b9 	bl	8002d9c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11d      	bne.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d016      	beq.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e007      	b.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d1c3      	bne.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d11b      	bne.n	8004ae0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e26c      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8087 	beq.w	8004c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b0c:	4b92      	ldr	r3, [pc, #584]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d00c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b18:	4b8f      	ldr	r3, [pc, #572]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d112      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
 8004b24:	4b8c      	ldr	r3, [pc, #560]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b32:	4b89      	ldr	r3, [pc, #548]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d06c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x12c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d168      	bne.n	8004c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e246      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x76>
 8004b54:	4b80      	ldr	r3, [pc, #512]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7f      	ldr	r2, [pc, #508]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e02e      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7a      	ldr	r2, [pc, #488]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b78      	ldr	r3, [pc, #480]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a77      	ldr	r2, [pc, #476]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e01d      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xbc>
 8004b8e:	4b72      	ldr	r3, [pc, #456]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a71      	ldr	r2, [pc, #452]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b6f      	ldr	r3, [pc, #444]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6e      	ldr	r2, [pc, #440]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	4b6b      	ldr	r3, [pc, #428]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6a      	ldr	r2, [pc, #424]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a67      	ldr	r2, [pc, #412]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fe f8e8 	bl	8002d9c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fe f8e4 	bl	8002d9c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1fa      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b5d      	ldr	r3, [pc, #372]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe4>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fe f8d4 	bl	8002d9c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fe f8d0 	bl	8002d9c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1e6      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x10c>
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c26:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d11c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
 8004c3e:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1ba      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4939      	ldr	r1, [pc, #228]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	e03a      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fe f889 	bl	8002d9c <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fe f885 	bl	8002d9c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e19b      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4927      	ldr	r1, [pc, #156]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	e015      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe f868 	bl	8002d9c <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fe f864 	bl	8002d9c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e17a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7fe f848 	bl	8002d9c <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d10:	f7fe f844 	bl	8002d9c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e15a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f000 facc 	bl	80052cc <RCC_Delay>
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fe f82e 	bl	8002d9c <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d44:	f7fe f82a 	bl	8002d9c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d908      	bls.n	8004d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e140      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	42420000 	.word	0x42420000
 8004d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b9e      	ldr	r3, [pc, #632]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e9      	bne.n	8004d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a6 	beq.w	8004eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b97      	ldr	r3, [pc, #604]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b94      	ldr	r3, [pc, #592]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a93      	ldr	r2, [pc, #588]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d118      	bne.n	8004de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db6:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a8a      	ldr	r2, [pc, #552]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7fd ffeb 	bl	8002d9c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fd ffe7 	bl	8002d9c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	; 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0fd      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x312>
 8004df0:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4a7a      	ldr	r2, [pc, #488]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6213      	str	r3, [r2, #32]
 8004dfc:	e02d      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x334>
 8004e06:	4b76      	ldr	r3, [pc, #472]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4a75      	ldr	r2, [pc, #468]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6213      	str	r3, [r2, #32]
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	4a72      	ldr	r2, [pc, #456]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	6213      	str	r3, [r2, #32]
 8004e1e:	e01c      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0x356>
 8004e28:	4b6d      	ldr	r3, [pc, #436]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	6213      	str	r3, [r2, #32]
 8004e34:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4a69      	ldr	r2, [pc, #420]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6213      	str	r3, [r2, #32]
 8004e40:	e00b      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e42:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a66      	ldr	r2, [pc, #408]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	4b64      	ldr	r3, [pc, #400]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a63      	ldr	r2, [pc, #396]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fd ff9b 	bl	8002d9c <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fd ff97 	bl	8002d9c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0ab      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b57      	ldr	r3, [pc, #348]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCC_OscConfig+0x37e>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8e:	f7fd ff85 	bl	8002d9c <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd ff81 	bl	8002d9c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e095      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4a47      	ldr	r2, [pc, #284]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8081 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d061      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d146      	bne.n	8004f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fd ff55 	bl	8002d9c <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fd ff51 	bl	8002d9c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e067      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d108      	bne.n	8004f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	492d      	ldr	r1, [pc, #180]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a19      	ldr	r1, [r3, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	430b      	orrs	r3, r1
 8004f42:	4927      	ldr	r1, [pc, #156]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fd ff25 	bl	8002d9c <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fd ff21 	bl	8002d9c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e037      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x46a>
 8004f74:	e02f      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fd ff0e 	bl	8002d9c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fd ff0a 	bl	8002d9c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e020      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x498>
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e013      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	42420060 	.word	0x42420060

08004fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d0      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 0207 	bic.w	r2, r3, #7
 8005016:	4965      	ldr	r1, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800506a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d040      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d115      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e073      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4936      	ldr	r1, [pc, #216]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7fd fe5e 	bl	8002d9c <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fd fe5a 	bl	8002d9c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d210      	bcs.n	800513c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 0207 	bic.w	r2, r3, #7
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1d0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fdbc 	bl	8002d18 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40022000 	.word	0x40022000
 80051b0:	40021000 	.word	0x40021000
 80051b4:	08007ad4 	.word	0x08007ad4
 80051b8:	20000040 	.word	0x20000040
 80051bc:	20000044 	.word	0x20000044

080051c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051da:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCC_GetSysClockFreq+0x94>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x30>
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x36>
 80051ee:	e027      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCC_GetSysClockFreq+0x98>)
 80051f2:	613b      	str	r3, [r7, #16]
      break;
 80051f4:	e027      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	0c9b      	lsrs	r3, r3, #18
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005200:	5cd3      	ldrb	r3, [r2, r3]
 8005202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d010      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCC_GetSysClockFreq+0x94>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	0c5b      	lsrs	r3, r3, #17
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	4a11      	ldr	r2, [pc, #68]	; (8005260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800521a:	5cd3      	ldrb	r3, [r2, r3]
 800521c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <HAL_RCC_GetSysClockFreq+0x98>)
 8005222:	fb02 f203 	mul.w	r2, r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e004      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	613b      	str	r3, [r7, #16]
      break;
 800523e:	e002      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetSysClockFreq+0x98>)
 8005242:	613b      	str	r3, [r7, #16]
      break;
 8005244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005246:	693b      	ldr	r3, [r7, #16]
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	007a1200 	.word	0x007a1200
 800525c:	08007aec 	.word	0x08007aec
 8005260:	08007afc 	.word	0x08007afc
 8005264:	003d0900 	.word	0x003d0900

08005268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <HAL_RCC_GetHCLKFreq+0x10>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	20000040 	.word	0x20000040

0800527c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005280:	f7ff fff2 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	08007ae4 	.word	0x08007ae4

080052a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052a8:	f7ff ffde 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	0adb      	lsrs	r3, r3, #11
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	08007ae4 	.word	0x08007ae4

080052cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <RCC_Delay+0x34>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <RCC_Delay+0x38>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0a5b      	lsrs	r3, r3, #9
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052e8:	bf00      	nop
  }
  while (Delay --);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	60fa      	str	r2, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f9      	bne.n	80052e8 <RCC_Delay+0x1c>
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	20000040 	.word	0x20000040
 8005304:	10624dd3 	.word	0x10624dd3

08005308 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d07d      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005328:	4b4f      	ldr	r3, [pc, #316]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4a4b      	ldr	r2, [pc, #300]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	61d3      	str	r3, [r2, #28]
 8005340:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d118      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535c:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a42      	ldr	r2, [pc, #264]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005368:	f7fd fd18 	bl	8002d9c <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd fd14 	bl	8002d9c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e06d      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02e      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d027      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ac:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd fce3 	bl	8002d9c <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fd fcdf 	bl	8002d9c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e036      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ee      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4917      	ldr	r1, [pc, #92]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	4313      	orrs	r3, r2
 800540c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	490b      	ldr	r1, [pc, #44]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4904      	ldr	r1, [pc, #16]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	40007000 	.word	0x40007000
 8005470:	42420440 	.word	0x42420440

08005474 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b10      	cmp	r3, #16
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b10      	cmp	r3, #16
 800549a:	f200 808a 	bhi.w	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d045      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d075      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80054aa:	e082      	b.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80054ac:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80054b2:	4b45      	ldr	r3, [pc, #276]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d07b      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	0c9b      	lsrs	r3, r3, #18
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	4a41      	ldr	r2, [pc, #260]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80054c8:	5cd3      	ldrb	r3, [r2, r3]
 80054ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d015      	beq.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054d6:	4b3c      	ldr	r3, [pc, #240]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	0c5b      	lsrs	r3, r3, #17
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80054f0:	4a38      	ldr	r2, [pc, #224]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e004      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800550c:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005518:	d102      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	61bb      	str	r3, [r7, #24]
      break;
 800551e:	e04a      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4a2d      	ldr	r2, [pc, #180]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	61bb      	str	r3, [r7, #24]
      break;
 800552e:	e042      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005540:	d108      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800554c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e01f      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555e:	d109      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800556c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e00f      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557e:	d11c      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800558c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005590:	61bb      	str	r3, [r7, #24]
      break;
 8005592:	e012      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005594:	e011      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005596:	f7ff fe85 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	0b9b      	lsrs	r3, r3, #14
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	3301      	adds	r3, #1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	61bb      	str	r3, [r7, #24]
      break;
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055b2:	bf00      	nop
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055ba:	bf00      	nop
    }
  }
  return (frequency);
 80055bc:	69bb      	ldr	r3, [r7, #24]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08007b00 	.word	0x08007b00
 80055d0:	08007b10 	.word	0x08007b10
 80055d4:	007a1200 	.word	0x007a1200
 80055d8:	003d0900 	.word	0x003d0900
 80055dc:	aaaaaaab 	.word	0xaaaaaaab

080055e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e041      	b.n	8005676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fd f9f8 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fbd8 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e032      	b.n	80056fe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_TIM_Base_Start+0x88>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_TIM_Base_Start+0x48>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d009      	beq.n	80056c8 <HAL_TIM_Base_Start+0x48>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a14      	ldr	r2, [pc, #80]	; (800570c <HAL_TIM_Base_Start+0x8c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIM_Base_Start+0x48>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a13      	ldr	r2, [pc, #76]	; (8005710 <HAL_TIM_Base_Start+0x90>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d111      	bne.n	80056ec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d010      	beq.n	80056fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	e007      	b.n	80056fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800

08005714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d001      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e03a      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_TIM_Base_Start_IT+0x98>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x58>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d009      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x58>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x58>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d010      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	e007      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800

080057b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e041      	b.n	800584e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f839 	bl	8005856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 faec 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0202 	mvn.w	r2, #2
 8005894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa76 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa69 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fa78 	bl	8005dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0204 	mvn.w	r2, #4
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa4c 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa3f 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa4e 	bl	8005dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b08      	cmp	r3, #8
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0208 	mvn.w	r2, #8
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2204      	movs	r2, #4
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa22 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa15 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fa24 	bl	8005dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d122      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b10      	cmp	r3, #16
 8005986:	d11b      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0210 	mvn.w	r2, #16
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2208      	movs	r2, #8
 8005996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9f8 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f9eb 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f9fa 	bl	8005dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d10e      	bne.n	80059ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d107      	bne.n	80059ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0201 	mvn.w	r2, #1
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb fe82 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b80      	cmp	r3, #128	; 0x80
 8005a06:	d107      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fcc5 	bl	80063a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d10e      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d107      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9be 	bl	8005dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d10e      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d107      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0220 	mvn.w	r2, #32
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fc90 	bl	8006390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0ae      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	f200 809f 	bhi.w	8005be4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ae1 	.word	0x08005ae1
 8005ab0:	08005be5 	.word	0x08005be5
 8005ab4:	08005be5 	.word	0x08005be5
 8005ab8:	08005be5 	.word	0x08005be5
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005be5 	.word	0x08005be5
 8005ac4:	08005be5 	.word	0x08005be5
 8005ac8:	08005be5 	.word	0x08005be5
 8005acc:	08005b63 	.word	0x08005b63
 8005ad0:	08005be5 	.word	0x08005be5
 8005ad4:	08005be5 	.word	0x08005be5
 8005ad8:	08005be5 	.word	0x08005be5
 8005adc:	08005ba3 	.word	0x08005ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f9d6 	bl	8005e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0204 	bic.w	r2, r2, #4
 8005b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6999      	ldr	r1, [r3, #24]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	619a      	str	r2, [r3, #24]
      break;
 8005b1e:	e064      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa1c 	bl	8005f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]
      break;
 8005b60:	e043      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa65 	bl	8006038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0208 	orr.w	r2, r2, #8
 8005b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0204 	bic.w	r2, r2, #4
 8005b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69d9      	ldr	r1, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	61da      	str	r2, [r3, #28]
      break;
 8005ba0:	e023      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 faaf 	bl	800610c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	021a      	lsls	r2, r3, #8
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	61da      	str	r2, [r3, #28]
      break;
 8005be2:	e002      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0b4      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x186>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c50:	d03e      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	f200 8087 	bhi.w	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	f000 8086 	beq.w	8005d6e <HAL_TIM_ConfigClockSource+0x172>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c66:	d87f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d01a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8005c6c:	2b70      	cmp	r3, #112	; 0x70
 8005c6e:	d87b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b60      	cmp	r3, #96	; 0x60
 8005c72:	d050      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x11a>
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d877      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d03c      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c7c:	2b50      	cmp	r3, #80	; 0x50
 8005c7e:	d873      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d058      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x13a>
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d86f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d064      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d86b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d060      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d867      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05c      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d05a      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	e062      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6899      	ldr	r1, [r3, #8]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f000 faf0 	bl	8006296 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]
      break;
 8005cce:	e04f      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f000 fad9 	bl	8006296 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf2:	609a      	str	r2, [r3, #8]
      break;
 8005cf4:	e03c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fa50 	bl	80061a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2150      	movs	r1, #80	; 0x50
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 faa7 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e02c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fa6e 	bl	8006204 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2160      	movs	r1, #96	; 0x60
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa97 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e01c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f000 fa30 	bl	80061a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fa87 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e00c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fa7e 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005d66:	e003      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6c:	e000      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
	...

08005dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <TIM_Base_SetConfig+0xb8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <TIM_Base_SetConfig+0xbc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <TIM_Base_SetConfig+0xc0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <TIM_Base_SetConfig+0xb8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <TIM_Base_SetConfig+0xbc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <TIM_Base_SetConfig+0xc0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <TIM_Base_SetConfig+0xb8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d103      	bne.n	8005e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	615a      	str	r2, [r3, #20]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800

08005e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f023 0201 	bic.w	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0302 	bic.w	r3, r3, #2
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <TIM_OC1_SetConfig+0xc8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d10c      	bne.n	8005f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0308 	bic.w	r3, r3, #8
 8005efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0304 	bic.w	r3, r3, #4
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <TIM_OC1_SetConfig+0xc8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d111      	bne.n	8005f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40012c00 	.word	0x40012c00

08005f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f023 0210 	bic.w	r2, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0320 	bic.w	r3, r3, #32
 8005fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <TIM_OC2_SetConfig+0xd0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10d      	bne.n	8005fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a14      	ldr	r2, [pc, #80]	; (8006034 <TIM_OC2_SetConfig+0xd0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d113      	bne.n	8006010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	40012c00 	.word	0x40012c00

08006038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <TIM_OC3_SetConfig+0xd0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10d      	bne.n	80060b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800609c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <TIM_OC3_SetConfig+0xd0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d113      	bne.n	80060e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00

0800610c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	031b      	lsls	r3, r3, #12
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a0f      	ldr	r2, [pc, #60]	; (80061a4 <TIM_OC4_SetConfig+0x98>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d109      	bne.n	8006180 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	019b      	lsls	r3, r3, #6
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00

080061a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0201 	bic.w	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 030a 	bic.w	r3, r3, #10
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0210 	bic.w	r2, r3, #16
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006240:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	f043 0307 	orr.w	r3, r3, #7
 8006284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4313      	orrs	r3, r2
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e046      	b.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d009      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a12      	ldr	r2, [pc, #72]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a10      	ldr	r2, [pc, #64]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10c      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4313      	orrs	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40000400 	.word	0x40000400
 800638c:	40000800 	.word	0x40000800

08006390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e042      	b.n	800644c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc fb8a 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2224      	movs	r2, #36	; 0x24
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fdfb 	bl	8006ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800642c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b20      	cmp	r3, #32
 8006472:	d16d      	bne.n	8006550 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_UART_Transmit+0x2c>
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e066      	b.n	8006552 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2221      	movs	r2, #33	; 0x21
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006492:	f7fc fc83 	bl	8002d9c <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	88fa      	ldrh	r2, [r7, #6]
 80064a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Transmit+0x6c>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c8:	e02a      	b.n	8006520 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fb4a 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e036      	b.n	8006552 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3302      	adds	r3, #2
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e007      	b.n	8006512 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1cf      	bne.n	80064ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2140      	movs	r1, #64	; 0x40
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fb1a 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08c      	sub	sp, #48	; 0x30
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	4613      	mov	r3, r2
 8006566:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b20      	cmp	r3, #32
 8006572:	d14a      	bne.n	800660a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e043      	b.n	800660c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	461a      	mov	r2, r3
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fb57 	bl	8006c4a <UART_Start_Receive_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d12c      	bne.n	8006604 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d125      	bne.n	80065fe <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	617b      	str	r3, [r7, #20]
   return(result);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f043 0310 	orr.w	r3, r3, #16
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	330c      	adds	r3, #12
 80065e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e8:	627a      	str	r2, [r7, #36]	; 0x24
 80065ea:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6a39      	ldr	r1, [r7, #32]
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e5      	bne.n	80065c8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80065fc:	e002      	b.n	8006604 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006608:	e000      	b.n	800660c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800660a:	2302      	movs	r3, #2
  }
}
 800660c:	4618      	mov	r0, r3
 800660e:	3730      	adds	r7, #48	; 0x30
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b0ba      	sub	sp, #232	; 0xe8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800663a:	2300      	movs	r3, #0
 800663c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10f      	bne.n	800667a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <HAL_UART_IRQHandler+0x66>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fbff 	bl	8006e76 <UART_Receive_IT>
      return;
 8006678:	e25b      	b.n	8006b32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800667a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80de 	beq.w	8006840 <HAL_UART_IRQHandler+0x22c>
 8006684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006694:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80d1 	beq.w	8006840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <HAL_UART_IRQHandler+0xae>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_UART_IRQHandler+0xd2>
 80066ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	f043 0202 	orr.w	r2, r3, #2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <HAL_UART_IRQHandler+0xf6>
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d011      	beq.n	800673a <HAL_UART_IRQHandler+0x126>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	f043 0208 	orr.w	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 81f2 	beq.w	8006b28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d008      	beq.n	8006762 <HAL_UART_IRQHandler+0x14e>
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb8a 	bl	8006e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf14      	ite	ne
 8006770:	2301      	movne	r3, #1
 8006772:	2300      	moveq	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <HAL_UART_IRQHandler+0x17a>
 8006786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04f      	beq.n	800682e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa94 	bl	8006cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d041      	beq.n	8006826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3314      	adds	r3, #20
 80067a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1d9      	bne.n	80067a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d013      	beq.n	800681e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	4a7e      	ldr	r2, [pc, #504]	; (80069f4 <HAL_UART_IRQHandler+0x3e0>)
 80067fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	4618      	mov	r0, r3
 8006804:	f7fd f976 	bl	8003af4 <HAL_DMA_Abort_IT>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d016      	beq.n	800683c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e00e      	b.n	800683c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f99c 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e00a      	b.n	800683c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f998 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e006      	b.n	800683c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f994 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800683a:	e175      	b.n	8006b28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	bf00      	nop
    return;
 800683e:	e173      	b.n	8006b28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	2b01      	cmp	r3, #1
 8006846:	f040 814f 	bne.w	8006ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800684a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8148 	beq.w	8006ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8141 	beq.w	8006ae8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80b6 	beq.w	80069f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8145 	beq.w	8006b2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068aa:	429a      	cmp	r2, r3
 80068ac:	f080 813e 	bcs.w	8006b2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b20      	cmp	r3, #32
 80068c0:	f000 8088 	beq.w	80069d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1d9      	bne.n	80068c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3314      	adds	r3, #20
 8006916:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006934:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006938:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800693c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e1      	bne.n	8006910 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800695c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006970:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006972:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800697e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e3      	bne.n	800694c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80069b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e3      	bne.n	8006992 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd f854 	bl	8003a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fea6 	bl	800173c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069f0:	e09c      	b.n	8006b2c <HAL_UART_IRQHandler+0x518>
 80069f2:	bf00      	nop
 80069f4:	08006d81 	.word	0x08006d81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 808e 	beq.w	8006b30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8089 	beq.w	8006b30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	330c      	adds	r3, #12
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a42:	647a      	str	r2, [r7, #68]	; 0x44
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e3      	bne.n	8006a1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	623b      	str	r3, [r7, #32]
   return(result);
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ac0:	61fa      	str	r2, [r7, #28]
 8006ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fa fe2b 	bl	800173c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ae6:	e023      	b.n	8006b30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_UART_IRQHandler+0x4f4>
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f951 	bl	8006da8 <UART_Transmit_IT>
    return;
 8006b06:	e014      	b.n	8006b32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <HAL_UART_IRQHandler+0x51e>
 8006b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f990 	bl	8006e46 <UART_EndTransmit_IT>
    return;
 8006b26:	e004      	b.n	8006b32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b28:	bf00      	nop
 8006b2a:	e002      	b.n	8006b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b30:	bf00      	nop
  }
}
 8006b32:	37e8      	adds	r7, #232	; 0xe8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b090      	sub	sp, #64	; 0x40
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7e:	e050      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d04c      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b8e:	f7fc f905 	bl	8002d9c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d241      	bcs.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bbe:	637a      	str	r2, [r7, #52]	; 0x34
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	613b      	str	r3, [r7, #16]
   return(result);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3314      	adds	r3, #20
 8006bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf2:	623a      	str	r2, [r7, #32]
 8006bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69f9      	ldr	r1, [r7, #28]
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e00f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bf0c      	ite	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	2300      	movne	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d09f      	beq.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3740      	adds	r7, #64	; 0x40
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	4613      	mov	r3, r2
 8006c56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2222      	movs	r2, #34	; 0x22
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0220 	orr.w	r2, r2, #32
 8006cae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr

08006cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b095      	sub	sp, #84	; 0x54
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d119      	bne.n	8006d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d54:	61ba      	str	r2, [r7, #24]
 8006d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	613b      	str	r3, [r7, #16]
   return(result);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d76:	bf00      	nop
 8006d78:	3754      	adds	r7, #84	; 0x54
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff fede 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b21      	cmp	r3, #33	; 0x21
 8006dba:	d13e      	bne.n	8006e3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc4:	d114      	bne.n	8006df0 <UART_Transmit_IT+0x48>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d110      	bne.n	8006df0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	621a      	str	r2, [r3, #32]
 8006dee:	e008      	b.n	8006e02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6211      	str	r1, [r2, #32]
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e3a:	2302      	movs	r3, #2
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fe66 	bl	8006b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b08c      	sub	sp, #48	; 0x30
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b22      	cmp	r3, #34	; 0x22
 8006e88:	f040 80ae 	bne.w	8006fe8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e94:	d117      	bne.n	8006ec6 <UART_Receive_IT+0x50>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d113      	bne.n	8006ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ec4:	e026      	b.n	8006f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed8:	d007      	beq.n	8006eea <UART_Receive_IT+0x74>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <UART_Receive_IT+0x82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e008      	b.n	8006f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d15d      	bne.n	8006fe4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0220 	bic.w	r2, r2, #32
 8006f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d135      	bne.n	8006fda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f94:	623a      	str	r2, [r7, #32]
 8006f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d10a      	bne.n	8006fcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fa fbb2 	bl	800173c <HAL_UARTEx_RxEventCallback>
 8006fd8:	e002      	b.n	8006fe0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fdb5 	bl	8006b4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e002      	b.n	8006fea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e000      	b.n	8006fea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3730      	adds	r7, #48	; 0x30
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800702e:	f023 030c 	bic.w	r3, r3, #12
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	430b      	orrs	r3, r1
 800703a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2c      	ldr	r2, [pc, #176]	; (8007108 <UART_SetConfig+0x114>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fe f922 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	e002      	b.n	800706a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe f90a 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8007068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	4a22      	ldr	r2, [pc, #136]	; (800710c <UART_SetConfig+0x118>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	0119      	lsls	r1, r3, #4
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009a      	lsls	r2, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a0:	4b1a      	ldr	r3, [pc, #104]	; (800710c <UART_SetConfig+0x118>)
 80070a2:	fba3 0302 	umull	r0, r3, r3, r2
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2064      	movs	r0, #100	; 0x64
 80070aa:	fb00 f303 	mul.w	r3, r0, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	3332      	adds	r3, #50	; 0x32
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <UART_SetConfig+0x118>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c0:	4419      	add	r1, r3
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009a      	lsls	r2, r3, #2
 80070cc:	441a      	add	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <UART_SetConfig+0x118>)
 80070da:	fba3 0302 	umull	r0, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2064      	movs	r0, #100	; 0x64
 80070e2:	fb00 f303 	mul.w	r3, r0, r3
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	3332      	adds	r3, #50	; 0x32
 80070ec:	4a07      	ldr	r2, [pc, #28]	; (800710c <UART_SetConfig+0x118>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	440a      	add	r2, r1
 80070fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40013800 	.word	0x40013800
 800710c:	51eb851f 	.word	0x51eb851f

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	2000004c 	.word	0x2000004c

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	2600      	movs	r6, #0
 8007120:	4d0c      	ldr	r5, [pc, #48]	; (8007154 <__libc_init_array+0x38>)
 8007122:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	f000 fc5c 	bl	80079e8 <_init>
 8007130:	2600      	movs	r6, #0
 8007132:	4d0a      	ldr	r5, [pc, #40]	; (800715c <__libc_init_array+0x40>)
 8007134:	4c0a      	ldr	r4, [pc, #40]	; (8007160 <__libc_init_array+0x44>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f855 3b04 	ldr.w	r3, [r5], #4
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f855 3b04 	ldr.w	r3, [r5], #4
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	08007b48 	.word	0x08007b48
 8007158:	08007b48 	.word	0x08007b48
 800715c:	08007b48 	.word	0x08007b48
 8007160:	08007b4c 	.word	0x08007b4c

08007164 <memset>:
 8007164:	4603      	mov	r3, r0
 8007166:	4402      	add	r2, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <siprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800717a:	b500      	push	{lr}
 800717c:	b09c      	sub	sp, #112	; 0x70
 800717e:	ab1d      	add	r3, sp, #116	; 0x74
 8007180:	9002      	str	r0, [sp, #8]
 8007182:	9006      	str	r0, [sp, #24]
 8007184:	9107      	str	r1, [sp, #28]
 8007186:	9104      	str	r1, [sp, #16]
 8007188:	4808      	ldr	r0, [pc, #32]	; (80071ac <siprintf+0x38>)
 800718a:	4909      	ldr	r1, [pc, #36]	; (80071b0 <siprintf+0x3c>)
 800718c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007190:	9105      	str	r1, [sp, #20]
 8007192:	6800      	ldr	r0, [r0, #0]
 8007194:	a902      	add	r1, sp, #8
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f000 f868 	bl	800726c <_svfiprintf_r>
 800719c:	2200      	movs	r2, #0
 800719e:	9b02      	ldr	r3, [sp, #8]
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	b01c      	add	sp, #112	; 0x70
 80071a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a8:	b003      	add	sp, #12
 80071aa:	4770      	bx	lr
 80071ac:	2000004c 	.word	0x2000004c
 80071b0:	ffff0208 	.word	0xffff0208

080071b4 <__ssputs_r>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	688e      	ldr	r6, [r1, #8]
 80071ba:	4682      	mov	sl, r0
 80071bc:	429e      	cmp	r6, r3
 80071be:	460c      	mov	r4, r1
 80071c0:	4690      	mov	r8, r2
 80071c2:	461f      	mov	r7, r3
 80071c4:	d838      	bhi.n	8007238 <__ssputs_r+0x84>
 80071c6:	898a      	ldrh	r2, [r1, #12]
 80071c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071cc:	d032      	beq.n	8007234 <__ssputs_r+0x80>
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	6909      	ldr	r1, [r1, #16]
 80071d2:	3301      	adds	r3, #1
 80071d4:	eba5 0901 	sub.w	r9, r5, r1
 80071d8:	6965      	ldr	r5, [r4, #20]
 80071da:	444b      	add	r3, r9
 80071dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071e4:	106d      	asrs	r5, r5, #1
 80071e6:	429d      	cmp	r5, r3
 80071e8:	bf38      	it	cc
 80071ea:	461d      	movcc	r5, r3
 80071ec:	0553      	lsls	r3, r2, #21
 80071ee:	d531      	bpl.n	8007254 <__ssputs_r+0xa0>
 80071f0:	4629      	mov	r1, r5
 80071f2:	f000 fb53 	bl	800789c <_malloc_r>
 80071f6:	4606      	mov	r6, r0
 80071f8:	b950      	cbnz	r0, 8007210 <__ssputs_r+0x5c>
 80071fa:	230c      	movs	r3, #12
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	f8ca 3000 	str.w	r3, [sl]
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007210:	464a      	mov	r2, r9
 8007212:	6921      	ldr	r1, [r4, #16]
 8007214:	f000 face 	bl	80077b4 <memcpy>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800721e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	6126      	str	r6, [r4, #16]
 8007226:	444e      	add	r6, r9
 8007228:	6026      	str	r6, [r4, #0]
 800722a:	463e      	mov	r6, r7
 800722c:	6165      	str	r5, [r4, #20]
 800722e:	eba5 0509 	sub.w	r5, r5, r9
 8007232:	60a5      	str	r5, [r4, #8]
 8007234:	42be      	cmp	r6, r7
 8007236:	d900      	bls.n	800723a <__ssputs_r+0x86>
 8007238:	463e      	mov	r6, r7
 800723a:	4632      	mov	r2, r6
 800723c:	4641      	mov	r1, r8
 800723e:	6820      	ldr	r0, [r4, #0]
 8007240:	f000 fac6 	bl	80077d0 <memmove>
 8007244:	68a3      	ldr	r3, [r4, #8]
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	4432      	add	r2, r6
 800724c:	2000      	movs	r0, #0
 800724e:	60a3      	str	r3, [r4, #8]
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	e7db      	b.n	800720c <__ssputs_r+0x58>
 8007254:	462a      	mov	r2, r5
 8007256:	f000 fb7b 	bl	8007950 <_realloc_r>
 800725a:	4606      	mov	r6, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d1e1      	bne.n	8007224 <__ssputs_r+0x70>
 8007260:	4650      	mov	r0, sl
 8007262:	6921      	ldr	r1, [r4, #16]
 8007264:	f000 face 	bl	8007804 <_free_r>
 8007268:	e7c7      	b.n	80071fa <__ssputs_r+0x46>
	...

0800726c <_svfiprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	4698      	mov	r8, r3
 8007272:	898b      	ldrh	r3, [r1, #12]
 8007274:	4607      	mov	r7, r0
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	460d      	mov	r5, r1
 800727a:	4614      	mov	r4, r2
 800727c:	b09d      	sub	sp, #116	; 0x74
 800727e:	d50e      	bpl.n	800729e <_svfiprintf_r+0x32>
 8007280:	690b      	ldr	r3, [r1, #16]
 8007282:	b963      	cbnz	r3, 800729e <_svfiprintf_r+0x32>
 8007284:	2140      	movs	r1, #64	; 0x40
 8007286:	f000 fb09 	bl	800789c <_malloc_r>
 800728a:	6028      	str	r0, [r5, #0]
 800728c:	6128      	str	r0, [r5, #16]
 800728e:	b920      	cbnz	r0, 800729a <_svfiprintf_r+0x2e>
 8007290:	230c      	movs	r3, #12
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e0d1      	b.n	800743e <_svfiprintf_r+0x1d2>
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	2300      	movs	r3, #0
 80072a0:	9309      	str	r3, [sp, #36]	; 0x24
 80072a2:	2320      	movs	r3, #32
 80072a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072a8:	2330      	movs	r3, #48	; 0x30
 80072aa:	f04f 0901 	mov.w	r9, #1
 80072ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007458 <_svfiprintf_r+0x1ec>
 80072b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072ba:	4623      	mov	r3, r4
 80072bc:	469a      	mov	sl, r3
 80072be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c2:	b10a      	cbz	r2, 80072c8 <_svfiprintf_r+0x5c>
 80072c4:	2a25      	cmp	r2, #37	; 0x25
 80072c6:	d1f9      	bne.n	80072bc <_svfiprintf_r+0x50>
 80072c8:	ebba 0b04 	subs.w	fp, sl, r4
 80072cc:	d00b      	beq.n	80072e6 <_svfiprintf_r+0x7a>
 80072ce:	465b      	mov	r3, fp
 80072d0:	4622      	mov	r2, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	4638      	mov	r0, r7
 80072d6:	f7ff ff6d 	bl	80071b4 <__ssputs_r>
 80072da:	3001      	adds	r0, #1
 80072dc:	f000 80aa 	beq.w	8007434 <_svfiprintf_r+0x1c8>
 80072e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e2:	445a      	add	r2, fp
 80072e4:	9209      	str	r2, [sp, #36]	; 0x24
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80a2 	beq.w	8007434 <_svfiprintf_r+0x1c8>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fa:	f10a 0a01 	add.w	sl, sl, #1
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	9307      	str	r3, [sp, #28]
 8007302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007306:	931a      	str	r3, [sp, #104]	; 0x68
 8007308:	4654      	mov	r4, sl
 800730a:	2205      	movs	r2, #5
 800730c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007310:	4851      	ldr	r0, [pc, #324]	; (8007458 <_svfiprintf_r+0x1ec>)
 8007312:	f000 fa41 	bl	8007798 <memchr>
 8007316:	9a04      	ldr	r2, [sp, #16]
 8007318:	b9d8      	cbnz	r0, 8007352 <_svfiprintf_r+0xe6>
 800731a:	06d0      	lsls	r0, r2, #27
 800731c:	bf44      	itt	mi
 800731e:	2320      	movmi	r3, #32
 8007320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007324:	0711      	lsls	r1, r2, #28
 8007326:	bf44      	itt	mi
 8007328:	232b      	movmi	r3, #43	; 0x2b
 800732a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800732e:	f89a 3000 	ldrb.w	r3, [sl]
 8007332:	2b2a      	cmp	r3, #42	; 0x2a
 8007334:	d015      	beq.n	8007362 <_svfiprintf_r+0xf6>
 8007336:	4654      	mov	r4, sl
 8007338:	2000      	movs	r0, #0
 800733a:	f04f 0c0a 	mov.w	ip, #10
 800733e:	9a07      	ldr	r2, [sp, #28]
 8007340:	4621      	mov	r1, r4
 8007342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007346:	3b30      	subs	r3, #48	; 0x30
 8007348:	2b09      	cmp	r3, #9
 800734a:	d94e      	bls.n	80073ea <_svfiprintf_r+0x17e>
 800734c:	b1b0      	cbz	r0, 800737c <_svfiprintf_r+0x110>
 800734e:	9207      	str	r2, [sp, #28]
 8007350:	e014      	b.n	800737c <_svfiprintf_r+0x110>
 8007352:	eba0 0308 	sub.w	r3, r0, r8
 8007356:	fa09 f303 	lsl.w	r3, r9, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	46a2      	mov	sl, r4
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	e7d2      	b.n	8007308 <_svfiprintf_r+0x9c>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	1d19      	adds	r1, r3, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	9103      	str	r1, [sp, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfbb      	ittet	lt
 800736e:	425b      	neglt	r3, r3
 8007370:	f042 0202 	orrlt.w	r2, r2, #2
 8007374:	9307      	strge	r3, [sp, #28]
 8007376:	9307      	strlt	r3, [sp, #28]
 8007378:	bfb8      	it	lt
 800737a:	9204      	strlt	r2, [sp, #16]
 800737c:	7823      	ldrb	r3, [r4, #0]
 800737e:	2b2e      	cmp	r3, #46	; 0x2e
 8007380:	d10c      	bne.n	800739c <_svfiprintf_r+0x130>
 8007382:	7863      	ldrb	r3, [r4, #1]
 8007384:	2b2a      	cmp	r3, #42	; 0x2a
 8007386:	d135      	bne.n	80073f4 <_svfiprintf_r+0x188>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	3402      	adds	r4, #2
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9203      	str	r2, [sp, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfb8      	it	lt
 8007396:	f04f 33ff 	movlt.w	r3, #4294967295
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007468 <_svfiprintf_r+0x1fc>
 80073a0:	2203      	movs	r2, #3
 80073a2:	4650      	mov	r0, sl
 80073a4:	7821      	ldrb	r1, [r4, #0]
 80073a6:	f000 f9f7 	bl	8007798 <memchr>
 80073aa:	b140      	cbz	r0, 80073be <_svfiprintf_r+0x152>
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	eba0 000a 	sub.w	r0, r0, sl
 80073b2:	fa03 f000 	lsl.w	r0, r3, r0
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	3401      	adds	r4, #1
 80073ba:	4303      	orrs	r3, r0
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c2:	2206      	movs	r2, #6
 80073c4:	4825      	ldr	r0, [pc, #148]	; (800745c <_svfiprintf_r+0x1f0>)
 80073c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ca:	f000 f9e5 	bl	8007798 <memchr>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d038      	beq.n	8007444 <_svfiprintf_r+0x1d8>
 80073d2:	4b23      	ldr	r3, [pc, #140]	; (8007460 <_svfiprintf_r+0x1f4>)
 80073d4:	bb1b      	cbnz	r3, 800741e <_svfiprintf_r+0x1b2>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	3307      	adds	r3, #7
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	3308      	adds	r3, #8
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e4:	4433      	add	r3, r6
 80073e6:	9309      	str	r3, [sp, #36]	; 0x24
 80073e8:	e767      	b.n	80072ba <_svfiprintf_r+0x4e>
 80073ea:	460c      	mov	r4, r1
 80073ec:	2001      	movs	r0, #1
 80073ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80073f2:	e7a5      	b.n	8007340 <_svfiprintf_r+0xd4>
 80073f4:	2300      	movs	r3, #0
 80073f6:	f04f 0c0a 	mov.w	ip, #10
 80073fa:	4619      	mov	r1, r3
 80073fc:	3401      	adds	r4, #1
 80073fe:	9305      	str	r3, [sp, #20]
 8007400:	4620      	mov	r0, r4
 8007402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007406:	3a30      	subs	r2, #48	; 0x30
 8007408:	2a09      	cmp	r2, #9
 800740a:	d903      	bls.n	8007414 <_svfiprintf_r+0x1a8>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0c5      	beq.n	800739c <_svfiprintf_r+0x130>
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	e7c3      	b.n	800739c <_svfiprintf_r+0x130>
 8007414:	4604      	mov	r4, r0
 8007416:	2301      	movs	r3, #1
 8007418:	fb0c 2101 	mla	r1, ip, r1, r2
 800741c:	e7f0      	b.n	8007400 <_svfiprintf_r+0x194>
 800741e:	ab03      	add	r3, sp, #12
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	462a      	mov	r2, r5
 8007424:	4638      	mov	r0, r7
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <_svfiprintf_r+0x1f8>)
 8007428:	a904      	add	r1, sp, #16
 800742a:	f3af 8000 	nop.w
 800742e:	1c42      	adds	r2, r0, #1
 8007430:	4606      	mov	r6, r0
 8007432:	d1d6      	bne.n	80073e2 <_svfiprintf_r+0x176>
 8007434:	89ab      	ldrh	r3, [r5, #12]
 8007436:	065b      	lsls	r3, r3, #25
 8007438:	f53f af2c 	bmi.w	8007294 <_svfiprintf_r+0x28>
 800743c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800743e:	b01d      	add	sp, #116	; 0x74
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007444:	ab03      	add	r3, sp, #12
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	462a      	mov	r2, r5
 800744a:	4638      	mov	r0, r7
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <_svfiprintf_r+0x1f8>)
 800744e:	a904      	add	r1, sp, #16
 8007450:	f000 f87c 	bl	800754c <_printf_i>
 8007454:	e7eb      	b.n	800742e <_svfiprintf_r+0x1c2>
 8007456:	bf00      	nop
 8007458:	08007b12 	.word	0x08007b12
 800745c:	08007b1c 	.word	0x08007b1c
 8007460:	00000000 	.word	0x00000000
 8007464:	080071b5 	.word	0x080071b5
 8007468:	08007b18 	.word	0x08007b18

0800746c <_printf_common>:
 800746c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	4616      	mov	r6, r2
 8007472:	4699      	mov	r9, r3
 8007474:	688a      	ldr	r2, [r1, #8]
 8007476:	690b      	ldr	r3, [r1, #16]
 8007478:	4607      	mov	r7, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	bfb8      	it	lt
 800747e:	4613      	movlt	r3, r2
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007486:	460c      	mov	r4, r1
 8007488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800748c:	b10a      	cbz	r2, 8007492 <_printf_common+0x26>
 800748e:	3301      	adds	r3, #1
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	0699      	lsls	r1, r3, #26
 8007496:	bf42      	ittt	mi
 8007498:	6833      	ldrmi	r3, [r6, #0]
 800749a:	3302      	addmi	r3, #2
 800749c:	6033      	strmi	r3, [r6, #0]
 800749e:	6825      	ldr	r5, [r4, #0]
 80074a0:	f015 0506 	ands.w	r5, r5, #6
 80074a4:	d106      	bne.n	80074b4 <_printf_common+0x48>
 80074a6:	f104 0a19 	add.w	sl, r4, #25
 80074aa:	68e3      	ldr	r3, [r4, #12]
 80074ac:	6832      	ldr	r2, [r6, #0]
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	42ab      	cmp	r3, r5
 80074b2:	dc28      	bgt.n	8007506 <_printf_common+0x9a>
 80074b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074b8:	1e13      	subs	r3, r2, #0
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	bf18      	it	ne
 80074be:	2301      	movne	r3, #1
 80074c0:	0692      	lsls	r2, r2, #26
 80074c2:	d42d      	bmi.n	8007520 <_printf_common+0xb4>
 80074c4:	4649      	mov	r1, r9
 80074c6:	4638      	mov	r0, r7
 80074c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074cc:	47c0      	blx	r8
 80074ce:	3001      	adds	r0, #1
 80074d0:	d020      	beq.n	8007514 <_printf_common+0xa8>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	68e5      	ldr	r5, [r4, #12]
 80074d6:	f003 0306 	and.w	r3, r3, #6
 80074da:	2b04      	cmp	r3, #4
 80074dc:	bf18      	it	ne
 80074de:	2500      	movne	r5, #0
 80074e0:	6832      	ldr	r2, [r6, #0]
 80074e2:	f04f 0600 	mov.w	r6, #0
 80074e6:	68a3      	ldr	r3, [r4, #8]
 80074e8:	bf08      	it	eq
 80074ea:	1aad      	subeq	r5, r5, r2
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	bf08      	it	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bfc4      	itt	gt
 80074f8:	1a9b      	subgt	r3, r3, r2
 80074fa:	18ed      	addgt	r5, r5, r3
 80074fc:	341a      	adds	r4, #26
 80074fe:	42b5      	cmp	r5, r6
 8007500:	d11a      	bne.n	8007538 <_printf_common+0xcc>
 8007502:	2000      	movs	r0, #0
 8007504:	e008      	b.n	8007518 <_printf_common+0xac>
 8007506:	2301      	movs	r3, #1
 8007508:	4652      	mov	r2, sl
 800750a:	4649      	mov	r1, r9
 800750c:	4638      	mov	r0, r7
 800750e:	47c0      	blx	r8
 8007510:	3001      	adds	r0, #1
 8007512:	d103      	bne.n	800751c <_printf_common+0xb0>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751c:	3501      	adds	r5, #1
 800751e:	e7c4      	b.n	80074aa <_printf_common+0x3e>
 8007520:	2030      	movs	r0, #48	; 0x30
 8007522:	18e1      	adds	r1, r4, r3
 8007524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800752e:	4422      	add	r2, r4
 8007530:	3302      	adds	r3, #2
 8007532:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007536:	e7c5      	b.n	80074c4 <_printf_common+0x58>
 8007538:	2301      	movs	r3, #1
 800753a:	4622      	mov	r2, r4
 800753c:	4649      	mov	r1, r9
 800753e:	4638      	mov	r0, r7
 8007540:	47c0      	blx	r8
 8007542:	3001      	adds	r0, #1
 8007544:	d0e6      	beq.n	8007514 <_printf_common+0xa8>
 8007546:	3601      	adds	r6, #1
 8007548:	e7d9      	b.n	80074fe <_printf_common+0x92>
	...

0800754c <_printf_i>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	7e27      	ldrb	r7, [r4, #24]
 8007554:	4691      	mov	r9, r2
 8007556:	2f78      	cmp	r7, #120	; 0x78
 8007558:	4680      	mov	r8, r0
 800755a:	469a      	mov	sl, r3
 800755c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800755e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007562:	d807      	bhi.n	8007574 <_printf_i+0x28>
 8007564:	2f62      	cmp	r7, #98	; 0x62
 8007566:	d80a      	bhi.n	800757e <_printf_i+0x32>
 8007568:	2f00      	cmp	r7, #0
 800756a:	f000 80d9 	beq.w	8007720 <_printf_i+0x1d4>
 800756e:	2f58      	cmp	r7, #88	; 0x58
 8007570:	f000 80a4 	beq.w	80076bc <_printf_i+0x170>
 8007574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800757c:	e03a      	b.n	80075f4 <_printf_i+0xa8>
 800757e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007582:	2b15      	cmp	r3, #21
 8007584:	d8f6      	bhi.n	8007574 <_printf_i+0x28>
 8007586:	a001      	add	r0, pc, #4	; (adr r0, 800758c <_printf_i+0x40>)
 8007588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800758c:	080075e5 	.word	0x080075e5
 8007590:	080075f9 	.word	0x080075f9
 8007594:	08007575 	.word	0x08007575
 8007598:	08007575 	.word	0x08007575
 800759c:	08007575 	.word	0x08007575
 80075a0:	08007575 	.word	0x08007575
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007575 	.word	0x08007575
 80075ac:	08007575 	.word	0x08007575
 80075b0:	08007575 	.word	0x08007575
 80075b4:	08007575 	.word	0x08007575
 80075b8:	08007707 	.word	0x08007707
 80075bc:	08007629 	.word	0x08007629
 80075c0:	080076e9 	.word	0x080076e9
 80075c4:	08007575 	.word	0x08007575
 80075c8:	08007575 	.word	0x08007575
 80075cc:	08007729 	.word	0x08007729
 80075d0:	08007575 	.word	0x08007575
 80075d4:	08007629 	.word	0x08007629
 80075d8:	08007575 	.word	0x08007575
 80075dc:	08007575 	.word	0x08007575
 80075e0:	080076f1 	.word	0x080076f1
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	600a      	str	r2, [r1, #0]
 80075f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0a4      	b.n	8007742 <_printf_i+0x1f6>
 80075f8:	6825      	ldr	r5, [r4, #0]
 80075fa:	6808      	ldr	r0, [r1, #0]
 80075fc:	062e      	lsls	r6, r5, #24
 80075fe:	f100 0304 	add.w	r3, r0, #4
 8007602:	d50a      	bpl.n	800761a <_printf_i+0xce>
 8007604:	6805      	ldr	r5, [r0, #0]
 8007606:	600b      	str	r3, [r1, #0]
 8007608:	2d00      	cmp	r5, #0
 800760a:	da03      	bge.n	8007614 <_printf_i+0xc8>
 800760c:	232d      	movs	r3, #45	; 0x2d
 800760e:	426d      	negs	r5, r5
 8007610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007614:	230a      	movs	r3, #10
 8007616:	485e      	ldr	r0, [pc, #376]	; (8007790 <_printf_i+0x244>)
 8007618:	e019      	b.n	800764e <_printf_i+0x102>
 800761a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800761e:	6805      	ldr	r5, [r0, #0]
 8007620:	600b      	str	r3, [r1, #0]
 8007622:	bf18      	it	ne
 8007624:	b22d      	sxthne	r5, r5
 8007626:	e7ef      	b.n	8007608 <_printf_i+0xbc>
 8007628:	680b      	ldr	r3, [r1, #0]
 800762a:	6825      	ldr	r5, [r4, #0]
 800762c:	1d18      	adds	r0, r3, #4
 800762e:	6008      	str	r0, [r1, #0]
 8007630:	0628      	lsls	r0, r5, #24
 8007632:	d501      	bpl.n	8007638 <_printf_i+0xec>
 8007634:	681d      	ldr	r5, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0xf2>
 8007638:	0669      	lsls	r1, r5, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0xe8>
 800763c:	881d      	ldrh	r5, [r3, #0]
 800763e:	2f6f      	cmp	r7, #111	; 0x6f
 8007640:	bf0c      	ite	eq
 8007642:	2308      	moveq	r3, #8
 8007644:	230a      	movne	r3, #10
 8007646:	4852      	ldr	r0, [pc, #328]	; (8007790 <_printf_i+0x244>)
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800764e:	6866      	ldr	r6, [r4, #4]
 8007650:	2e00      	cmp	r6, #0
 8007652:	bfa8      	it	ge
 8007654:	6821      	ldrge	r1, [r4, #0]
 8007656:	60a6      	str	r6, [r4, #8]
 8007658:	bfa4      	itt	ge
 800765a:	f021 0104 	bicge.w	r1, r1, #4
 800765e:	6021      	strge	r1, [r4, #0]
 8007660:	b90d      	cbnz	r5, 8007666 <_printf_i+0x11a>
 8007662:	2e00      	cmp	r6, #0
 8007664:	d04d      	beq.n	8007702 <_printf_i+0x1b6>
 8007666:	4616      	mov	r6, r2
 8007668:	fbb5 f1f3 	udiv	r1, r5, r3
 800766c:	fb03 5711 	mls	r7, r3, r1, r5
 8007670:	5dc7      	ldrb	r7, [r0, r7]
 8007672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007676:	462f      	mov	r7, r5
 8007678:	42bb      	cmp	r3, r7
 800767a:	460d      	mov	r5, r1
 800767c:	d9f4      	bls.n	8007668 <_printf_i+0x11c>
 800767e:	2b08      	cmp	r3, #8
 8007680:	d10b      	bne.n	800769a <_printf_i+0x14e>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	07df      	lsls	r7, r3, #31
 8007686:	d508      	bpl.n	800769a <_printf_i+0x14e>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	6861      	ldr	r1, [r4, #4]
 800768c:	4299      	cmp	r1, r3
 800768e:	bfde      	ittt	le
 8007690:	2330      	movle	r3, #48	; 0x30
 8007692:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800769a:	1b92      	subs	r2, r2, r6
 800769c:	6122      	str	r2, [r4, #16]
 800769e:	464b      	mov	r3, r9
 80076a0:	4621      	mov	r1, r4
 80076a2:	4640      	mov	r0, r8
 80076a4:	f8cd a000 	str.w	sl, [sp]
 80076a8:	aa03      	add	r2, sp, #12
 80076aa:	f7ff fedf 	bl	800746c <_printf_common>
 80076ae:	3001      	adds	r0, #1
 80076b0:	d14c      	bne.n	800774c <_printf_i+0x200>
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	b004      	add	sp, #16
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	4834      	ldr	r0, [pc, #208]	; (8007790 <_printf_i+0x244>)
 80076be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076c2:	680e      	ldr	r6, [r1, #0]
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ca:	061f      	lsls	r7, r3, #24
 80076cc:	600e      	str	r6, [r1, #0]
 80076ce:	d514      	bpl.n	80076fa <_printf_i+0x1ae>
 80076d0:	07d9      	lsls	r1, r3, #31
 80076d2:	bf44      	itt	mi
 80076d4:	f043 0320 	orrmi.w	r3, r3, #32
 80076d8:	6023      	strmi	r3, [r4, #0]
 80076da:	b91d      	cbnz	r5, 80076e4 <_printf_i+0x198>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	f023 0320 	bic.w	r3, r3, #32
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	2310      	movs	r3, #16
 80076e6:	e7af      	b.n	8007648 <_printf_i+0xfc>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	f043 0320 	orr.w	r3, r3, #32
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	2378      	movs	r3, #120	; 0x78
 80076f2:	4828      	ldr	r0, [pc, #160]	; (8007794 <_printf_i+0x248>)
 80076f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076f8:	e7e3      	b.n	80076c2 <_printf_i+0x176>
 80076fa:	065e      	lsls	r6, r3, #25
 80076fc:	bf48      	it	mi
 80076fe:	b2ad      	uxthmi	r5, r5
 8007700:	e7e6      	b.n	80076d0 <_printf_i+0x184>
 8007702:	4616      	mov	r6, r2
 8007704:	e7bb      	b.n	800767e <_printf_i+0x132>
 8007706:	680b      	ldr	r3, [r1, #0]
 8007708:	6826      	ldr	r6, [r4, #0]
 800770a:	1d1d      	adds	r5, r3, #4
 800770c:	6960      	ldr	r0, [r4, #20]
 800770e:	600d      	str	r5, [r1, #0]
 8007710:	0635      	lsls	r5, r6, #24
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	d501      	bpl.n	800771a <_printf_i+0x1ce>
 8007716:	6018      	str	r0, [r3, #0]
 8007718:	e002      	b.n	8007720 <_printf_i+0x1d4>
 800771a:	0671      	lsls	r1, r6, #25
 800771c:	d5fb      	bpl.n	8007716 <_printf_i+0x1ca>
 800771e:	8018      	strh	r0, [r3, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	4616      	mov	r6, r2
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	e7ba      	b.n	800769e <_printf_i+0x152>
 8007728:	680b      	ldr	r3, [r1, #0]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	600a      	str	r2, [r1, #0]
 800772e:	681e      	ldr	r6, [r3, #0]
 8007730:	2100      	movs	r1, #0
 8007732:	4630      	mov	r0, r6
 8007734:	6862      	ldr	r2, [r4, #4]
 8007736:	f000 f82f 	bl	8007798 <memchr>
 800773a:	b108      	cbz	r0, 8007740 <_printf_i+0x1f4>
 800773c:	1b80      	subs	r0, r0, r6
 800773e:	6060      	str	r0, [r4, #4]
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	6123      	str	r3, [r4, #16]
 8007744:	2300      	movs	r3, #0
 8007746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774a:	e7a8      	b.n	800769e <_printf_i+0x152>
 800774c:	4632      	mov	r2, r6
 800774e:	4649      	mov	r1, r9
 8007750:	4640      	mov	r0, r8
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	47d0      	blx	sl
 8007756:	3001      	adds	r0, #1
 8007758:	d0ab      	beq.n	80076b2 <_printf_i+0x166>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	079b      	lsls	r3, r3, #30
 800775e:	d413      	bmi.n	8007788 <_printf_i+0x23c>
 8007760:	68e0      	ldr	r0, [r4, #12]
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	4298      	cmp	r0, r3
 8007766:	bfb8      	it	lt
 8007768:	4618      	movlt	r0, r3
 800776a:	e7a4      	b.n	80076b6 <_printf_i+0x16a>
 800776c:	2301      	movs	r3, #1
 800776e:	4632      	mov	r2, r6
 8007770:	4649      	mov	r1, r9
 8007772:	4640      	mov	r0, r8
 8007774:	47d0      	blx	sl
 8007776:	3001      	adds	r0, #1
 8007778:	d09b      	beq.n	80076b2 <_printf_i+0x166>
 800777a:	3501      	adds	r5, #1
 800777c:	68e3      	ldr	r3, [r4, #12]
 800777e:	9903      	ldr	r1, [sp, #12]
 8007780:	1a5b      	subs	r3, r3, r1
 8007782:	42ab      	cmp	r3, r5
 8007784:	dcf2      	bgt.n	800776c <_printf_i+0x220>
 8007786:	e7eb      	b.n	8007760 <_printf_i+0x214>
 8007788:	2500      	movs	r5, #0
 800778a:	f104 0619 	add.w	r6, r4, #25
 800778e:	e7f5      	b.n	800777c <_printf_i+0x230>
 8007790:	08007b23 	.word	0x08007b23
 8007794:	08007b34 	.word	0x08007b34

08007798 <memchr>:
 8007798:	4603      	mov	r3, r0
 800779a:	b510      	push	{r4, lr}
 800779c:	b2c9      	uxtb	r1, r1
 800779e:	4402      	add	r2, r0
 80077a0:	4293      	cmp	r3, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	d101      	bne.n	80077aa <memchr+0x12>
 80077a6:	2000      	movs	r0, #0
 80077a8:	e003      	b.n	80077b2 <memchr+0x1a>
 80077aa:	7804      	ldrb	r4, [r0, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	428c      	cmp	r4, r1
 80077b0:	d1f6      	bne.n	80077a0 <memchr+0x8>
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <memcpy>:
 80077b4:	440a      	add	r2, r1
 80077b6:	4291      	cmp	r1, r2
 80077b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077bc:	d100      	bne.n	80077c0 <memcpy+0xc>
 80077be:	4770      	bx	lr
 80077c0:	b510      	push	{r4, lr}
 80077c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c6:	4291      	cmp	r1, r2
 80077c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077cc:	d1f9      	bne.n	80077c2 <memcpy+0xe>
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <memmove>:
 80077d0:	4288      	cmp	r0, r1
 80077d2:	b510      	push	{r4, lr}
 80077d4:	eb01 0402 	add.w	r4, r1, r2
 80077d8:	d902      	bls.n	80077e0 <memmove+0x10>
 80077da:	4284      	cmp	r4, r0
 80077dc:	4623      	mov	r3, r4
 80077de:	d807      	bhi.n	80077f0 <memmove+0x20>
 80077e0:	1e43      	subs	r3, r0, #1
 80077e2:	42a1      	cmp	r1, r4
 80077e4:	d008      	beq.n	80077f8 <memmove+0x28>
 80077e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ee:	e7f8      	b.n	80077e2 <memmove+0x12>
 80077f0:	4601      	mov	r1, r0
 80077f2:	4402      	add	r2, r0
 80077f4:	428a      	cmp	r2, r1
 80077f6:	d100      	bne.n	80077fa <memmove+0x2a>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007802:	e7f7      	b.n	80077f4 <memmove+0x24>

08007804 <_free_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4605      	mov	r5, r0
 8007808:	2900      	cmp	r1, #0
 800780a:	d043      	beq.n	8007894 <_free_r+0x90>
 800780c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007810:	1f0c      	subs	r4, r1, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfb8      	it	lt
 8007816:	18e4      	addlt	r4, r4, r3
 8007818:	f000 f8d0 	bl	80079bc <__malloc_lock>
 800781c:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <_free_r+0x94>)
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	4610      	mov	r0, r2
 8007822:	b933      	cbnz	r3, 8007832 <_free_r+0x2e>
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	6014      	str	r4, [r2, #0]
 8007828:	4628      	mov	r0, r5
 800782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782e:	f000 b8cb 	b.w	80079c8 <__malloc_unlock>
 8007832:	42a3      	cmp	r3, r4
 8007834:	d90a      	bls.n	800784c <_free_r+0x48>
 8007836:	6821      	ldr	r1, [r4, #0]
 8007838:	1862      	adds	r2, r4, r1
 800783a:	4293      	cmp	r3, r2
 800783c:	bf01      	itttt	eq
 800783e:	681a      	ldreq	r2, [r3, #0]
 8007840:	685b      	ldreq	r3, [r3, #4]
 8007842:	1852      	addeq	r2, r2, r1
 8007844:	6022      	streq	r2, [r4, #0]
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	6004      	str	r4, [r0, #0]
 800784a:	e7ed      	b.n	8007828 <_free_r+0x24>
 800784c:	461a      	mov	r2, r3
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	b10b      	cbz	r3, 8007856 <_free_r+0x52>
 8007852:	42a3      	cmp	r3, r4
 8007854:	d9fa      	bls.n	800784c <_free_r+0x48>
 8007856:	6811      	ldr	r1, [r2, #0]
 8007858:	1850      	adds	r0, r2, r1
 800785a:	42a0      	cmp	r0, r4
 800785c:	d10b      	bne.n	8007876 <_free_r+0x72>
 800785e:	6820      	ldr	r0, [r4, #0]
 8007860:	4401      	add	r1, r0
 8007862:	1850      	adds	r0, r2, r1
 8007864:	4283      	cmp	r3, r0
 8007866:	6011      	str	r1, [r2, #0]
 8007868:	d1de      	bne.n	8007828 <_free_r+0x24>
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4401      	add	r1, r0
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	6053      	str	r3, [r2, #4]
 8007874:	e7d8      	b.n	8007828 <_free_r+0x24>
 8007876:	d902      	bls.n	800787e <_free_r+0x7a>
 8007878:	230c      	movs	r3, #12
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	e7d4      	b.n	8007828 <_free_r+0x24>
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	1821      	adds	r1, r4, r0
 8007882:	428b      	cmp	r3, r1
 8007884:	bf01      	itttt	eq
 8007886:	6819      	ldreq	r1, [r3, #0]
 8007888:	685b      	ldreq	r3, [r3, #4]
 800788a:	1809      	addeq	r1, r1, r0
 800788c:	6021      	streq	r1, [r4, #0]
 800788e:	6063      	str	r3, [r4, #4]
 8007890:	6054      	str	r4, [r2, #4]
 8007892:	e7c9      	b.n	8007828 <_free_r+0x24>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	20000118 	.word	0x20000118

0800789c <_malloc_r>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	1ccd      	adds	r5, r1, #3
 80078a0:	f025 0503 	bic.w	r5, r5, #3
 80078a4:	3508      	adds	r5, #8
 80078a6:	2d0c      	cmp	r5, #12
 80078a8:	bf38      	it	cc
 80078aa:	250c      	movcc	r5, #12
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	4606      	mov	r6, r0
 80078b0:	db01      	blt.n	80078b6 <_malloc_r+0x1a>
 80078b2:	42a9      	cmp	r1, r5
 80078b4:	d903      	bls.n	80078be <_malloc_r+0x22>
 80078b6:	230c      	movs	r3, #12
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	2000      	movs	r0, #0
 80078bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078be:	f000 f87d 	bl	80079bc <__malloc_lock>
 80078c2:	4921      	ldr	r1, [pc, #132]	; (8007948 <_malloc_r+0xac>)
 80078c4:	680a      	ldr	r2, [r1, #0]
 80078c6:	4614      	mov	r4, r2
 80078c8:	b99c      	cbnz	r4, 80078f2 <_malloc_r+0x56>
 80078ca:	4f20      	ldr	r7, [pc, #128]	; (800794c <_malloc_r+0xb0>)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	b923      	cbnz	r3, 80078da <_malloc_r+0x3e>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4630      	mov	r0, r6
 80078d4:	f000 f862 	bl	800799c <_sbrk_r>
 80078d8:	6038      	str	r0, [r7, #0]
 80078da:	4629      	mov	r1, r5
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f85d 	bl	800799c <_sbrk_r>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d123      	bne.n	800792e <_malloc_r+0x92>
 80078e6:	230c      	movs	r3, #12
 80078e8:	4630      	mov	r0, r6
 80078ea:	6033      	str	r3, [r6, #0]
 80078ec:	f000 f86c 	bl	80079c8 <__malloc_unlock>
 80078f0:	e7e3      	b.n	80078ba <_malloc_r+0x1e>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	1b5b      	subs	r3, r3, r5
 80078f6:	d417      	bmi.n	8007928 <_malloc_r+0x8c>
 80078f8:	2b0b      	cmp	r3, #11
 80078fa:	d903      	bls.n	8007904 <_malloc_r+0x68>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	441c      	add	r4, r3
 8007900:	6025      	str	r5, [r4, #0]
 8007902:	e004      	b.n	800790e <_malloc_r+0x72>
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	42a2      	cmp	r2, r4
 8007908:	bf0c      	ite	eq
 800790a:	600b      	streq	r3, [r1, #0]
 800790c:	6053      	strne	r3, [r2, #4]
 800790e:	4630      	mov	r0, r6
 8007910:	f000 f85a 	bl	80079c8 <__malloc_unlock>
 8007914:	f104 000b 	add.w	r0, r4, #11
 8007918:	1d23      	adds	r3, r4, #4
 800791a:	f020 0007 	bic.w	r0, r0, #7
 800791e:	1ac2      	subs	r2, r0, r3
 8007920:	d0cc      	beq.n	80078bc <_malloc_r+0x20>
 8007922:	1a1b      	subs	r3, r3, r0
 8007924:	50a3      	str	r3, [r4, r2]
 8007926:	e7c9      	b.n	80078bc <_malloc_r+0x20>
 8007928:	4622      	mov	r2, r4
 800792a:	6864      	ldr	r4, [r4, #4]
 800792c:	e7cc      	b.n	80078c8 <_malloc_r+0x2c>
 800792e:	1cc4      	adds	r4, r0, #3
 8007930:	f024 0403 	bic.w	r4, r4, #3
 8007934:	42a0      	cmp	r0, r4
 8007936:	d0e3      	beq.n	8007900 <_malloc_r+0x64>
 8007938:	1a21      	subs	r1, r4, r0
 800793a:	4630      	mov	r0, r6
 800793c:	f000 f82e 	bl	800799c <_sbrk_r>
 8007940:	3001      	adds	r0, #1
 8007942:	d1dd      	bne.n	8007900 <_malloc_r+0x64>
 8007944:	e7cf      	b.n	80078e6 <_malloc_r+0x4a>
 8007946:	bf00      	nop
 8007948:	20000118 	.word	0x20000118
 800794c:	2000011c 	.word	0x2000011c

08007950 <_realloc_r>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	4607      	mov	r7, r0
 8007954:	4614      	mov	r4, r2
 8007956:	460e      	mov	r6, r1
 8007958:	b921      	cbnz	r1, 8007964 <_realloc_r+0x14>
 800795a:	4611      	mov	r1, r2
 800795c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007960:	f7ff bf9c 	b.w	800789c <_malloc_r>
 8007964:	b922      	cbnz	r2, 8007970 <_realloc_r+0x20>
 8007966:	f7ff ff4d 	bl	8007804 <_free_r>
 800796a:	4625      	mov	r5, r4
 800796c:	4628      	mov	r0, r5
 800796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007970:	f000 f830 	bl	80079d4 <_malloc_usable_size_r>
 8007974:	42a0      	cmp	r0, r4
 8007976:	d20f      	bcs.n	8007998 <_realloc_r+0x48>
 8007978:	4621      	mov	r1, r4
 800797a:	4638      	mov	r0, r7
 800797c:	f7ff ff8e 	bl	800789c <_malloc_r>
 8007980:	4605      	mov	r5, r0
 8007982:	2800      	cmp	r0, #0
 8007984:	d0f2      	beq.n	800796c <_realloc_r+0x1c>
 8007986:	4631      	mov	r1, r6
 8007988:	4622      	mov	r2, r4
 800798a:	f7ff ff13 	bl	80077b4 <memcpy>
 800798e:	4631      	mov	r1, r6
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ff37 	bl	8007804 <_free_r>
 8007996:	e7e9      	b.n	800796c <_realloc_r+0x1c>
 8007998:	4635      	mov	r5, r6
 800799a:	e7e7      	b.n	800796c <_realloc_r+0x1c>

0800799c <_sbrk_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	2300      	movs	r3, #0
 80079a0:	4d05      	ldr	r5, [pc, #20]	; (80079b8 <_sbrk_r+0x1c>)
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7fb f93e 	bl	8002c28 <_sbrk>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_sbrk_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_sbrk_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000490 	.word	0x20000490

080079bc <__malloc_lock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	; (80079c4 <__malloc_lock+0x8>)
 80079be:	f000 b811 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 80079c2:	bf00      	nop
 80079c4:	20000498 	.word	0x20000498

080079c8 <__malloc_unlock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_unlock+0x8>)
 80079ca:	f000 b80c 	b.w	80079e6 <__retarget_lock_release_recursive>
 80079ce:	bf00      	nop
 80079d0:	20000498 	.word	0x20000498

080079d4 <_malloc_usable_size_r>:
 80079d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d8:	1f18      	subs	r0, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfbc      	itt	lt
 80079de:	580b      	ldrlt	r3, [r1, r0]
 80079e0:	18c0      	addlt	r0, r0, r3
 80079e2:	4770      	bx	lr

080079e4 <__retarget_lock_acquire_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_release_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
