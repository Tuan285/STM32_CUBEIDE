
SMART_GAREN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080092b8  080092b8  000192b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009774  08009774  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009774  08009774  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800977c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001e0  08009958  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08009958  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c35  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a17  00000000  00000000  00032e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00035858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00036a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bed  00000000  00000000  00037b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152cf  00000000  00000000  00051755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a17  00000000  00000000  00066a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa43b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f40  00000000  00000000  000fa48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080092a0 	.word	0x080092a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080092a0 	.word	0x080092a0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2iz>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30f      	bcc.n	800106e <__aeabi_f2iz+0x2a>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d90d      	bls.n	8001074 <__aeabi_f2iz+0x30>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001064:	fa23 f002 	lsr.w	r0, r3, r2
 8001068:	bf18      	it	ne
 800106a:	4240      	negne	r0, r0
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr
 8001074:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001078:	d101      	bne.n	800107e <__aeabi_f2iz+0x3a>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	d105      	bne.n	800108a <__aeabi_f2iz+0x46>
 800107e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001082:	bf08      	it	eq
 8001084:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr

08001090 <bt_release_callback>:
#include "button.h"

// ----------------- FUNCTION ---------------
__weak void bt_press_callback(Button_t *button) {
}
__weak void bt_release_callback(Button_t *button) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <bt_press_timout_callback>:
__weak void bt_press_timout_callback(Button_t *button) {
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <bt_handle>:
void bt_handle(Button_t *button) {	// GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(button->PORT, button->PIN);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	889b      	ldrh	r3, [r3, #4]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f002 fe32 	bl	8003d30 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	if (state != button->btn_filter) {		/// loc nhieu nut nhan
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	799b      	ldrb	r3, [r3, #6]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d007      	beq.n	80010ea <bt_handle+0x36>
		button->btn_filter = state;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	719a      	strb	r2, [r3, #6]
		button->t_debounce = HAL_GetTick();
 80010e0:	f001 fc4a 	bl	8002978 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
	}
	if (HAL_GetTick() - button->t_debounce >= 15) {		/// het khoang thoi gian nhieu
 80010ea:	f001 fc45 	bl	8002978 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b0e      	cmp	r3, #14
 80010f8:	d91f      	bls.n	800113a <bt_handle+0x86>
		button->btn_current = state;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	721a      	strb	r2, [r3, #8]
		if (button->btn_current != button->btn_last) {			// dang nhan
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7a1a      	ldrb	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	79db      	ldrb	r3, [r3, #7]
 8001108:	429a      	cmp	r2, r3
 800110a:	d016      	beq.n	800113a <bt_handle+0x86>
			if (button->btn_current == 0) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <bt_handle+0x78>
				button->time_start_press = HAL_GetTick();
 8001114:	f001 fc30 	bl	8002978 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
				button->is_press = 1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	751a      	strb	r2, [r3, #20]
				bt_press_callback(button);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 facd 	bl	80016c4 <bt_press_callback>
 800112a:	e002      	b.n	8001132 <bt_handle+0x7e>
			} else {
				bt_release_callback(button);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffaf 	bl	8001090 <bt_release_callback>
			}
			button->btn_last = button->btn_current;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7a1a      	ldrb	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	71da      	strb	r2, [r3, #7]
		}
	}
	if (button->is_press && HAL_GetTick() - button->time_start_press >= 3000) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7d1b      	ldrb	r3, [r3, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00f      	beq.n	8001162 <bt_handle+0xae>
 8001142:	f001 fc19 	bl	8002978 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001152:	4293      	cmp	r3, r2
 8001154:	d905      	bls.n	8001162 <bt_handle+0xae>
		button->is_press = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	751a      	strb	r2, [r3, #20]
		bt_press_timout_callback(button);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffa0 	bl	80010a2 <bt_press_timout_callback>
	}
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <Button_Init>:
void Button_Init(Button_t *button, GPIO_TypeDef *PORT, uint16_t PIN) {
 800116a:	b480      	push	{r7}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
	button->PORT = PORT;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	601a      	str	r2, [r3, #0]
	button->PIN = PIN;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	809a      	strh	r2, [r3, #4]
	button->btn_filter = 1;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	719a      	strb	r2, [r3, #6]
	button->btn_last = 1;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	71da      	strb	r2, [r3, #7]
	button->btn_current = 0;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	721a      	strb	r2, [r3, #8]
	button->t_debounce = 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
	button->time_start_press = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
	button->is_press = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	751a      	strb	r2, [r3, #20]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 030c 	orr.w	r3, r3, #12
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	f043 030c 	orr.w	r3, r3, #12
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2304      	movs	r3, #4
 80011fe:	214e      	movs	r1, #78	; 0x4e
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <lcd_send_cmd+0x5c>)
 8001202:	f002 ff09 	bl	8004018 <HAL_I2C_Master_Transmit>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000270 	.word	0x20000270

08001214 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f023 030f 	bic.w	r3, r3, #15
 8001224:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 030d 	orr.w	r3, r3, #13
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f043 0309 	orr.w	r3, r3, #9
 800123c:	b2db      	uxtb	r3, r3
 800123e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	f043 030d 	orr.w	r3, r3, #13
 8001246:	b2db      	uxtb	r3, r3
 8001248:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f043 0309 	orr.w	r3, r3, #9
 8001250:	b2db      	uxtb	r3, r3
 8001252:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2304      	movs	r3, #4
 800125e:	214e      	movs	r1, #78	; 0x4e
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <lcd_send_data+0x5c>)
 8001262:	f002 fed9 	bl	8004018 <HAL_I2C_Master_Transmit>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000270 	.word	0x20000270

08001274 <lcd_init>:

void lcd_init (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001278:	2033      	movs	r0, #51	; 0x33
 800127a:	f7ff ff9b 	bl	80011b4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f7ff ff98 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 8001284:	2032      	movs	r0, #50	; 0x32
 8001286:	f001 fb81 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f7ff ff92 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 8001290:	2032      	movs	r0, #50	; 0x32
 8001292:	f001 fb7b 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff ff8c 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f001 fb75 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80012a2:	2006      	movs	r0, #6
 80012a4:	f7ff ff86 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f001 fb6f 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 80012ae:	200c      	movs	r0, #12
 80012b0:	f7ff ff80 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f001 fb69 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80012ba:	2002      	movs	r0, #2
 80012bc:	f7ff ff7a 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(50);
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f001 fb63 	bl	800298c <HAL_Delay>
	lcd_send_cmd (0x80);
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	f7ff ff74 	bl	80011b4 <lcd_send_cmd>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012d8:	e006      	b.n	80012e8 <lcd_send_string+0x18>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff96 	bl	8001214 <lcd_send_data>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f4      	bne.n	80012da <lcd_send_string+0xa>
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	337f      	adds	r3, #127	; 0x7f
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e008      	b.n	800132e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3340      	adds	r3, #64	; 0x40
 8001322:	b2db      	uxtb	r3, r3
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132a:	b25b      	sxtb	r3, r3
 800132c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff3f 	bl	80011b4 <lcd_send_cmd>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <microDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t delay) {		//SU DUNG TIMER1 DE DELAY MICRO SECOND
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <microDelay+0x2c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001352:	bf00      	nop
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <microDelay+0x2c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3f9      	bcc.n	8001354 <microDelay+0x14>
		;
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200002c4 	.word	0x200002c4

08001370 <DHT22_Start>:

float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

uint8_t DHT22_Start(void) {		// KHOI TAO DHT22
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001386:	2301      	movs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2302      	movs	r3, #2
 8001390:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	482b      	ldr	r0, [pc, #172]	; (8001448 <DHT22_Start+0xd8>)
 800139c:	f002 fb44 	bl	8003a28 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4828      	ldr	r0, [pc, #160]	; (8001448 <DHT22_Start+0xd8>)
 80013a6:	f002 fcda 	bl	8003d5e <HAL_GPIO_WritePin>
	microDelay(1300);   // wait for 1300us
 80013aa:	f240 5014 	movw	r0, #1300	; 0x514
 80013ae:	f7ff ffc7 	bl	8001340 <microDelay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80013b2:	2201      	movs	r2, #1
 80013b4:	2101      	movs	r1, #1
 80013b6:	4824      	ldr	r0, [pc, #144]	; (8001448 <DHT22_Start+0xd8>)
 80013b8:	f002 fcd1 	bl	8003d5e <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 80013bc:	201e      	movs	r0, #30
 80013be:	f7ff ffbf 	bl	8001340 <microDelay>

	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	481e      	ldr	r0, [pc, #120]	; (8001448 <DHT22_Start+0xd8>)
 80013d0:	f002 fb2a 	bl	8003a28 <HAL_GPIO_Init>
	microDelay(40);
 80013d4:	2028      	movs	r0, #40	; 0x28
 80013d6:	f7ff ffb3 	bl	8001340 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) { // NEU KO DOC DHT22 KHAC 1
 80013da:	2101      	movs	r1, #1
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <DHT22_Start+0xd8>)
 80013de:	f002 fca7 	bl	8003d30 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10b      	bne.n	8001400 <DHT22_Start+0x90>
		microDelay(80);
 80013e8:	2050      	movs	r0, #80	; 0x50
 80013ea:	f7ff ffa9 	bl	8001340 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // NEU DOC DUOC DHT Response = 1;
 80013ee:	2101      	movs	r1, #1
 80013f0:	4815      	ldr	r0, [pc, #84]	; (8001448 <DHT22_Start+0xd8>)
 80013f2:	f002 fc9d 	bl	8003d30 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <DHT22_Start+0x90>
			Response = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8001400:	f001 faba 	bl	8002978 <HAL_GetTick>
 8001404:	4603      	mov	r3, r0
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <DHT22_Start+0xdc>)
 8001408:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 800140a:	f001 fab5 	bl	8002978 <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <DHT22_Start+0xe0>)
 8001412:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8001414:	e004      	b.n	8001420 <DHT22_Start+0xb0>
		cMillis = HAL_GetTick();
 8001416:	f001 faaf 	bl	8002978 <HAL_GetTick>
 800141a:	4603      	mov	r3, r0
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <DHT22_Start+0xe0>)
 800141e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8001420:	2101      	movs	r1, #1
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <DHT22_Start+0xd8>)
 8001424:	f002 fc84 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <DHT22_Start+0xcc>
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <DHT22_Start+0xdc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1c9a      	adds	r2, r3, #2
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <DHT22_Start+0xe0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8ec      	bhi.n	8001416 <DHT22_Start+0xa6>
	}
	return Response;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010800 	.word	0x40010800
 800144c:	200003d8 	.word	0x200003d8
 8001450:	200003dc 	.word	0x200003dc

08001454 <DHT22_Read>:
uint8_t DHT22_Read(void) {		//
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e063      	b.n	8001528 <DHT22_Read+0xd4>
		pMillis = HAL_GetTick();
 8001460:	f001 fa8a 	bl	8002978 <HAL_GetTick>
 8001464:	4603      	mov	r3, r0
 8001466:	4a34      	ldr	r2, [pc, #208]	; (8001538 <DHT22_Read+0xe4>)
 8001468:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 800146a:	f001 fa85 	bl	8002978 <HAL_GetTick>
 800146e:	4603      	mov	r3, r0
 8001470:	4a32      	ldr	r2, [pc, #200]	; (800153c <DHT22_Read+0xe8>)
 8001472:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001474:	e004      	b.n	8001480 <DHT22_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 8001476:	f001 fa7f 	bl	8002978 <HAL_GetTick>
 800147a:	4603      	mov	r3, r0
 800147c:	4a2f      	ldr	r2, [pc, #188]	; (800153c <DHT22_Read+0xe8>)
 800147e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001480:	2101      	movs	r1, #1
 8001482:	482f      	ldr	r0, [pc, #188]	; (8001540 <DHT22_Read+0xec>)
 8001484:	f002 fc54 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <DHT22_Read+0x48>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <DHT22_Read+0xe4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1c9a      	adds	r2, r3, #2
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <DHT22_Read+0xe8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8ec      	bhi.n	8001476 <DHT22_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	f7ff ff4f 	bl	8001340 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80014a2:	2101      	movs	r1, #1
 80014a4:	4826      	ldr	r0, [pc, #152]	; (8001540 <DHT22_Read+0xec>)
 80014a6:	f002 fc43 	bl	8003d30 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10e      	bne.n	80014ce <DHT22_Read+0x7a>
			b &= ~(1 << (7 - a));
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2201      	movs	r2, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014c6:	4013      	ands	r3, r2
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	71bb      	strb	r3, [r7, #6]
 80014cc:	e00b      	b.n	80014e6 <DHT22_Read+0x92>
		else
			b |= (1 << (7 - a));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f1c3 0307 	rsb	r3, r3, #7
 80014d4:	2201      	movs	r2, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 80014e6:	f001 fa47 	bl	8002978 <HAL_GetTick>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <DHT22_Read+0xe4>)
 80014ee:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80014f0:	f001 fa42 	bl	8002978 <HAL_GetTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <DHT22_Read+0xe8>)
 80014f8:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 80014fa:	e004      	b.n	8001506 <DHT22_Read+0xb2>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 80014fc:	f001 fa3c 	bl	8002978 <HAL_GetTick>
 8001500:	4603      	mov	r3, r0
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <DHT22_Read+0xe8>)
 8001504:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001506:	2101      	movs	r1, #1
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <DHT22_Read+0xec>)
 800150a:	f002 fc11 	bl	8003d30 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <DHT22_Read+0xce>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <DHT22_Read+0xe4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	1c9a      	adds	r2, r3, #2
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <DHT22_Read+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8ec      	bhi.n	80014fc <DHT22_Read+0xa8>
	for (a = 0; a < 8; a++) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	3301      	adds	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b07      	cmp	r3, #7
 800152c:	d998      	bls.n	8001460 <DHT22_Read+0xc>
		}
	}
	return b;
 800152e:	79bb      	ldrb	r3, [r7, #6]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200003d8 	.word	0x200003d8
 800153c:	200003dc 	.word	0x200003dc
 8001540:	40010800 	.word	0x40010800

08001544 <DHT22_value>:
void DHT22_value() {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if (DHT22_Start()) {			// CHAY DHT THANH CONG
 8001548:	f7ff ff12 	bl	8001370 <DHT22_Start>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8082 	beq.w	8001658 <DHT22_value+0x114>
		RH1 = DHT22_Read(); // First 8bits of humidity
 8001554:	f7ff ff7e 	bl	8001454 <DHT22_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <DHT22_value+0x118>)
 800155e:	701a      	strb	r2, [r3, #0]
		RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001560:	f7ff ff78 	bl	8001454 <DHT22_Read>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <DHT22_value+0x11c>)
 800156a:	701a      	strb	r2, [r3, #0]
		TC1 = DHT22_Read(); // First 8bits of Celsius
 800156c:	f7ff ff72 	bl	8001454 <DHT22_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <DHT22_value+0x120>)
 8001576:	701a      	strb	r2, [r3, #0]
		TC2 = DHT22_Read(); // Second 8bits of Celsius
 8001578:	f7ff ff6c 	bl	8001454 <DHT22_Read>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <DHT22_value+0x124>)
 8001582:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read(); // Check sum
 8001584:	f7ff ff66 	bl	8001454 <DHT22_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <DHT22_value+0x128>)
 800158e:	701a      	strb	r2, [r3, #0]
		CHECK = RH1 + RH2 + TC1 + TC2;		//
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <DHT22_value+0x118>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <DHT22_value+0x11c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <DHT22_value+0x120>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <DHT22_value+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <DHT22_value+0x12c>)
 80015ae:	701a      	strb	r2, [r3, #0]
		if (CHECK == SUM) {
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <DHT22_value+0x12c>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <DHT22_value+0x128>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d14d      	bne.n	8001658 <DHT22_value+0x114>
			if (TC1 > 127) // If TC1=10000000, negative temperature
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <DHT22_value+0x120>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da0f      	bge.n	80015e6 <DHT22_value+0xa2>
					{
				tCelsius = (float) TC2 / 10 * (-1);
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <DHT22_value+0x124>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb1c 	bl	8000c08 <__aeabi_ui2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4928      	ldr	r1, [pc, #160]	; (8001674 <DHT22_value+0x130>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc23 	bl	8000e20 <__aeabi_fdiv>
 80015da:	4603      	mov	r3, r0
 80015dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015e0:	4a25      	ldr	r2, [pc, #148]	; (8001678 <DHT22_value+0x134>)
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e011      	b.n	800160a <DHT22_value+0xc6>
			} else {
				tCelsius = (float) ((TC1 << 8) | TC2) / 10;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <DHT22_value+0x120>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <DHT22_value+0x124>)
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb0c 	bl	8000c10 <__aeabi_i2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	491e      	ldr	r1, [pc, #120]	; (8001674 <DHT22_value+0x130>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc0f 	bl	8000e20 <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <DHT22_value+0x134>)
 8001608:	601a      	str	r2, [r3, #0]
				// 16 bit:  0100 0010 0000 0000 | 0000 0000 0010 0001 = 0100 0010 0010 0001
			}
			tFahrenheit = tCelsius * 9 / 5 + 32;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <DHT22_value+0x134>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <DHT22_value+0x138>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb51 	bl	8000cb8 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	4919      	ldr	r1, [pc, #100]	; (8001680 <DHT22_value+0x13c>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fc00 	bl	8000e20 <__aeabi_fdiv>
 8001620:	4603      	mov	r3, r0
 8001622:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa3e 	bl	8000aa8 <__addsf3>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <DHT22_value+0x140>)
 8001632:	601a      	str	r2, [r3, #0]
			RH = (float) ((RH1 << 8) | RH2) / 10;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <DHT22_value+0x118>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <DHT22_value+0x11c>)
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fae5 	bl	8000c10 <__aeabi_i2f>
 8001646:	4603      	mov	r3, r0
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <DHT22_value+0x130>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fbe8 	bl	8000e20 <__aeabi_fdiv>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <DHT22_value+0x144>)
 8001656:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200003d0 	.word	0x200003d0
 8001660:	200003d1 	.word	0x200003d1
 8001664:	200003d2 	.word	0x200003d2
 8001668:	200003d3 	.word	0x200003d3
 800166c:	200003d4 	.word	0x200003d4
 8001670:	200003d5 	.word	0x200003d5
 8001674:	41200000 	.word	0x41200000
 8001678:	200003e0 	.word	0x200003e0
 800167c:	41100000 	.word	0x41100000
 8001680:	40a00000 	.word	0x40a00000
 8001684:	200003e4 	.word	0x200003e4
 8001688:	200003e8 	.word	0x200003e8

0800168c <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	69b9      	ldr	r1, [r7, #24]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	1a8a      	subs	r2, r1, r2
 80016a6:	fb03 f202 	mul.w	r2, r3, r2
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1acb      	subs	r3, r1, r3
 80016b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4413      	add	r3, r2
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <bt_press_callback>:
uint8_t bom, quat, den;
uint8_t bom1, quat1, den1;
uint8_t tt = 0, tt1 = 0;
void bt_press_callback(Button_t *button) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if (tt == 1) {
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <bt_press_callback+0xdc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d12f      	bne.n	8001734 <bt_press_callback+0x70>
		if (button == &bt1) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <bt_press_callback+0xe0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d113      	bne.n	8001704 <bt_press_callback+0x40>
			if (bom1 >= 1) {
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <bt_press_callback+0xe4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <bt_press_callback+0x2e>
				bom1 = 0;
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <bt_press_callback+0xe4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
				bom = 0;
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <bt_press_callback+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e002      	b.n	80016f8 <bt_press_callback+0x34>
			} else {
				bom = 1;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <bt_press_callback+0xe8>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
			}
			bom1++;
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <bt_press_callback+0xe4>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <bt_press_callback+0xe4>)
 8001702:	701a      	strb	r2, [r3, #0]
		}
		if (button == &bt2) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <bt_press_callback+0xec>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d113      	bne.n	8001734 <bt_press_callback+0x70>
			if (quat1 >= 1) {
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <bt_press_callback+0xf0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <bt_press_callback+0x5e>
				quat1 = 0;
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <bt_press_callback+0xf0>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
				quat = 0;
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <bt_press_callback+0xf4>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e002      	b.n	8001728 <bt_press_callback+0x64>
			} else {
				quat = 1;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <bt_press_callback+0xf4>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
			}
			quat1++;
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <bt_press_callback+0xf0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <bt_press_callback+0xf0>)
 8001732:	701a      	strb	r2, [r3, #0]
		}
	}
	if (button == &bt3) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <bt_press_callback+0xf8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d113      	bne.n	8001764 <bt_press_callback+0xa0>
		if (den1 >= 1) {
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <bt_press_callback+0xfc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <bt_press_callback+0x8e>
			den1 = 0;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <bt_press_callback+0xfc>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			den = 0;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <bt_press_callback+0x100>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e002      	b.n	8001758 <bt_press_callback+0x94>
		} else {
			den = 1;
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <bt_press_callback+0x100>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
		}
		den1++;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <bt_press_callback+0xfc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <bt_press_callback+0xfc>)
 8001762:	701a      	strb	r2, [r3, #0]
	}
	if (button == &bt4) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <bt_press_callback+0x104>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d113      	bne.n	8001794 <bt_press_callback+0xd0>
		if (tt1 >= 1) {
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <bt_press_callback+0x108>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <bt_press_callback+0xbe>
			tt1 = 0;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <bt_press_callback+0x108>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
			tt = 1;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <bt_press_callback+0xdc>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e002      	b.n	8001788 <bt_press_callback+0xc4>
		} else {
			tt = 0;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <bt_press_callback+0xdc>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
		}
		tt1++;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <bt_press_callback+0x108>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <bt_press_callback+0x108>)
 8001792:	701a      	strb	r2, [r3, #0]
	}
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200003f2 	.word	0x200003f2
 80017a4:	20000354 	.word	0x20000354
 80017a8:	200003ef 	.word	0x200003ef
 80017ac:	200003ec 	.word	0x200003ec
 80017b0:	2000036c 	.word	0x2000036c
 80017b4:	200003f0 	.word	0x200003f0
 80017b8:	200003ed 	.word	0x200003ed
 80017bc:	20000384 	.word	0x20000384
 80017c0:	200003f1 	.word	0x200003f1
 80017c4:	200003ee 	.word	0x200003ee
 80017c8:	2000039c 	.word	0x2000039c
 80017cc:	200003f3 	.word	0x200003f3

080017d0 <on_off_led>:
void on_off_led(uint8_t b, uint8_t q, uint8_t d) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]
	switch (b) {
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <on_off_led+0x28>
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10b      	bne.n	8001804 <on_off_led+0x34>
	case 1:
		HAL_GPIO_WritePin(BOM_GPIO_Port, BOM_Pin, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <on_off_led+0x88>)
 80017f2:	f002 fab4 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 80017f6:	e006      	b.n	8001806 <on_off_led+0x36>
	case 0:
		HAL_GPIO_WritePin(BOM_GPIO_Port, BOM_Pin, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2110      	movs	r1, #16
 80017fc:	4816      	ldr	r0, [pc, #88]	; (8001858 <on_off_led+0x88>)
 80017fe:	f002 faae 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001802:	e000      	b.n	8001806 <on_off_led+0x36>
	default:
		break;
 8001804:	bf00      	nop
	}
	switch (q) {
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <on_off_led+0x4c>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d10b      	bne.n	8001828 <on_off_led+0x58>
	case 1:
		HAL_GPIO_WritePin(BOM2_GPIO_Port, BOM2_Pin, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	2108      	movs	r1, #8
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <on_off_led+0x88>)
 8001816:	f002 faa2 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 800181a:	e006      	b.n	800182a <on_off_led+0x5a>
	case 0:
		HAL_GPIO_WritePin(BOM2_GPIO_Port, BOM2_Pin, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2108      	movs	r1, #8
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <on_off_led+0x88>)
 8001822:	f002 fa9c 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001826:	e000      	b.n	800182a <on_off_led+0x5a>
	default:
		break;
 8001828:	bf00      	nop
	}
	switch (d) {
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <on_off_led+0x70>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10b      	bne.n	800184c <on_off_led+0x7c>
	case 1:
		HAL_GPIO_WritePin(DEN_GPIO_Port, DEN_Pin, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	2120      	movs	r1, #32
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <on_off_led+0x88>)
 800183a:	f002 fa90 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 800183e:	e006      	b.n	800184e <on_off_led+0x7e>
	case 0:
		HAL_GPIO_WritePin(DEN_GPIO_Port, DEN_Pin, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <on_off_led+0x88>)
 8001846:	f002 fa8a 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 800184a:	e000      	b.n	800184e <on_off_led+0x7e>
	default:
		break;
 800184c:	bf00      	nop
	}
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40010c00 	.word	0x40010c00

0800185c <show_lcd>:
uint8_t buf1[20], buf2[20], buf3[20], buffer[30];
void show_lcd() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	sprintf((char*) buf1, "Nhiet Do: %2.1f", tCelsius);
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <show_lcd+0x7c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fde9 	bl	800043c <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	491b      	ldr	r1, [pc, #108]	; (80018dc <show_lcd+0x80>)
 8001870:	481b      	ldr	r0, [pc, #108]	; (80018e0 <show_lcd+0x84>)
 8001872:	f005 fa9d 	bl	8006db0 <siprintf>
	sprintf((char*) buf2, "DAD:%d", DAD);
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <show_lcd+0x88>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	491a      	ldr	r1, [pc, #104]	; (80018e8 <show_lcd+0x8c>)
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <show_lcd+0x90>)
 8001880:	f005 fa96 	bl	8006db0 <siprintf>
	sprintf((char*) buf3, " DA:%.1f", RH);
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <show_lcd+0x94>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fdd7 	bl	800043c <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4918      	ldr	r1, [pc, #96]	; (80018f4 <show_lcd+0x98>)
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <show_lcd+0x9c>)
 8001896:	f005 fa8b 	bl	8006db0 <siprintf>
	//lcd_clear_display();
	lcd_goto_XY(1, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fd2c 	bl	80012fa <lcd_goto_XY>
	lcd_send_string((char*) buf1);
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <show_lcd+0x84>)
 80018a4:	f7ff fd14 	bl	80012d0 <lcd_send_string>
	lcd_send_data((char) 223);
 80018a8:	20df      	movs	r0, #223	; 0xdf
 80018aa:	f7ff fcb3 	bl	8001214 <lcd_send_data>
	lcd_send_string("C");
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <show_lcd+0xa0>)
 80018b0:	f7ff fd0e 	bl	80012d0 <lcd_send_string>
	lcd_goto_XY(2, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7ff fd1f 	bl	80012fa <lcd_goto_XY>
	lcd_send_string((char*) buf2);
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <show_lcd+0x90>)
 80018be:	f7ff fd07 	bl	80012d0 <lcd_send_string>
	lcd_send_data((char) 37);
 80018c2:	2025      	movs	r0, #37	; 0x25
 80018c4:	f7ff fca6 	bl	8001214 <lcd_send_data>
	lcd_send_string((char*) buf3);
 80018c8:	480b      	ldr	r0, [pc, #44]	; (80018f8 <show_lcd+0x9c>)
 80018ca:	f7ff fd01 	bl	80012d0 <lcd_send_string>
	lcd_send_data((char) 37);
 80018ce:	2025      	movs	r0, #37	; 0x25
 80018d0:	f7ff fca0 	bl	8001214 <lcd_send_data>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200003e0 	.word	0x200003e0
 80018dc:	080092b8 	.word	0x080092b8
 80018e0:	200003f4 	.word	0x200003f4
 80018e4:	200003bc 	.word	0x200003bc
 80018e8:	080092c8 	.word	0x080092c8
 80018ec:	20000408 	.word	0x20000408
 80018f0:	200003e8 	.word	0x200003e8
 80018f4:	080092d0 	.word	0x080092d0
 80018f8:	2000041c 	.word	0x2000041c
 80018fc:	080092dc 	.word	0x080092dc

08001900 <HAL_UARTEx_RxEventCallback>:
uint8_t DataRx[20];
uint8_t flag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
	flag = 1;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_UARTEx_RxEventCallback+0x24>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DataRx, sizeof(DataRx));
 8001912:	2214      	movs	r2, #20
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <HAL_UARTEx_RxEventCallback+0x28>)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001918:	f003 ffdd 	bl	80058d6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000464 	.word	0x20000464
 8001928:	20000450 	.word	0x20000450
 800192c:	2000030c 	.word	0x2000030c

08001930 <check>:
void check() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	if (strcmp((char*) DataRx, "Bom1\r\n") == 0) {// neus esp gui ve "Bom1\r\n"
 8001934:	492c      	ldr	r1, [pc, #176]	; (80019e8 <check+0xb8>)
 8001936:	482d      	ldr	r0, [pc, #180]	; (80019ec <check+0xbc>)
 8001938:	f7fe fc0a 	bl	8000150 <strcmp>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <check+0x1a>
		bom = 1;		// bat bom
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <check+0xc0>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	} else if (strcmp((char*) DataRx, "Trangthai0\r\n") == 0) {	// neus esp gui ve "Trangthai0\r\n"
		tt = 0; // bat che do tu dong
	} else if (strcmp((char*) DataRx, "Trangthai1\r\n") == 0) {
		tt = 1;
	}
}
 8001948:	e04b      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Bom0\r\n") == 0) { // neus esp gui ve "Bom0\r\n"
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <check+0xc4>)
 800194c:	4827      	ldr	r0, [pc, #156]	; (80019ec <check+0xbc>)
 800194e:	f7fe fbff 	bl	8000150 <strcmp>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <check+0x30>
		bom = 0;		// tat bom
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <check+0xc0>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
}
 800195e:	e040      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Quat0\r\n") == 0) {
 8001960:	4925      	ldr	r1, [pc, #148]	; (80019f8 <check+0xc8>)
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <check+0xbc>)
 8001964:	f7fe fbf4 	bl	8000150 <strcmp>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <check+0x46>
		quat = 0;
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <check+0xcc>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
}
 8001974:	e035      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Quat1\r\n") == 0) {
 8001976:	4922      	ldr	r1, [pc, #136]	; (8001a00 <check+0xd0>)
 8001978:	481c      	ldr	r0, [pc, #112]	; (80019ec <check+0xbc>)
 800197a:	f7fe fbe9 	bl	8000150 <strcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <check+0x5c>
		quat = 1;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <check+0xcc>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	e02a      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Den0\r\n") == 0) {
 800198c:	491d      	ldr	r1, [pc, #116]	; (8001a04 <check+0xd4>)
 800198e:	4817      	ldr	r0, [pc, #92]	; (80019ec <check+0xbc>)
 8001990:	f7fe fbde 	bl	8000150 <strcmp>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <check+0x72>
		den = 0;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <check+0xd8>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	e01f      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Den1\r\n") == 0) {
 80019a2:	491a      	ldr	r1, [pc, #104]	; (8001a0c <check+0xdc>)
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <check+0xbc>)
 80019a6:	f7fe fbd3 	bl	8000150 <strcmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d103      	bne.n	80019b8 <check+0x88>
		den = 1;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <check+0xd8>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	e014      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Trangthai0\r\n") == 0) {	// neus esp gui ve "Trangthai0\r\n"
 80019b8:	4915      	ldr	r1, [pc, #84]	; (8001a10 <check+0xe0>)
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <check+0xbc>)
 80019bc:	f7fe fbc8 	bl	8000150 <strcmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <check+0x9e>
		tt = 0; // bat che do tu dong
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <check+0xe4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
}
 80019cc:	e009      	b.n	80019e2 <check+0xb2>
	} else if (strcmp((char*) DataRx, "Trangthai1\r\n") == 0) {
 80019ce:	4912      	ldr	r1, [pc, #72]	; (8001a18 <check+0xe8>)
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <check+0xbc>)
 80019d2:	f7fe fbbd 	bl	8000150 <strcmp>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <check+0xb2>
		tt = 1;
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <check+0xe4>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	080092e0 	.word	0x080092e0
 80019ec:	20000450 	.word	0x20000450
 80019f0:	200003ec 	.word	0x200003ec
 80019f4:	080092e8 	.word	0x080092e8
 80019f8:	080092f0 	.word	0x080092f0
 80019fc:	200003ed 	.word	0x200003ed
 8001a00:	080092f8 	.word	0x080092f8
 8001a04:	08009300 	.word	0x08009300
 8001a08:	200003ee 	.word	0x200003ee
 8001a0c:	08009308 	.word	0x08009308
 8001a10:	08009310 	.word	0x08009310
 8001a14:	200003f2 	.word	0x200003f2
 8001a18:	08009320 	.word	0x08009320

08001a1c <stepper_half_drive>:
void stepper_half_drive(int step) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	switch (step) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	f200 80bc 	bhi.w	8001ba4 <stepper_half_drive+0x188>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <stepper_half_drive+0x18>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a55 	.word	0x08001a55
 8001a38:	08001a7f 	.word	0x08001a7f
 8001a3c:	08001aa9 	.word	0x08001aa9
 8001a40:	08001ad3 	.word	0x08001ad3
 8001a44:	08001afd 	.word	0x08001afd
 8001a48:	08001b27 	.word	0x08001b27
 8001a4c:	08001b51 	.word	0x08001b51
 8001a50:	08001b7b 	.word	0x08001b7b
	case 0:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);   // IN1
 8001a54:	2201      	movs	r2, #1
 8001a56:	2101      	movs	r1, #1
 8001a58:	4854      	ldr	r0, [pc, #336]	; (8001bac <stepper_half_drive+0x190>)
 8001a5a:	f002 f980 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	4853      	ldr	r0, [pc, #332]	; (8001bb0 <stepper_half_drive+0x194>)
 8001a64:	f002 f97b 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	4850      	ldr	r0, [pc, #320]	; (8001bb0 <stepper_half_drive+0x194>)
 8001a6e:	f002 f976 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a72:	2200      	movs	r2, #0
 8001a74:	2120      	movs	r1, #32
 8001a76:	484e      	ldr	r0, [pc, #312]	; (8001bb0 <stepper_half_drive+0x194>)
 8001a78:	f002 f971 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001a7c:	e092      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 1:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);   // IN1
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2101      	movs	r1, #1
 8001a82:	484a      	ldr	r0, [pc, #296]	; (8001bac <stepper_half_drive+0x190>)
 8001a84:	f002 f96b 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);   // IN2
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	4848      	ldr	r0, [pc, #288]	; (8001bb0 <stepper_half_drive+0x194>)
 8001a8e:	f002 f966 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001a92:	2200      	movs	r2, #0
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	4846      	ldr	r0, [pc, #280]	; (8001bb0 <stepper_half_drive+0x194>)
 8001a98:	f002 f961 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4843      	ldr	r0, [pc, #268]	; (8001bb0 <stepper_half_drive+0x194>)
 8001aa2:	f002 f95c 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001aa6:	e07d      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 2:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2101      	movs	r1, #1
 8001aac:	483f      	ldr	r0, [pc, #252]	; (8001bac <stepper_half_drive+0x190>)
 8001aae:	f002 f956 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);   // IN2
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	483e      	ldr	r0, [pc, #248]	; (8001bb0 <stepper_half_drive+0x194>)
 8001ab8:	f002 f951 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001abc:	2200      	movs	r2, #0
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	483b      	ldr	r0, [pc, #236]	; (8001bb0 <stepper_half_drive+0x194>)
 8001ac2:	f002 f94c 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2120      	movs	r1, #32
 8001aca:	4839      	ldr	r0, [pc, #228]	; (8001bb0 <stepper_half_drive+0x194>)
 8001acc:	f002 f947 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001ad0:	e068      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 3:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4835      	ldr	r0, [pc, #212]	; (8001bac <stepper_half_drive+0x190>)
 8001ad8:	f002 f941 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);   // IN2
 8001adc:	2201      	movs	r2, #1
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4833      	ldr	r0, [pc, #204]	; (8001bb0 <stepper_half_drive+0x194>)
 8001ae2:	f002 f93c 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);   // IN3
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2140      	movs	r1, #64	; 0x40
 8001aea:	4831      	ldr	r0, [pc, #196]	; (8001bb0 <stepper_half_drive+0x194>)
 8001aec:	f002 f937 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001af0:	2200      	movs	r2, #0
 8001af2:	2120      	movs	r1, #32
 8001af4:	482e      	ldr	r0, [pc, #184]	; (8001bb0 <stepper_half_drive+0x194>)
 8001af6:	f002 f932 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001afa:	e053      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 4:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	482a      	ldr	r0, [pc, #168]	; (8001bac <stepper_half_drive+0x190>)
 8001b02:	f002 f92c 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	4829      	ldr	r0, [pc, #164]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b0c:	f002 f927 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);   // IN3
 8001b10:	2201      	movs	r2, #1
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	4826      	ldr	r0, [pc, #152]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b16:	f002 f922 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b20:	f002 f91d 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001b24:	e03e      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 5:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001b26:	2200      	movs	r2, #0
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4820      	ldr	r0, [pc, #128]	; (8001bac <stepper_half_drive+0x190>)
 8001b2c:	f002 f917 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b30:	2200      	movs	r2, #0
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	481e      	ldr	r0, [pc, #120]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b36:	f002 f912 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);   // IN3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2140      	movs	r1, #64	; 0x40
 8001b3e:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b40:	f002 f90d 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);   // IN4
 8001b44:	2201      	movs	r2, #1
 8001b46:	2120      	movs	r1, #32
 8001b48:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b4a:	f002 f908 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001b4e:	e029      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 6:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4815      	ldr	r0, [pc, #84]	; (8001bac <stepper_half_drive+0x190>)
 8001b56:	f002 f902 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b60:	f002 f8fd 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001b64:	2200      	movs	r2, #0
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b6a:	f002 f8f8 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);   // IN4
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2120      	movs	r1, #32
 8001b72:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b74:	f002 f8f3 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001b78:	e014      	b.n	8001ba4 <stepper_half_drive+0x188>

	case 7:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);   // IN1
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <stepper_half_drive+0x190>)
 8001b80:	f002 f8ed 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b8a:	f002 f8e8 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b94:	f002 f8e3 	bl	8003d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);   // IN4
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <stepper_half_drive+0x194>)
 8001b9e:	f002 f8de 	bl	8003d5e <HAL_GPIO_WritePin>
		break;
 8001ba2:	bf00      	nop

	}
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <stepper_set_rpm>:
#define stepsperrev 4096
void stepper_set_rpm(int rpm) // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	microDelay(60000000 / stepsperrev / rpm);
 8001bbc:	f643 1238 	movw	r2, #14648	; 0x3938
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fbb9 	bl	8001340 <microDelay>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <stepper_step_angle>:
void stepper_step_angle(float angle, int direction, int rpm) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <stepper_step_angle+0x8c>)
 8001be6:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle / anglepersequence);
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff f918 	bl	8000e20 <__aeabi_fdiv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa26 	bl	8001044 <__aeabi_f2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	617b      	str	r3, [r7, #20]

	for (int seq = 0; seq < numberofsequences; seq++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001c00:	e027      	b.n	8001c52 <stepper_step_angle+0x7a>
		if (direction == 0) { // for clockwise
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10f      	bne.n	8001c28 <stepper_step_angle+0x50>
			for (int step = 7; step >= 0; step--) {
 8001c08:	2307      	movs	r3, #7
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	e008      	b.n	8001c20 <stepper_step_angle+0x48>
				stepper_half_drive(step);
 8001c0e:	6a38      	ldr	r0, [r7, #32]
 8001c10:	f7ff ff04 	bl	8001a1c <stepper_half_drive>
				stepper_set_rpm(rpm);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffcd 	bl	8001bb4 <stepper_set_rpm>
			for (int step = 7; step >= 0; step--) {
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	daf3      	bge.n	8001c0e <stepper_step_angle+0x36>
 8001c26:	e011      	b.n	8001c4c <stepper_step_angle+0x74>
			}

		} else if (direction == 1) { // for anti-clockwise
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10e      	bne.n	8001c4c <stepper_step_angle+0x74>
			for (int step = 0; step < 8; step++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e008      	b.n	8001c46 <stepper_step_angle+0x6e>
				stepper_half_drive(step);
 8001c34:	69f8      	ldr	r0, [r7, #28]
 8001c36:	f7ff fef1 	bl	8001a1c <stepper_half_drive>
				stepper_set_rpm(rpm);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffba 	bl	8001bb4 <stepper_set_rpm>
			for (int step = 0; step < 8; step++) {
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	ddf3      	ble.n	8001c34 <stepper_step_angle+0x5c>
	for (int seq = 0; seq < numberofsequences; seq++) {
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3301      	adds	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbd3      	blt.n	8001c02 <stepper_step_angle+0x2a>
			}
		}
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	3f340000 	.word	0x3f340000

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c6c:	b093      	sub	sp, #76	; 0x4c
 8001c6e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c70:	f000 fe2a 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f996 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 fb06 	bl	8002288 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c7c:	f000 fae6 	bl	800224c <MX_DMA_Init>
  MX_ADC1_Init();
 8001c80:	f000 f9ec 	bl	800205c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c84:	f000 fa3a 	bl	80020fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c88:	f000 fab6 	bl	80021f8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c8c:	f000 fa64 	bl	8002158 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	Button_Init(&bt1, BT1_GPIO_Port, BT1_Pin);			//
 8001c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c94:	49a7      	ldr	r1, [pc, #668]	; (8001f34 <main+0x2cc>)
 8001c96:	48a8      	ldr	r0, [pc, #672]	; (8001f38 <main+0x2d0>)
 8001c98:	f7ff fa67 	bl	800116a <Button_Init>
	Button_Init(&bt2, BT2_GPIO_Port, BT2_Pin);
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	49a4      	ldr	r1, [pc, #656]	; (8001f34 <main+0x2cc>)
 8001ca2:	48a6      	ldr	r0, [pc, #664]	; (8001f3c <main+0x2d4>)
 8001ca4:	f7ff fa61 	bl	800116a <Button_Init>
	Button_Init(&bt3, BT3_GPIO_Port, BT3_Pin);
 8001ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cac:	49a1      	ldr	r1, [pc, #644]	; (8001f34 <main+0x2cc>)
 8001cae:	48a4      	ldr	r0, [pc, #656]	; (8001f40 <main+0x2d8>)
 8001cb0:	f7ff fa5b 	bl	800116a <Button_Init>
	Button_Init(&bt4, BT4_GPIO_Port, BT4_Pin);
 8001cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb8:	499e      	ldr	r1, [pc, #632]	; (8001f34 <main+0x2cc>)
 8001cba:	48a2      	ldr	r0, [pc, #648]	; (8001f44 <main+0x2dc>)
 8001cbc:	f7ff fa55 	bl	800116a <Button_Init>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DataRx, sizeof(DataRx));// khoi tao ngat nahn du lieu
 8001cc0:	2214      	movs	r2, #20
 8001cc2:	49a1      	ldr	r1, [pc, #644]	; (8001f48 <main+0x2e0>)
 8001cc4:	48a1      	ldr	r0, [pc, #644]	; (8001f4c <main+0x2e4>)
 8001cc6:	f003 fe06 	bl	80058d6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_ADC_Start_DMA(&hadc1, value_adc, 2);		// khoi tao doc analog
 8001cca:	2202      	movs	r2, #2
 8001ccc:	49a0      	ldr	r1, [pc, #640]	; (8001f50 <main+0x2e8>)
 8001cce:	48a1      	ldr	r0, [pc, #644]	; (8001f54 <main+0x2ec>)
 8001cd0:	f000 ff58 	bl	8002b84 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1);		// tinh toan analog
 8001cd4:	489f      	ldr	r0, [pc, #636]	; (8001f54 <main+0x2ec>)
 8001cd6:	f001 fa49 	bl	800316c <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start(&htim1);			// chay timer 1
 8001cda:	489f      	ldr	r0, [pc, #636]	; (8001f58 <main+0x2f0>)
 8001cdc:	f003 fac0 	bl	8005260 <HAL_TIM_Base_Start>
	lcd_init();			// khoi tao chay lcd
 8001ce0:	f7ff fac8 	bl	8001274 <lcd_init>
	lcd_goto_XY(1, 0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fb07 	bl	80012fa <lcd_goto_XY>
	lcd_send_string("XIN CHAO");
 8001cec:	489b      	ldr	r0, [pc, #620]	; (8001f5c <main+0x2f4>)
 8001cee:	f7ff faef 	bl	80012d0 <lcd_send_string>
	t_prev = HAL_GetTick();
 8001cf2:	f000 fe41 	bl	8002978 <HAL_GetTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	4b98      	ldr	r3, [pc, #608]	; (8001f60 <main+0x2f8>)
 8001d00:	e9c3 4500 	strd	r4, r5, [r3]
	t_prev2 = HAL_GetTick();
 8001d04:	f000 fe38 	bl	8002978 <HAL_GetTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	4691      	mov	r9, r2
 8001d10:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <main+0x2fc>)
 8001d12:	e9c3 8900 	strd	r8, r9, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {		// chay
		cb_mua = HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin);	// doc cam bien mua
 8001d16:	2110      	movs	r1, #16
 8001d18:	4893      	ldr	r0, [pc, #588]	; (8001f68 <main+0x300>)
 8001d1a:	f002 f809 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <main+0x304>)
 8001d22:	7013      	strb	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin) == 0) {// neu cam bien mua = 0
 8001d24:	2110      	movs	r1, #16
 8001d26:	4890      	ldr	r0, [pc, #576]	; (8001f68 <main+0x300>)
 8001d28:	f002 f802 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <main+0xf0>
			stepper_step_angle(360, 1, 13);		// donc co dong
 8001d32:	220d      	movs	r2, #13
 8001d34:	2101      	movs	r1, #1
 8001d36:	488e      	ldr	r0, [pc, #568]	; (8001f70 <main+0x308>)
 8001d38:	f7ff ff4e 	bl	8001bd8 <stepper_step_angle>
			check_cbmua = 1;
 8001d3c:	4a8d      	ldr	r2, [pc, #564]	; (8001f74 <main+0x30c>)
 8001d3e:	2301      	movs	r3, #1
 8001d40:	7013      	strb	r3, [r2, #0]
			t_prev2 = HAL_GetTick();
 8001d42:	f000 fe19 	bl	8002978 <HAL_GetTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <main+0x2fc>)
 8001d50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001d54:	e9c3 1200 	strd	r1, r2, [r3]
		}
		if (HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin) == 1) {// neu kko mua thi dong lai
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4883      	ldr	r0, [pc, #524]	; (8001f68 <main+0x300>)
 8001d5c:	f001 ffe8 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d120      	bne.n	8001da8 <main+0x140>
			if (check_cbmua == 1) {
 8001d66:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <main+0x30c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d11c      	bne.n	8001da8 <main+0x140>
				if (HAL_GetTick() - t_prev2 >= 2000) {
 8001d6e:	f000 fe03 	bl	8002978 <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2200      	movs	r2, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	61fa      	str	r2, [r7, #28]
 8001d7a:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <main+0x2fc>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d84:	4604      	mov	r4, r0
 8001d86:	ebb4 0a02 	subs.w	sl, r4, r2
 8001d8a:	eb61 0b03 	sbc.w	fp, r1, r3
 8001d8e:	f5ba 6ffa 	cmp.w	sl, #2000	; 0x7d0
 8001d92:	f17b 0300 	sbcs.w	r3, fp, #0
 8001d96:	d307      	bcc.n	8001da8 <main+0x140>
					stepper_step_angle(360, 0, 13);		// dong co dong
 8001d98:	220d      	movs	r2, #13
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4874      	ldr	r0, [pc, #464]	; (8001f70 <main+0x308>)
 8001d9e:	f7ff ff1b 	bl	8001bd8 <stepper_step_angle>
					check_cbmua = 0;
 8001da2:	4a74      	ldr	r2, [pc, #464]	; (8001f74 <main+0x30c>)
 8001da4:	2300      	movs	r3, #0
 8001da6:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		bt_handle(&bt1);		// ktra nut nhan
 8001da8:	4863      	ldr	r0, [pc, #396]	; (8001f38 <main+0x2d0>)
 8001daa:	f7ff f983 	bl	80010b4 <bt_handle>
		bt_handle(&bt2);
 8001dae:	4863      	ldr	r0, [pc, #396]	; (8001f3c <main+0x2d4>)
 8001db0:	f7ff f980 	bl	80010b4 <bt_handle>
		bt_handle(&bt3);
 8001db4:	4862      	ldr	r0, [pc, #392]	; (8001f40 <main+0x2d8>)
 8001db6:	f7ff f97d 	bl	80010b4 <bt_handle>
		bt_handle(&bt4);
 8001dba:	4862      	ldr	r0, [pc, #392]	; (8001f44 <main+0x2dc>)
 8001dbc:	f7ff f97a 	bl	80010b4 <bt_handle>
		on_off_led(bom, quat, den);		// bat tat thiet bi
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <main+0x310>)
 8001dc2:	7818      	ldrb	r0, [r3, #0]
 8001dc4:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <main+0x314>)
 8001dc6:	7819      	ldrb	r1, [r3, #0]
 8001dc8:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <main+0x318>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f7ff fcff 	bl	80017d0 <on_off_led>
		if (flag == 1) {		// neu nhan duoc du lieu
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <main+0x31c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10d      	bne.n	8001df6 <main+0x18e>
			check();
 8001dda:	f7ff fda9 	bl	8001930 <check>
			memset(DataRx, 0, strlen((char*) DataRx));
 8001dde:	485a      	ldr	r0, [pc, #360]	; (8001f48 <main+0x2e0>)
 8001de0:	f7fe f9c0 	bl	8000164 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	4857      	ldr	r0, [pc, #348]	; (8001f48 <main+0x2e0>)
 8001dec:	f004 fb78 	bl	80064e0 <memset>
			flag = 0;
 8001df0:	4a64      	ldr	r2, [pc, #400]	; (8001f84 <main+0x31c>)
 8001df2:	2300      	movs	r3, #0
 8001df4:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GetTick() - t_prev >= 100) {	// moi 100ms se cho chay 1 lan
 8001df6:	f000 fdbf 	bl	8002978 <HAL_GetTick>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	617a      	str	r2, [r7, #20]
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <main+0x2f8>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	1aa4      	subs	r4, r4, r2
 8001e10:	60bc      	str	r4, [r7, #8]
 8001e12:	eb61 0303 	sbc.w	r3, r1, r3
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	4613      	mov	r3, r2
 8001e22:	f173 0300 	sbcs.w	r3, r3, #0
 8001e26:	f4ff af76 	bcc.w	8001d16 <main+0xae>
			DHT22_value();		// doc dht
 8001e2a:	f7ff fb8b 	bl	8001544 <DHT22_value>
			HAL_ADC_Start_DMA(&hadc1, value_adc, 2);
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4947      	ldr	r1, [pc, #284]	; (8001f50 <main+0x2e8>)
 8001e32:	4848      	ldr	r0, [pc, #288]	; (8001f54 <main+0x2ec>)
 8001e34:	f000 fea6 	bl	8002b84 <HAL_ADC_Start_DMA>
			DAD = map(value_adc[0], 0, 4096, 0, 100);
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <main+0x2e8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	2364      	movs	r3, #100	; 0x64
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e48:	2100      	movs	r1, #0
 8001e4a:	f7ff fc1f 	bl	800168c <map>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <main+0x320>)
 8001e54:	8013      	strh	r3, [r2, #0]
			if (tt == 0) {		// dang o che do tu dong
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <main+0x324>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d129      	bne.n	8001eb2 <main+0x24a>
				if (tCelsius >= 30) {		// nhiet do lon hon 30
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <main+0x328>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	494c      	ldr	r1, [pc, #304]	; (8001f94 <main+0x32c>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f8d9 	bl	800101c <__aeabi_fcmpge>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <main+0x20e>
					quat = 1;			// quat bat
 8001e70:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <main+0x314>)
 8001e72:	2301      	movs	r3, #1
 8001e74:	7013      	strb	r3, [r2, #0]
				}
				if (tCelsius < 30) {
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <main+0x328>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4946      	ldr	r1, [pc, #280]	; (8001f94 <main+0x32c>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f8b9 	bl	8000ff4 <__aeabi_fcmplt>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <main+0x226>
					quat = 0;
 8001e88:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <main+0x314>)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	7013      	strb	r3, [r2, #0]
				}

				if (value_adc[1] >= 2500) {		// cam bien anh sang
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <main+0x2e8>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d902      	bls.n	8001ea0 <main+0x238>
					den  = 1;
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <main+0x318>)
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	7013      	strb	r3, [r2, #0]
				}
				if (value_adc[1] < 2500) {
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <main+0x2e8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d802      	bhi.n	8001eb2 <main+0x24a>
					den = 0;
 8001eac:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <main+0x318>)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	7013      	strb	r3, [r2, #0]
				}
			}
			show_lcd();		// hien thi lcd
 8001eb2:	f7ff fcd3 	bl	800185c <show_lcd>
			// gui len esp
			sprintf((char*) buffer, "%.1f/%.1f/%d/%d/%d/%d/%d\n", tCelsius, RH,
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <main+0x328>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fabe 	bl	800043c <__aeabi_f2d>
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	4689      	mov	r9, r1
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <main+0x330>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fab7 	bl	800043c <__aeabi_f2d>
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <main+0x320>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	461e      	mov	r6, r3
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <main+0x310>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461d      	mov	r5, r3
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <main+0x314>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461c      	mov	r4, r3
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <main+0x318>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <main+0x324>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	9306      	str	r3, [sp, #24]
 8001eec:	9205      	str	r2, [sp, #20]
 8001eee:	9404      	str	r4, [sp, #16]
 8001ef0:	9503      	str	r5, [sp, #12]
 8001ef2:	9602      	str	r6, [sp, #8]
 8001ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	4927      	ldr	r1, [pc, #156]	; (8001f9c <main+0x334>)
 8001efe:	4828      	ldr	r0, [pc, #160]	; (8001fa0 <main+0x338>)
 8001f00:	f004 ff56 	bl	8006db0 <siprintf>
					DAD, bom, quat, den, tt);
			/// ghep chuoi duoi bao gom nhung du lieu : nhiet do, do am, do am dat, ...
			HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 1000);// gui chuoi len esp
 8001f04:	4826      	ldr	r0, [pc, #152]	; (8001fa0 <main+0x338>)
 8001f06:	f7fe f92d 	bl	8000164 <strlen>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	4923      	ldr	r1, [pc, #140]	; (8001fa0 <main+0x338>)
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <main+0x2e4>)
 8001f16:	f003 fc5b 	bl	80057d0 <HAL_UART_Transmit>
			t_prev = HAL_GetTick();
 8001f1a:	f000 fd2d 	bl	8002978 <HAL_GetTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2200      	movs	r2, #0
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <main+0x2f8>)
 8001f28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f2c:	e9c3 1200 	strd	r1, r2, [r3]
		cb_mua = HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin);	// doc cam bien mua
 8001f30:	e6f1      	b.n	8001d16 <main+0xae>
 8001f32:	bf00      	nop
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	20000354 	.word	0x20000354
 8001f3c:	2000036c 	.word	0x2000036c
 8001f40:	20000384 	.word	0x20000384
 8001f44:	2000039c 	.word	0x2000039c
 8001f48:	20000450 	.word	0x20000450
 8001f4c:	2000030c 	.word	0x2000030c
 8001f50:	200003b4 	.word	0x200003b4
 8001f54:	200001fc 	.word	0x200001fc
 8001f58:	200002c4 	.word	0x200002c4
 8001f5c:	08009330 	.word	0x08009330
 8001f60:	200003c0 	.word	0x200003c0
 8001f64:	200003c8 	.word	0x200003c8
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	20000465 	.word	0x20000465
 8001f70:	43b40000 	.word	0x43b40000
 8001f74:	20000466 	.word	0x20000466
 8001f78:	200003ec 	.word	0x200003ec
 8001f7c:	200003ed 	.word	0x200003ed
 8001f80:	200003ee 	.word	0x200003ee
 8001f84:	20000464 	.word	0x20000464
 8001f88:	200003bc 	.word	0x200003bc
 8001f8c:	200003f2 	.word	0x200003f2
 8001f90:	200003e0 	.word	0x200003e0
 8001f94:	41f00000 	.word	0x41f00000
 8001f98:	200003e8 	.word	0x200003e8
 8001f9c:	0800933c 	.word	0x0800933c
 8001fa0:	20000430 	.word	0x20000430

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	2228      	movs	r2, #40	; 0x28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fa94 	bl	80064e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fb64 	bl	80046c8 <HAL_RCC_OscConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002006:	f000 f9cf 	bl	80023a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fdd0 	bl	8004bcc <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002032:	f000 f9b9 	bl	80023a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002036:	2302      	movs	r3, #2
 8002038:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f002 ff50 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800204e:	f000 f9ab 	bl	80023a8 <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_ADC1_Init+0x98>)
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <MX_ADC1_Init+0x9c>)
 8002070:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <MX_ADC1_Init+0x98>)
 8002074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_ADC1_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_ADC1_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_ADC1_Init+0x98>)
 8002088:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800208c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <MX_ADC1_Init+0x98>)
 8002096:	2202      	movs	r2, #2
 8002098:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209a:	4816      	ldr	r0, [pc, #88]	; (80020f4 <MX_ADC1_Init+0x98>)
 800209c:	f000 fc9a 	bl	80029d4 <HAL_ADC_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020a6:	f000 f97f 	bl	80023a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020aa:	2309      	movs	r3, #9
 80020ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80020b2:	2303      	movs	r3, #3
 80020b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <MX_ADC1_Init+0x98>)
 80020bc:	f000 fe5c 	bl	8002d78 <HAL_ADC_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f000 f96f 	bl	80023a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020ca:	2303      	movs	r3, #3
 80020cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80020d2:	2305      	movs	r3, #5
 80020d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	; (80020f4 <MX_ADC1_Init+0x98>)
 80020dc:	f000 fe4c 	bl	8002d78 <HAL_ADC_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80020e6:	f000 f95f 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200001fc 	.word	0x200001fc
 80020f8:	40012400 	.word	0x40012400

080020fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_I2C1_Init+0x50>)
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <MX_I2C1_Init+0x54>)
 8002104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_I2C1_Init+0x50>)
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_I2C1_Init+0x58>)
 800210a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_I2C1_Init+0x50>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_I2C1_Init+0x50>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_I2C1_Init+0x50>)
 800211a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800211e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_I2C1_Init+0x50>)
 800213a:	f001 fe29 	bl	8003d90 <HAL_I2C_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002144:	f000 f930 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000270 	.word	0x20000270
 8002150:	40005400 	.word	0x40005400
 8002154:	000186a0 	.word	0x000186a0

08002158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	463b      	mov	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <MX_TIM1_Init+0x9c>)
 8002178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_TIM1_Init+0x98>)
 800217c:	2247      	movs	r2, #71	; 0x47
 800217e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002188:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800218c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_TIM1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021a2:	f003 f80d 	bl	80051c0 <HAL_TIM_Base_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021ac:	f000 f8fc 	bl	80023a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021be:	f003 f899 	bl	80052f4 <HAL_TIM_ConfigClockSource>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80021c8:	f000 f8ee 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021da:	f003 fa4b 	bl	8005674 <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021e4:	f000 f8e0 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200002c4 	.word	0x200002c4
 80021f4:	40012c00 	.word	0x40012c00

080021f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_USART1_UART_Init+0x50>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002230:	f003 fa7e 	bl	8005730 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800223a:	f000 f8b5 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000030c 	.word	0x2000030c
 8002248:	40013800 	.word	0x40013800

0800224c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_DMA_Init+0x38>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <MX_DMA_Init+0x38>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6153      	str	r3, [r2, #20]
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_DMA_Init+0x38>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	200b      	movs	r0, #11
 8002270:	f001 f901 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002274:	200b      	movs	r0, #11
 8002276:	f001 f91a 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229c:	4b3f      	ldr	r3, [pc, #252]	; (800239c <MX_GPIO_Init+0x114>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a3e      	ldr	r2, [pc, #248]	; (800239c <MX_GPIO_Init+0x114>)
 80022a2:	f043 0320 	orr.w	r3, r3, #32
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b3c      	ldr	r3, [pc, #240]	; (800239c <MX_GPIO_Init+0x114>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <MX_GPIO_Init+0x114>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <MX_GPIO_Init+0x114>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <MX_GPIO_Init+0x114>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b33      	ldr	r3, [pc, #204]	; (800239c <MX_GPIO_Init+0x114>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a32      	ldr	r2, [pc, #200]	; (800239c <MX_GPIO_Init+0x114>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <MX_GPIO_Init+0x114>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|IN3_Pin|IN2_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	21e0      	movs	r1, #224	; 0xe0
 80022e8:	482d      	ldr	r0, [pc, #180]	; (80023a0 <MX_GPIO_Init+0x118>)
 80022ea:	f001 fd38 	bl	8003d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BOM2_Pin|BOM_Pin|DEN_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2138      	movs	r1, #56	; 0x38
 80022f2:	482c      	ldr	r0, [pc, #176]	; (80023a4 <MX_GPIO_Init+0x11c>)
 80022f4:	f001 fd33 	bl	8003d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4619      	mov	r1, r3
 800230a:	4825      	ldr	r0, [pc, #148]	; (80023a0 <MX_GPIO_Init+0x118>)
 800230c:	f001 fb8c 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUA_Pin */
  GPIO_InitStruct.Pin = MUA_Pin;
 8002310:	2310      	movs	r3, #16
 8002312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002318:	2301      	movs	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUA_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	481f      	ldr	r0, [pc, #124]	; (80023a0 <MX_GPIO_Init+0x118>)
 8002324:	f001 fb80 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin;
 8002328:	23e0      	movs	r3, #224	; 0xe0
 800232a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2302      	movs	r3, #2
 8002336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4619      	mov	r1, r3
 800233e:	4818      	ldr	r0, [pc, #96]	; (80023a0 <MX_GPIO_Init+0x118>)
 8002340:	f001 fb72 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 8002344:	2301      	movs	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	4813      	ldr	r0, [pc, #76]	; (80023a4 <MX_GPIO_Init+0x11c>)
 8002358:	f001 fb66 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT3_Pin BT1_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT3_Pin|BT1_Pin|BT4_Pin;
 800235c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <MX_GPIO_Init+0x11c>)
 8002372:	f001 fb59 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOM2_Pin BOM_Pin DEN_Pin */
  GPIO_InitStruct.Pin = BOM2_Pin|BOM_Pin|DEN_Pin;
 8002376:	2338      	movs	r3, #56	; 0x38
 8002378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2302      	movs	r3, #2
 8002384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_GPIO_Init+0x11c>)
 800238e:	f001 fb4b 	bl	8003a28 <HAL_GPIO_Init>

}
 8002392:	bf00      	nop
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010800 	.word	0x40010800
 80023a4:	40010c00 	.word	0x40010c00

080023a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
}
 80023ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023b0:	e7fe      	b.n	80023b0 <Error_Handler+0x8>
	...

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_MspInit+0x5c>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_MspInit+0x5c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6193      	str	r3, [r2, #24]
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_MspInit+0x5c>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_MspInit+0x5c>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_MspInit+0x5c>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_MspInit+0x5c>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_MspInit+0x60>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_MspInit+0x60>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000

08002418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_ADC_MspInit+0xe8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d15f      	bne.n	80024f8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_ADC_MspInit+0xec>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_ADC_MspInit+0xec>)
 800243e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_ADC_MspInit+0xec>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <HAL_ADC_MspInit+0xec>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <HAL_ADC_MspInit+0xec>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_ADC_MspInit+0xec>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_ADC_MspInit+0xec>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a25      	ldr	r2, [pc, #148]	; (8002504 <HAL_ADC_MspInit+0xec>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_ADC_MspInit+0xec>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002480:	2308      	movs	r3, #8
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002484:	2303      	movs	r3, #3
 8002486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	4619      	mov	r1, r3
 800248e:	481e      	ldr	r0, [pc, #120]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 8002490:	f001 faca 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002494:	2302      	movs	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3
 800249a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4619      	mov	r1, r3
 80024a2:	481a      	ldr	r0, [pc, #104]	; (800250c <HAL_ADC_MspInit+0xf4>)
 80024a4:	f001 fac0 	bl	8003a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_ADC_MspInit+0xfc>)
 80024ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024d2:	2220      	movs	r2, #32
 80024d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024de:	f001 f801 	bl	80034e4 <HAL_DMA_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80024e8:	f7ff ff5e 	bl	80023a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024f0:	621a      	str	r2, [r3, #32]
 80024f2:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024f8:	bf00      	nop
 80024fa:	3728      	adds	r7, #40	; 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40012400 	.word	0x40012400
 8002504:	40021000 	.word	0x40021000
 8002508:	40010800 	.word	0x40010800
 800250c:	40010c00 	.word	0x40010c00
 8002510:	2000022c 	.word	0x2000022c
 8002514:	40020008 	.word	0x40020008

08002518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_I2C_MspInit+0x70>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d123      	bne.n	8002580 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_I2C_MspInit+0x74>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_I2C_MspInit+0x74>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_I2C_MspInit+0x74>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002554:	2312      	movs	r3, #18
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4619      	mov	r1, r3
 8002562:	480b      	ldr	r0, [pc, #44]	; (8002590 <HAL_I2C_MspInit+0x78>)
 8002564:	f001 fa60 	bl	8003a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_I2C_MspInit+0x74>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_I2C_MspInit+0x74>)
 800256e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002572:	61d3      	str	r3, [r2, #28]
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_I2C_MspInit+0x74>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40005400 	.word	0x40005400
 800258c:	40021000 	.word	0x40021000
 8002590:	40010c00 	.word	0x40010c00

08002594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_TIM_Base_MspInit+0x34>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10b      	bne.n	80025be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_TIM_Base_MspInit+0x38>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_TIM_Base_MspInit+0x38>)
 80025ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b0:	6193      	str	r3, [r2, #24]
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_TIM_Base_MspInit+0x38>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_UART_MspInit+0x9c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d139      	bne.n	8002664 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_UART_MspInit+0xa0>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_UART_MspInit+0xa0>)
 80025f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_UART_MspInit+0xa0>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_UART_MspInit+0xa0>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_UART_MspInit+0xa0>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_UART_MspInit+0xa0>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	4619      	mov	r1, r3
 8002634:	480f      	ldr	r0, [pc, #60]	; (8002674 <HAL_UART_MspInit+0xa4>)
 8002636:	f001 f9f7 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800263a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	4619      	mov	r1, r3
 800264e:	4809      	ldr	r0, [pc, #36]	; (8002674 <HAL_UART_MspInit+0xa4>)
 8002650:	f001 f9ea 	bl	8003a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	2025      	movs	r0, #37	; 0x25
 800265a:	f000 ff0c 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800265e:	2025      	movs	r0, #37	; 0x25
 8002660:	f000 ff25 	bl	80034ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40013800 	.word	0x40013800
 8002670:	40021000 	.word	0x40021000
 8002674:	40010800 	.word	0x40010800

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800267c:	e7fe      	b.n	800267c <NMI_Handler+0x4>

0800267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <HardFault_Handler+0x4>

08002684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <MemManage_Handler+0x4>

0800268a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <UsageFault_Handler+0x4>

08002696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026be:	f000 f949 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <DMA1_Channel1_IRQHandler+0x10>)
 80026ce:	f001 f877 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000022c 	.word	0x2000022c

080026dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <USART1_IRQHandler+0x10>)
 80026e2:	f003 f955 	bl	8005990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000030c 	.word	0x2000030c

080026f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	return 1;
 80026f4:	2301      	movs	r3, #1
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_kill>:

int _kill(int pid, int sig)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002708:	f003 fec0 	bl	800648c <__errno>
 800270c:	4603      	mov	r3, r0
 800270e:	2216      	movs	r2, #22
 8002710:	601a      	str	r2, [r3, #0]
	return -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_exit>:

void _exit (int status)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002726:	f04f 31ff 	mov.w	r1, #4294967295
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffe7 	bl	80026fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8002730:	e7fe      	b.n	8002730 <_exit+0x12>

08002732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e00a      	b.n	800275a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002744:	f3af 8000 	nop.w
 8002748:	4601      	mov	r1, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbf0      	blt.n	8002744 <_read+0x12>
	}

return len;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e009      	b.n	8002792 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf1      	blt.n	800277e <_write+0x12>
	}
	return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_close>:

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ca:	605a      	str	r2, [r3, #4]
	return 0;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <_isatty>:

int _isatty(int file)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002834:	f003 fe2a 	bl	800648c <__errno>
 8002838:	4603      	mov	r3, r0
 800283a:	220c      	movs	r2, #12
 800283c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e009      	b.n	8002858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <_sbrk+0x64>)
 8002854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20005000 	.word	0x20005000
 8002864:	00000400 	.word	0x00000400
 8002868:	20000468 	.word	0x20000468
 800286c:	20000480 	.word	0x20000480

08002870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800287c:	f7ff fff8 	bl	8002870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002880:	480b      	ldr	r0, [pc, #44]	; (80028b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002882:	490c      	ldr	r1, [pc, #48]	; (80028b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002884:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002898:	4c09      	ldr	r4, [pc, #36]	; (80028c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a6:	f003 fdf7 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028aa:	f7ff f9dd 	bl	8001c68 <main>
  bx lr
 80028ae:	4770      	bx	lr
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80028b8:	0800977c 	.word	0x0800977c
  ldr r2, =_sbss
 80028bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028c0:	20000480 	.word	0x20000480

080028c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC1_2_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x28>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x28>)
 80028d2:	f043 0310 	orr.w	r3, r3, #16
 80028d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 fdc1 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fd66 	bl	80023b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fdd9 	bl	80034ca <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 fda1 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000000 	.word	0x20000000
 800294c:	20000008 	.word	0x20000008
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_IncTick+0x1c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_IncTick+0x20>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a03      	ldr	r2, [pc, #12]	; (8002974 <HAL_IncTick+0x20>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000008 	.word	0x20000008
 8002974:	2000046c 	.word	0x2000046c

08002978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return uwTick;
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_GetTick+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	2000046c 	.word	0x2000046c

0800298c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff fff0 	bl	8002978 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d005      	beq.n	80029b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_Delay+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029b2:	bf00      	nop
 80029b4:	f7ff ffe0 	bl	8002978 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f7      	bhi.n	80029b4 <HAL_Delay+0x28>
  {
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000008 	.word	0x20000008

080029d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0be      	b.n	8002b74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fd00 	bl	8002418 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 faff 	bl	800301c <ADC_ConversionStop_Disable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8099 	bne.w	8002b62 <HAL_ADC_Init+0x18e>
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8095 	bne.w	8002b62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a40:	f023 0302 	bic.w	r3, r3, #2
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7b1b      	ldrb	r3, [r3, #12]
 8002a5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6c:	d003      	beq.n	8002a76 <HAL_ADC_Init+0xa2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_ADC_Init+0xa8>
 8002a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_Init+0xaa>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7d1b      	ldrb	r3, [r3, #20]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d119      	bne.n	8002ac0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7b1b      	ldrb	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	035a      	lsls	r2, r3, #13
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_ADC_Init+0x1a8>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_Init+0x126>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d104      	bne.n	8002b04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	051b      	lsls	r3, r3, #20
 8002b02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_ADC_Init+0x1ac>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10b      	bne.n	8002b40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b3e:	e018      	b.n	8002b72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f023 0312 	bic.w	r3, r3, #18
 8002b48:	f043 0210 	orr.w	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b60:	e007      	b.n	8002b72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b80:	ff1f0efe 	.word	0xff1f0efe

08002b84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a64      	ldr	r2, [pc, #400]	; (8002d2c <HAL_ADC_Start_DMA+0x1a8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_Start_DMA+0x24>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_ADC_Start_DMA+0x1ac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ADC_Start_DMA+0x32>
 8002ba8:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_ADC_Start_DMA+0x1a8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 80b3 	bne.w	8002d1c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_Start_DMA+0x40>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0ae      	b.n	8002d22 <HAL_ADC_Start_DMA+0x19e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9cb 	bl	8002f68 <ADC_Enable>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 809a 	bne.w	8002d12 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4e      	ldr	r2, [pc, #312]	; (8002d30 <HAL_ADC_Start_DMA+0x1ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_Start_DMA+0x84>
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_ADC_Start_DMA+0x1a8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d115      	bne.n	8002c34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d026      	beq.n	8002c70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c32:	e01d      	b.n	8002c70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_ADC_Start_DMA+0x1a8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xd0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a38      	ldr	r2, [pc, #224]	; (8002d30 <HAL_ADC_Start_DMA+0x1ac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10d      	bne.n	8002c70 <HAL_ADC_Start_DMA+0xec>
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_ADC_Start_DMA+0x1a8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f023 0206 	bic.w	r2, r3, #6
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_ADC_Start_DMA+0x1b0>)
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_ADC_Start_DMA+0x1b4>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <HAL_ADC_Start_DMA+0x1b8>)
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0202 	mvn.w	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a18      	ldr	r0, [r3, #32]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	334c      	adds	r3, #76	; 0x4c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f000 fc5d 	bl	8003598 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ce8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cec:	d108      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002cfc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cfe:	e00f      	b.n	8002d20 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d0e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d10:	e006      	b.n	8002d20 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002d1a:	e001      	b.n	8002d20 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40012400 	.word	0x40012400
 8002d30:	40012800 	.word	0x40012800
 8002d34:	0800309f 	.word	0x0800309f
 8002d38:	0800311b 	.word	0x0800311b
 8002d3c:	08003137 	.word	0x08003137

08002d40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x20>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0dc      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1da>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d81c      	bhi.n	8002de2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b05      	subs	r3, #5
 8002dba:	221f      	movs	r2, #31
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4019      	ands	r1, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b05      	subs	r3, #5
 8002dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34
 8002de0:	e03c      	b.n	8002e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d81c      	bhi.n	8002e24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b23      	subs	r3, #35	; 0x23
 8002dfc:	221f      	movs	r2, #31
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4019      	ands	r1, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	3b23      	subs	r3, #35	; 0x23
 8002e16:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
 8002e22:	e01b      	b.n	8002e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b41      	subs	r3, #65	; 0x41
 8002e36:	221f      	movs	r2, #31
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	4019      	ands	r1, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3b41      	subs	r3, #65	; 0x41
 8002e50:	fa00 f203 	lsl.w	r2, r0, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d91c      	bls.n	8002e9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	2207      	movs	r2, #7
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4019      	ands	r1, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6898      	ldr	r0, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b1e      	subs	r3, #30
 8002e90:	fa00 f203 	lsl.w	r2, r0, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	e019      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4019      	ands	r1, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6898      	ldr	r0, [r3, #8]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d003      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	d132      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d125      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d126      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d11a      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	0c9a      	lsrs	r2, r3, #18
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f9      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x1b2>
 8002f36:	e007      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40012400 	.word	0x40012400
 8002f60:	20000000 	.word	0x20000000
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d040      	beq.n	8003008 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <ADC_Enable+0xac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <ADC_Enable+0xb0>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	0c9b      	lsrs	r3, r3, #18
 8002fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fa4:	e002      	b.n	8002fac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb2:	f7ff fce1 	bl	8002978 <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fb8:	e01f      	b.n	8002ffa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fba:	f7ff fcdd 	bl	8002978 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d918      	bls.n	8002ffa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d011      	beq.n	8002ffa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d1d8      	bne.n	8002fba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000
 8003018:	431bde83 	.word	0x431bde83

0800301c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d12e      	bne.n	8003094 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003046:	f7ff fc97 	bl	8002978 <HAL_GetTick>
 800304a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800304c:	e01b      	b.n	8003086 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800304e:	f7ff fc93 	bl	8002978 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d914      	bls.n	8003086 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10d      	bne.n	8003086 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d0dc      	beq.n	800304e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d127      	bne.n	8003108 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030d2:	d115      	bne.n	8003100 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fe1d 	bl	8002d40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003106:	e004      	b.n	8003112 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fe12 	bl	8002d52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fe01 	bl	8002d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADCEx_Calibration_Start+0x1e>
 8003186:	2302      	movs	r3, #2
 8003188:	e097      	b.n	80032ba <HAL_ADCEx_Calibration_Start+0x14e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ff42 	bl	800301c <ADC_ConversionStop_Disable>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fee3 	bl	8002f68 <ADC_Enable>
 80031a2:	4603      	mov	r3, r0
 80031a4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 8081 	bne.w	80032b0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b6:	f023 0302 	bic.w	r3, r3, #2
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_ADCEx_Calibration_Start+0x158>)
 80031c4:	681c      	ldr	r4, [r3, #0]
 80031c6:	2002      	movs	r0, #2
 80031c8:	f001 ff44 	bl	8005054 <HAL_RCCEx_GetPeriphCLKFreq>
 80031cc:	4603      	mov	r3, r0
 80031ce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80031d2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80031d4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80031d6:	e002      	b.n	80031de <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0208 	orr.w	r2, r2, #8
 80031f2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031f4:	f7ff fbc0 	bl	8002978 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031fa:	e01b      	b.n	8003234 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031fc:	f7ff fbbc 	bl	8002978 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b0a      	cmp	r3, #10
 8003208:	d914      	bls.n	8003234 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f023 0312 	bic.w	r3, r3, #18
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e042      	b.n	80032ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1dc      	bne.n	80031fc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0204 	orr.w	r2, r2, #4
 8003250:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003252:	f7ff fb91 	bl	8002978 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003258:	e01b      	b.n	8003292 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800325a:	f7ff fb8d 	bl	8002978 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b0a      	cmp	r3, #10
 8003266:	d914      	bls.n	8003292 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f023 0312 	bic.w	r3, r3, #18
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e013      	b.n	80032ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1dc      	bne.n	800325a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f023 0303 	bic.w	r3, r3, #3
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd90      	pop	{r4, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000

080032c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4906      	ldr	r1, [pc, #24]	; (8003360 <__NVIC_EnableIRQ+0x34>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff90 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff2d 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff42 	bl	8003310 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff90 	bl	80033b8 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5f 	bl	8003364 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff35 	bl	800332c <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e043      	b.n	8003582 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4b22      	ldr	r3, [pc, #136]	; (800358c <HAL_DMA_Init+0xa8>)
 8003502:	4413      	add	r3, r2
 8003504:	4a22      	ldr	r2, [pc, #136]	; (8003590 <HAL_DMA_Init+0xac>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	009a      	lsls	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_DMA_Init+0xb0>)
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800352e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	bffdfff8 	.word	0xbffdfff8
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	40020000 	.word	0x40020000

08003598 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Start_IT+0x20>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e04b      	b.n	8003650 <HAL_DMA_Start_IT+0xb8>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13a      	bne.n	8003642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f9eb 	bl	80039cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 020e 	orr.w	r2, r2, #14
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00f      	b.n	8003630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 020a 	orr.w	r2, r2, #10
 800362e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e005      	b.n	800364e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800364a:	2302      	movs	r3, #2
 800364c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d008      	beq.n	8003682 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e020      	b.n	80036c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020e 	bic.w	r2, r2, #14
 8003690:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d005      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e051      	b.n	8003798 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020e 	bic.w	r2, r2, #14
 8003702:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_DMA_Abort_IT+0xd4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d029      	beq.n	8003772 <HAL_DMA_Abort_IT+0xa2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_DMA_Abort_IT+0xd8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <HAL_DMA_Abort_IT+0x9e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_DMA_Abort_IT+0xdc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01a      	beq.n	8003768 <HAL_DMA_Abort_IT+0x98>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_DMA_Abort_IT+0xe0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d012      	beq.n	8003762 <HAL_DMA_Abort_IT+0x92>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <HAL_DMA_Abort_IT+0xe4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00a      	beq.n	800375c <HAL_DMA_Abort_IT+0x8c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_DMA_Abort_IT+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d102      	bne.n	8003756 <HAL_DMA_Abort_IT+0x86>
 8003750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003754:	e00e      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 8003756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375a:	e00b      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 800375c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003760:	e008      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 8003762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003766:	e005      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 8003768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376c:	e002      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 800376e:	2310      	movs	r3, #16
 8003770:	e000      	b.n	8003774 <HAL_DMA_Abort_IT+0xa4>
 8003772:	2301      	movs	r3, #1
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <HAL_DMA_Abort_IT+0xec>)
 8003776:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
    } 
  }
  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40020008 	.word	0x40020008
 80037a8:	4002001c 	.word	0x4002001c
 80037ac:	40020030 	.word	0x40020030
 80037b0:	40020044 	.word	0x40020044
 80037b4:	40020058 	.word	0x40020058
 80037b8:	4002006c 	.word	0x4002006c
 80037bc:	40020000 	.word	0x40020000

080037c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2204      	movs	r2, #4
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d04f      	beq.n	8003888 <HAL_DMA_IRQHandler+0xc8>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a66      	ldr	r2, [pc, #408]	; (80039b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d029      	beq.n	800386e <HAL_DMA_IRQHandler+0xae>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a65      	ldr	r2, [pc, #404]	; (80039b4 <HAL_DMA_IRQHandler+0x1f4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_IRQHandler+0xaa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_DMA_IRQHandler+0x1f8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01a      	beq.n	8003864 <HAL_DMA_IRQHandler+0xa4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a62      	ldr	r2, [pc, #392]	; (80039bc <HAL_DMA_IRQHandler+0x1fc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d012      	beq.n	800385e <HAL_DMA_IRQHandler+0x9e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a60      	ldr	r2, [pc, #384]	; (80039c0 <HAL_DMA_IRQHandler+0x200>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00a      	beq.n	8003858 <HAL_DMA_IRQHandler+0x98>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_DMA_IRQHandler+0x204>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d102      	bne.n	8003852 <HAL_DMA_IRQHandler+0x92>
 800384c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003850:	e00e      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 8003852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003856:	e00b      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 8003858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800385c:	e008      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 800385e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003862:	e005      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 8003864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003868:	e002      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	e000      	b.n	8003870 <HAL_DMA_IRQHandler+0xb0>
 800386e:	2304      	movs	r3, #4
 8003870:	4a55      	ldr	r2, [pc, #340]	; (80039c8 <HAL_DMA_IRQHandler+0x208>)
 8003872:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8094 	beq.w	80039a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003886:	e08e      	b.n	80039a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2202      	movs	r2, #2
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d056      	beq.n	8003946 <HAL_DMA_IRQHandler+0x186>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d051      	beq.n	8003946 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020a 	bic.w	r2, r2, #10
 80038be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <HAL_DMA_IRQHandler+0x1f0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d029      	beq.n	8003926 <HAL_DMA_IRQHandler+0x166>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <HAL_DMA_IRQHandler+0x1f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x162>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <HAL_DMA_IRQHandler+0x1f8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01a      	beq.n	800391c <HAL_DMA_IRQHandler+0x15c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_DMA_IRQHandler+0x1fc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d012      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_DMA_IRQHandler+0x200>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x150>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_DMA_IRQHandler+0x204>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d102      	bne.n	800390a <HAL_DMA_IRQHandler+0x14a>
 8003904:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003908:	e00e      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 800390a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390e:	e00b      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 8003910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003914:	e008      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 8003916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800391a:	e005      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 800391c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003920:	e002      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 8003922:	2320      	movs	r3, #32
 8003924:	e000      	b.n	8003928 <HAL_DMA_IRQHandler+0x168>
 8003926:	2302      	movs	r3, #2
 8003928:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <HAL_DMA_IRQHandler+0x208>)
 800392a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d034      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003944:	e02f      	b.n	80039a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2208      	movs	r2, #8
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x1e8>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d023      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	2101      	movs	r1, #1
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
    }
  }
  return;
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
}
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40020008 	.word	0x40020008
 80039b4:	4002001c 	.word	0x4002001c
 80039b8:	40020030 	.word	0x40020030
 80039bc:	40020044 	.word	0x40020044
 80039c0:	40020058 	.word	0x40020058
 80039c4:	4002006c 	.word	0x4002006c
 80039c8:	40020000 	.word	0x40020000

080039cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d108      	bne.n	8003a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a0a:	e007      	b.n	8003a1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b08b      	sub	sp, #44	; 0x2c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3a:	e169      	b.n	8003d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 8158 	bne.w	8003d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a9a      	ldr	r2, [pc, #616]	; (8003cc8 <HAL_GPIO_Init+0x2a0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d05e      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
 8003a64:	4a98      	ldr	r2, [pc, #608]	; (8003cc8 <HAL_GPIO_Init+0x2a0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d875      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003a6a:	4a98      	ldr	r2, [pc, #608]	; (8003ccc <HAL_GPIO_Init+0x2a4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d058      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
 8003a70:	4a96      	ldr	r2, [pc, #600]	; (8003ccc <HAL_GPIO_Init+0x2a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d86f      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003a76:	4a96      	ldr	r2, [pc, #600]	; (8003cd0 <HAL_GPIO_Init+0x2a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d052      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
 8003a7c:	4a94      	ldr	r2, [pc, #592]	; (8003cd0 <HAL_GPIO_Init+0x2a8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d869      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003a82:	4a94      	ldr	r2, [pc, #592]	; (8003cd4 <HAL_GPIO_Init+0x2ac>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04c      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
 8003a88:	4a92      	ldr	r2, [pc, #584]	; (8003cd4 <HAL_GPIO_Init+0x2ac>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d863      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003a8e:	4a92      	ldr	r2, [pc, #584]	; (8003cd8 <HAL_GPIO_Init+0x2b0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d046      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
 8003a94:	4a90      	ldr	r2, [pc, #576]	; (8003cd8 <HAL_GPIO_Init+0x2b0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d85d      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003a9a:	2b12      	cmp	r3, #18
 8003a9c:	d82a      	bhi.n	8003af4 <HAL_GPIO_Init+0xcc>
 8003a9e:	2b12      	cmp	r3, #18
 8003aa0:	d859      	bhi.n	8003b56 <HAL_GPIO_Init+0x12e>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <HAL_GPIO_Init+0x80>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003b23 	.word	0x08003b23
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003b0f 	.word	0x08003b0f
 8003ab4:	08003b51 	.word	0x08003b51
 8003ab8:	08003b57 	.word	0x08003b57
 8003abc:	08003b57 	.word	0x08003b57
 8003ac0:	08003b57 	.word	0x08003b57
 8003ac4:	08003b57 	.word	0x08003b57
 8003ac8:	08003b57 	.word	0x08003b57
 8003acc:	08003b57 	.word	0x08003b57
 8003ad0:	08003b57 	.word	0x08003b57
 8003ad4:	08003b57 	.word	0x08003b57
 8003ad8:	08003b57 	.word	0x08003b57
 8003adc:	08003b57 	.word	0x08003b57
 8003ae0:	08003b57 	.word	0x08003b57
 8003ae4:	08003b57 	.word	0x08003b57
 8003ae8:	08003b57 	.word	0x08003b57
 8003aec:	08003b05 	.word	0x08003b05
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	4a79      	ldr	r2, [pc, #484]	; (8003cdc <HAL_GPIO_Init+0x2b4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003afa:	e02c      	b.n	8003b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	623b      	str	r3, [r7, #32]
          break;
 8003b02:	e029      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	623b      	str	r3, [r7, #32]
          break;
 8003b0c:	e024      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	3308      	adds	r3, #8
 8003b14:	623b      	str	r3, [r7, #32]
          break;
 8003b16:	e01f      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	623b      	str	r3, [r7, #32]
          break;
 8003b20:	e01a      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	623b      	str	r3, [r7, #32]
          break;
 8003b2e:	e013      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b38:	2308      	movs	r3, #8
 8003b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	611a      	str	r2, [r3, #16]
          break;
 8003b42:	e009      	b.n	8003b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b44:	2308      	movs	r3, #8
 8003b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	615a      	str	r2, [r3, #20]
          break;
 8003b4e:	e003      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x130>
          break;
 8003b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2bff      	cmp	r3, #255	; 0xff
 8003b5c:	d801      	bhi.n	8003b62 <HAL_GPIO_Init+0x13a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	e001      	b.n	8003b66 <HAL_GPIO_Init+0x13e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2bff      	cmp	r3, #255	; 0xff
 8003b6c:	d802      	bhi.n	8003b74 <HAL_GPIO_Init+0x14c>
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	e002      	b.n	8003b7a <HAL_GPIO_Init+0x152>
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	3b08      	subs	r3, #8
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	210f      	movs	r1, #15
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	6a39      	ldr	r1, [r7, #32]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80b1 	beq.w	8003d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <HAL_GPIO_Init+0x2b8>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	4a4c      	ldr	r2, [pc, #304]	; (8003ce0 <HAL_GPIO_Init+0x2b8>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6193      	str	r3, [r2, #24]
 8003bb4:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_GPIO_Init+0x2b8>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_GPIO_Init+0x2bc>)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <HAL_GPIO_Init+0x2c0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <HAL_GPIO_Init+0x1ec>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <HAL_GPIO_Init+0x2c4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00d      	beq.n	8003c10 <HAL_GPIO_Init+0x1e8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3e      	ldr	r2, [pc, #248]	; (8003cf0 <HAL_GPIO_Init+0x2c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <HAL_GPIO_Init+0x1e4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3d      	ldr	r2, [pc, #244]	; (8003cf4 <HAL_GPIO_Init+0x2cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_GPIO_Init+0x1e0>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <HAL_GPIO_Init+0x1ee>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	e004      	b.n	8003c16 <HAL_GPIO_Init+0x1ee>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e002      	b.n	8003c16 <HAL_GPIO_Init+0x1ee>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_GPIO_Init+0x1ee>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	f002 0203 	and.w	r2, r2, #3
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	4093      	lsls	r3, r2
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c26:	492f      	ldr	r1, [pc, #188]	; (8003ce4 <HAL_GPIO_Init+0x2bc>)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	492c      	ldr	r1, [pc, #176]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	4928      	ldr	r1, [pc, #160]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	4922      	ldr	r1, [pc, #136]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	491e      	ldr	r1, [pc, #120]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4918      	ldr	r1, [pc, #96]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e006      	b.n	8003cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	4914      	ldr	r1, [pc, #80]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_GPIO_Init+0x2d0>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
 8003cc4:	e021      	b.n	8003d0a <HAL_GPIO_Init+0x2e2>
 8003cc6:	bf00      	nop
 8003cc8:	10320000 	.word	0x10320000
 8003ccc:	10310000 	.word	0x10310000
 8003cd0:	10220000 	.word	0x10220000
 8003cd4:	10210000 	.word	0x10210000
 8003cd8:	10120000 	.word	0x10120000
 8003cdc:	10110000 	.word	0x10110000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40010c00 	.word	0x40010c00
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_GPIO_Init+0x304>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	4909      	ldr	r1, [pc, #36]	; (8003d2c <HAL_GPIO_Init+0x304>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f47f ae8e 	bne.w	8003a3c <HAL_GPIO_Init+0x14>
  }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	372c      	adds	r7, #44	; 0x2c
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40010400 	.word	0x40010400

08003d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	807b      	strh	r3, [r7, #2]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d6e:	787b      	ldrb	r3, [r7, #1]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d74:	887a      	ldrh	r2, [r7, #2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d7a:	e003      	b.n	8003d84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	041a      	lsls	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	611a      	str	r2, [r3, #16]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e12b      	b.n	8003ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe fbae 	bl	8002518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003df4:	f001 f832 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a81      	ldr	r2, [pc, #516]	; (8004004 <HAL_I2C_Init+0x274>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d807      	bhi.n	8003e14 <HAL_I2C_Init+0x84>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a80      	ldr	r2, [pc, #512]	; (8004008 <HAL_I2C_Init+0x278>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e006      	b.n	8003e22 <HAL_I2C_Init+0x92>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a7d      	ldr	r2, [pc, #500]	; (800400c <HAL_I2C_Init+0x27c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0e7      	b.n	8003ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a78      	ldr	r2, [pc, #480]	; (8004010 <HAL_I2C_Init+0x280>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0c9b      	lsrs	r3, r3, #18
 8003e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a6a      	ldr	r2, [pc, #424]	; (8004004 <HAL_I2C_Init+0x274>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d802      	bhi.n	8003e64 <HAL_I2C_Init+0xd4>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3301      	adds	r3, #1
 8003e62:	e009      	b.n	8003e78 <HAL_I2C_Init+0xe8>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	4a69      	ldr	r2, [pc, #420]	; (8004014 <HAL_I2C_Init+0x284>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	3301      	adds	r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	495c      	ldr	r1, [pc, #368]	; (8004004 <HAL_I2C_Init+0x274>)
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d819      	bhi.n	8003ecc <HAL_I2C_Init+0x13c>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e59      	subs	r1, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eac:	400b      	ands	r3, r1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_I2C_Init+0x138>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e59      	subs	r1, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec6:	e051      	b.n	8003f6c <HAL_I2C_Init+0x1dc>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	e04f      	b.n	8003f6c <HAL_I2C_Init+0x1dc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d111      	bne.n	8003ef8 <HAL_I2C_Init+0x168>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e58      	subs	r0, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	440b      	add	r3, r1
 8003ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e012      	b.n	8003f1e <HAL_I2C_Init+0x18e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e58      	subs	r0, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	0099      	lsls	r1, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Init+0x196>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e022      	b.n	8003f6c <HAL_I2C_Init+0x1dc>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10e      	bne.n	8003f4c <HAL_I2C_Init+0x1bc>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1e58      	subs	r0, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	440b      	add	r3, r1
 8003f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f40:	3301      	adds	r3, #1
 8003f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	e00f      	b.n	8003f6c <HAL_I2C_Init+0x1dc>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e58      	subs	r0, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	0099      	lsls	r1, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	6809      	ldr	r1, [r1, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6911      	ldr	r1, [r2, #16]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	000186a0 	.word	0x000186a0
 8004008:	001e847f 	.word	0x001e847f
 800400c:	003d08ff 	.word	0x003d08ff
 8004010:	431bde83 	.word	0x431bde83
 8004014:	10624dd3 	.word	0x10624dd3

08004018 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
 8004028:	4613      	mov	r3, r2
 800402a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7fe fca4 	bl	8002978 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 80e0 	bne.w	8004200 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	4970      	ldr	r1, [pc, #448]	; (800420c <HAL_I2C_Master_Transmit+0x1f4>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f964 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e0d3      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2C_Master_Transmit+0x50>
 8004064:	2302      	movs	r3, #2
 8004066:	e0cc      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d007      	beq.n	800408e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	893a      	ldrh	r2, [r7, #8]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a50      	ldr	r2, [pc, #320]	; (8004210 <HAL_I2C_Master_Transmit+0x1f8>)
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f89c 	bl	8004214 <I2C_MasterRequestWrite>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e08d      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040fc:	e066      	b.n	80041cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa22 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06b      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d11b      	bne.n	80041a0 <HAL_I2C_Master_Transmit+0x188>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d017      	beq.n	80041a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	6a39      	ldr	r1, [r7, #32]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa19 	bl	80045dc <I2C_WaitOnBTFFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d107      	bne.n	80041c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d194      	bne.n	80040fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000

08004214 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	460b      	mov	r3, r1
 8004222:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d006      	beq.n	800423e <I2C_MasterRequestWrite+0x2a>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <I2C_MasterRequestWrite+0x2a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00b      	b.n	8004268 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b12      	cmp	r3, #18
 8004256:	d107      	bne.n	8004268 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f84f 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d103      	bne.n	8004298 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e035      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d108      	bne.n	80042b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e01b      	b.n	80042f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030f 	orn	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	490e      	ldr	r1, [pc, #56]	; (8004310 <I2C_MasterRequestWrite+0xfc>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f898 	bl	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e010      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4907      	ldr	r1, [pc, #28]	; (8004314 <I2C_MasterRequestWrite+0x100>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f888 	bl	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	00010008 	.word	0x00010008
 8004314:	00010002 	.word	0x00010002

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e048      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d044      	beq.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fb21 	bl	8002978 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d139      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d10d      	bne.n	800436e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	e00c      	b.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x70>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	43da      	mvns	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	d116      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e023      	b.n	8004404 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d093      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441a:	e071      	b.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442a:	d123      	bne.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e067      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d041      	beq.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fe fa7c 	bl	8002978 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d136      	bne.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10c      	bne.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e00b      	b.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e021      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10c      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e00b      	b.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f47f af6d 	bne.w	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	e034      	b.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f886 	bl	800466c <I2C_IsAcknowledgeFailed>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e034      	b.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d028      	beq.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fe fa01 	bl	8002978 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11d      	bne.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d016      	beq.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d1c3      	bne.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e8:	e034      	b.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f83e 	bl	800466c <I2C_IsAcknowledgeFailed>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e034      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d028      	beq.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fe f9b9 	bl	8002978 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11d      	bne.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d016      	beq.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e007      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d1c3      	bne.n	80045ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d11b      	bne.n	80046bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e272      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8087 	beq.w	80047f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e8:	4b92      	ldr	r3, [pc, #584]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d00c      	beq.n	800470e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046f4:	4b8f      	ldr	r3, [pc, #572]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d112      	bne.n	8004726 <HAL_RCC_OscConfig+0x5e>
 8004700:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d10b      	bne.n	8004726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470e:	4b89      	ldr	r3, [pc, #548]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d06c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x12c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d168      	bne.n	80047f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e24c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x76>
 8004730:	4b80      	ldr	r3, [pc, #512]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a7f      	ldr	r2, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e02e      	b.n	800479c <HAL_RCC_OscConfig+0xd4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x98>
 8004746:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800474c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b78      	ldr	r3, [pc, #480]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a77      	ldr	r2, [pc, #476]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e01d      	b.n	800479c <HAL_RCC_OscConfig+0xd4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0xbc>
 800476a:	4b72      	ldr	r3, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a71      	ldr	r2, [pc, #452]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6e      	ldr	r2, [pc, #440]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xd4>
 8004784:	4b6b      	ldr	r3, [pc, #428]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6a      	ldr	r2, [pc, #424]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b68      	ldr	r3, [pc, #416]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a67      	ldr	r2, [pc, #412]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe f8e8 	bl	8002978 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fe f8e4 	bl	8002978 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e200      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0xe4>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe f8d4 	bl	8002978 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe f8d0 	bl	8002978 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1ec      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x10c>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004802:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800480e:	4b49      	ldr	r3, [pc, #292]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x18c>
 800481a:	4b46      	ldr	r3, [pc, #280]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x176>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1c0      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4939      	ldr	r1, [pc, #228]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <HAL_RCC_OscConfig+0x270>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fe f889 	bl	8002978 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fe f885 	bl	8002978 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1a1      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4927      	ldr	r1, [pc, #156]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b26      	ldr	r3, [pc, #152]	; (8004938 <HAL_RCC_OscConfig+0x270>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fe f868 	bl	8002978 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fe f864 	bl	8002978 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e180      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03a      	beq.n	800494c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d019      	beq.n	8004912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_RCC_OscConfig+0x274>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e4:	f7fe f848 	bl	8002978 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fe f844 	bl	8002978 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e160      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <HAL_RCC_OscConfig+0x26c>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800490a:	2001      	movs	r0, #1
 800490c:	f000 face 	bl	8004eac <RCC_Delay>
 8004910:	e01c      	b.n	800494c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCC_OscConfig+0x274>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004918:	f7fe f82e 	bl	8002978 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491e:	e00f      	b.n	8004940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004920:	f7fe f82a 	bl	8002978 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d908      	bls.n	8004940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e146      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	42420000 	.word	0x42420000
 800493c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b92      	ldr	r3, [pc, #584]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e9      	bne.n	8004920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a6 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4a87      	ldr	r2, [pc, #540]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	61d3      	str	r3, [r2, #28]
 8004976:	4b85      	ldr	r3, [pc, #532]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_RCC_OscConfig+0x4c8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004992:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <HAL_RCC_OscConfig+0x4c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7e      	ldr	r2, [pc, #504]	; (8004b90 <HAL_RCC_OscConfig+0x4c8>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fd ffeb 	bl	8002978 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fd ffe7 	bl	8002978 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e103      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b75      	ldr	r3, [pc, #468]	; (8004b90 <HAL_RCC_OscConfig+0x4c8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x312>
 80049cc:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4a6e      	ldr	r2, [pc, #440]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6213      	str	r3, [r2, #32]
 80049d8:	e02d      	b.n	8004a36 <HAL_RCC_OscConfig+0x36e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x334>
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	4a69      	ldr	r2, [pc, #420]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6213      	str	r3, [r2, #32]
 80049ee:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4a66      	ldr	r2, [pc, #408]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	6213      	str	r3, [r2, #32]
 80049fa:	e01c      	b.n	8004a36 <HAL_RCC_OscConfig+0x36e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCC_OscConfig+0x356>
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4a60      	ldr	r2, [pc, #384]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6213      	str	r3, [r2, #32]
 8004a10:	4b5e      	ldr	r3, [pc, #376]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a5d      	ldr	r2, [pc, #372]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	e00b      	b.n	8004a36 <HAL_RCC_OscConfig+0x36e>
 8004a1e:	4b5b      	ldr	r3, [pc, #364]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4a5a      	ldr	r2, [pc, #360]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6213      	str	r3, [r2, #32]
 8004a2a:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d015      	beq.n	8004a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd ff9b 	bl	8002978 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a44:	e00a      	b.n	8004a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fd ff97 	bl	8002978 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e0b1      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	4b4b      	ldr	r3, [pc, #300]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ee      	beq.n	8004a46 <HAL_RCC_OscConfig+0x37e>
 8004a68:	e014      	b.n	8004a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6a:	f7fd ff85 	bl	8002978 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fd ff81 	bl	8002978 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e09b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ee      	bne.n	8004a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4b3c      	ldr	r3, [pc, #240]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8087 	beq.w	8004bbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d061      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d146      	bne.n	8004b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac4:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_RCC_OscConfig+0x4cc>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aca:	f7fd ff55 	bl	8002978 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7fd ff51 	bl	8002978 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e06d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af8:	d108      	bne.n	8004b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4921      	ldr	r1, [pc, #132]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b0c:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a19      	ldr	r1, [r3, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_RCC_OscConfig+0x4cc>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fd ff25 	bl	8002978 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fd ff21 	bl	8002978 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e03d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x46a>
 8004b50:	e035      	b.n	8004bbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x4cc>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fd ff0e 	bl	8002978 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd ff0a 	bl	8002978 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e026      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x498>
 8004b7e:	e01e      	b.n	8004bbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e019      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x500>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000

08004bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0d0      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 0207 	bic.w	r2, r3, #7
 8004bf6:	4965      	ldr	r1, [pc, #404]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b8      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c28:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a58      	ldr	r2, [pc, #352]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4c:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	494d      	ldr	r1, [pc, #308]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d040      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07f      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e073      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4936      	ldr	r1, [pc, #216]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fd fe5c 	bl	8002978 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fd fe58 	bl	8002978 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e053      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d210      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 0207 	bic.w	r2, r3, #7
 8004d02:	4922      	ldr	r1, [pc, #136]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e032      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4916      	ldr	r1, [pc, #88]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5a:	f000 f821 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	490a      	ldr	r1, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6c:	5ccb      	ldrb	r3, [r1, r3]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1cc>)
 8004d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d76:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1d0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fdba 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40022000 	.word	0x40022000
 8004d90:	40021000 	.word	0x40021000
 8004d94:	08009358 	.word	0x08009358
 8004d98:	20000000 	.word	0x20000000
 8004d9c:	20000004 	.word	0x20000004

08004da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8004dce:	e027      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dd2:	613b      	str	r3, [r7, #16]
      break;
 8004dd4:	e027      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	0c9b      	lsrs	r3, r3, #18
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004de0:	5cd3      	ldrb	r3, [r2, r3]
 8004de2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0c5b      	lsrs	r3, r3, #17
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e02:	fb03 f202 	mul.w	r2, r3, r2
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e004      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
      break;
 8004e1e:	e002      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e22:	613b      	str	r3, [r7, #16]
      break;
 8004e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e26:	693b      	ldr	r3, [r7, #16]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	08009370 	.word	0x08009370
 8004e40:	08009380 	.word	0x08009380
 8004e44:	003d0900 	.word	0x003d0900

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	20000000 	.word	0x20000000

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e60:	f7ff fff2 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4903      	ldr	r1, [pc, #12]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	08009368 	.word	0x08009368

08004e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e88:	f7ff ffde 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0adb      	lsrs	r3, r3, #11
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4903      	ldr	r1, [pc, #12]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	08009368 	.word	0x08009368

08004eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <RCC_Delay+0x34>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <RCC_Delay+0x38>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0a5b      	lsrs	r3, r3, #9
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ec8:	bf00      	nop
  }
  while (Delay --);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	60fa      	str	r2, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f9      	bne.n	8004ec8 <RCC_Delay+0x1c>
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	10624dd3 	.word	0x10624dd3

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d07d      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f08:	4b4f      	ldr	r3, [pc, #316]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	4a4b      	ldr	r2, [pc, #300]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	61d3      	str	r3, [r2, #28]
 8004f20:	4b49      	ldr	r3, [pc, #292]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	4b46      	ldr	r3, [pc, #280]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d118      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3c:	4b43      	ldr	r3, [pc, #268]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a42      	ldr	r2, [pc, #264]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f48:	f7fd fd16 	bl	8002978 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	e008      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fd fd12 	bl	8002978 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e06d      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f6e:	4b36      	ldr	r3, [pc, #216]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02e      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d027      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9c:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d014      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fd fce1 	bl	8002978 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fd fcdd 	bl	8002978 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e036      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ee      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4917      	ldr	r1, [pc, #92]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d105      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff4:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4a13      	ldr	r2, [pc, #76]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	490b      	ldr	r1, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	4313      	orrs	r3, r2
 800501c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	4904      	ldr	r1, [pc, #16]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000
 800504c:	40007000 	.word	0x40007000
 8005050:	42420440 	.word	0x42420440

08005054 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b10      	cmp	r3, #16
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b10      	cmp	r3, #16
 800507a:	f200 808a 	bhi.w	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d045      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d075      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800508a:	e082      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800508c:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005092:	4b45      	ldr	r3, [pc, #276]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d07b      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	0c9b      	lsrs	r3, r3, #18
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	4a41      	ldr	r2, [pc, #260]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
 80050aa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d015      	beq.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050b6:	4b3c      	ldr	r3, [pc, #240]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	0c5b      	lsrs	r3, r3, #17
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	4a3b      	ldr	r2, [pc, #236]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80050c2:	5cd3      	ldrb	r3, [r2, r3]
 80050c4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00d      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050d0:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050ec:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d102      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	61bb      	str	r3, [r7, #24]
      break;
 80050fe:	e04a      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
      break;
 800510e:	e042      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005120:	d108      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800512c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e01f      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800514c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e00f      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515e:	d11c      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d016      	beq.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800516c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005170:	61bb      	str	r3, [r7, #24]
      break;
 8005172:	e012      	b.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005174:	e011      	b.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005176:	f7ff fe85 	bl	8004e84 <HAL_RCC_GetPCLK2Freq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0b9b      	lsrs	r3, r3, #14
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	61bb      	str	r3, [r7, #24]
      break;
 8005190:	e004      	b.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800519a:	bf00      	nop
    }
  }
  return (frequency);
 800519c:	69bb      	ldr	r3, [r7, #24]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	08009384 	.word	0x08009384
 80051b0:	08009394 	.word	0x08009394
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	003d0900 	.word	0x003d0900
 80051bc:	aaaaaaab 	.word	0xaaaaaaab

080051c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e041      	b.n	8005256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd f9d4 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f000 f940 	bl	8005484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e032      	b.n	80052de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIM_Base_Start+0x88>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00e      	beq.n	80052a8 <HAL_TIM_Base_Start+0x48>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d009      	beq.n	80052a8 <HAL_TIM_Base_Start+0x48>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <HAL_TIM_Base_Start+0x8c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <HAL_TIM_Base_Start+0x48>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <HAL_TIM_Base_Start+0x90>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d111      	bne.n	80052cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b06      	cmp	r3, #6
 80052b8:	d010      	beq.n	80052dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	e007      	b.n	80052dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800

080052f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_TIM_ConfigClockSource+0x1c>
 800530c:	2302      	movs	r3, #2
 800530e:	e0b4      	b.n	800547a <HAL_TIM_ConfigClockSource+0x186>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800532e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005348:	d03e      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0xd4>
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534e:	f200 8087 	bhi.w	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	f000 8086 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x172>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d87f      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b70      	cmp	r3, #112	; 0x70
 8005362:	d01a      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xa6>
 8005364:	2b70      	cmp	r3, #112	; 0x70
 8005366:	d87b      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b60      	cmp	r3, #96	; 0x60
 800536a:	d050      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x11a>
 800536c:	2b60      	cmp	r3, #96	; 0x60
 800536e:	d877      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b50      	cmp	r3, #80	; 0x50
 8005372:	d03c      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xfa>
 8005374:	2b50      	cmp	r3, #80	; 0x50
 8005376:	d873      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d058      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x13a>
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d86f      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d064      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d86b      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d060      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d867      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d05c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d05a      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	e062      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f000 f944 	bl	8005636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	609a      	str	r2, [r3, #8]
      break;
 80053c6:	e04f      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6899      	ldr	r1, [r3, #8]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f000 f92d 	bl	8005636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ea:	609a      	str	r2, [r3, #8]
      break;
 80053ec:	e03c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 f8a4 	bl	8005548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2150      	movs	r1, #80	; 0x50
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f8fb 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 800540c:	e02c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	461a      	mov	r2, r3
 800541c:	f000 f8c2 	bl	80055a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2160      	movs	r1, #96	; 0x60
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f8eb 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 800542c:	e01c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	f000 f884 	bl	8005548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f8db 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 800544c:	e00c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f000 f8d2 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 800545e:	e003      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e000      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a29      	ldr	r2, [pc, #164]	; (800553c <TIM_Base_SetConfig+0xb8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x30>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x30>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a26      	ldr	r2, [pc, #152]	; (8005540 <TIM_Base_SetConfig+0xbc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x30>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a25      	ldr	r2, [pc, #148]	; (8005544 <TIM_Base_SetConfig+0xc0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <TIM_Base_SetConfig+0xb8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0x62>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0x62>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <TIM_Base_SetConfig+0xbc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0x62>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a18      	ldr	r2, [pc, #96]	; (8005544 <TIM_Base_SetConfig+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a07      	ldr	r2, [pc, #28]	; (800553c <TIM_Base_SetConfig+0xb8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	615a      	str	r2, [r3, #20]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800

08005548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 030a 	bic.w	r3, r3, #10
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	031b      	lsls	r3, r3, #12
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	431a      	orrs	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	609a      	str	r2, [r3, #8]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005688:	2302      	movs	r3, #2
 800568a:	e046      	b.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d009      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a10      	ldr	r2, [pc, #64]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10c      	bne.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800

08005730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e042      	b.n	80057c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc ff3a 	bl	80025d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fdfb 	bl	8006370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d16d      	bne.n	80058cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_UART_Transmit+0x2c>
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e066      	b.n	80058ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	; 0x21
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fd f8b3 	bl	8002978 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d108      	bne.n	800583c <HAL_UART_Transmit+0x6c>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e003      	b.n	8005844 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005844:	e02a      	b.n	800589c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fb4a 	bl	8005eea <UART_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e036      	b.n	80058ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3302      	adds	r3, #2
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e007      	b.n	800588e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1cf      	bne.n	8005846 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2140      	movs	r1, #64	; 0x40
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fb1a 	bl	8005eea <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e006      	b.n	80058ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e000      	b.n	80058ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b08c      	sub	sp, #48	; 0x30
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d14a      	bne.n	8005986 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e043      	b.n	8005988 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	461a      	mov	r2, r3
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fb57 	bl	8005fc6 <UART_Start_Receive_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800591e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12c      	bne.n	8005980 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	2b01      	cmp	r3, #1
 800592c:	d125      	bne.n	800597a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f043 0310 	orr.w	r3, r3, #16
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005964:	627a      	str	r2, [r7, #36]	; 0x24
 8005966:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6a39      	ldr	r1, [r7, #32]
 800596a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	61fb      	str	r3, [r7, #28]
   return(result);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005978:	e002      	b.n	8005980 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005984:	e000      	b.n	8005988 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	3730      	adds	r7, #48	; 0x30
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b0ba      	sub	sp, #232	; 0xe8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_UART_IRQHandler+0x66>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fbff 	bl	80061f2 <UART_Receive_IT>
      return;
 80059f4:	e25b      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80de 	beq.w	8005bbc <HAL_UART_IRQHandler+0x22c>
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80d1 	beq.w	8005bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0xae>
 8005a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0xd2>
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	f043 0202 	orr.w	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_UART_IRQHandler+0xf6>
 8005a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f043 0204 	orr.w	r2, r3, #4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x126>
 8005a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f043 0208 	orr.w	r2, r3, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 81f2 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_UART_IRQHandler+0x14e>
 8005acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb8a 	bl	80061f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <HAL_UART_IRQHandler+0x17a>
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d04f      	beq.n	8005baa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa94 	bl	8006038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d041      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1d9      	bne.n	8005b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d013      	beq.n	8005b9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	4a7e      	ldr	r2, [pc, #504]	; (8005d70 <HAL_UART_IRQHandler+0x3e0>)
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fda6 	bl	80036d0 <HAL_DMA_Abort_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b94:	4610      	mov	r0, r2
 8005b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00e      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f99c 	bl	8005ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e00a      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f998 	bl	8005ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e006      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f994 	bl	8005ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005bb6:	e175      	b.n	8005ea4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	bf00      	nop
    return;
 8005bba:	e173      	b.n	8005ea4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	f040 814f 	bne.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8148 	beq.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8141 	beq.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80b6 	beq.w	8005d74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8145 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c26:	429a      	cmp	r2, r3
 8005c28:	f080 813e 	bcs.w	8005ea8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	f000 8088 	beq.w	8005d50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1d9      	bne.n	8005c40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e1      	bne.n	8005c8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e3      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e3      	bne.n	8005d0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd fc84 	bl	8003658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb fdca 	bl	8001900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d6c:	e09c      	b.n	8005ea8 <HAL_UART_IRQHandler+0x518>
 8005d6e:	bf00      	nop
 8005d70:	080060fd 	.word	0x080060fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 808e 	beq.w	8005eac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8089 	beq.w	8005eac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dbe:	647a      	str	r2, [r7, #68]	; 0x44
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e3      	bne.n	8005d9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3314      	adds	r3, #20
 8005df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e3c:	61fa      	str	r2, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	69b9      	ldr	r1, [r7, #24]
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	617b      	str	r3, [r7, #20]
   return(result);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e3      	bne.n	8005e18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fb fd4f 	bl	8001900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e62:	e023      	b.n	8005eac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_UART_IRQHandler+0x4f4>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f951 	bl	8006124 <UART_Transmit_IT>
    return;
 8005e82:	e014      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_UART_IRQHandler+0x51e>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f990 	bl	80061c2 <UART_EndTransmit_IT>
    return;
 8005ea2:	e004      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
    return;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
      return;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
      return;
 8005eac:	bf00      	nop
  }
}
 8005eae:	37e8      	adds	r7, #232	; 0xe8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b090      	sub	sp, #64	; 0x40
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efa:	e050      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d04c      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f0a:	f7fc fd35 	bl	8002978 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d241      	bcs.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3314      	adds	r3, #20
 8005f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f6e:	623a      	str	r2, [r7, #32]
 8005f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	69f9      	ldr	r1, [r7, #28]
 8005f74:	6a3a      	ldr	r2, [r7, #32]
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	bf0c      	ite	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	2300      	movne	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d09f      	beq.n	8005efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3740      	adds	r7, #64	; 0x40
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	88fa      	ldrh	r2, [r7, #6]
 8005fde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	; 0x22
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0220 	orr.w	r2, r2, #32
 800602a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b095      	sub	sp, #84	; 0x54
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006060:	643a      	str	r2, [r7, #64]	; 0x40
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3314      	adds	r3, #20
 800607a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	61fb      	str	r3, [r7, #28]
   return(result);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	64bb      	str	r3, [r7, #72]	; 0x48
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006094:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d119      	bne.n	80060e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060d0:	61ba      	str	r2, [r7, #24]
 80060d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6979      	ldr	r1, [r7, #20]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	613b      	str	r3, [r7, #16]
   return(result);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060f2:	bf00      	nop
 80060f4:	3754      	adds	r7, #84	; 0x54
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fede 	bl	8005ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b21      	cmp	r3, #33	; 0x21
 8006136:	d13e      	bne.n	80061b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006140:	d114      	bne.n	800616c <UART_Transmit_IT+0x48>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d110      	bne.n	800616c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	e008      	b.n	800617e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6211      	str	r1, [r2, #32]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe66 	bl	8005eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08c      	sub	sp, #48	; 0x30
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b22      	cmp	r3, #34	; 0x22
 8006204:	f040 80ae 	bne.w	8006364 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006210:	d117      	bne.n	8006242 <UART_Receive_IT+0x50>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	b29a      	uxth	r2, r3
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	1c9a      	adds	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
 8006240:	e026      	b.n	8006290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006254:	d007      	beq.n	8006266 <UART_Receive_IT+0x74>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <UART_Receive_IT+0x82>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e008      	b.n	8006286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006280:	b2da      	uxtb	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d15d      	bne.n	8006360 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0220 	bic.w	r2, r2, #32
 80062b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d135      	bne.n	8006356 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 0310 	bic.w	r3, r3, #16
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	623a      	str	r2, [r7, #32]
 8006312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	61bb      	str	r3, [r7, #24]
   return(result);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b10      	cmp	r3, #16
 8006330:	d10a      	bne.n	8006348 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb fad6 	bl	8001900 <HAL_UARTEx_RxEventCallback>
 8006354:	e002      	b.n	800635c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fdb5 	bl	8005ec6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e002      	b.n	8006366 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3730      	adds	r7, #48	; 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80063aa:	f023 030c 	bic.w	r3, r3, #12
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <UART_SetConfig+0x114>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063d8:	f7fe fd54 	bl	8004e84 <HAL_RCC_GetPCLK2Freq>
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	e002      	b.n	80063e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fe fd3c 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 80063e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009a      	lsls	r2, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	4a22      	ldr	r2, [pc, #136]	; (8006488 <UART_SetConfig+0x118>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	0119      	lsls	r1, r3, #4
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009a      	lsls	r2, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	fbb2 f2f3 	udiv	r2, r2, r3
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <UART_SetConfig+0x118>)
 800641e:	fba3 0302 	umull	r0, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2064      	movs	r0, #100	; 0x64
 8006426:	fb00 f303 	mul.w	r3, r0, r3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	3332      	adds	r3, #50	; 0x32
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <UART_SetConfig+0x118>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643c:	4419      	add	r1, r3
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009a      	lsls	r2, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	fbb2 f2f3 	udiv	r2, r2, r3
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <UART_SetConfig+0x118>)
 8006456:	fba3 0302 	umull	r0, r3, r3, r2
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2064      	movs	r0, #100	; 0x64
 800645e:	fb00 f303 	mul.w	r3, r0, r3
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	3332      	adds	r3, #50	; 0x32
 8006468:	4a07      	ldr	r2, [pc, #28]	; (8006488 <UART_SetConfig+0x118>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	440a      	add	r2, r1
 800647a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40013800 	.word	0x40013800
 8006488:	51eb851f 	.word	0x51eb851f

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	2600      	movs	r6, #0
 800649c:	4d0c      	ldr	r5, [pc, #48]	; (80064d0 <__libc_init_array+0x38>)
 800649e:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	f002 fefa 	bl	80092a0 <_init>
 80064ac:	2600      	movs	r6, #0
 80064ae:	4d0a      	ldr	r5, [pc, #40]	; (80064d8 <__libc_init_array+0x40>)
 80064b0:	4c0a      	ldr	r4, [pc, #40]	; (80064dc <__libc_init_array+0x44>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08009774 	.word	0x08009774
 80064d4:	08009774 	.word	0x08009774
 80064d8:	08009774 	.word	0x08009774
 80064dc:	08009778 	.word	0x08009778

080064e0 <memset>:
 80064e0:	4603      	mov	r3, r0
 80064e2:	4402      	add	r2, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <__cvt>:
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f6:	461f      	mov	r7, r3
 80064f8:	bfbb      	ittet	lt
 80064fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064fe:	461f      	movlt	r7, r3
 8006500:	2300      	movge	r3, #0
 8006502:	232d      	movlt	r3, #45	; 0x2d
 8006504:	b088      	sub	sp, #32
 8006506:	4614      	mov	r4, r2
 8006508:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800650a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800650c:	7013      	strb	r3, [r2, #0]
 800650e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006510:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006514:	f023 0820 	bic.w	r8, r3, #32
 8006518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651c:	d005      	beq.n	800652a <__cvt+0x3a>
 800651e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006522:	d100      	bne.n	8006526 <__cvt+0x36>
 8006524:	3501      	adds	r5, #1
 8006526:	2302      	movs	r3, #2
 8006528:	e000      	b.n	800652c <__cvt+0x3c>
 800652a:	2303      	movs	r3, #3
 800652c:	aa07      	add	r2, sp, #28
 800652e:	9204      	str	r2, [sp, #16]
 8006530:	aa06      	add	r2, sp, #24
 8006532:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006536:	e9cd 3500 	strd	r3, r5, [sp]
 800653a:	4622      	mov	r2, r4
 800653c:	463b      	mov	r3, r7
 800653e:	f000 fce3 	bl	8006f08 <_dtoa_r>
 8006542:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006546:	4606      	mov	r6, r0
 8006548:	d102      	bne.n	8006550 <__cvt+0x60>
 800654a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800654c:	07db      	lsls	r3, r3, #31
 800654e:	d522      	bpl.n	8006596 <__cvt+0xa6>
 8006550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006554:	eb06 0905 	add.w	r9, r6, r5
 8006558:	d110      	bne.n	800657c <__cvt+0x8c>
 800655a:	7833      	ldrb	r3, [r6, #0]
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d10a      	bne.n	8006576 <__cvt+0x86>
 8006560:	2200      	movs	r2, #0
 8006562:	2300      	movs	r3, #0
 8006564:	4620      	mov	r0, r4
 8006566:	4639      	mov	r1, r7
 8006568:	f7fa fa28 	bl	80009bc <__aeabi_dcmpeq>
 800656c:	b918      	cbnz	r0, 8006576 <__cvt+0x86>
 800656e:	f1c5 0501 	rsb	r5, r5, #1
 8006572:	f8ca 5000 	str.w	r5, [sl]
 8006576:	f8da 3000 	ldr.w	r3, [sl]
 800657a:	4499      	add	r9, r3
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	4620      	mov	r0, r4
 8006582:	4639      	mov	r1, r7
 8006584:	f7fa fa1a 	bl	80009bc <__aeabi_dcmpeq>
 8006588:	b108      	cbz	r0, 800658e <__cvt+0x9e>
 800658a:	f8cd 901c 	str.w	r9, [sp, #28]
 800658e:	2230      	movs	r2, #48	; 0x30
 8006590:	9b07      	ldr	r3, [sp, #28]
 8006592:	454b      	cmp	r3, r9
 8006594:	d307      	bcc.n	80065a6 <__cvt+0xb6>
 8006596:	4630      	mov	r0, r6
 8006598:	9b07      	ldr	r3, [sp, #28]
 800659a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	b008      	add	sp, #32
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	9107      	str	r1, [sp, #28]
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e7f0      	b.n	8006590 <__cvt+0xa0>

080065ae <__exponent>:
 80065ae:	4603      	mov	r3, r0
 80065b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b2:	2900      	cmp	r1, #0
 80065b4:	f803 2b02 	strb.w	r2, [r3], #2
 80065b8:	bfb6      	itet	lt
 80065ba:	222d      	movlt	r2, #45	; 0x2d
 80065bc:	222b      	movge	r2, #43	; 0x2b
 80065be:	4249      	neglt	r1, r1
 80065c0:	2909      	cmp	r1, #9
 80065c2:	7042      	strb	r2, [r0, #1]
 80065c4:	dd2b      	ble.n	800661e <__exponent+0x70>
 80065c6:	f10d 0407 	add.w	r4, sp, #7
 80065ca:	46a4      	mov	ip, r4
 80065cc:	270a      	movs	r7, #10
 80065ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80065d2:	460a      	mov	r2, r1
 80065d4:	46a6      	mov	lr, r4
 80065d6:	fb07 1516 	mls	r5, r7, r6, r1
 80065da:	2a63      	cmp	r2, #99	; 0x63
 80065dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80065e0:	4631      	mov	r1, r6
 80065e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80065e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065ea:	dcf0      	bgt.n	80065ce <__exponent+0x20>
 80065ec:	3130      	adds	r1, #48	; 0x30
 80065ee:	f1ae 0502 	sub.w	r5, lr, #2
 80065f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065f6:	4629      	mov	r1, r5
 80065f8:	1c44      	adds	r4, r0, #1
 80065fa:	4561      	cmp	r1, ip
 80065fc:	d30a      	bcc.n	8006614 <__exponent+0x66>
 80065fe:	f10d 0209 	add.w	r2, sp, #9
 8006602:	eba2 020e 	sub.w	r2, r2, lr
 8006606:	4565      	cmp	r5, ip
 8006608:	bf88      	it	hi
 800660a:	2200      	movhi	r2, #0
 800660c:	4413      	add	r3, r2
 800660e:	1a18      	subs	r0, r3, r0
 8006610:	b003      	add	sp, #12
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006618:	f804 2f01 	strb.w	r2, [r4, #1]!
 800661c:	e7ed      	b.n	80065fa <__exponent+0x4c>
 800661e:	2330      	movs	r3, #48	; 0x30
 8006620:	3130      	adds	r1, #48	; 0x30
 8006622:	7083      	strb	r3, [r0, #2]
 8006624:	70c1      	strb	r1, [r0, #3]
 8006626:	1d03      	adds	r3, r0, #4
 8006628:	e7f1      	b.n	800660e <__exponent+0x60>
	...

0800662c <_printf_float>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b091      	sub	sp, #68	; 0x44
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f001 fa51 	bl	8007ae4 <_localeconv_r>
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	9309      	str	r3, [sp, #36]	; 0x24
 8006648:	f7f9 fd8c 	bl	8000164 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930e      	str	r3, [sp, #56]	; 0x38
 8006650:	f8d8 3000 	ldr.w	r3, [r8]
 8006654:	900a      	str	r0, [sp, #40]	; 0x28
 8006656:	3307      	adds	r3, #7
 8006658:	f023 0307 	bic.w	r3, r3, #7
 800665c:	f103 0208 	add.w	r2, r3, #8
 8006660:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006664:	f8d4 b000 	ldr.w	fp, [r4]
 8006668:	f8c8 2000 	str.w	r2, [r8]
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006674:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006678:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800667c:	930b      	str	r3, [sp, #44]	; 0x2c
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	4640      	mov	r0, r8
 8006684:	4b9c      	ldr	r3, [pc, #624]	; (80068f8 <_printf_float+0x2cc>)
 8006686:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006688:	f7fa f9ca 	bl	8000a20 <__aeabi_dcmpun>
 800668c:	bb70      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	4640      	mov	r0, r8
 8006694:	4b98      	ldr	r3, [pc, #608]	; (80068f8 <_printf_float+0x2cc>)
 8006696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006698:	f7fa f9a4 	bl	80009e4 <__aeabi_dcmple>
 800669c:	bb30      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4640      	mov	r0, r8
 80066a4:	4651      	mov	r1, sl
 80066a6:	f7fa f993 	bl	80009d0 <__aeabi_dcmplt>
 80066aa:	b110      	cbz	r0, 80066b2 <_printf_float+0x86>
 80066ac:	232d      	movs	r3, #45	; 0x2d
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b2:	4b92      	ldr	r3, [pc, #584]	; (80068fc <_printf_float+0x2d0>)
 80066b4:	4892      	ldr	r0, [pc, #584]	; (8006900 <_printf_float+0x2d4>)
 80066b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066ba:	bf94      	ite	ls
 80066bc:	4698      	movls	r8, r3
 80066be:	4680      	movhi	r8, r0
 80066c0:	2303      	movs	r3, #3
 80066c2:	f04f 0a00 	mov.w	sl, #0
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	f02b 0304 	bic.w	r3, fp, #4
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	4633      	mov	r3, r6
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	9700      	str	r7, [sp, #0]
 80066d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80066d8:	f000 f9d4 	bl	8006a84 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	f040 8090 	bne.w	8006802 <_printf_float+0x1d6>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	b011      	add	sp, #68	; 0x44
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	4653      	mov	r3, sl
 80066f0:	4640      	mov	r0, r8
 80066f2:	4651      	mov	r1, sl
 80066f4:	f7fa f994 	bl	8000a20 <__aeabi_dcmpun>
 80066f8:	b148      	cbz	r0, 800670e <_printf_float+0xe2>
 80066fa:	f1ba 0f00 	cmp.w	sl, #0
 80066fe:	bfb8      	it	lt
 8006700:	232d      	movlt	r3, #45	; 0x2d
 8006702:	4880      	ldr	r0, [pc, #512]	; (8006904 <_printf_float+0x2d8>)
 8006704:	bfb8      	it	lt
 8006706:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800670a:	4b7f      	ldr	r3, [pc, #508]	; (8006908 <_printf_float+0x2dc>)
 800670c:	e7d3      	b.n	80066b6 <_printf_float+0x8a>
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	d142      	bne.n	800679e <_printf_float+0x172>
 8006718:	2306      	movs	r3, #6
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	9206      	str	r2, [sp, #24]
 8006720:	aa0e      	add	r2, sp, #56	; 0x38
 8006722:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006726:	aa0d      	add	r2, sp, #52	; 0x34
 8006728:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800672c:	9203      	str	r2, [sp, #12]
 800672e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006732:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	4642      	mov	r2, r8
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	4653      	mov	r3, sl
 8006742:	910b      	str	r1, [sp, #44]	; 0x2c
 8006744:	f7ff fed4 	bl	80064f0 <__cvt>
 8006748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800674a:	4680      	mov	r8, r0
 800674c:	2947      	cmp	r1, #71	; 0x47
 800674e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006750:	d108      	bne.n	8006764 <_printf_float+0x138>
 8006752:	1cc8      	adds	r0, r1, #3
 8006754:	db02      	blt.n	800675c <_printf_float+0x130>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	4299      	cmp	r1, r3
 800675a:	dd40      	ble.n	80067de <_printf_float+0x1b2>
 800675c:	f1a9 0902 	sub.w	r9, r9, #2
 8006760:	fa5f f989 	uxtb.w	r9, r9
 8006764:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006768:	d81f      	bhi.n	80067aa <_printf_float+0x17e>
 800676a:	464a      	mov	r2, r9
 800676c:	3901      	subs	r1, #1
 800676e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006772:	910d      	str	r1, [sp, #52]	; 0x34
 8006774:	f7ff ff1b 	bl	80065ae <__exponent>
 8006778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800677a:	4682      	mov	sl, r0
 800677c:	1813      	adds	r3, r2, r0
 800677e:	2a01      	cmp	r2, #1
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	dc02      	bgt.n	800678a <_printf_float+0x15e>
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	07d2      	lsls	r2, r2, #31
 8006788:	d501      	bpl.n	800678e <_printf_float+0x162>
 800678a:	3301      	adds	r3, #1
 800678c:	6123      	str	r3, [r4, #16]
 800678e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006792:	2b00      	cmp	r3, #0
 8006794:	d09b      	beq.n	80066ce <_printf_float+0xa2>
 8006796:	232d      	movs	r3, #45	; 0x2d
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679c:	e797      	b.n	80066ce <_printf_float+0xa2>
 800679e:	2947      	cmp	r1, #71	; 0x47
 80067a0:	d1bc      	bne.n	800671c <_printf_float+0xf0>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1ba      	bne.n	800671c <_printf_float+0xf0>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7b7      	b.n	800671a <_printf_float+0xee>
 80067aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067ae:	d118      	bne.n	80067e2 <_printf_float+0x1b6>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	dd0b      	ble.n	80067ce <_printf_float+0x1a2>
 80067b6:	6121      	str	r1, [r4, #16]
 80067b8:	b913      	cbnz	r3, 80067c0 <_printf_float+0x194>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	07d0      	lsls	r0, r2, #31
 80067be:	d502      	bpl.n	80067c6 <_printf_float+0x19a>
 80067c0:	3301      	adds	r3, #1
 80067c2:	440b      	add	r3, r1
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	f04f 0a00 	mov.w	sl, #0
 80067ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80067cc:	e7df      	b.n	800678e <_printf_float+0x162>
 80067ce:	b913      	cbnz	r3, 80067d6 <_printf_float+0x1aa>
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	07d2      	lsls	r2, r2, #31
 80067d4:	d501      	bpl.n	80067da <_printf_float+0x1ae>
 80067d6:	3302      	adds	r3, #2
 80067d8:	e7f4      	b.n	80067c4 <_printf_float+0x198>
 80067da:	2301      	movs	r3, #1
 80067dc:	e7f2      	b.n	80067c4 <_printf_float+0x198>
 80067de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e4:	4299      	cmp	r1, r3
 80067e6:	db05      	blt.n	80067f4 <_printf_float+0x1c8>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6121      	str	r1, [r4, #16]
 80067ec:	07d8      	lsls	r0, r3, #31
 80067ee:	d5ea      	bpl.n	80067c6 <_printf_float+0x19a>
 80067f0:	1c4b      	adds	r3, r1, #1
 80067f2:	e7e7      	b.n	80067c4 <_printf_float+0x198>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	bfcc      	ite	gt
 80067f8:	2201      	movgt	r2, #1
 80067fa:	f1c1 0202 	rsble	r2, r1, #2
 80067fe:	4413      	add	r3, r2
 8006800:	e7e0      	b.n	80067c4 <_printf_float+0x198>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	055a      	lsls	r2, r3, #21
 8006806:	d407      	bmi.n	8006818 <_printf_float+0x1ec>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	4642      	mov	r2, r8
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	d12b      	bne.n	800686e <_printf_float+0x242>
 8006816:	e764      	b.n	80066e2 <_printf_float+0xb6>
 8006818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800681c:	f240 80dd 	bls.w	80069da <_printf_float+0x3ae>
 8006820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006824:	2200      	movs	r2, #0
 8006826:	2300      	movs	r3, #0
 8006828:	f7fa f8c8 	bl	80009bc <__aeabi_dcmpeq>
 800682c:	2800      	cmp	r0, #0
 800682e:	d033      	beq.n	8006898 <_printf_float+0x26c>
 8006830:	2301      	movs	r3, #1
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	4a35      	ldr	r2, [pc, #212]	; (800690c <_printf_float+0x2e0>)
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af51 	beq.w	80066e2 <_printf_float+0xb6>
 8006840:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006844:	429a      	cmp	r2, r3
 8006846:	db02      	blt.n	800684e <_printf_float+0x222>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07d8      	lsls	r0, r3, #31
 800684c:	d50f      	bpl.n	800686e <_printf_float+0x242>
 800684e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f af42 	beq.w	80066e2 <_printf_float+0xb6>
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	f104 091a 	add.w	r9, r4, #26
 8006866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006868:	3b01      	subs	r3, #1
 800686a:	4543      	cmp	r3, r8
 800686c:	dc09      	bgt.n	8006882 <_printf_float+0x256>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	079b      	lsls	r3, r3, #30
 8006872:	f100 8102 	bmi.w	8006a7a <_printf_float+0x44e>
 8006876:	68e0      	ldr	r0, [r4, #12]
 8006878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687a:	4298      	cmp	r0, r3
 800687c:	bfb8      	it	lt
 800687e:	4618      	movlt	r0, r3
 8006880:	e731      	b.n	80066e6 <_printf_float+0xba>
 8006882:	2301      	movs	r3, #1
 8006884:	464a      	mov	r2, r9
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f af28 	beq.w	80066e2 <_printf_float+0xb6>
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	e7e6      	b.n	8006866 <_printf_float+0x23a>
 8006898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	dc38      	bgt.n	8006910 <_printf_float+0x2e4>
 800689e:	2301      	movs	r3, #1
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <_printf_float+0x2e0>)
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f af1a 	beq.w	80066e2 <_printf_float+0xb6>
 80068ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068b2:	4313      	orrs	r3, r2
 80068b4:	d102      	bne.n	80068bc <_printf_float+0x290>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07d9      	lsls	r1, r3, #31
 80068ba:	d5d8      	bpl.n	800686e <_printf_float+0x242>
 80068bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af0b 	beq.w	80066e2 <_printf_float+0xb6>
 80068cc:	f04f 0900 	mov.w	r9, #0
 80068d0:	f104 0a1a 	add.w	sl, r4, #26
 80068d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d6:	425b      	negs	r3, r3
 80068d8:	454b      	cmp	r3, r9
 80068da:	dc01      	bgt.n	80068e0 <_printf_float+0x2b4>
 80068dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068de:	e794      	b.n	800680a <_printf_float+0x1de>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f aef9 	beq.w	80066e2 <_printf_float+0xb6>
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	e7ee      	b.n	80068d4 <_printf_float+0x2a8>
 80068f6:	bf00      	nop
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	0800939c 	.word	0x0800939c
 8006900:	080093a0 	.word	0x080093a0
 8006904:	080093a8 	.word	0x080093a8
 8006908:	080093a4 	.word	0x080093a4
 800690c:	080093ac 	.word	0x080093ac
 8006910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006914:	429a      	cmp	r2, r3
 8006916:	bfa8      	it	ge
 8006918:	461a      	movge	r2, r3
 800691a:	2a00      	cmp	r2, #0
 800691c:	4691      	mov	r9, r2
 800691e:	dc37      	bgt.n	8006990 <_printf_float+0x364>
 8006920:	f04f 0b00 	mov.w	fp, #0
 8006924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006928:	f104 021a 	add.w	r2, r4, #26
 800692c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006930:	ebaa 0309 	sub.w	r3, sl, r9
 8006934:	455b      	cmp	r3, fp
 8006936:	dc33      	bgt.n	80069a0 <_printf_float+0x374>
 8006938:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800693c:	429a      	cmp	r2, r3
 800693e:	db3b      	blt.n	80069b8 <_printf_float+0x38c>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d438      	bmi.n	80069b8 <_printf_float+0x38c>
 8006946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006948:	990d      	ldr	r1, [sp, #52]	; 0x34
 800694a:	eba3 020a 	sub.w	r2, r3, sl
 800694e:	eba3 0901 	sub.w	r9, r3, r1
 8006952:	4591      	cmp	r9, r2
 8006954:	bfa8      	it	ge
 8006956:	4691      	movge	r9, r2
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dc34      	bgt.n	80069c8 <_printf_float+0x39c>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006966:	f104 0a1a 	add.w	sl, r4, #26
 800696a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	eba3 0309 	sub.w	r3, r3, r9
 8006974:	4543      	cmp	r3, r8
 8006976:	f77f af7a 	ble.w	800686e <_printf_float+0x242>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f aeac 	beq.w	80066e2 <_printf_float+0xb6>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7ec      	b.n	800696a <_printf_float+0x33e>
 8006990:	4613      	mov	r3, r2
 8006992:	4631      	mov	r1, r6
 8006994:	4642      	mov	r2, r8
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	d1c0      	bne.n	8006920 <_printf_float+0x2f4>
 800699e:	e6a0      	b.n	80066e2 <_printf_float+0xb6>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f ae99 	beq.w	80066e2 <_printf_float+0xb6>
 80069b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069b2:	f10b 0b01 	add.w	fp, fp, #1
 80069b6:	e7b9      	b.n	800692c <_printf_float+0x300>
 80069b8:	4631      	mov	r1, r6
 80069ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	d1bf      	bne.n	8006946 <_printf_float+0x31a>
 80069c6:	e68c      	b.n	80066e2 <_printf_float+0xb6>
 80069c8:	464b      	mov	r3, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	eb08 020a 	add.w	r2, r8, sl
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	d1c2      	bne.n	800695e <_printf_float+0x332>
 80069d8:	e683      	b.n	80066e2 <_printf_float+0xb6>
 80069da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069dc:	2a01      	cmp	r2, #1
 80069de:	dc01      	bgt.n	80069e4 <_printf_float+0x3b8>
 80069e0:	07db      	lsls	r3, r3, #31
 80069e2:	d537      	bpl.n	8006a54 <_printf_float+0x428>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4642      	mov	r2, r8
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f43f ae77 	beq.w	80066e2 <_printf_float+0xb6>
 80069f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f ae6f 	beq.w	80066e2 <_printf_float+0xb6>
 8006a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f7f9 ffd6 	bl	80009bc <__aeabi_dcmpeq>
 8006a10:	b9d8      	cbnz	r0, 8006a4a <_printf_float+0x41e>
 8006a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a14:	f108 0201 	add.w	r2, r8, #1
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	d10e      	bne.n	8006a42 <_printf_float+0x416>
 8006a24:	e65d      	b.n	80066e2 <_printf_float+0xb6>
 8006a26:	2301      	movs	r3, #1
 8006a28:	464a      	mov	r2, r9
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae56 	beq.w	80066e2 <_printf_float+0xb6>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	4543      	cmp	r3, r8
 8006a40:	dcf1      	bgt.n	8006a26 <_printf_float+0x3fa>
 8006a42:	4653      	mov	r3, sl
 8006a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a48:	e6e0      	b.n	800680c <_printf_float+0x1e0>
 8006a4a:	f04f 0800 	mov.w	r8, #0
 8006a4e:	f104 091a 	add.w	r9, r4, #26
 8006a52:	e7f2      	b.n	8006a3a <_printf_float+0x40e>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4642      	mov	r2, r8
 8006a58:	e7df      	b.n	8006a1a <_printf_float+0x3ee>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae3c 	beq.w	80066e2 <_printf_float+0xb6>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	4543      	cmp	r3, r8
 8006a76:	dcf0      	bgt.n	8006a5a <_printf_float+0x42e>
 8006a78:	e6fd      	b.n	8006876 <_printf_float+0x24a>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	f104 0919 	add.w	r9, r4, #25
 8006a82:	e7f4      	b.n	8006a6e <_printf_float+0x442>

08006a84 <_printf_common>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	4616      	mov	r6, r2
 8006a8a:	4699      	mov	r9, r3
 8006a8c:	688a      	ldr	r2, [r1, #8]
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4607      	mov	r7, r0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	bfb8      	it	lt
 8006a96:	4613      	movlt	r3, r2
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	b10a      	cbz	r2, 8006aaa <_printf_common+0x26>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	0699      	lsls	r1, r3, #26
 8006aae:	bf42      	ittt	mi
 8006ab0:	6833      	ldrmi	r3, [r6, #0]
 8006ab2:	3302      	addmi	r3, #2
 8006ab4:	6033      	strmi	r3, [r6, #0]
 8006ab6:	6825      	ldr	r5, [r4, #0]
 8006ab8:	f015 0506 	ands.w	r5, r5, #6
 8006abc:	d106      	bne.n	8006acc <_printf_common+0x48>
 8006abe:	f104 0a19 	add.w	sl, r4, #25
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	6832      	ldr	r2, [r6, #0]
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dc28      	bgt.n	8006b1e <_printf_common+0x9a>
 8006acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad0:	1e13      	subs	r3, r2, #0
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	2301      	movne	r3, #1
 8006ad8:	0692      	lsls	r2, r2, #26
 8006ada:	d42d      	bmi.n	8006b38 <_printf_common+0xb4>
 8006adc:	4649      	mov	r1, r9
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae4:	47c0      	blx	r8
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d020      	beq.n	8006b2c <_printf_common+0xa8>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	68e5      	ldr	r5, [r4, #12]
 8006aee:	f003 0306 	and.w	r3, r3, #6
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	bf18      	it	ne
 8006af6:	2500      	movne	r5, #0
 8006af8:	6832      	ldr	r2, [r6, #0]
 8006afa:	f04f 0600 	mov.w	r6, #0
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	bf08      	it	eq
 8006b02:	1aad      	subeq	r5, r5, r2
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	bf08      	it	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfc4      	itt	gt
 8006b10:	1a9b      	subgt	r3, r3, r2
 8006b12:	18ed      	addgt	r5, r5, r3
 8006b14:	341a      	adds	r4, #26
 8006b16:	42b5      	cmp	r5, r6
 8006b18:	d11a      	bne.n	8006b50 <_printf_common+0xcc>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e008      	b.n	8006b30 <_printf_common+0xac>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4652      	mov	r2, sl
 8006b22:	4649      	mov	r1, r9
 8006b24:	4638      	mov	r0, r7
 8006b26:	47c0      	blx	r8
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d103      	bne.n	8006b34 <_printf_common+0xb0>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b34:	3501      	adds	r5, #1
 8006b36:	e7c4      	b.n	8006ac2 <_printf_common+0x3e>
 8006b38:	2030      	movs	r0, #48	; 0x30
 8006b3a:	18e1      	adds	r1, r4, r3
 8006b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b46:	4422      	add	r2, r4
 8006b48:	3302      	adds	r3, #2
 8006b4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b4e:	e7c5      	b.n	8006adc <_printf_common+0x58>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4622      	mov	r2, r4
 8006b54:	4649      	mov	r1, r9
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c0      	blx	r8
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0e6      	beq.n	8006b2c <_printf_common+0xa8>
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7d9      	b.n	8006b16 <_printf_common+0x92>
	...

08006b64 <_printf_i>:
 8006b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	7e0f      	ldrb	r7, [r1, #24]
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	2f78      	cmp	r7, #120	; 0x78
 8006b6e:	4680      	mov	r8, r0
 8006b70:	460c      	mov	r4, r1
 8006b72:	469a      	mov	sl, r3
 8006b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b7a:	d807      	bhi.n	8006b8c <_printf_i+0x28>
 8006b7c:	2f62      	cmp	r7, #98	; 0x62
 8006b7e:	d80a      	bhi.n	8006b96 <_printf_i+0x32>
 8006b80:	2f00      	cmp	r7, #0
 8006b82:	f000 80d9 	beq.w	8006d38 <_printf_i+0x1d4>
 8006b86:	2f58      	cmp	r7, #88	; 0x58
 8006b88:	f000 80a4 	beq.w	8006cd4 <_printf_i+0x170>
 8006b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b94:	e03a      	b.n	8006c0c <_printf_i+0xa8>
 8006b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9a:	2b15      	cmp	r3, #21
 8006b9c:	d8f6      	bhi.n	8006b8c <_printf_i+0x28>
 8006b9e:	a101      	add	r1, pc, #4	; (adr r1, 8006ba4 <_printf_i+0x40>)
 8006ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba4:	08006bfd 	.word	0x08006bfd
 8006ba8:	08006c11 	.word	0x08006c11
 8006bac:	08006b8d 	.word	0x08006b8d
 8006bb0:	08006b8d 	.word	0x08006b8d
 8006bb4:	08006b8d 	.word	0x08006b8d
 8006bb8:	08006b8d 	.word	0x08006b8d
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006b8d 	.word	0x08006b8d
 8006bc4:	08006b8d 	.word	0x08006b8d
 8006bc8:	08006b8d 	.word	0x08006b8d
 8006bcc:	08006b8d 	.word	0x08006b8d
 8006bd0:	08006d1f 	.word	0x08006d1f
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006d01 	.word	0x08006d01
 8006bdc:	08006b8d 	.word	0x08006b8d
 8006be0:	08006b8d 	.word	0x08006b8d
 8006be4:	08006d41 	.word	0x08006d41
 8006be8:	08006b8d 	.word	0x08006b8d
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006b8d 	.word	0x08006b8d
 8006bf4:	08006b8d 	.word	0x08006b8d
 8006bf8:	08006d09 	.word	0x08006d09
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	602a      	str	r2, [r5, #0]
 8006c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0a4      	b.n	8006d5a <_printf_i+0x1f6>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	6829      	ldr	r1, [r5, #0]
 8006c14:	0606      	lsls	r6, r0, #24
 8006c16:	f101 0304 	add.w	r3, r1, #4
 8006c1a:	d50a      	bpl.n	8006c32 <_printf_i+0xce>
 8006c1c:	680e      	ldr	r6, [r1, #0]
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	2e00      	cmp	r6, #0
 8006c22:	da03      	bge.n	8006c2c <_printf_i+0xc8>
 8006c24:	232d      	movs	r3, #45	; 0x2d
 8006c26:	4276      	negs	r6, r6
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2c:	230a      	movs	r3, #10
 8006c2e:	485e      	ldr	r0, [pc, #376]	; (8006da8 <_printf_i+0x244>)
 8006c30:	e019      	b.n	8006c66 <_printf_i+0x102>
 8006c32:	680e      	ldr	r6, [r1, #0]
 8006c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	bf18      	it	ne
 8006c3c:	b236      	sxthne	r6, r6
 8006c3e:	e7ef      	b.n	8006c20 <_printf_i+0xbc>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	1d19      	adds	r1, r3, #4
 8006c46:	6029      	str	r1, [r5, #0]
 8006c48:	0601      	lsls	r1, r0, #24
 8006c4a:	d501      	bpl.n	8006c50 <_printf_i+0xec>
 8006c4c:	681e      	ldr	r6, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <_printf_i+0xf2>
 8006c50:	0646      	lsls	r6, r0, #25
 8006c52:	d5fb      	bpl.n	8006c4c <_printf_i+0xe8>
 8006c54:	881e      	ldrh	r6, [r3, #0]
 8006c56:	2f6f      	cmp	r7, #111	; 0x6f
 8006c58:	bf0c      	ite	eq
 8006c5a:	2308      	moveq	r3, #8
 8006c5c:	230a      	movne	r3, #10
 8006c5e:	4852      	ldr	r0, [pc, #328]	; (8006da8 <_printf_i+0x244>)
 8006c60:	2100      	movs	r1, #0
 8006c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c66:	6865      	ldr	r5, [r4, #4]
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	bfa8      	it	ge
 8006c6c:	6821      	ldrge	r1, [r4, #0]
 8006c6e:	60a5      	str	r5, [r4, #8]
 8006c70:	bfa4      	itt	ge
 8006c72:	f021 0104 	bicge.w	r1, r1, #4
 8006c76:	6021      	strge	r1, [r4, #0]
 8006c78:	b90e      	cbnz	r6, 8006c7e <_printf_i+0x11a>
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	d04d      	beq.n	8006d1a <_printf_i+0x1b6>
 8006c7e:	4615      	mov	r5, r2
 8006c80:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c84:	fb03 6711 	mls	r7, r3, r1, r6
 8006c88:	5dc7      	ldrb	r7, [r0, r7]
 8006c8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c8e:	4637      	mov	r7, r6
 8006c90:	42bb      	cmp	r3, r7
 8006c92:	460e      	mov	r6, r1
 8006c94:	d9f4      	bls.n	8006c80 <_printf_i+0x11c>
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d10b      	bne.n	8006cb2 <_printf_i+0x14e>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	07de      	lsls	r6, r3, #31
 8006c9e:	d508      	bpl.n	8006cb2 <_printf_i+0x14e>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	6861      	ldr	r1, [r4, #4]
 8006ca4:	4299      	cmp	r1, r3
 8006ca6:	bfde      	ittt	le
 8006ca8:	2330      	movle	r3, #48	; 0x30
 8006caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb2:	1b52      	subs	r2, r2, r5
 8006cb4:	6122      	str	r2, [r4, #16]
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4640      	mov	r0, r8
 8006cbc:	f8cd a000 	str.w	sl, [sp]
 8006cc0:	aa03      	add	r2, sp, #12
 8006cc2:	f7ff fedf 	bl	8006a84 <_printf_common>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d14c      	bne.n	8006d64 <_printf_i+0x200>
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	b004      	add	sp, #16
 8006cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd4:	4834      	ldr	r0, [pc, #208]	; (8006da8 <_printf_i+0x244>)
 8006cd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cda:	6829      	ldr	r1, [r5, #0]
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ce2:	6029      	str	r1, [r5, #0]
 8006ce4:	061d      	lsls	r5, r3, #24
 8006ce6:	d514      	bpl.n	8006d12 <_printf_i+0x1ae>
 8006ce8:	07df      	lsls	r7, r3, #31
 8006cea:	bf44      	itt	mi
 8006cec:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf0:	6023      	strmi	r3, [r4, #0]
 8006cf2:	b91e      	cbnz	r6, 8006cfc <_printf_i+0x198>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	f023 0320 	bic.w	r3, r3, #32
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	e7af      	b.n	8006c60 <_printf_i+0xfc>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	f043 0320 	orr.w	r3, r3, #32
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	2378      	movs	r3, #120	; 0x78
 8006d0a:	4828      	ldr	r0, [pc, #160]	; (8006dac <_printf_i+0x248>)
 8006d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d10:	e7e3      	b.n	8006cda <_printf_i+0x176>
 8006d12:	0659      	lsls	r1, r3, #25
 8006d14:	bf48      	it	mi
 8006d16:	b2b6      	uxthmi	r6, r6
 8006d18:	e7e6      	b.n	8006ce8 <_printf_i+0x184>
 8006d1a:	4615      	mov	r5, r2
 8006d1c:	e7bb      	b.n	8006c96 <_printf_i+0x132>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	6826      	ldr	r6, [r4, #0]
 8006d22:	1d18      	adds	r0, r3, #4
 8006d24:	6961      	ldr	r1, [r4, #20]
 8006d26:	6028      	str	r0, [r5, #0]
 8006d28:	0635      	lsls	r5, r6, #24
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	d501      	bpl.n	8006d32 <_printf_i+0x1ce>
 8006d2e:	6019      	str	r1, [r3, #0]
 8006d30:	e002      	b.n	8006d38 <_printf_i+0x1d4>
 8006d32:	0670      	lsls	r0, r6, #25
 8006d34:	d5fb      	bpl.n	8006d2e <_printf_i+0x1ca>
 8006d36:	8019      	strh	r1, [r3, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4615      	mov	r5, r2
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	e7ba      	b.n	8006cb6 <_printf_i+0x152>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	2100      	movs	r1, #0
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 fed5 	bl	8007afc <memchr>
 8006d52:	b108      	cbz	r0, 8006d58 <_printf_i+0x1f4>
 8006d54:	1b40      	subs	r0, r0, r5
 8006d56:	6060      	str	r0, [r4, #4]
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d62:	e7a8      	b.n	8006cb6 <_printf_i+0x152>
 8006d64:	462a      	mov	r2, r5
 8006d66:	4649      	mov	r1, r9
 8006d68:	4640      	mov	r0, r8
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	47d0      	blx	sl
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d0ab      	beq.n	8006cca <_printf_i+0x166>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	079b      	lsls	r3, r3, #30
 8006d76:	d413      	bmi.n	8006da0 <_printf_i+0x23c>
 8006d78:	68e0      	ldr	r0, [r4, #12]
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	4298      	cmp	r0, r3
 8006d7e:	bfb8      	it	lt
 8006d80:	4618      	movlt	r0, r3
 8006d82:	e7a4      	b.n	8006cce <_printf_i+0x16a>
 8006d84:	2301      	movs	r3, #1
 8006d86:	4632      	mov	r2, r6
 8006d88:	4649      	mov	r1, r9
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	47d0      	blx	sl
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d09b      	beq.n	8006cca <_printf_i+0x166>
 8006d92:	3501      	adds	r5, #1
 8006d94:	68e3      	ldr	r3, [r4, #12]
 8006d96:	9903      	ldr	r1, [sp, #12]
 8006d98:	1a5b      	subs	r3, r3, r1
 8006d9a:	42ab      	cmp	r3, r5
 8006d9c:	dcf2      	bgt.n	8006d84 <_printf_i+0x220>
 8006d9e:	e7eb      	b.n	8006d78 <_printf_i+0x214>
 8006da0:	2500      	movs	r5, #0
 8006da2:	f104 0619 	add.w	r6, r4, #25
 8006da6:	e7f5      	b.n	8006d94 <_printf_i+0x230>
 8006da8:	080093ae 	.word	0x080093ae
 8006dac:	080093bf 	.word	0x080093bf

08006db0 <siprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db6:	b500      	push	{lr}
 8006db8:	b09c      	sub	sp, #112	; 0x70
 8006dba:	ab1d      	add	r3, sp, #116	; 0x74
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	9006      	str	r0, [sp, #24]
 8006dc0:	9107      	str	r1, [sp, #28]
 8006dc2:	9104      	str	r1, [sp, #16]
 8006dc4:	4808      	ldr	r0, [pc, #32]	; (8006de8 <siprintf+0x38>)
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <siprintf+0x3c>)
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	a902      	add	r1, sp, #8
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f001 fb7c 	bl	80084d0 <_svfiprintf_r>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	b01c      	add	sp, #112	; 0x70
 8006de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de4:	b003      	add	sp, #12
 8006de6:	4770      	bx	lr
 8006de8:	2000000c 	.word	0x2000000c
 8006dec:	ffff0208 	.word	0xffff0208

08006df0 <quorem>:
 8006df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	6903      	ldr	r3, [r0, #16]
 8006df6:	690c      	ldr	r4, [r1, #16]
 8006df8:	4607      	mov	r7, r0
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	f2c0 8082 	blt.w	8006f04 <quorem+0x114>
 8006e00:	3c01      	subs	r4, #1
 8006e02:	f100 0514 	add.w	r5, r0, #20
 8006e06:	f101 0814 	add.w	r8, r1, #20
 8006e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e28:	d331      	bcc.n	8006e8e <quorem+0x9e>
 8006e2a:	f04f 0e00 	mov.w	lr, #0
 8006e2e:	4640      	mov	r0, r8
 8006e30:	46ac      	mov	ip, r5
 8006e32:	46f2      	mov	sl, lr
 8006e34:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e38:	b293      	uxth	r3, r2
 8006e3a:	fb06 e303 	mla	r3, r6, r3, lr
 8006e3e:	0c12      	lsrs	r2, r2, #16
 8006e40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	fb06 e202 	mla	r2, r6, r2, lr
 8006e4a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e4e:	f8dc a000 	ldr.w	sl, [ip]
 8006e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e56:	fa1f fa8a 	uxth.w	sl, sl
 8006e5a:	4453      	add	r3, sl
 8006e5c:	f8dc a000 	ldr.w	sl, [ip]
 8006e60:	b292      	uxth	r2, r2
 8006e62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e70:	4581      	cmp	r9, r0
 8006e72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e76:	f84c 3b04 	str.w	r3, [ip], #4
 8006e7a:	d2db      	bcs.n	8006e34 <quorem+0x44>
 8006e7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e80:	b92b      	cbnz	r3, 8006e8e <quorem+0x9e>
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	429d      	cmp	r5, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	d32f      	bcc.n	8006eec <quorem+0xfc>
 8006e8c:	613c      	str	r4, [r7, #16]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f001 f8ce 	bl	8008030 <__mcmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	db25      	blt.n	8006ee4 <quorem+0xf4>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f04f 0c00 	mov.w	ip, #0
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	f858 1b04 	ldr.w	r1, [r8], #4
 8006ea4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ea8:	b28b      	uxth	r3, r1
 8006eaa:	ebac 0303 	sub.w	r3, ip, r3
 8006eae:	fa1f f28e 	uxth.w	r2, lr
 8006eb2:	4413      	add	r3, r2
 8006eb4:	0c0a      	lsrs	r2, r1, #16
 8006eb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006eba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ec4:	45c1      	cmp	r9, r8
 8006ec6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006eca:	f840 3b04 	str.w	r3, [r0], #4
 8006ece:	d2e7      	bcs.n	8006ea0 <quorem+0xb0>
 8006ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ed8:	b922      	cbnz	r2, 8006ee4 <quorem+0xf4>
 8006eda:	3b04      	subs	r3, #4
 8006edc:	429d      	cmp	r5, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	d30a      	bcc.n	8006ef8 <quorem+0x108>
 8006ee2:	613c      	str	r4, [r7, #16]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	2a00      	cmp	r2, #0
 8006ef2:	d1cb      	bne.n	8006e8c <quorem+0x9c>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	e7c6      	b.n	8006e86 <quorem+0x96>
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	3b04      	subs	r3, #4
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d1f0      	bne.n	8006ee2 <quorem+0xf2>
 8006f00:	3c01      	subs	r4, #1
 8006f02:	e7eb      	b.n	8006edc <quorem+0xec>
 8006f04:	2000      	movs	r0, #0
 8006f06:	e7ee      	b.n	8006ee6 <quorem+0xf6>

08006f08 <_dtoa_r>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	461f      	mov	r7, r3
 8006f10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f12:	b099      	sub	sp, #100	; 0x64
 8006f14:	4605      	mov	r5, r0
 8006f16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006f1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006f1e:	b974      	cbnz	r4, 8006f3e <_dtoa_r+0x36>
 8006f20:	2010      	movs	r0, #16
 8006f22:	f000 fde3 	bl	8007aec <malloc>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6268      	str	r0, [r5, #36]	; 0x24
 8006f2a:	b920      	cbnz	r0, 8006f36 <_dtoa_r+0x2e>
 8006f2c:	21ea      	movs	r1, #234	; 0xea
 8006f2e:	4ba8      	ldr	r3, [pc, #672]	; (80071d0 <_dtoa_r+0x2c8>)
 8006f30:	48a8      	ldr	r0, [pc, #672]	; (80071d4 <_dtoa_r+0x2cc>)
 8006f32:	f001 fbdd 	bl	80086f0 <__assert_func>
 8006f36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f3a:	6004      	str	r4, [r0, #0]
 8006f3c:	60c4      	str	r4, [r0, #12]
 8006f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	b151      	cbz	r1, 8006f5a <_dtoa_r+0x52>
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	2301      	movs	r3, #1
 8006f48:	4093      	lsls	r3, r2
 8006f4a:	604a      	str	r2, [r1, #4]
 8006f4c:	608b      	str	r3, [r1, #8]
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 fe30 	bl	8007bb4 <_Bfree>
 8006f54:	2200      	movs	r2, #0
 8006f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	1e3b      	subs	r3, r7, #0
 8006f5c:	bfaf      	iteee	ge
 8006f5e:	2300      	movge	r3, #0
 8006f60:	2201      	movlt	r2, #1
 8006f62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f66:	9305      	strlt	r3, [sp, #20]
 8006f68:	bfa8      	it	ge
 8006f6a:	f8c8 3000 	strge.w	r3, [r8]
 8006f6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006f72:	4b99      	ldr	r3, [pc, #612]	; (80071d8 <_dtoa_r+0x2d0>)
 8006f74:	bfb8      	it	lt
 8006f76:	f8c8 2000 	strlt.w	r2, [r8]
 8006f7a:	ea33 0309 	bics.w	r3, r3, r9
 8006f7e:	d119      	bne.n	8006fb4 <_dtoa_r+0xac>
 8006f80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f8c:	4333      	orrs	r3, r6
 8006f8e:	f000 857f 	beq.w	8007a90 <_dtoa_r+0xb88>
 8006f92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f94:	b953      	cbnz	r3, 8006fac <_dtoa_r+0xa4>
 8006f96:	4b91      	ldr	r3, [pc, #580]	; (80071dc <_dtoa_r+0x2d4>)
 8006f98:	e022      	b.n	8006fe0 <_dtoa_r+0xd8>
 8006f9a:	4b91      	ldr	r3, [pc, #580]	; (80071e0 <_dtoa_r+0x2d8>)
 8006f9c:	9303      	str	r3, [sp, #12]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	9803      	ldr	r0, [sp, #12]
 8006fa6:	b019      	add	sp, #100	; 0x64
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <_dtoa_r+0x2d4>)
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	3303      	adds	r3, #3
 8006fb2:	e7f5      	b.n	8006fa0 <_dtoa_r+0x98>
 8006fb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006fbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f7f9 fcfa 	bl	80009bc <__aeabi_dcmpeq>
 8006fc8:	4680      	mov	r8, r0
 8006fca:	b158      	cbz	r0, 8006fe4 <_dtoa_r+0xdc>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8558 	beq.w	8007a8a <_dtoa_r+0xb82>
 8006fda:	4882      	ldr	r0, [pc, #520]	; (80071e4 <_dtoa_r+0x2dc>)
 8006fdc:	6018      	str	r0, [r3, #0]
 8006fde:	1e43      	subs	r3, r0, #1
 8006fe0:	9303      	str	r3, [sp, #12]
 8006fe2:	e7df      	b.n	8006fa4 <_dtoa_r+0x9c>
 8006fe4:	ab16      	add	r3, sp, #88	; 0x58
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	ab17      	add	r3, sp, #92	; 0x5c
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4628      	mov	r0, r5
 8006fee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ff2:	f001 f8c5 	bl	8008180 <__d2b>
 8006ff6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ffa:	4683      	mov	fp, r0
 8006ffc:	2c00      	cmp	r4, #0
 8006ffe:	d07f      	beq.n	8007100 <_dtoa_r+0x1f8>
 8007000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007006:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800700a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800700e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007012:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007016:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800701a:	2200      	movs	r2, #0
 800701c:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <_dtoa_r+0x2e0>)
 800701e:	f7f9 f8ad 	bl	800017c <__aeabi_dsub>
 8007022:	a365      	add	r3, pc, #404	; (adr r3, 80071b8 <_dtoa_r+0x2b0>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fa60 	bl	80004ec <__aeabi_dmul>
 800702c:	a364      	add	r3, pc, #400	; (adr r3, 80071c0 <_dtoa_r+0x2b8>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f8a5 	bl	8000180 <__adddf3>
 8007036:	4606      	mov	r6, r0
 8007038:	4620      	mov	r0, r4
 800703a:	460f      	mov	r7, r1
 800703c:	f7f9 f9ec 	bl	8000418 <__aeabi_i2d>
 8007040:	a361      	add	r3, pc, #388	; (adr r3, 80071c8 <_dtoa_r+0x2c0>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fa51 	bl	80004ec <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4630      	mov	r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	f7f9 f895 	bl	8000180 <__adddf3>
 8007056:	4606      	mov	r6, r0
 8007058:	460f      	mov	r7, r1
 800705a:	f7f9 fcf7 	bl	8000a4c <__aeabi_d2iz>
 800705e:	2200      	movs	r2, #0
 8007060:	4682      	mov	sl, r0
 8007062:	2300      	movs	r3, #0
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fcb2 	bl	80009d0 <__aeabi_dcmplt>
 800706c:	b148      	cbz	r0, 8007082 <_dtoa_r+0x17a>
 800706e:	4650      	mov	r0, sl
 8007070:	f7f9 f9d2 	bl	8000418 <__aeabi_i2d>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	f7f9 fca0 	bl	80009bc <__aeabi_dcmpeq>
 800707c:	b908      	cbnz	r0, 8007082 <_dtoa_r+0x17a>
 800707e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007082:	f1ba 0f16 	cmp.w	sl, #22
 8007086:	d858      	bhi.n	800713a <_dtoa_r+0x232>
 8007088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800708c:	4b57      	ldr	r3, [pc, #348]	; (80071ec <_dtoa_r+0x2e4>)
 800708e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 fc9b 	bl	80009d0 <__aeabi_dcmplt>
 800709a:	2800      	cmp	r0, #0
 800709c:	d04f      	beq.n	800713e <_dtoa_r+0x236>
 800709e:	2300      	movs	r3, #0
 80070a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070a8:	1b1c      	subs	r4, r3, r4
 80070aa:	1e63      	subs	r3, r4, #1
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
 80070ae:	bf49      	itett	mi
 80070b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80070b4:	2300      	movpl	r3, #0
 80070b6:	9306      	strmi	r3, [sp, #24]
 80070b8:	2300      	movmi	r3, #0
 80070ba:	bf54      	ite	pl
 80070bc:	9306      	strpl	r3, [sp, #24]
 80070be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80070c0:	f1ba 0f00 	cmp.w	sl, #0
 80070c4:	db3d      	blt.n	8007142 <_dtoa_r+0x23a>
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80070cc:	4453      	add	r3, sl
 80070ce:	9309      	str	r3, [sp, #36]	; 0x24
 80070d0:	2300      	movs	r3, #0
 80070d2:	930a      	str	r3, [sp, #40]	; 0x28
 80070d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	f200 808c 	bhi.w	80071f4 <_dtoa_r+0x2ec>
 80070dc:	2b05      	cmp	r3, #5
 80070de:	bfc4      	itt	gt
 80070e0:	3b04      	subgt	r3, #4
 80070e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80070e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070e6:	bfc8      	it	gt
 80070e8:	2400      	movgt	r4, #0
 80070ea:	f1a3 0302 	sub.w	r3, r3, #2
 80070ee:	bfd8      	it	le
 80070f0:	2401      	movle	r4, #1
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	f200 808a 	bhi.w	800720c <_dtoa_r+0x304>
 80070f8:	e8df f003 	tbb	[pc, r3]
 80070fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8007100:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007104:	441c      	add	r4, r3
 8007106:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800710a:	2b20      	cmp	r3, #32
 800710c:	bfc3      	ittte	gt
 800710e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007112:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007116:	fa09 f303 	lslgt.w	r3, r9, r3
 800711a:	f1c3 0320 	rsble	r3, r3, #32
 800711e:	bfc6      	itte	gt
 8007120:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007124:	4318      	orrgt	r0, r3
 8007126:	fa06 f003 	lslle.w	r0, r6, r3
 800712a:	f7f9 f965 	bl	80003f8 <__aeabi_ui2d>
 800712e:	2301      	movs	r3, #1
 8007130:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007134:	3c01      	subs	r4, #1
 8007136:	9313      	str	r3, [sp, #76]	; 0x4c
 8007138:	e76f      	b.n	800701a <_dtoa_r+0x112>
 800713a:	2301      	movs	r3, #1
 800713c:	e7b2      	b.n	80070a4 <_dtoa_r+0x19c>
 800713e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007140:	e7b1      	b.n	80070a6 <_dtoa_r+0x19e>
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	eba3 030a 	sub.w	r3, r3, sl
 8007148:	9306      	str	r3, [sp, #24]
 800714a:	f1ca 0300 	rsb	r3, sl, #0
 800714e:	930a      	str	r3, [sp, #40]	; 0x28
 8007150:	2300      	movs	r3, #0
 8007152:	930e      	str	r3, [sp, #56]	; 0x38
 8007154:	e7be      	b.n	80070d4 <_dtoa_r+0x1cc>
 8007156:	2300      	movs	r3, #0
 8007158:	930b      	str	r3, [sp, #44]	; 0x2c
 800715a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800715c:	2b00      	cmp	r3, #0
 800715e:	dc58      	bgt.n	8007212 <_dtoa_r+0x30a>
 8007160:	f04f 0901 	mov.w	r9, #1
 8007164:	464b      	mov	r3, r9
 8007166:	f8cd 9020 	str.w	r9, [sp, #32]
 800716a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800716e:	2200      	movs	r2, #0
 8007170:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007172:	6042      	str	r2, [r0, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	f102 0614 	add.w	r6, r2, #20
 800717a:	429e      	cmp	r6, r3
 800717c:	6841      	ldr	r1, [r0, #4]
 800717e:	d94e      	bls.n	800721e <_dtoa_r+0x316>
 8007180:	4628      	mov	r0, r5
 8007182:	f000 fcd7 	bl	8007b34 <_Balloc>
 8007186:	9003      	str	r0, [sp, #12]
 8007188:	2800      	cmp	r0, #0
 800718a:	d14c      	bne.n	8007226 <_dtoa_r+0x31e>
 800718c:	4602      	mov	r2, r0
 800718e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <_dtoa_r+0x2e8>)
 8007194:	e6cc      	b.n	8006f30 <_dtoa_r+0x28>
 8007196:	2301      	movs	r3, #1
 8007198:	e7de      	b.n	8007158 <_dtoa_r+0x250>
 800719a:	2300      	movs	r3, #0
 800719c:	930b      	str	r3, [sp, #44]	; 0x2c
 800719e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a0:	eb0a 0903 	add.w	r9, sl, r3
 80071a4:	f109 0301 	add.w	r3, r9, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	9308      	str	r3, [sp, #32]
 80071ac:	bfb8      	it	lt
 80071ae:	2301      	movlt	r3, #1
 80071b0:	e7dd      	b.n	800716e <_dtoa_r+0x266>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7f2      	b.n	800719c <_dtoa_r+0x294>
 80071b6:	bf00      	nop
 80071b8:	636f4361 	.word	0x636f4361
 80071bc:	3fd287a7 	.word	0x3fd287a7
 80071c0:	8b60c8b3 	.word	0x8b60c8b3
 80071c4:	3fc68a28 	.word	0x3fc68a28
 80071c8:	509f79fb 	.word	0x509f79fb
 80071cc:	3fd34413 	.word	0x3fd34413
 80071d0:	080093dd 	.word	0x080093dd
 80071d4:	080093f4 	.word	0x080093f4
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	080093d9 	.word	0x080093d9
 80071e0:	080093d0 	.word	0x080093d0
 80071e4:	080093ad 	.word	0x080093ad
 80071e8:	3ff80000 	.word	0x3ff80000
 80071ec:	080094e8 	.word	0x080094e8
 80071f0:	0800944f 	.word	0x0800944f
 80071f4:	2401      	movs	r4, #1
 80071f6:	2300      	movs	r3, #0
 80071f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80071fa:	9322      	str	r3, [sp, #136]	; 0x88
 80071fc:	f04f 39ff 	mov.w	r9, #4294967295
 8007200:	2200      	movs	r2, #0
 8007202:	2312      	movs	r3, #18
 8007204:	f8cd 9020 	str.w	r9, [sp, #32]
 8007208:	9223      	str	r2, [sp, #140]	; 0x8c
 800720a:	e7b0      	b.n	800716e <_dtoa_r+0x266>
 800720c:	2301      	movs	r3, #1
 800720e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007210:	e7f4      	b.n	80071fc <_dtoa_r+0x2f4>
 8007212:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007216:	464b      	mov	r3, r9
 8007218:	f8cd 9020 	str.w	r9, [sp, #32]
 800721c:	e7a7      	b.n	800716e <_dtoa_r+0x266>
 800721e:	3101      	adds	r1, #1
 8007220:	6041      	str	r1, [r0, #4]
 8007222:	0052      	lsls	r2, r2, #1
 8007224:	e7a7      	b.n	8007176 <_dtoa_r+0x26e>
 8007226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007228:	9a03      	ldr	r2, [sp, #12]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	2b0e      	cmp	r3, #14
 8007230:	f200 80a8 	bhi.w	8007384 <_dtoa_r+0x47c>
 8007234:	2c00      	cmp	r4, #0
 8007236:	f000 80a5 	beq.w	8007384 <_dtoa_r+0x47c>
 800723a:	f1ba 0f00 	cmp.w	sl, #0
 800723e:	dd34      	ble.n	80072aa <_dtoa_r+0x3a2>
 8007240:	4a9a      	ldr	r2, [pc, #616]	; (80074ac <_dtoa_r+0x5a4>)
 8007242:	f00a 030f 	and.w	r3, sl, #15
 8007246:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800724a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800724e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007252:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007256:	ea4f 142a 	mov.w	r4, sl, asr #4
 800725a:	d016      	beq.n	800728a <_dtoa_r+0x382>
 800725c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007260:	4b93      	ldr	r3, [pc, #588]	; (80074b0 <_dtoa_r+0x5a8>)
 8007262:	2703      	movs	r7, #3
 8007264:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007268:	f7f9 fa6a 	bl	8000740 <__aeabi_ddiv>
 800726c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007270:	f004 040f 	and.w	r4, r4, #15
 8007274:	4e8e      	ldr	r6, [pc, #568]	; (80074b0 <_dtoa_r+0x5a8>)
 8007276:	b954      	cbnz	r4, 800728e <_dtoa_r+0x386>
 8007278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800727c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007280:	f7f9 fa5e 	bl	8000740 <__aeabi_ddiv>
 8007284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007288:	e029      	b.n	80072de <_dtoa_r+0x3d6>
 800728a:	2702      	movs	r7, #2
 800728c:	e7f2      	b.n	8007274 <_dtoa_r+0x36c>
 800728e:	07e1      	lsls	r1, r4, #31
 8007290:	d508      	bpl.n	80072a4 <_dtoa_r+0x39c>
 8007292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007296:	e9d6 2300 	ldrd	r2, r3, [r6]
 800729a:	f7f9 f927 	bl	80004ec <__aeabi_dmul>
 800729e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072a2:	3701      	adds	r7, #1
 80072a4:	1064      	asrs	r4, r4, #1
 80072a6:	3608      	adds	r6, #8
 80072a8:	e7e5      	b.n	8007276 <_dtoa_r+0x36e>
 80072aa:	f000 80a5 	beq.w	80073f8 <_dtoa_r+0x4f0>
 80072ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072b2:	f1ca 0400 	rsb	r4, sl, #0
 80072b6:	4b7d      	ldr	r3, [pc, #500]	; (80074ac <_dtoa_r+0x5a4>)
 80072b8:	f004 020f 	and.w	r2, r4, #15
 80072bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f7f9 f912 	bl	80004ec <__aeabi_dmul>
 80072c8:	2702      	movs	r7, #2
 80072ca:	2300      	movs	r3, #0
 80072cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072d0:	4e77      	ldr	r6, [pc, #476]	; (80074b0 <_dtoa_r+0x5a8>)
 80072d2:	1124      	asrs	r4, r4, #4
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	f040 8084 	bne.w	80073e2 <_dtoa_r+0x4da>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d2      	bne.n	8007284 <_dtoa_r+0x37c>
 80072de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 808b 	beq.w	80073fc <_dtoa_r+0x4f4>
 80072e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072f2:	2200      	movs	r2, #0
 80072f4:	4b6f      	ldr	r3, [pc, #444]	; (80074b4 <_dtoa_r+0x5ac>)
 80072f6:	f7f9 fb6b 	bl	80009d0 <__aeabi_dcmplt>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d07e      	beq.n	80073fc <_dtoa_r+0x4f4>
 80072fe:	9b08      	ldr	r3, [sp, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d07b      	beq.n	80073fc <_dtoa_r+0x4f4>
 8007304:	f1b9 0f00 	cmp.w	r9, #0
 8007308:	dd38      	ble.n	800737c <_dtoa_r+0x474>
 800730a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800730e:	2200      	movs	r2, #0
 8007310:	4b69      	ldr	r3, [pc, #420]	; (80074b8 <_dtoa_r+0x5b0>)
 8007312:	f7f9 f8eb 	bl	80004ec <__aeabi_dmul>
 8007316:	464c      	mov	r4, r9
 8007318:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800731c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007320:	3701      	adds	r7, #1
 8007322:	4638      	mov	r0, r7
 8007324:	f7f9 f878 	bl	8000418 <__aeabi_i2d>
 8007328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800732c:	f7f9 f8de 	bl	80004ec <__aeabi_dmul>
 8007330:	2200      	movs	r2, #0
 8007332:	4b62      	ldr	r3, [pc, #392]	; (80074bc <_dtoa_r+0x5b4>)
 8007334:	f7f8 ff24 	bl	8000180 <__adddf3>
 8007338:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800733c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007340:	9611      	str	r6, [sp, #68]	; 0x44
 8007342:	2c00      	cmp	r4, #0
 8007344:	d15d      	bne.n	8007402 <_dtoa_r+0x4fa>
 8007346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800734a:	2200      	movs	r2, #0
 800734c:	4b5c      	ldr	r3, [pc, #368]	; (80074c0 <_dtoa_r+0x5b8>)
 800734e:	f7f8 ff15 	bl	800017c <__aeabi_dsub>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800735a:	4633      	mov	r3, r6
 800735c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800735e:	f7f9 fb55 	bl	8000a0c <__aeabi_dcmpgt>
 8007362:	2800      	cmp	r0, #0
 8007364:	f040 829c 	bne.w	80078a0 <_dtoa_r+0x998>
 8007368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800736c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800736e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007372:	f7f9 fb2d 	bl	80009d0 <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	f040 8290 	bne.w	800789c <_dtoa_r+0x994>
 800737c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007380:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007386:	2b00      	cmp	r3, #0
 8007388:	f2c0 8152 	blt.w	8007630 <_dtoa_r+0x728>
 800738c:	f1ba 0f0e 	cmp.w	sl, #14
 8007390:	f300 814e 	bgt.w	8007630 <_dtoa_r+0x728>
 8007394:	4b45      	ldr	r3, [pc, #276]	; (80074ac <_dtoa_r+0x5a4>)
 8007396:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800739a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800739e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80073a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f280 80db 	bge.w	8007560 <_dtoa_r+0x658>
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f300 80d7 	bgt.w	8007560 <_dtoa_r+0x658>
 80073b2:	f040 8272 	bne.w	800789a <_dtoa_r+0x992>
 80073b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b40      	ldr	r3, [pc, #256]	; (80074c0 <_dtoa_r+0x5b8>)
 80073be:	f7f9 f895 	bl	80004ec <__aeabi_dmul>
 80073c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c6:	f7f9 fb17 	bl	80009f8 <__aeabi_dcmpge>
 80073ca:	9c08      	ldr	r4, [sp, #32]
 80073cc:	4626      	mov	r6, r4
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f040 8248 	bne.w	8007864 <_dtoa_r+0x95c>
 80073d4:	2331      	movs	r3, #49	; 0x31
 80073d6:	9f03      	ldr	r7, [sp, #12]
 80073d8:	f10a 0a01 	add.w	sl, sl, #1
 80073dc:	f807 3b01 	strb.w	r3, [r7], #1
 80073e0:	e244      	b.n	800786c <_dtoa_r+0x964>
 80073e2:	07e2      	lsls	r2, r4, #31
 80073e4:	d505      	bpl.n	80073f2 <_dtoa_r+0x4ea>
 80073e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073ea:	f7f9 f87f 	bl	80004ec <__aeabi_dmul>
 80073ee:	2301      	movs	r3, #1
 80073f0:	3701      	adds	r7, #1
 80073f2:	1064      	asrs	r4, r4, #1
 80073f4:	3608      	adds	r6, #8
 80073f6:	e76d      	b.n	80072d4 <_dtoa_r+0x3cc>
 80073f8:	2702      	movs	r7, #2
 80073fa:	e770      	b.n	80072de <_dtoa_r+0x3d6>
 80073fc:	46d0      	mov	r8, sl
 80073fe:	9c08      	ldr	r4, [sp, #32]
 8007400:	e78f      	b.n	8007322 <_dtoa_r+0x41a>
 8007402:	9903      	ldr	r1, [sp, #12]
 8007404:	4b29      	ldr	r3, [pc, #164]	; (80074ac <_dtoa_r+0x5a4>)
 8007406:	4421      	add	r1, r4
 8007408:	9112      	str	r1, [sp, #72]	; 0x48
 800740a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800740c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007410:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007414:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007418:	2900      	cmp	r1, #0
 800741a:	d055      	beq.n	80074c8 <_dtoa_r+0x5c0>
 800741c:	2000      	movs	r0, #0
 800741e:	4929      	ldr	r1, [pc, #164]	; (80074c4 <_dtoa_r+0x5bc>)
 8007420:	f7f9 f98e 	bl	8000740 <__aeabi_ddiv>
 8007424:	463b      	mov	r3, r7
 8007426:	4632      	mov	r2, r6
 8007428:	f7f8 fea8 	bl	800017c <__aeabi_dsub>
 800742c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007430:	9f03      	ldr	r7, [sp, #12]
 8007432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007436:	f7f9 fb09 	bl	8000a4c <__aeabi_d2iz>
 800743a:	4604      	mov	r4, r0
 800743c:	f7f8 ffec 	bl	8000418 <__aeabi_i2d>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007448:	f7f8 fe98 	bl	800017c <__aeabi_dsub>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	3430      	adds	r4, #48	; 0x30
 8007452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800745a:	f807 4b01 	strb.w	r4, [r7], #1
 800745e:	f7f9 fab7 	bl	80009d0 <__aeabi_dcmplt>
 8007462:	2800      	cmp	r0, #0
 8007464:	d174      	bne.n	8007550 <_dtoa_r+0x648>
 8007466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746a:	2000      	movs	r0, #0
 800746c:	4911      	ldr	r1, [pc, #68]	; (80074b4 <_dtoa_r+0x5ac>)
 800746e:	f7f8 fe85 	bl	800017c <__aeabi_dsub>
 8007472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007476:	f7f9 faab 	bl	80009d0 <__aeabi_dcmplt>
 800747a:	2800      	cmp	r0, #0
 800747c:	f040 80b7 	bne.w	80075ee <_dtoa_r+0x6e6>
 8007480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007482:	429f      	cmp	r7, r3
 8007484:	f43f af7a 	beq.w	800737c <_dtoa_r+0x474>
 8007488:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800748c:	2200      	movs	r2, #0
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <_dtoa_r+0x5b0>)
 8007490:	f7f9 f82c 	bl	80004ec <__aeabi_dmul>
 8007494:	2200      	movs	r2, #0
 8007496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800749a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <_dtoa_r+0x5b0>)
 80074a0:	f7f9 f824 	bl	80004ec <__aeabi_dmul>
 80074a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a8:	e7c3      	b.n	8007432 <_dtoa_r+0x52a>
 80074aa:	bf00      	nop
 80074ac:	080094e8 	.word	0x080094e8
 80074b0:	080094c0 	.word	0x080094c0
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	40240000 	.word	0x40240000
 80074bc:	401c0000 	.word	0x401c0000
 80074c0:	40140000 	.word	0x40140000
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 f80e 	bl	80004ec <__aeabi_dmul>
 80074d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074d6:	9c03      	ldr	r4, [sp, #12]
 80074d8:	9314      	str	r3, [sp, #80]	; 0x50
 80074da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074de:	f7f9 fab5 	bl	8000a4c <__aeabi_d2iz>
 80074e2:	9015      	str	r0, [sp, #84]	; 0x54
 80074e4:	f7f8 ff98 	bl	8000418 <__aeabi_i2d>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f0:	f7f8 fe44 	bl	800017c <__aeabi_dsub>
 80074f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074f6:	4606      	mov	r6, r0
 80074f8:	3330      	adds	r3, #48	; 0x30
 80074fa:	f804 3b01 	strb.w	r3, [r4], #1
 80074fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007500:	460f      	mov	r7, r1
 8007502:	429c      	cmp	r4, r3
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	d124      	bne.n	8007554 <_dtoa_r+0x64c>
 800750a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800750e:	4bb0      	ldr	r3, [pc, #704]	; (80077d0 <_dtoa_r+0x8c8>)
 8007510:	f7f8 fe36 	bl	8000180 <__adddf3>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f9 fa76 	bl	8000a0c <__aeabi_dcmpgt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d163      	bne.n	80075ec <_dtoa_r+0x6e4>
 8007524:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007528:	2000      	movs	r0, #0
 800752a:	49a9      	ldr	r1, [pc, #676]	; (80077d0 <_dtoa_r+0x8c8>)
 800752c:	f7f8 fe26 	bl	800017c <__aeabi_dsub>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 fa4a 	bl	80009d0 <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f af1d 	beq.w	800737c <_dtoa_r+0x474>
 8007542:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007544:	1e7b      	subs	r3, r7, #1
 8007546:	9314      	str	r3, [sp, #80]	; 0x50
 8007548:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800754c:	2b30      	cmp	r3, #48	; 0x30
 800754e:	d0f8      	beq.n	8007542 <_dtoa_r+0x63a>
 8007550:	46c2      	mov	sl, r8
 8007552:	e03b      	b.n	80075cc <_dtoa_r+0x6c4>
 8007554:	4b9f      	ldr	r3, [pc, #636]	; (80077d4 <_dtoa_r+0x8cc>)
 8007556:	f7f8 ffc9 	bl	80004ec <__aeabi_dmul>
 800755a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800755e:	e7bc      	b.n	80074da <_dtoa_r+0x5d2>
 8007560:	9f03      	ldr	r7, [sp, #12]
 8007562:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007566:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 f8e7 	bl	8000740 <__aeabi_ddiv>
 8007572:	f7f9 fa6b 	bl	8000a4c <__aeabi_d2iz>
 8007576:	4604      	mov	r4, r0
 8007578:	f7f8 ff4e 	bl	8000418 <__aeabi_i2d>
 800757c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007580:	f7f8 ffb4 	bl	80004ec <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4640      	mov	r0, r8
 800758a:	4649      	mov	r1, r9
 800758c:	f7f8 fdf6 	bl	800017c <__aeabi_dsub>
 8007590:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007594:	f807 6b01 	strb.w	r6, [r7], #1
 8007598:	9e03      	ldr	r6, [sp, #12]
 800759a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800759e:	1bbe      	subs	r6, r7, r6
 80075a0:	45b4      	cmp	ip, r6
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	d136      	bne.n	8007616 <_dtoa_r+0x70e>
 80075a8:	f7f8 fdea 	bl	8000180 <__adddf3>
 80075ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b0:	4680      	mov	r8, r0
 80075b2:	4689      	mov	r9, r1
 80075b4:	f7f9 fa2a 	bl	8000a0c <__aeabi_dcmpgt>
 80075b8:	bb58      	cbnz	r0, 8007612 <_dtoa_r+0x70a>
 80075ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075be:	4640      	mov	r0, r8
 80075c0:	4649      	mov	r1, r9
 80075c2:	f7f9 f9fb 	bl	80009bc <__aeabi_dcmpeq>
 80075c6:	b108      	cbz	r0, 80075cc <_dtoa_r+0x6c4>
 80075c8:	07e1      	lsls	r1, r4, #31
 80075ca:	d422      	bmi.n	8007612 <_dtoa_r+0x70a>
 80075cc:	4628      	mov	r0, r5
 80075ce:	4659      	mov	r1, fp
 80075d0:	f000 faf0 	bl	8007bb4 <_Bfree>
 80075d4:	2300      	movs	r3, #0
 80075d6:	703b      	strb	r3, [r7, #0]
 80075d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075da:	f10a 0001 	add.w	r0, sl, #1
 80075de:	6018      	str	r0, [r3, #0]
 80075e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f43f acde 	beq.w	8006fa4 <_dtoa_r+0x9c>
 80075e8:	601f      	str	r7, [r3, #0]
 80075ea:	e4db      	b.n	8006fa4 <_dtoa_r+0x9c>
 80075ec:	4627      	mov	r7, r4
 80075ee:	463b      	mov	r3, r7
 80075f0:	461f      	mov	r7, r3
 80075f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075f6:	2a39      	cmp	r2, #57	; 0x39
 80075f8:	d107      	bne.n	800760a <_dtoa_r+0x702>
 80075fa:	9a03      	ldr	r2, [sp, #12]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d1f7      	bne.n	80075f0 <_dtoa_r+0x6e8>
 8007600:	2230      	movs	r2, #48	; 0x30
 8007602:	9903      	ldr	r1, [sp, #12]
 8007604:	f108 0801 	add.w	r8, r8, #1
 8007608:	700a      	strb	r2, [r1, #0]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	3201      	adds	r2, #1
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e79e      	b.n	8007550 <_dtoa_r+0x648>
 8007612:	46d0      	mov	r8, sl
 8007614:	e7eb      	b.n	80075ee <_dtoa_r+0x6e6>
 8007616:	2200      	movs	r2, #0
 8007618:	4b6e      	ldr	r3, [pc, #440]	; (80077d4 <_dtoa_r+0x8cc>)
 800761a:	f7f8 ff67 	bl	80004ec <__aeabi_dmul>
 800761e:	2200      	movs	r2, #0
 8007620:	2300      	movs	r3, #0
 8007622:	4680      	mov	r8, r0
 8007624:	4689      	mov	r9, r1
 8007626:	f7f9 f9c9 	bl	80009bc <__aeabi_dcmpeq>
 800762a:	2800      	cmp	r0, #0
 800762c:	d09b      	beq.n	8007566 <_dtoa_r+0x65e>
 800762e:	e7cd      	b.n	80075cc <_dtoa_r+0x6c4>
 8007630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007632:	2a00      	cmp	r2, #0
 8007634:	f000 80d0 	beq.w	80077d8 <_dtoa_r+0x8d0>
 8007638:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800763a:	2a01      	cmp	r2, #1
 800763c:	f300 80ae 	bgt.w	800779c <_dtoa_r+0x894>
 8007640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007642:	2a00      	cmp	r2, #0
 8007644:	f000 80a6 	beq.w	8007794 <_dtoa_r+0x88c>
 8007648:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800764c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800764e:	9f06      	ldr	r7, [sp, #24]
 8007650:	9a06      	ldr	r2, [sp, #24]
 8007652:	2101      	movs	r1, #1
 8007654:	441a      	add	r2, r3
 8007656:	9206      	str	r2, [sp, #24]
 8007658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800765a:	4628      	mov	r0, r5
 800765c:	441a      	add	r2, r3
 800765e:	9209      	str	r2, [sp, #36]	; 0x24
 8007660:	f000 fb5e 	bl	8007d20 <__i2b>
 8007664:	4606      	mov	r6, r0
 8007666:	2f00      	cmp	r7, #0
 8007668:	dd0c      	ble.n	8007684 <_dtoa_r+0x77c>
 800766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd09      	ble.n	8007684 <_dtoa_r+0x77c>
 8007670:	42bb      	cmp	r3, r7
 8007672:	bfa8      	it	ge
 8007674:	463b      	movge	r3, r7
 8007676:	9a06      	ldr	r2, [sp, #24]
 8007678:	1aff      	subs	r7, r7, r3
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	9206      	str	r2, [sp, #24]
 800767e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007686:	b1f3      	cbz	r3, 80076c6 <_dtoa_r+0x7be>
 8007688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80a8 	beq.w	80077e0 <_dtoa_r+0x8d8>
 8007690:	2c00      	cmp	r4, #0
 8007692:	dd10      	ble.n	80076b6 <_dtoa_r+0x7ae>
 8007694:	4631      	mov	r1, r6
 8007696:	4622      	mov	r2, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 fbff 	bl	8007e9c <__pow5mult>
 800769e:	465a      	mov	r2, fp
 80076a0:	4601      	mov	r1, r0
 80076a2:	4606      	mov	r6, r0
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 fb51 	bl	8007d4c <__multiply>
 80076aa:	4680      	mov	r8, r0
 80076ac:	4659      	mov	r1, fp
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fa80 	bl	8007bb4 <_Bfree>
 80076b4:	46c3      	mov	fp, r8
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	1b1a      	subs	r2, r3, r4
 80076ba:	d004      	beq.n	80076c6 <_dtoa_r+0x7be>
 80076bc:	4659      	mov	r1, fp
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 fbec 	bl	8007e9c <__pow5mult>
 80076c4:	4683      	mov	fp, r0
 80076c6:	2101      	movs	r1, #1
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 fb29 	bl	8007d20 <__i2b>
 80076ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d0:	4604      	mov	r4, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f340 8086 	ble.w	80077e4 <_dtoa_r+0x8dc>
 80076d8:	461a      	mov	r2, r3
 80076da:	4601      	mov	r1, r0
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fbdd 	bl	8007e9c <__pow5mult>
 80076e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076e4:	4604      	mov	r4, r0
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	dd7f      	ble.n	80077ea <_dtoa_r+0x8e2>
 80076ea:	f04f 0800 	mov.w	r8, #0
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076f4:	6918      	ldr	r0, [r3, #16]
 80076f6:	f000 fac5 	bl	8007c84 <__hi0bits>
 80076fa:	f1c0 0020 	rsb	r0, r0, #32
 80076fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007700:	4418      	add	r0, r3
 8007702:	f010 001f 	ands.w	r0, r0, #31
 8007706:	f000 8092 	beq.w	800782e <_dtoa_r+0x926>
 800770a:	f1c0 0320 	rsb	r3, r0, #32
 800770e:	2b04      	cmp	r3, #4
 8007710:	f340 808a 	ble.w	8007828 <_dtoa_r+0x920>
 8007714:	f1c0 001c 	rsb	r0, r0, #28
 8007718:	9b06      	ldr	r3, [sp, #24]
 800771a:	4407      	add	r7, r0
 800771c:	4403      	add	r3, r0
 800771e:	9306      	str	r3, [sp, #24]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	4403      	add	r3, r0
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	9b06      	ldr	r3, [sp, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	dd05      	ble.n	8007738 <_dtoa_r+0x830>
 800772c:	4659      	mov	r1, fp
 800772e:	461a      	mov	r2, r3
 8007730:	4628      	mov	r0, r5
 8007732:	f000 fc0d 	bl	8007f50 <__lshift>
 8007736:	4683      	mov	fp, r0
 8007738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	dd05      	ble.n	800774a <_dtoa_r+0x842>
 800773e:	4621      	mov	r1, r4
 8007740:	461a      	mov	r2, r3
 8007742:	4628      	mov	r0, r5
 8007744:	f000 fc04 	bl	8007f50 <__lshift>
 8007748:	4604      	mov	r4, r0
 800774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d070      	beq.n	8007832 <_dtoa_r+0x92a>
 8007750:	4621      	mov	r1, r4
 8007752:	4658      	mov	r0, fp
 8007754:	f000 fc6c 	bl	8008030 <__mcmp>
 8007758:	2800      	cmp	r0, #0
 800775a:	da6a      	bge.n	8007832 <_dtoa_r+0x92a>
 800775c:	2300      	movs	r3, #0
 800775e:	4659      	mov	r1, fp
 8007760:	220a      	movs	r2, #10
 8007762:	4628      	mov	r0, r5
 8007764:	f000 fa48 	bl	8007bf8 <__multadd>
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	4683      	mov	fp, r0
 800776c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8194 	beq.w	8007a9e <_dtoa_r+0xb96>
 8007776:	4631      	mov	r1, r6
 8007778:	2300      	movs	r3, #0
 800777a:	220a      	movs	r2, #10
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fa3b 	bl	8007bf8 <__multadd>
 8007782:	f1b9 0f00 	cmp.w	r9, #0
 8007786:	4606      	mov	r6, r0
 8007788:	f300 8093 	bgt.w	80078b2 <_dtoa_r+0x9aa>
 800778c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800778e:	2b02      	cmp	r3, #2
 8007790:	dc57      	bgt.n	8007842 <_dtoa_r+0x93a>
 8007792:	e08e      	b.n	80078b2 <_dtoa_r+0x9aa>
 8007794:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800779a:	e757      	b.n	800764c <_dtoa_r+0x744>
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	1e5c      	subs	r4, r3, #1
 80077a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	bfb7      	itett	lt
 80077a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077a8:	1b1c      	subge	r4, r3, r4
 80077aa:	1ae2      	sublt	r2, r4, r3
 80077ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80077ae:	bfbe      	ittt	lt
 80077b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80077b2:	189b      	addlt	r3, r3, r2
 80077b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80077b6:	9b08      	ldr	r3, [sp, #32]
 80077b8:	bfb8      	it	lt
 80077ba:	2400      	movlt	r4, #0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfbb      	ittet	lt
 80077c0:	9b06      	ldrlt	r3, [sp, #24]
 80077c2:	9a08      	ldrlt	r2, [sp, #32]
 80077c4:	9f06      	ldrge	r7, [sp, #24]
 80077c6:	1a9f      	sublt	r7, r3, r2
 80077c8:	bfac      	ite	ge
 80077ca:	9b08      	ldrge	r3, [sp, #32]
 80077cc:	2300      	movlt	r3, #0
 80077ce:	e73f      	b.n	8007650 <_dtoa_r+0x748>
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	40240000 	.word	0x40240000
 80077d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077da:	9f06      	ldr	r7, [sp, #24]
 80077dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077de:	e742      	b.n	8007666 <_dtoa_r+0x75e>
 80077e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e2:	e76b      	b.n	80076bc <_dtoa_r+0x7b4>
 80077e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	dc19      	bgt.n	800781e <_dtoa_r+0x916>
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	b9bb      	cbnz	r3, 800781e <_dtoa_r+0x916>
 80077ee:	9b05      	ldr	r3, [sp, #20]
 80077f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f4:	b99b      	cbnz	r3, 800781e <_dtoa_r+0x916>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077fc:	0d1b      	lsrs	r3, r3, #20
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	b183      	cbz	r3, 8007824 <_dtoa_r+0x91c>
 8007802:	f04f 0801 	mov.w	r8, #1
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	3301      	adds	r3, #1
 800780a:	9306      	str	r3, [sp, #24]
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	3301      	adds	r3, #1
 8007810:	9309      	str	r3, [sp, #36]	; 0x24
 8007812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	f47f af6a 	bne.w	80076ee <_dtoa_r+0x7e6>
 800781a:	2001      	movs	r0, #1
 800781c:	e76f      	b.n	80076fe <_dtoa_r+0x7f6>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	e7f6      	b.n	8007812 <_dtoa_r+0x90a>
 8007824:	4698      	mov	r8, r3
 8007826:	e7f4      	b.n	8007812 <_dtoa_r+0x90a>
 8007828:	f43f af7d 	beq.w	8007726 <_dtoa_r+0x81e>
 800782c:	4618      	mov	r0, r3
 800782e:	301c      	adds	r0, #28
 8007830:	e772      	b.n	8007718 <_dtoa_r+0x810>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dc36      	bgt.n	80078a6 <_dtoa_r+0x99e>
 8007838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800783a:	2b02      	cmp	r3, #2
 800783c:	dd33      	ble.n	80078a6 <_dtoa_r+0x99e>
 800783e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007842:	f1b9 0f00 	cmp.w	r9, #0
 8007846:	d10d      	bne.n	8007864 <_dtoa_r+0x95c>
 8007848:	4621      	mov	r1, r4
 800784a:	464b      	mov	r3, r9
 800784c:	2205      	movs	r2, #5
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f9d2 	bl	8007bf8 <__multadd>
 8007854:	4601      	mov	r1, r0
 8007856:	4604      	mov	r4, r0
 8007858:	4658      	mov	r0, fp
 800785a:	f000 fbe9 	bl	8008030 <__mcmp>
 800785e:	2800      	cmp	r0, #0
 8007860:	f73f adb8 	bgt.w	80073d4 <_dtoa_r+0x4cc>
 8007864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007866:	9f03      	ldr	r7, [sp, #12]
 8007868:	ea6f 0a03 	mvn.w	sl, r3
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f99e 	bl	8007bb4 <_Bfree>
 8007878:	2e00      	cmp	r6, #0
 800787a:	f43f aea7 	beq.w	80075cc <_dtoa_r+0x6c4>
 800787e:	f1b8 0f00 	cmp.w	r8, #0
 8007882:	d005      	beq.n	8007890 <_dtoa_r+0x988>
 8007884:	45b0      	cmp	r8, r6
 8007886:	d003      	beq.n	8007890 <_dtoa_r+0x988>
 8007888:	4641      	mov	r1, r8
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f992 	bl	8007bb4 <_Bfree>
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f98e 	bl	8007bb4 <_Bfree>
 8007898:	e698      	b.n	80075cc <_dtoa_r+0x6c4>
 800789a:	2400      	movs	r4, #0
 800789c:	4626      	mov	r6, r4
 800789e:	e7e1      	b.n	8007864 <_dtoa_r+0x95c>
 80078a0:	46c2      	mov	sl, r8
 80078a2:	4626      	mov	r6, r4
 80078a4:	e596      	b.n	80073d4 <_dtoa_r+0x4cc>
 80078a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80fd 	beq.w	8007aac <_dtoa_r+0xba4>
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	dd05      	ble.n	80078c2 <_dtoa_r+0x9ba>
 80078b6:	4631      	mov	r1, r6
 80078b8:	463a      	mov	r2, r7
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 fb48 	bl	8007f50 <__lshift>
 80078c0:	4606      	mov	r6, r0
 80078c2:	f1b8 0f00 	cmp.w	r8, #0
 80078c6:	d05c      	beq.n	8007982 <_dtoa_r+0xa7a>
 80078c8:	4628      	mov	r0, r5
 80078ca:	6871      	ldr	r1, [r6, #4]
 80078cc:	f000 f932 	bl	8007b34 <_Balloc>
 80078d0:	4607      	mov	r7, r0
 80078d2:	b928      	cbnz	r0, 80078e0 <_dtoa_r+0x9d8>
 80078d4:	4602      	mov	r2, r0
 80078d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078da:	4b7f      	ldr	r3, [pc, #508]	; (8007ad8 <_dtoa_r+0xbd0>)
 80078dc:	f7ff bb28 	b.w	8006f30 <_dtoa_r+0x28>
 80078e0:	6932      	ldr	r2, [r6, #16]
 80078e2:	f106 010c 	add.w	r1, r6, #12
 80078e6:	3202      	adds	r2, #2
 80078e8:	0092      	lsls	r2, r2, #2
 80078ea:	300c      	adds	r0, #12
 80078ec:	f000 f914 	bl	8007b18 <memcpy>
 80078f0:	2201      	movs	r2, #1
 80078f2:	4639      	mov	r1, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 fb2b 	bl	8007f50 <__lshift>
 80078fa:	46b0      	mov	r8, r6
 80078fc:	4606      	mov	r6, r0
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	9308      	str	r3, [sp, #32]
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	444b      	add	r3, r9
 8007908:	930a      	str	r3, [sp, #40]	; 0x28
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	9309      	str	r3, [sp, #36]	; 0x24
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	4621      	mov	r1, r4
 8007916:	3b01      	subs	r3, #1
 8007918:	4658      	mov	r0, fp
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	f7ff fa68 	bl	8006df0 <quorem>
 8007920:	4603      	mov	r3, r0
 8007922:	4641      	mov	r1, r8
 8007924:	3330      	adds	r3, #48	; 0x30
 8007926:	9006      	str	r0, [sp, #24]
 8007928:	4658      	mov	r0, fp
 800792a:	930b      	str	r3, [sp, #44]	; 0x2c
 800792c:	f000 fb80 	bl	8008030 <__mcmp>
 8007930:	4632      	mov	r2, r6
 8007932:	4681      	mov	r9, r0
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fb96 	bl	8008068 <__mdiff>
 800793c:	68c2      	ldr	r2, [r0, #12]
 800793e:	4607      	mov	r7, r0
 8007940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007942:	bb02      	cbnz	r2, 8007986 <_dtoa_r+0xa7e>
 8007944:	4601      	mov	r1, r0
 8007946:	4658      	mov	r0, fp
 8007948:	f000 fb72 	bl	8008030 <__mcmp>
 800794c:	4602      	mov	r2, r0
 800794e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007950:	4639      	mov	r1, r7
 8007952:	4628      	mov	r0, r5
 8007954:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007958:	f000 f92c 	bl	8007bb4 <_Bfree>
 800795c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007960:	9f08      	ldr	r7, [sp, #32]
 8007962:	ea43 0102 	orr.w	r1, r3, r2
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	430b      	orrs	r3, r1
 800796a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800796c:	d10d      	bne.n	800798a <_dtoa_r+0xa82>
 800796e:	2b39      	cmp	r3, #57	; 0x39
 8007970:	d029      	beq.n	80079c6 <_dtoa_r+0xabe>
 8007972:	f1b9 0f00 	cmp.w	r9, #0
 8007976:	dd01      	ble.n	800797c <_dtoa_r+0xa74>
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	3331      	adds	r3, #49	; 0x31
 800797c:	9a04      	ldr	r2, [sp, #16]
 800797e:	7013      	strb	r3, [r2, #0]
 8007980:	e776      	b.n	8007870 <_dtoa_r+0x968>
 8007982:	4630      	mov	r0, r6
 8007984:	e7b9      	b.n	80078fa <_dtoa_r+0x9f2>
 8007986:	2201      	movs	r2, #1
 8007988:	e7e2      	b.n	8007950 <_dtoa_r+0xa48>
 800798a:	f1b9 0f00 	cmp.w	r9, #0
 800798e:	db06      	blt.n	800799e <_dtoa_r+0xa96>
 8007990:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007992:	ea41 0909 	orr.w	r9, r1, r9
 8007996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007998:	ea59 0101 	orrs.w	r1, r9, r1
 800799c:	d120      	bne.n	80079e0 <_dtoa_r+0xad8>
 800799e:	2a00      	cmp	r2, #0
 80079a0:	ddec      	ble.n	800797c <_dtoa_r+0xa74>
 80079a2:	4659      	mov	r1, fp
 80079a4:	2201      	movs	r2, #1
 80079a6:	4628      	mov	r0, r5
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	f000 fad1 	bl	8007f50 <__lshift>
 80079ae:	4621      	mov	r1, r4
 80079b0:	4683      	mov	fp, r0
 80079b2:	f000 fb3d 	bl	8008030 <__mcmp>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	dc02      	bgt.n	80079c2 <_dtoa_r+0xaba>
 80079bc:	d1de      	bne.n	800797c <_dtoa_r+0xa74>
 80079be:	07da      	lsls	r2, r3, #31
 80079c0:	d5dc      	bpl.n	800797c <_dtoa_r+0xa74>
 80079c2:	2b39      	cmp	r3, #57	; 0x39
 80079c4:	d1d8      	bne.n	8007978 <_dtoa_r+0xa70>
 80079c6:	2339      	movs	r3, #57	; 0x39
 80079c8:	9a04      	ldr	r2, [sp, #16]
 80079ca:	7013      	strb	r3, [r2, #0]
 80079cc:	463b      	mov	r3, r7
 80079ce:	461f      	mov	r7, r3
 80079d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	2a39      	cmp	r2, #57	; 0x39
 80079d8:	d050      	beq.n	8007a7c <_dtoa_r+0xb74>
 80079da:	3201      	adds	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e747      	b.n	8007870 <_dtoa_r+0x968>
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	dd03      	ble.n	80079ec <_dtoa_r+0xae4>
 80079e4:	2b39      	cmp	r3, #57	; 0x39
 80079e6:	d0ee      	beq.n	80079c6 <_dtoa_r+0xabe>
 80079e8:	3301      	adds	r3, #1
 80079ea:	e7c7      	b.n	800797c <_dtoa_r+0xa74>
 80079ec:	9a08      	ldr	r2, [sp, #32]
 80079ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079f4:	428a      	cmp	r2, r1
 80079f6:	d02a      	beq.n	8007a4e <_dtoa_r+0xb46>
 80079f8:	4659      	mov	r1, fp
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 f8fa 	bl	8007bf8 <__multadd>
 8007a04:	45b0      	cmp	r8, r6
 8007a06:	4683      	mov	fp, r0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	f04f 020a 	mov.w	r2, #10
 8007a10:	4641      	mov	r1, r8
 8007a12:	4628      	mov	r0, r5
 8007a14:	d107      	bne.n	8007a26 <_dtoa_r+0xb1e>
 8007a16:	f000 f8ef 	bl	8007bf8 <__multadd>
 8007a1a:	4680      	mov	r8, r0
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	3301      	adds	r3, #1
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	e775      	b.n	8007912 <_dtoa_r+0xa0a>
 8007a26:	f000 f8e7 	bl	8007bf8 <__multadd>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	220a      	movs	r2, #10
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f8e0 	bl	8007bf8 <__multadd>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	e7f0      	b.n	8007a1e <_dtoa_r+0xb16>
 8007a3c:	f1b9 0f00 	cmp.w	r9, #0
 8007a40:	bfcc      	ite	gt
 8007a42:	464f      	movgt	r7, r9
 8007a44:	2701      	movle	r7, #1
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	9a03      	ldr	r2, [sp, #12]
 8007a4c:	4417      	add	r7, r2
 8007a4e:	4659      	mov	r1, fp
 8007a50:	2201      	movs	r2, #1
 8007a52:	4628      	mov	r0, r5
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	f000 fa7b 	bl	8007f50 <__lshift>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4683      	mov	fp, r0
 8007a5e:	f000 fae7 	bl	8008030 <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	dcb2      	bgt.n	80079cc <_dtoa_r+0xac4>
 8007a66:	d102      	bne.n	8007a6e <_dtoa_r+0xb66>
 8007a68:	9b08      	ldr	r3, [sp, #32]
 8007a6a:	07db      	lsls	r3, r3, #31
 8007a6c:	d4ae      	bmi.n	80079cc <_dtoa_r+0xac4>
 8007a6e:	463b      	mov	r3, r7
 8007a70:	461f      	mov	r7, r3
 8007a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a76:	2a30      	cmp	r2, #48	; 0x30
 8007a78:	d0fa      	beq.n	8007a70 <_dtoa_r+0xb68>
 8007a7a:	e6f9      	b.n	8007870 <_dtoa_r+0x968>
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d1a5      	bne.n	80079ce <_dtoa_r+0xac6>
 8007a82:	2331      	movs	r3, #49	; 0x31
 8007a84:	f10a 0a01 	add.w	sl, sl, #1
 8007a88:	e779      	b.n	800797e <_dtoa_r+0xa76>
 8007a8a:	4b14      	ldr	r3, [pc, #80]	; (8007adc <_dtoa_r+0xbd4>)
 8007a8c:	f7ff baa8 	b.w	8006fe0 <_dtoa_r+0xd8>
 8007a90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f47f aa81 	bne.w	8006f9a <_dtoa_r+0x92>
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <_dtoa_r+0xbd8>)
 8007a9a:	f7ff baa1 	b.w	8006fe0 <_dtoa_r+0xd8>
 8007a9e:	f1b9 0f00 	cmp.w	r9, #0
 8007aa2:	dc03      	bgt.n	8007aac <_dtoa_r+0xba4>
 8007aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	f73f aecb 	bgt.w	8007842 <_dtoa_r+0x93a>
 8007aac:	9f03      	ldr	r7, [sp, #12]
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4658      	mov	r0, fp
 8007ab2:	f7ff f99d 	bl	8006df0 <quorem>
 8007ab6:	9a03      	ldr	r2, [sp, #12]
 8007ab8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007abc:	f807 3b01 	strb.w	r3, [r7], #1
 8007ac0:	1aba      	subs	r2, r7, r2
 8007ac2:	4591      	cmp	r9, r2
 8007ac4:	ddba      	ble.n	8007a3c <_dtoa_r+0xb34>
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 f893 	bl	8007bf8 <__multadd>
 8007ad2:	4683      	mov	fp, r0
 8007ad4:	e7eb      	b.n	8007aae <_dtoa_r+0xba6>
 8007ad6:	bf00      	nop
 8007ad8:	0800944f 	.word	0x0800944f
 8007adc:	080093ac 	.word	0x080093ac
 8007ae0:	080093d0 	.word	0x080093d0

08007ae4 <_localeconv_r>:
 8007ae4:	4800      	ldr	r0, [pc, #0]	; (8007ae8 <_localeconv_r+0x4>)
 8007ae6:	4770      	bx	lr
 8007ae8:	20000160 	.word	0x20000160

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 bc1d 	b.w	8008330 <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	2000000c 	.word	0x2000000c

08007afc <memchr>:
 8007afc:	4603      	mov	r3, r0
 8007afe:	b510      	push	{r4, lr}
 8007b00:	b2c9      	uxtb	r1, r1
 8007b02:	4402      	add	r2, r0
 8007b04:	4293      	cmp	r3, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	d101      	bne.n	8007b0e <memchr+0x12>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e003      	b.n	8007b16 <memchr+0x1a>
 8007b0e:	7804      	ldrb	r4, [r0, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	428c      	cmp	r4, r1
 8007b14:	d1f6      	bne.n	8007b04 <memchr+0x8>
 8007b16:	bd10      	pop	{r4, pc}

08007b18 <memcpy>:
 8007b18:	440a      	add	r2, r1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b20:	d100      	bne.n	8007b24 <memcpy+0xc>
 8007b22:	4770      	bx	lr
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b30:	d1f9      	bne.n	8007b26 <memcpy+0xe>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <_Balloc>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	b976      	cbnz	r6, 8007b5c <_Balloc+0x28>
 8007b3e:	2010      	movs	r0, #16
 8007b40:	f7ff ffd4 	bl	8007aec <malloc>
 8007b44:	4602      	mov	r2, r0
 8007b46:	6260      	str	r0, [r4, #36]	; 0x24
 8007b48:	b920      	cbnz	r0, 8007b54 <_Balloc+0x20>
 8007b4a:	2166      	movs	r1, #102	; 0x66
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <_Balloc+0x78>)
 8007b4e:	4818      	ldr	r0, [pc, #96]	; (8007bb0 <_Balloc+0x7c>)
 8007b50:	f000 fdce 	bl	80086f0 <__assert_func>
 8007b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b58:	6006      	str	r6, [r0, #0]
 8007b5a:	60c6      	str	r6, [r0, #12]
 8007b5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b5e:	68f3      	ldr	r3, [r6, #12]
 8007b60:	b183      	cbz	r3, 8007b84 <_Balloc+0x50>
 8007b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b6a:	b9b8      	cbnz	r0, 8007b9c <_Balloc+0x68>
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b72:	1d72      	adds	r2, r6, #5
 8007b74:	4620      	mov	r0, r4
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	f000 fb5e 	bl	8008238 <_calloc_r>
 8007b7c:	b160      	cbz	r0, 8007b98 <_Balloc+0x64>
 8007b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b82:	e00e      	b.n	8007ba2 <_Balloc+0x6e>
 8007b84:	2221      	movs	r2, #33	; 0x21
 8007b86:	2104      	movs	r1, #4
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fb55 	bl	8008238 <_calloc_r>
 8007b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b90:	60f0      	str	r0, [r6, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e4      	bne.n	8007b62 <_Balloc+0x2e>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	6802      	ldr	r2, [r0, #0]
 8007b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba8:	e7f7      	b.n	8007b9a <_Balloc+0x66>
 8007baa:	bf00      	nop
 8007bac:	080093dd 	.word	0x080093dd
 8007bb0:	08009460 	.word	0x08009460

08007bb4 <_Bfree>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	b976      	cbnz	r6, 8007bdc <_Bfree+0x28>
 8007bbe:	2010      	movs	r0, #16
 8007bc0:	f7ff ff94 	bl	8007aec <malloc>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007bc8:	b920      	cbnz	r0, 8007bd4 <_Bfree+0x20>
 8007bca:	218a      	movs	r1, #138	; 0x8a
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <_Bfree+0x3c>)
 8007bce:	4809      	ldr	r0, [pc, #36]	; (8007bf4 <_Bfree+0x40>)
 8007bd0:	f000 fd8e 	bl	80086f0 <__assert_func>
 8007bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd8:	6006      	str	r6, [r0, #0]
 8007bda:	60c6      	str	r6, [r0, #12]
 8007bdc:	b13c      	cbz	r4, 8007bee <_Bfree+0x3a>
 8007bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007be8:	6021      	str	r1, [r4, #0]
 8007bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	080093dd 	.word	0x080093dd
 8007bf4:	08009460 	.word	0x08009460

08007bf8 <__multadd>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	461e      	mov	r6, r3
 8007c02:	2000      	movs	r0, #0
 8007c04:	690d      	ldr	r5, [r1, #16]
 8007c06:	f101 0c14 	add.w	ip, r1, #20
 8007c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c0e:	3001      	adds	r0, #1
 8007c10:	b299      	uxth	r1, r3
 8007c12:	fb02 6101 	mla	r1, r2, r1, r6
 8007c16:	0c1e      	lsrs	r6, r3, #16
 8007c18:	0c0b      	lsrs	r3, r1, #16
 8007c1a:	fb02 3306 	mla	r3, r2, r6, r3
 8007c1e:	b289      	uxth	r1, r1
 8007c20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c24:	4285      	cmp	r5, r0
 8007c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c2e:	dcec      	bgt.n	8007c0a <__multadd+0x12>
 8007c30:	b30e      	cbz	r6, 8007c76 <__multadd+0x7e>
 8007c32:	68a3      	ldr	r3, [r4, #8]
 8007c34:	42ab      	cmp	r3, r5
 8007c36:	dc19      	bgt.n	8007c6c <__multadd+0x74>
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	3101      	adds	r1, #1
 8007c3e:	f7ff ff79 	bl	8007b34 <_Balloc>
 8007c42:	4680      	mov	r8, r0
 8007c44:	b928      	cbnz	r0, 8007c52 <__multadd+0x5a>
 8007c46:	4602      	mov	r2, r0
 8007c48:	21b5      	movs	r1, #181	; 0xb5
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <__multadd+0x84>)
 8007c4c:	480c      	ldr	r0, [pc, #48]	; (8007c80 <__multadd+0x88>)
 8007c4e:	f000 fd4f 	bl	80086f0 <__assert_func>
 8007c52:	6922      	ldr	r2, [r4, #16]
 8007c54:	f104 010c 	add.w	r1, r4, #12
 8007c58:	3202      	adds	r2, #2
 8007c5a:	0092      	lsls	r2, r2, #2
 8007c5c:	300c      	adds	r0, #12
 8007c5e:	f7ff ff5b 	bl	8007b18 <memcpy>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff ffa5 	bl	8007bb4 <_Bfree>
 8007c6a:	4644      	mov	r4, r8
 8007c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c70:	3501      	adds	r5, #1
 8007c72:	615e      	str	r6, [r3, #20]
 8007c74:	6125      	str	r5, [r4, #16]
 8007c76:	4620      	mov	r0, r4
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	0800944f 	.word	0x0800944f
 8007c80:	08009460 	.word	0x08009460

08007c84 <__hi0bits>:
 8007c84:	0c02      	lsrs	r2, r0, #16
 8007c86:	0412      	lsls	r2, r2, #16
 8007c88:	4603      	mov	r3, r0
 8007c8a:	b9ca      	cbnz	r2, 8007cc0 <__hi0bits+0x3c>
 8007c8c:	0403      	lsls	r3, r0, #16
 8007c8e:	2010      	movs	r0, #16
 8007c90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c94:	bf04      	itt	eq
 8007c96:	021b      	lsleq	r3, r3, #8
 8007c98:	3008      	addeq	r0, #8
 8007c9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c9e:	bf04      	itt	eq
 8007ca0:	011b      	lsleq	r3, r3, #4
 8007ca2:	3004      	addeq	r0, #4
 8007ca4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ca8:	bf04      	itt	eq
 8007caa:	009b      	lsleq	r3, r3, #2
 8007cac:	3002      	addeq	r0, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	db05      	blt.n	8007cbe <__hi0bits+0x3a>
 8007cb2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007cb6:	f100 0001 	add.w	r0, r0, #1
 8007cba:	bf08      	it	eq
 8007cbc:	2020      	moveq	r0, #32
 8007cbe:	4770      	bx	lr
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7e5      	b.n	8007c90 <__hi0bits+0xc>

08007cc4 <__lo0bits>:
 8007cc4:	6803      	ldr	r3, [r0, #0]
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f013 0007 	ands.w	r0, r3, #7
 8007ccc:	d00b      	beq.n	8007ce6 <__lo0bits+0x22>
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d421      	bmi.n	8007d16 <__lo0bits+0x52>
 8007cd2:	0798      	lsls	r0, r3, #30
 8007cd4:	bf49      	itett	mi
 8007cd6:	085b      	lsrmi	r3, r3, #1
 8007cd8:	089b      	lsrpl	r3, r3, #2
 8007cda:	2001      	movmi	r0, #1
 8007cdc:	6013      	strmi	r3, [r2, #0]
 8007cde:	bf5c      	itt	pl
 8007ce0:	2002      	movpl	r0, #2
 8007ce2:	6013      	strpl	r3, [r2, #0]
 8007ce4:	4770      	bx	lr
 8007ce6:	b299      	uxth	r1, r3
 8007ce8:	b909      	cbnz	r1, 8007cee <__lo0bits+0x2a>
 8007cea:	2010      	movs	r0, #16
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	b2d9      	uxtb	r1, r3
 8007cf0:	b909      	cbnz	r1, 8007cf6 <__lo0bits+0x32>
 8007cf2:	3008      	adds	r0, #8
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	0719      	lsls	r1, r3, #28
 8007cf8:	bf04      	itt	eq
 8007cfa:	091b      	lsreq	r3, r3, #4
 8007cfc:	3004      	addeq	r0, #4
 8007cfe:	0799      	lsls	r1, r3, #30
 8007d00:	bf04      	itt	eq
 8007d02:	089b      	lsreq	r3, r3, #2
 8007d04:	3002      	addeq	r0, #2
 8007d06:	07d9      	lsls	r1, r3, #31
 8007d08:	d403      	bmi.n	8007d12 <__lo0bits+0x4e>
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	f100 0001 	add.w	r0, r0, #1
 8007d10:	d003      	beq.n	8007d1a <__lo0bits+0x56>
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	4770      	bx	lr
 8007d16:	2000      	movs	r0, #0
 8007d18:	4770      	bx	lr
 8007d1a:	2020      	movs	r0, #32
 8007d1c:	4770      	bx	lr
	...

08007d20 <__i2b>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	2101      	movs	r1, #1
 8007d26:	f7ff ff05 	bl	8007b34 <_Balloc>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__i2b+0x1a>
 8007d2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d32:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <__i2b+0x24>)
 8007d34:	4804      	ldr	r0, [pc, #16]	; (8007d48 <__i2b+0x28>)
 8007d36:	f000 fcdb 	bl	80086f0 <__assert_func>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	6144      	str	r4, [r0, #20]
 8007d3e:	6103      	str	r3, [r0, #16]
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	0800944f 	.word	0x0800944f
 8007d48:	08009460 	.word	0x08009460

08007d4c <__multiply>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4691      	mov	r9, r2
 8007d52:	690a      	ldr	r2, [r1, #16]
 8007d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d58:	460c      	mov	r4, r1
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	bfbe      	ittt	lt
 8007d5e:	460b      	movlt	r3, r1
 8007d60:	464c      	movlt	r4, r9
 8007d62:	4699      	movlt	r9, r3
 8007d64:	6927      	ldr	r7, [r4, #16]
 8007d66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	eb07 060a 	add.w	r6, r7, sl
 8007d72:	42b3      	cmp	r3, r6
 8007d74:	b085      	sub	sp, #20
 8007d76:	bfb8      	it	lt
 8007d78:	3101      	addlt	r1, #1
 8007d7a:	f7ff fedb 	bl	8007b34 <_Balloc>
 8007d7e:	b930      	cbnz	r0, 8007d8e <__multiply+0x42>
 8007d80:	4602      	mov	r2, r0
 8007d82:	f240 115d 	movw	r1, #349	; 0x15d
 8007d86:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <__multiply+0x148>)
 8007d88:	4843      	ldr	r0, [pc, #268]	; (8007e98 <__multiply+0x14c>)
 8007d8a:	f000 fcb1 	bl	80086f0 <__assert_func>
 8007d8e:	f100 0514 	add.w	r5, r0, #20
 8007d92:	462b      	mov	r3, r5
 8007d94:	2200      	movs	r2, #0
 8007d96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d9a:	4543      	cmp	r3, r8
 8007d9c:	d321      	bcc.n	8007de2 <__multiply+0x96>
 8007d9e:	f104 0314 	add.w	r3, r4, #20
 8007da2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007da6:	f109 0314 	add.w	r3, r9, #20
 8007daa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007dae:	9202      	str	r2, [sp, #8]
 8007db0:	1b3a      	subs	r2, r7, r4
 8007db2:	3a15      	subs	r2, #21
 8007db4:	f022 0203 	bic.w	r2, r2, #3
 8007db8:	3204      	adds	r2, #4
 8007dba:	f104 0115 	add.w	r1, r4, #21
 8007dbe:	428f      	cmp	r7, r1
 8007dc0:	bf38      	it	cc
 8007dc2:	2204      	movcc	r2, #4
 8007dc4:	9201      	str	r2, [sp, #4]
 8007dc6:	9a02      	ldr	r2, [sp, #8]
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d80c      	bhi.n	8007de8 <__multiply+0x9c>
 8007dce:	2e00      	cmp	r6, #0
 8007dd0:	dd03      	ble.n	8007dda <__multiply+0x8e>
 8007dd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d059      	beq.n	8007e8e <__multiply+0x142>
 8007dda:	6106      	str	r6, [r0, #16]
 8007ddc:	b005      	add	sp, #20
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	f843 2b04 	str.w	r2, [r3], #4
 8007de6:	e7d8      	b.n	8007d9a <__multiply+0x4e>
 8007de8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dec:	f1ba 0f00 	cmp.w	sl, #0
 8007df0:	d023      	beq.n	8007e3a <__multiply+0xee>
 8007df2:	46a9      	mov	r9, r5
 8007df4:	f04f 0c00 	mov.w	ip, #0
 8007df8:	f104 0e14 	add.w	lr, r4, #20
 8007dfc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e00:	f8d9 1000 	ldr.w	r1, [r9]
 8007e04:	fa1f fb82 	uxth.w	fp, r2
 8007e08:	b289      	uxth	r1, r1
 8007e0a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e0e:	4461      	add	r1, ip
 8007e10:	f8d9 c000 	ldr.w	ip, [r9]
 8007e14:	0c12      	lsrs	r2, r2, #16
 8007e16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007e1a:	fb0a c202 	mla	r2, sl, r2, ip
 8007e1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e22:	b289      	uxth	r1, r1
 8007e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e28:	4577      	cmp	r7, lr
 8007e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e2e:	f849 1b04 	str.w	r1, [r9], #4
 8007e32:	d8e3      	bhi.n	8007dfc <__multiply+0xb0>
 8007e34:	9a01      	ldr	r2, [sp, #4]
 8007e36:	f845 c002 	str.w	ip, [r5, r2]
 8007e3a:	9a03      	ldr	r2, [sp, #12]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e42:	f1b9 0f00 	cmp.w	r9, #0
 8007e46:	d020      	beq.n	8007e8a <__multiply+0x13e>
 8007e48:	46ae      	mov	lr, r5
 8007e4a:	f04f 0a00 	mov.w	sl, #0
 8007e4e:	6829      	ldr	r1, [r5, #0]
 8007e50:	f104 0c14 	add.w	ip, r4, #20
 8007e54:	f8bc b000 	ldrh.w	fp, [ip]
 8007e58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e5c:	b289      	uxth	r1, r1
 8007e5e:	fb09 220b 	mla	r2, r9, fp, r2
 8007e62:	4492      	add	sl, r2
 8007e64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e68:	f84e 1b04 	str.w	r1, [lr], #4
 8007e6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e70:	f8be 1000 	ldrh.w	r1, [lr]
 8007e74:	0c12      	lsrs	r2, r2, #16
 8007e76:	fb09 1102 	mla	r1, r9, r2, r1
 8007e7a:	4567      	cmp	r7, ip
 8007e7c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e84:	d8e6      	bhi.n	8007e54 <__multiply+0x108>
 8007e86:	9a01      	ldr	r2, [sp, #4]
 8007e88:	50a9      	str	r1, [r5, r2]
 8007e8a:	3504      	adds	r5, #4
 8007e8c:	e79b      	b.n	8007dc6 <__multiply+0x7a>
 8007e8e:	3e01      	subs	r6, #1
 8007e90:	e79d      	b.n	8007dce <__multiply+0x82>
 8007e92:	bf00      	nop
 8007e94:	0800944f 	.word	0x0800944f
 8007e98:	08009460 	.word	0x08009460

08007e9c <__pow5mult>:
 8007e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	4615      	mov	r5, r2
 8007ea2:	f012 0203 	ands.w	r2, r2, #3
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460f      	mov	r7, r1
 8007eaa:	d007      	beq.n	8007ebc <__pow5mult+0x20>
 8007eac:	4c25      	ldr	r4, [pc, #148]	; (8007f44 <__pow5mult+0xa8>)
 8007eae:	3a01      	subs	r2, #1
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eb6:	f7ff fe9f 	bl	8007bf8 <__multadd>
 8007eba:	4607      	mov	r7, r0
 8007ebc:	10ad      	asrs	r5, r5, #2
 8007ebe:	d03d      	beq.n	8007f3c <__pow5mult+0xa0>
 8007ec0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ec2:	b97c      	cbnz	r4, 8007ee4 <__pow5mult+0x48>
 8007ec4:	2010      	movs	r0, #16
 8007ec6:	f7ff fe11 	bl	8007aec <malloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6270      	str	r0, [r6, #36]	; 0x24
 8007ece:	b928      	cbnz	r0, 8007edc <__pow5mult+0x40>
 8007ed0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ed4:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <__pow5mult+0xac>)
 8007ed6:	481d      	ldr	r0, [pc, #116]	; (8007f4c <__pow5mult+0xb0>)
 8007ed8:	f000 fc0a 	bl	80086f0 <__assert_func>
 8007edc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ee0:	6004      	str	r4, [r0, #0]
 8007ee2:	60c4      	str	r4, [r0, #12]
 8007ee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007eec:	b94c      	cbnz	r4, 8007f02 <__pow5mult+0x66>
 8007eee:	f240 2171 	movw	r1, #625	; 0x271
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ff14 	bl	8007d20 <__i2b>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f00:	6003      	str	r3, [r0, #0]
 8007f02:	f04f 0900 	mov.w	r9, #0
 8007f06:	07eb      	lsls	r3, r5, #31
 8007f08:	d50a      	bpl.n	8007f20 <__pow5mult+0x84>
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ff1c 	bl	8007d4c <__multiply>
 8007f14:	4680      	mov	r8, r0
 8007f16:	4639      	mov	r1, r7
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff fe4b 	bl	8007bb4 <_Bfree>
 8007f1e:	4647      	mov	r7, r8
 8007f20:	106d      	asrs	r5, r5, #1
 8007f22:	d00b      	beq.n	8007f3c <__pow5mult+0xa0>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	b938      	cbnz	r0, 8007f38 <__pow5mult+0x9c>
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7ff ff0d 	bl	8007d4c <__multiply>
 8007f32:	6020      	str	r0, [r4, #0]
 8007f34:	f8c0 9000 	str.w	r9, [r0]
 8007f38:	4604      	mov	r4, r0
 8007f3a:	e7e4      	b.n	8007f06 <__pow5mult+0x6a>
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f42:	bf00      	nop
 8007f44:	080095b0 	.word	0x080095b0
 8007f48:	080093dd 	.word	0x080093dd
 8007f4c:	08009460 	.word	0x08009460

08007f50 <__lshift>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	4607      	mov	r7, r0
 8007f58:	4691      	mov	r9, r2
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	6849      	ldr	r1, [r1, #4]
 8007f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f68:	f108 0601 	add.w	r6, r8, #1
 8007f6c:	42b3      	cmp	r3, r6
 8007f6e:	db0b      	blt.n	8007f88 <__lshift+0x38>
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff fddf 	bl	8007b34 <_Balloc>
 8007f76:	4605      	mov	r5, r0
 8007f78:	b948      	cbnz	r0, 8007f8e <__lshift+0x3e>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f80:	4b29      	ldr	r3, [pc, #164]	; (8008028 <__lshift+0xd8>)
 8007f82:	482a      	ldr	r0, [pc, #168]	; (800802c <__lshift+0xdc>)
 8007f84:	f000 fbb4 	bl	80086f0 <__assert_func>
 8007f88:	3101      	adds	r1, #1
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	e7ee      	b.n	8007f6c <__lshift+0x1c>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f100 0114 	add.w	r1, r0, #20
 8007f94:	f100 0210 	add.w	r2, r0, #16
 8007f98:	4618      	mov	r0, r3
 8007f9a:	4553      	cmp	r3, sl
 8007f9c:	db37      	blt.n	800800e <__lshift+0xbe>
 8007f9e:	6920      	ldr	r0, [r4, #16]
 8007fa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa4:	f104 0314 	add.w	r3, r4, #20
 8007fa8:	f019 091f 	ands.w	r9, r9, #31
 8007fac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fb4:	d02f      	beq.n	8008016 <__lshift+0xc6>
 8007fb6:	468a      	mov	sl, r1
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	f1c9 0e20 	rsb	lr, r9, #32
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	fa02 f209 	lsl.w	r2, r2, r9
 8007fc6:	ea42 020c 	orr.w	r2, r2, ip
 8007fca:	f84a 2b04 	str.w	r2, [sl], #4
 8007fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd2:	4298      	cmp	r0, r3
 8007fd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fd8:	d8f2      	bhi.n	8007fc0 <__lshift+0x70>
 8007fda:	1b03      	subs	r3, r0, r4
 8007fdc:	3b15      	subs	r3, #21
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	f104 0215 	add.w	r2, r4, #21
 8007fe8:	4290      	cmp	r0, r2
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	f841 c003 	str.w	ip, [r1, r3]
 8007ff2:	f1bc 0f00 	cmp.w	ip, #0
 8007ff6:	d001      	beq.n	8007ffc <__lshift+0xac>
 8007ff8:	f108 0602 	add.w	r6, r8, #2
 8007ffc:	3e01      	subs	r6, #1
 8007ffe:	4638      	mov	r0, r7
 8008000:	4621      	mov	r1, r4
 8008002:	612e      	str	r6, [r5, #16]
 8008004:	f7ff fdd6 	bl	8007bb4 <_Bfree>
 8008008:	4628      	mov	r0, r5
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008012:	3301      	adds	r3, #1
 8008014:	e7c1      	b.n	8007f9a <__lshift+0x4a>
 8008016:	3904      	subs	r1, #4
 8008018:	f853 2b04 	ldr.w	r2, [r3], #4
 800801c:	4298      	cmp	r0, r3
 800801e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008022:	d8f9      	bhi.n	8008018 <__lshift+0xc8>
 8008024:	e7ea      	b.n	8007ffc <__lshift+0xac>
 8008026:	bf00      	nop
 8008028:	0800944f 	.word	0x0800944f
 800802c:	08009460 	.word	0x08009460

08008030 <__mcmp>:
 8008030:	4603      	mov	r3, r0
 8008032:	690a      	ldr	r2, [r1, #16]
 8008034:	6900      	ldr	r0, [r0, #16]
 8008036:	b530      	push	{r4, r5, lr}
 8008038:	1a80      	subs	r0, r0, r2
 800803a:	d10d      	bne.n	8008058 <__mcmp+0x28>
 800803c:	3314      	adds	r3, #20
 800803e:	3114      	adds	r1, #20
 8008040:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008044:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008048:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800804c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008050:	4295      	cmp	r5, r2
 8008052:	d002      	beq.n	800805a <__mcmp+0x2a>
 8008054:	d304      	bcc.n	8008060 <__mcmp+0x30>
 8008056:	2001      	movs	r0, #1
 8008058:	bd30      	pop	{r4, r5, pc}
 800805a:	42a3      	cmp	r3, r4
 800805c:	d3f4      	bcc.n	8008048 <__mcmp+0x18>
 800805e:	e7fb      	b.n	8008058 <__mcmp+0x28>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e7f8      	b.n	8008058 <__mcmp+0x28>
	...

08008068 <__mdiff>:
 8008068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	460d      	mov	r5, r1
 800806e:	4607      	mov	r7, r0
 8008070:	4611      	mov	r1, r2
 8008072:	4628      	mov	r0, r5
 8008074:	4614      	mov	r4, r2
 8008076:	f7ff ffdb 	bl	8008030 <__mcmp>
 800807a:	1e06      	subs	r6, r0, #0
 800807c:	d111      	bne.n	80080a2 <__mdiff+0x3a>
 800807e:	4631      	mov	r1, r6
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff fd57 	bl	8007b34 <_Balloc>
 8008086:	4602      	mov	r2, r0
 8008088:	b928      	cbnz	r0, 8008096 <__mdiff+0x2e>
 800808a:	f240 2132 	movw	r1, #562	; 0x232
 800808e:	4b3a      	ldr	r3, [pc, #232]	; (8008178 <__mdiff+0x110>)
 8008090:	483a      	ldr	r0, [pc, #232]	; (800817c <__mdiff+0x114>)
 8008092:	f000 fb2d 	bl	80086f0 <__assert_func>
 8008096:	2301      	movs	r3, #1
 8008098:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800809c:	4610      	mov	r0, r2
 800809e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	bfa4      	itt	ge
 80080a4:	4623      	movge	r3, r4
 80080a6:	462c      	movge	r4, r5
 80080a8:	4638      	mov	r0, r7
 80080aa:	6861      	ldr	r1, [r4, #4]
 80080ac:	bfa6      	itte	ge
 80080ae:	461d      	movge	r5, r3
 80080b0:	2600      	movge	r6, #0
 80080b2:	2601      	movlt	r6, #1
 80080b4:	f7ff fd3e 	bl	8007b34 <_Balloc>
 80080b8:	4602      	mov	r2, r0
 80080ba:	b918      	cbnz	r0, 80080c4 <__mdiff+0x5c>
 80080bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080c0:	4b2d      	ldr	r3, [pc, #180]	; (8008178 <__mdiff+0x110>)
 80080c2:	e7e5      	b.n	8008090 <__mdiff+0x28>
 80080c4:	f102 0814 	add.w	r8, r2, #20
 80080c8:	46c2      	mov	sl, r8
 80080ca:	f04f 0c00 	mov.w	ip, #0
 80080ce:	6927      	ldr	r7, [r4, #16]
 80080d0:	60c6      	str	r6, [r0, #12]
 80080d2:	692e      	ldr	r6, [r5, #16]
 80080d4:	f104 0014 	add.w	r0, r4, #20
 80080d8:	f105 0914 	add.w	r9, r5, #20
 80080dc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80080e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080e4:	3410      	adds	r4, #16
 80080e6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80080ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80080ee:	fa1f f18b 	uxth.w	r1, fp
 80080f2:	448c      	add	ip, r1
 80080f4:	b299      	uxth	r1, r3
 80080f6:	0c1b      	lsrs	r3, r3, #16
 80080f8:	ebac 0101 	sub.w	r1, ip, r1
 80080fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008100:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008104:	b289      	uxth	r1, r1
 8008106:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800810a:	454e      	cmp	r6, r9
 800810c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008110:	f84a 3b04 	str.w	r3, [sl], #4
 8008114:	d8e7      	bhi.n	80080e6 <__mdiff+0x7e>
 8008116:	1b73      	subs	r3, r6, r5
 8008118:	3b15      	subs	r3, #21
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	3515      	adds	r5, #21
 8008120:	3304      	adds	r3, #4
 8008122:	42ae      	cmp	r6, r5
 8008124:	bf38      	it	cc
 8008126:	2304      	movcc	r3, #4
 8008128:	4418      	add	r0, r3
 800812a:	4443      	add	r3, r8
 800812c:	461e      	mov	r6, r3
 800812e:	4605      	mov	r5, r0
 8008130:	4575      	cmp	r5, lr
 8008132:	d30e      	bcc.n	8008152 <__mdiff+0xea>
 8008134:	f10e 0103 	add.w	r1, lr, #3
 8008138:	1a09      	subs	r1, r1, r0
 800813a:	f021 0103 	bic.w	r1, r1, #3
 800813e:	3803      	subs	r0, #3
 8008140:	4586      	cmp	lr, r0
 8008142:	bf38      	it	cc
 8008144:	2100      	movcc	r1, #0
 8008146:	4419      	add	r1, r3
 8008148:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800814c:	b18b      	cbz	r3, 8008172 <__mdiff+0x10a>
 800814e:	6117      	str	r7, [r2, #16]
 8008150:	e7a4      	b.n	800809c <__mdiff+0x34>
 8008152:	f855 8b04 	ldr.w	r8, [r5], #4
 8008156:	fa1f f188 	uxth.w	r1, r8
 800815a:	4461      	add	r1, ip
 800815c:	140c      	asrs	r4, r1, #16
 800815e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008162:	b289      	uxth	r1, r1
 8008164:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008168:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800816c:	f846 1b04 	str.w	r1, [r6], #4
 8008170:	e7de      	b.n	8008130 <__mdiff+0xc8>
 8008172:	3f01      	subs	r7, #1
 8008174:	e7e8      	b.n	8008148 <__mdiff+0xe0>
 8008176:	bf00      	nop
 8008178:	0800944f 	.word	0x0800944f
 800817c:	08009460 	.word	0x08009460

08008180 <__d2b>:
 8008180:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008184:	2101      	movs	r1, #1
 8008186:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800818a:	4690      	mov	r8, r2
 800818c:	461d      	mov	r5, r3
 800818e:	f7ff fcd1 	bl	8007b34 <_Balloc>
 8008192:	4604      	mov	r4, r0
 8008194:	b930      	cbnz	r0, 80081a4 <__d2b+0x24>
 8008196:	4602      	mov	r2, r0
 8008198:	f240 310a 	movw	r1, #778	; 0x30a
 800819c:	4b24      	ldr	r3, [pc, #144]	; (8008230 <__d2b+0xb0>)
 800819e:	4825      	ldr	r0, [pc, #148]	; (8008234 <__d2b+0xb4>)
 80081a0:	f000 faa6 	bl	80086f0 <__assert_func>
 80081a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80081a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80081ac:	bb2d      	cbnz	r5, 80081fa <__d2b+0x7a>
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	f1b8 0300 	subs.w	r3, r8, #0
 80081b4:	d026      	beq.n	8008204 <__d2b+0x84>
 80081b6:	4668      	mov	r0, sp
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	f7ff fd83 	bl	8007cc4 <__lo0bits>
 80081be:	9900      	ldr	r1, [sp, #0]
 80081c0:	b1f0      	cbz	r0, 8008200 <__d2b+0x80>
 80081c2:	9a01      	ldr	r2, [sp, #4]
 80081c4:	f1c0 0320 	rsb	r3, r0, #32
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	430b      	orrs	r3, r1
 80081ce:	40c2      	lsrs	r2, r0
 80081d0:	6163      	str	r3, [r4, #20]
 80081d2:	9201      	str	r2, [sp, #4]
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf14      	ite	ne
 80081da:	2102      	movne	r1, #2
 80081dc:	2101      	moveq	r1, #1
 80081de:	61a3      	str	r3, [r4, #24]
 80081e0:	6121      	str	r1, [r4, #16]
 80081e2:	b1c5      	cbz	r5, 8008216 <__d2b+0x96>
 80081e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081e8:	4405      	add	r5, r0
 80081ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081ee:	603d      	str	r5, [r7, #0]
 80081f0:	6030      	str	r0, [r6, #0]
 80081f2:	4620      	mov	r0, r4
 80081f4:	b002      	add	sp, #8
 80081f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081fe:	e7d6      	b.n	80081ae <__d2b+0x2e>
 8008200:	6161      	str	r1, [r4, #20]
 8008202:	e7e7      	b.n	80081d4 <__d2b+0x54>
 8008204:	a801      	add	r0, sp, #4
 8008206:	f7ff fd5d 	bl	8007cc4 <__lo0bits>
 800820a:	2101      	movs	r1, #1
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	6121      	str	r1, [r4, #16]
 8008210:	6163      	str	r3, [r4, #20]
 8008212:	3020      	adds	r0, #32
 8008214:	e7e5      	b.n	80081e2 <__d2b+0x62>
 8008216:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800821a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800821e:	6038      	str	r0, [r7, #0]
 8008220:	6918      	ldr	r0, [r3, #16]
 8008222:	f7ff fd2f 	bl	8007c84 <__hi0bits>
 8008226:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800822a:	6031      	str	r1, [r6, #0]
 800822c:	e7e1      	b.n	80081f2 <__d2b+0x72>
 800822e:	bf00      	nop
 8008230:	0800944f 	.word	0x0800944f
 8008234:	08009460 	.word	0x08009460

08008238 <_calloc_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	fba1 5402 	umull	r5, r4, r1, r2
 800823e:	b934      	cbnz	r4, 800824e <_calloc_r+0x16>
 8008240:	4629      	mov	r1, r5
 8008242:	f000 f875 	bl	8008330 <_malloc_r>
 8008246:	4606      	mov	r6, r0
 8008248:	b928      	cbnz	r0, 8008256 <_calloc_r+0x1e>
 800824a:	4630      	mov	r0, r6
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	220c      	movs	r2, #12
 8008250:	2600      	movs	r6, #0
 8008252:	6002      	str	r2, [r0, #0]
 8008254:	e7f9      	b.n	800824a <_calloc_r+0x12>
 8008256:	462a      	mov	r2, r5
 8008258:	4621      	mov	r1, r4
 800825a:	f7fe f941 	bl	80064e0 <memset>
 800825e:	e7f4      	b.n	800824a <_calloc_r+0x12>

08008260 <_free_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4605      	mov	r5, r0
 8008264:	2900      	cmp	r1, #0
 8008266:	d040      	beq.n	80082ea <_free_r+0x8a>
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f0c      	subs	r4, r1, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	18e4      	addlt	r4, r4, r3
 8008274:	f000 fa98 	bl	80087a8 <__malloc_lock>
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <_free_r+0x8c>)
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	b933      	cbnz	r3, 800828c <_free_r+0x2c>
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 ba94 	b.w	80087b4 <__malloc_unlock>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d908      	bls.n	80082a2 <_free_r+0x42>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	1821      	adds	r1, r4, r0
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1809      	addeq	r1, r1, r0
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	e7ed      	b.n	800827e <_free_r+0x1e>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x4c>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x42>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1850      	adds	r0, r2, r1
 80082b0:	42a0      	cmp	r0, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x6c>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	4401      	add	r1, r0
 80082b8:	1850      	adds	r0, r2, r1
 80082ba:	4283      	cmp	r3, r0
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1e0      	bne.n	8008282 <_free_r+0x22>
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4401      	add	r1, r0
 80082c6:	6011      	str	r1, [r2, #0]
 80082c8:	6053      	str	r3, [r2, #4]
 80082ca:	e7da      	b.n	8008282 <_free_r+0x22>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x74>
 80082ce:	230c      	movs	r3, #12
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	e7d6      	b.n	8008282 <_free_r+0x22>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	1821      	adds	r1, r4, r0
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf01      	itttt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	1809      	addeq	r1, r1, r0
 80082e2:	6021      	streq	r1, [r4, #0]
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	6054      	str	r4, [r2, #4]
 80082e8:	e7cb      	b.n	8008282 <_free_r+0x22>
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000470 	.word	0x20000470

080082f0 <sbrk_aligned>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	4e0e      	ldr	r6, [pc, #56]	; (800832c <sbrk_aligned+0x3c>)
 80082f4:	460c      	mov	r4, r1
 80082f6:	6831      	ldr	r1, [r6, #0]
 80082f8:	4605      	mov	r5, r0
 80082fa:	b911      	cbnz	r1, 8008302 <sbrk_aligned+0x12>
 80082fc:	f000 f9e8 	bl	80086d0 <_sbrk_r>
 8008300:	6030      	str	r0, [r6, #0]
 8008302:	4621      	mov	r1, r4
 8008304:	4628      	mov	r0, r5
 8008306:	f000 f9e3 	bl	80086d0 <_sbrk_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	d00a      	beq.n	8008324 <sbrk_aligned+0x34>
 800830e:	1cc4      	adds	r4, r0, #3
 8008310:	f024 0403 	bic.w	r4, r4, #3
 8008314:	42a0      	cmp	r0, r4
 8008316:	d007      	beq.n	8008328 <sbrk_aligned+0x38>
 8008318:	1a21      	subs	r1, r4, r0
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f9d8 	bl	80086d0 <_sbrk_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d101      	bne.n	8008328 <sbrk_aligned+0x38>
 8008324:	f04f 34ff 	mov.w	r4, #4294967295
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	20000474 	.word	0x20000474

08008330 <_malloc_r>:
 8008330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008334:	1ccd      	adds	r5, r1, #3
 8008336:	f025 0503 	bic.w	r5, r5, #3
 800833a:	3508      	adds	r5, #8
 800833c:	2d0c      	cmp	r5, #12
 800833e:	bf38      	it	cc
 8008340:	250c      	movcc	r5, #12
 8008342:	2d00      	cmp	r5, #0
 8008344:	4607      	mov	r7, r0
 8008346:	db01      	blt.n	800834c <_malloc_r+0x1c>
 8008348:	42a9      	cmp	r1, r5
 800834a:	d905      	bls.n	8008358 <_malloc_r+0x28>
 800834c:	230c      	movs	r3, #12
 800834e:	2600      	movs	r6, #0
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	4630      	mov	r0, r6
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	4e2e      	ldr	r6, [pc, #184]	; (8008414 <_malloc_r+0xe4>)
 800835a:	f000 fa25 	bl	80087a8 <__malloc_lock>
 800835e:	6833      	ldr	r3, [r6, #0]
 8008360:	461c      	mov	r4, r3
 8008362:	bb34      	cbnz	r4, 80083b2 <_malloc_r+0x82>
 8008364:	4629      	mov	r1, r5
 8008366:	4638      	mov	r0, r7
 8008368:	f7ff ffc2 	bl	80082f0 <sbrk_aligned>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	4604      	mov	r4, r0
 8008370:	d14d      	bne.n	800840e <_malloc_r+0xde>
 8008372:	6834      	ldr	r4, [r6, #0]
 8008374:	4626      	mov	r6, r4
 8008376:	2e00      	cmp	r6, #0
 8008378:	d140      	bne.n	80083fc <_malloc_r+0xcc>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	4631      	mov	r1, r6
 800837e:	4638      	mov	r0, r7
 8008380:	eb04 0803 	add.w	r8, r4, r3
 8008384:	f000 f9a4 	bl	80086d0 <_sbrk_r>
 8008388:	4580      	cmp	r8, r0
 800838a:	d13a      	bne.n	8008402 <_malloc_r+0xd2>
 800838c:	6821      	ldr	r1, [r4, #0]
 800838e:	3503      	adds	r5, #3
 8008390:	1a6d      	subs	r5, r5, r1
 8008392:	f025 0503 	bic.w	r5, r5, #3
 8008396:	3508      	adds	r5, #8
 8008398:	2d0c      	cmp	r5, #12
 800839a:	bf38      	it	cc
 800839c:	250c      	movcc	r5, #12
 800839e:	4638      	mov	r0, r7
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7ff ffa5 	bl	80082f0 <sbrk_aligned>
 80083a6:	3001      	adds	r0, #1
 80083a8:	d02b      	beq.n	8008402 <_malloc_r+0xd2>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	442b      	add	r3, r5
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	e00e      	b.n	80083d0 <_malloc_r+0xa0>
 80083b2:	6822      	ldr	r2, [r4, #0]
 80083b4:	1b52      	subs	r2, r2, r5
 80083b6:	d41e      	bmi.n	80083f6 <_malloc_r+0xc6>
 80083b8:	2a0b      	cmp	r2, #11
 80083ba:	d916      	bls.n	80083ea <_malloc_r+0xba>
 80083bc:	1961      	adds	r1, r4, r5
 80083be:	42a3      	cmp	r3, r4
 80083c0:	6025      	str	r5, [r4, #0]
 80083c2:	bf18      	it	ne
 80083c4:	6059      	strne	r1, [r3, #4]
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	bf08      	it	eq
 80083ca:	6031      	streq	r1, [r6, #0]
 80083cc:	5162      	str	r2, [r4, r5]
 80083ce:	604b      	str	r3, [r1, #4]
 80083d0:	4638      	mov	r0, r7
 80083d2:	f104 060b 	add.w	r6, r4, #11
 80083d6:	f000 f9ed 	bl	80087b4 <__malloc_unlock>
 80083da:	f026 0607 	bic.w	r6, r6, #7
 80083de:	1d23      	adds	r3, r4, #4
 80083e0:	1af2      	subs	r2, r6, r3
 80083e2:	d0b6      	beq.n	8008352 <_malloc_r+0x22>
 80083e4:	1b9b      	subs	r3, r3, r6
 80083e6:	50a3      	str	r3, [r4, r2]
 80083e8:	e7b3      	b.n	8008352 <_malloc_r+0x22>
 80083ea:	6862      	ldr	r2, [r4, #4]
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	bf0c      	ite	eq
 80083f0:	6032      	streq	r2, [r6, #0]
 80083f2:	605a      	strne	r2, [r3, #4]
 80083f4:	e7ec      	b.n	80083d0 <_malloc_r+0xa0>
 80083f6:	4623      	mov	r3, r4
 80083f8:	6864      	ldr	r4, [r4, #4]
 80083fa:	e7b2      	b.n	8008362 <_malloc_r+0x32>
 80083fc:	4634      	mov	r4, r6
 80083fe:	6876      	ldr	r6, [r6, #4]
 8008400:	e7b9      	b.n	8008376 <_malloc_r+0x46>
 8008402:	230c      	movs	r3, #12
 8008404:	4638      	mov	r0, r7
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	f000 f9d4 	bl	80087b4 <__malloc_unlock>
 800840c:	e7a1      	b.n	8008352 <_malloc_r+0x22>
 800840e:	6025      	str	r5, [r4, #0]
 8008410:	e7de      	b.n	80083d0 <_malloc_r+0xa0>
 8008412:	bf00      	nop
 8008414:	20000470 	.word	0x20000470

08008418 <__ssputs_r>:
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	688e      	ldr	r6, [r1, #8]
 800841e:	4682      	mov	sl, r0
 8008420:	429e      	cmp	r6, r3
 8008422:	460c      	mov	r4, r1
 8008424:	4690      	mov	r8, r2
 8008426:	461f      	mov	r7, r3
 8008428:	d838      	bhi.n	800849c <__ssputs_r+0x84>
 800842a:	898a      	ldrh	r2, [r1, #12]
 800842c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008430:	d032      	beq.n	8008498 <__ssputs_r+0x80>
 8008432:	6825      	ldr	r5, [r4, #0]
 8008434:	6909      	ldr	r1, [r1, #16]
 8008436:	3301      	adds	r3, #1
 8008438:	eba5 0901 	sub.w	r9, r5, r1
 800843c:	6965      	ldr	r5, [r4, #20]
 800843e:	444b      	add	r3, r9
 8008440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008448:	106d      	asrs	r5, r5, #1
 800844a:	429d      	cmp	r5, r3
 800844c:	bf38      	it	cc
 800844e:	461d      	movcc	r5, r3
 8008450:	0553      	lsls	r3, r2, #21
 8008452:	d531      	bpl.n	80084b8 <__ssputs_r+0xa0>
 8008454:	4629      	mov	r1, r5
 8008456:	f7ff ff6b 	bl	8008330 <_malloc_r>
 800845a:	4606      	mov	r6, r0
 800845c:	b950      	cbnz	r0, 8008474 <__ssputs_r+0x5c>
 800845e:	230c      	movs	r3, #12
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	f8ca 3000 	str.w	r3, [sl]
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008474:	464a      	mov	r2, r9
 8008476:	6921      	ldr	r1, [r4, #16]
 8008478:	f7ff fb4e 	bl	8007b18 <memcpy>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	6126      	str	r6, [r4, #16]
 800848a:	444e      	add	r6, r9
 800848c:	6026      	str	r6, [r4, #0]
 800848e:	463e      	mov	r6, r7
 8008490:	6165      	str	r5, [r4, #20]
 8008492:	eba5 0509 	sub.w	r5, r5, r9
 8008496:	60a5      	str	r5, [r4, #8]
 8008498:	42be      	cmp	r6, r7
 800849a:	d900      	bls.n	800849e <__ssputs_r+0x86>
 800849c:	463e      	mov	r6, r7
 800849e:	4632      	mov	r2, r6
 80084a0:	4641      	mov	r1, r8
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	f000 f966 	bl	8008774 <memmove>
 80084a8:	68a3      	ldr	r3, [r4, #8]
 80084aa:	2000      	movs	r0, #0
 80084ac:	1b9b      	subs	r3, r3, r6
 80084ae:	60a3      	str	r3, [r4, #8]
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	4433      	add	r3, r6
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	e7db      	b.n	8008470 <__ssputs_r+0x58>
 80084b8:	462a      	mov	r2, r5
 80084ba:	f000 f981 	bl	80087c0 <_realloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1e1      	bne.n	8008488 <__ssputs_r+0x70>
 80084c4:	4650      	mov	r0, sl
 80084c6:	6921      	ldr	r1, [r4, #16]
 80084c8:	f7ff feca 	bl	8008260 <_free_r>
 80084cc:	e7c7      	b.n	800845e <__ssputs_r+0x46>
	...

080084d0 <_svfiprintf_r>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4698      	mov	r8, r3
 80084d6:	898b      	ldrh	r3, [r1, #12]
 80084d8:	4607      	mov	r7, r0
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	460d      	mov	r5, r1
 80084de:	4614      	mov	r4, r2
 80084e0:	b09d      	sub	sp, #116	; 0x74
 80084e2:	d50e      	bpl.n	8008502 <_svfiprintf_r+0x32>
 80084e4:	690b      	ldr	r3, [r1, #16]
 80084e6:	b963      	cbnz	r3, 8008502 <_svfiprintf_r+0x32>
 80084e8:	2140      	movs	r1, #64	; 0x40
 80084ea:	f7ff ff21 	bl	8008330 <_malloc_r>
 80084ee:	6028      	str	r0, [r5, #0]
 80084f0:	6128      	str	r0, [r5, #16]
 80084f2:	b920      	cbnz	r0, 80084fe <_svfiprintf_r+0x2e>
 80084f4:	230c      	movs	r3, #12
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	e0d1      	b.n	80086a2 <_svfiprintf_r+0x1d2>
 80084fe:	2340      	movs	r3, #64	; 0x40
 8008500:	616b      	str	r3, [r5, #20]
 8008502:	2300      	movs	r3, #0
 8008504:	9309      	str	r3, [sp, #36]	; 0x24
 8008506:	2320      	movs	r3, #32
 8008508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800850c:	2330      	movs	r3, #48	; 0x30
 800850e:	f04f 0901 	mov.w	r9, #1
 8008512:	f8cd 800c 	str.w	r8, [sp, #12]
 8008516:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086bc <_svfiprintf_r+0x1ec>
 800851a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800851e:	4623      	mov	r3, r4
 8008520:	469a      	mov	sl, r3
 8008522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008526:	b10a      	cbz	r2, 800852c <_svfiprintf_r+0x5c>
 8008528:	2a25      	cmp	r2, #37	; 0x25
 800852a:	d1f9      	bne.n	8008520 <_svfiprintf_r+0x50>
 800852c:	ebba 0b04 	subs.w	fp, sl, r4
 8008530:	d00b      	beq.n	800854a <_svfiprintf_r+0x7a>
 8008532:	465b      	mov	r3, fp
 8008534:	4622      	mov	r2, r4
 8008536:	4629      	mov	r1, r5
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff6d 	bl	8008418 <__ssputs_r>
 800853e:	3001      	adds	r0, #1
 8008540:	f000 80aa 	beq.w	8008698 <_svfiprintf_r+0x1c8>
 8008544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008546:	445a      	add	r2, fp
 8008548:	9209      	str	r2, [sp, #36]	; 0x24
 800854a:	f89a 3000 	ldrb.w	r3, [sl]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80a2 	beq.w	8008698 <_svfiprintf_r+0x1c8>
 8008554:	2300      	movs	r3, #0
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855e:	f10a 0a01 	add.w	sl, sl, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856a:	931a      	str	r3, [sp, #104]	; 0x68
 800856c:	4654      	mov	r4, sl
 800856e:	2205      	movs	r2, #5
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	4851      	ldr	r0, [pc, #324]	; (80086bc <_svfiprintf_r+0x1ec>)
 8008576:	f7ff fac1 	bl	8007afc <memchr>
 800857a:	9a04      	ldr	r2, [sp, #16]
 800857c:	b9d8      	cbnz	r0, 80085b6 <_svfiprintf_r+0xe6>
 800857e:	06d0      	lsls	r0, r2, #27
 8008580:	bf44      	itt	mi
 8008582:	2320      	movmi	r3, #32
 8008584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008588:	0711      	lsls	r1, r2, #28
 800858a:	bf44      	itt	mi
 800858c:	232b      	movmi	r3, #43	; 0x2b
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008592:	f89a 3000 	ldrb.w	r3, [sl]
 8008596:	2b2a      	cmp	r3, #42	; 0x2a
 8008598:	d015      	beq.n	80085c6 <_svfiprintf_r+0xf6>
 800859a:	4654      	mov	r4, sl
 800859c:	2000      	movs	r0, #0
 800859e:	f04f 0c0a 	mov.w	ip, #10
 80085a2:	9a07      	ldr	r2, [sp, #28]
 80085a4:	4621      	mov	r1, r4
 80085a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085aa:	3b30      	subs	r3, #48	; 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d94e      	bls.n	800864e <_svfiprintf_r+0x17e>
 80085b0:	b1b0      	cbz	r0, 80085e0 <_svfiprintf_r+0x110>
 80085b2:	9207      	str	r2, [sp, #28]
 80085b4:	e014      	b.n	80085e0 <_svfiprintf_r+0x110>
 80085b6:	eba0 0308 	sub.w	r3, r0, r8
 80085ba:	fa09 f303 	lsl.w	r3, r9, r3
 80085be:	4313      	orrs	r3, r2
 80085c0:	46a2      	mov	sl, r4
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	e7d2      	b.n	800856c <_svfiprintf_r+0x9c>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	9103      	str	r1, [sp, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbb      	ittet	lt
 80085d2:	425b      	neglt	r3, r3
 80085d4:	f042 0202 	orrlt.w	r2, r2, #2
 80085d8:	9307      	strge	r3, [sp, #28]
 80085da:	9307      	strlt	r3, [sp, #28]
 80085dc:	bfb8      	it	lt
 80085de:	9204      	strlt	r2, [sp, #16]
 80085e0:	7823      	ldrb	r3, [r4, #0]
 80085e2:	2b2e      	cmp	r3, #46	; 0x2e
 80085e4:	d10c      	bne.n	8008600 <_svfiprintf_r+0x130>
 80085e6:	7863      	ldrb	r3, [r4, #1]
 80085e8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ea:	d135      	bne.n	8008658 <_svfiprintf_r+0x188>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	3402      	adds	r4, #2
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	9203      	str	r2, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfb8      	it	lt
 80085fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fe:	9305      	str	r3, [sp, #20]
 8008600:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80086c0 <_svfiprintf_r+0x1f0>
 8008604:	2203      	movs	r2, #3
 8008606:	4650      	mov	r0, sl
 8008608:	7821      	ldrb	r1, [r4, #0]
 800860a:	f7ff fa77 	bl	8007afc <memchr>
 800860e:	b140      	cbz	r0, 8008622 <_svfiprintf_r+0x152>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	eba0 000a 	sub.w	r0, r0, sl
 8008616:	fa03 f000 	lsl.w	r0, r3, r0
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	3401      	adds	r4, #1
 800861e:	4303      	orrs	r3, r0
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	2206      	movs	r2, #6
 8008628:	4826      	ldr	r0, [pc, #152]	; (80086c4 <_svfiprintf_r+0x1f4>)
 800862a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800862e:	f7ff fa65 	bl	8007afc <memchr>
 8008632:	2800      	cmp	r0, #0
 8008634:	d038      	beq.n	80086a8 <_svfiprintf_r+0x1d8>
 8008636:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <_svfiprintf_r+0x1f8>)
 8008638:	bb1b      	cbnz	r3, 8008682 <_svfiprintf_r+0x1b2>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	3307      	adds	r3, #7
 800863e:	f023 0307 	bic.w	r3, r3, #7
 8008642:	3308      	adds	r3, #8
 8008644:	9303      	str	r3, [sp, #12]
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	4433      	add	r3, r6
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	e767      	b.n	800851e <_svfiprintf_r+0x4e>
 800864e:	460c      	mov	r4, r1
 8008650:	2001      	movs	r0, #1
 8008652:	fb0c 3202 	mla	r2, ip, r2, r3
 8008656:	e7a5      	b.n	80085a4 <_svfiprintf_r+0xd4>
 8008658:	2300      	movs	r3, #0
 800865a:	f04f 0c0a 	mov.w	ip, #10
 800865e:	4619      	mov	r1, r3
 8008660:	3401      	adds	r4, #1
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	4620      	mov	r0, r4
 8008666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866a:	3a30      	subs	r2, #48	; 0x30
 800866c:	2a09      	cmp	r2, #9
 800866e:	d903      	bls.n	8008678 <_svfiprintf_r+0x1a8>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0c5      	beq.n	8008600 <_svfiprintf_r+0x130>
 8008674:	9105      	str	r1, [sp, #20]
 8008676:	e7c3      	b.n	8008600 <_svfiprintf_r+0x130>
 8008678:	4604      	mov	r4, r0
 800867a:	2301      	movs	r3, #1
 800867c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008680:	e7f0      	b.n	8008664 <_svfiprintf_r+0x194>
 8008682:	ab03      	add	r3, sp, #12
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	462a      	mov	r2, r5
 8008688:	4638      	mov	r0, r7
 800868a:	4b10      	ldr	r3, [pc, #64]	; (80086cc <_svfiprintf_r+0x1fc>)
 800868c:	a904      	add	r1, sp, #16
 800868e:	f7fd ffcd 	bl	800662c <_printf_float>
 8008692:	1c42      	adds	r2, r0, #1
 8008694:	4606      	mov	r6, r0
 8008696:	d1d6      	bne.n	8008646 <_svfiprintf_r+0x176>
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	065b      	lsls	r3, r3, #25
 800869c:	f53f af2c 	bmi.w	80084f8 <_svfiprintf_r+0x28>
 80086a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a2:	b01d      	add	sp, #116	; 0x74
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	ab03      	add	r3, sp, #12
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	462a      	mov	r2, r5
 80086ae:	4638      	mov	r0, r7
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <_svfiprintf_r+0x1fc>)
 80086b2:	a904      	add	r1, sp, #16
 80086b4:	f7fe fa56 	bl	8006b64 <_printf_i>
 80086b8:	e7eb      	b.n	8008692 <_svfiprintf_r+0x1c2>
 80086ba:	bf00      	nop
 80086bc:	080095bc 	.word	0x080095bc
 80086c0:	080095c2 	.word	0x080095c2
 80086c4:	080095c6 	.word	0x080095c6
 80086c8:	0800662d 	.word	0x0800662d
 80086cc:	08008419 	.word	0x08008419

080086d0 <_sbrk_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	2300      	movs	r3, #0
 80086d4:	4d05      	ldr	r5, [pc, #20]	; (80086ec <_sbrk_r+0x1c>)
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7fa f892 	bl	8002804 <_sbrk>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_sbrk_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_sbrk_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000478 	.word	0x20000478

080086f0 <__assert_func>:
 80086f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f2:	4614      	mov	r4, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <__assert_func+0x2c>)
 80086f8:	4605      	mov	r5, r0
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68d8      	ldr	r0, [r3, #12]
 80086fe:	b14c      	cbz	r4, 8008714 <__assert_func+0x24>
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <__assert_func+0x30>)
 8008702:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008706:	9100      	str	r1, [sp, #0]
 8008708:	462b      	mov	r3, r5
 800870a:	4906      	ldr	r1, [pc, #24]	; (8008724 <__assert_func+0x34>)
 800870c:	f000 f80e 	bl	800872c <fiprintf>
 8008710:	f000 faaa 	bl	8008c68 <abort>
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <__assert_func+0x38>)
 8008716:	461c      	mov	r4, r3
 8008718:	e7f3      	b.n	8008702 <__assert_func+0x12>
 800871a:	bf00      	nop
 800871c:	2000000c 	.word	0x2000000c
 8008720:	080095cd 	.word	0x080095cd
 8008724:	080095da 	.word	0x080095da
 8008728:	08009608 	.word	0x08009608

0800872c <fiprintf>:
 800872c:	b40e      	push	{r1, r2, r3}
 800872e:	b503      	push	{r0, r1, lr}
 8008730:	4601      	mov	r1, r0
 8008732:	ab03      	add	r3, sp, #12
 8008734:	4805      	ldr	r0, [pc, #20]	; (800874c <fiprintf+0x20>)
 8008736:	f853 2b04 	ldr.w	r2, [r3], #4
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f000 f895 	bl	800886c <_vfiprintf_r>
 8008742:	b002      	add	sp, #8
 8008744:	f85d eb04 	ldr.w	lr, [sp], #4
 8008748:	b003      	add	sp, #12
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c

08008750 <__ascii_mbtowc>:
 8008750:	b082      	sub	sp, #8
 8008752:	b901      	cbnz	r1, 8008756 <__ascii_mbtowc+0x6>
 8008754:	a901      	add	r1, sp, #4
 8008756:	b142      	cbz	r2, 800876a <__ascii_mbtowc+0x1a>
 8008758:	b14b      	cbz	r3, 800876e <__ascii_mbtowc+0x1e>
 800875a:	7813      	ldrb	r3, [r2, #0]
 800875c:	600b      	str	r3, [r1, #0]
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	1e10      	subs	r0, r2, #0
 8008762:	bf18      	it	ne
 8008764:	2001      	movne	r0, #1
 8008766:	b002      	add	sp, #8
 8008768:	4770      	bx	lr
 800876a:	4610      	mov	r0, r2
 800876c:	e7fb      	b.n	8008766 <__ascii_mbtowc+0x16>
 800876e:	f06f 0001 	mvn.w	r0, #1
 8008772:	e7f8      	b.n	8008766 <__ascii_mbtowc+0x16>

08008774 <memmove>:
 8008774:	4288      	cmp	r0, r1
 8008776:	b510      	push	{r4, lr}
 8008778:	eb01 0402 	add.w	r4, r1, r2
 800877c:	d902      	bls.n	8008784 <memmove+0x10>
 800877e:	4284      	cmp	r4, r0
 8008780:	4623      	mov	r3, r4
 8008782:	d807      	bhi.n	8008794 <memmove+0x20>
 8008784:	1e43      	subs	r3, r0, #1
 8008786:	42a1      	cmp	r1, r4
 8008788:	d008      	beq.n	800879c <memmove+0x28>
 800878a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800878e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008792:	e7f8      	b.n	8008786 <memmove+0x12>
 8008794:	4601      	mov	r1, r0
 8008796:	4402      	add	r2, r0
 8008798:	428a      	cmp	r2, r1
 800879a:	d100      	bne.n	800879e <memmove+0x2a>
 800879c:	bd10      	pop	{r4, pc}
 800879e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087a6:	e7f7      	b.n	8008798 <memmove+0x24>

080087a8 <__malloc_lock>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__malloc_lock+0x8>)
 80087aa:	f000 bc19 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 80087ae:	bf00      	nop
 80087b0:	2000047c 	.word	0x2000047c

080087b4 <__malloc_unlock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__malloc_unlock+0x8>)
 80087b6:	f000 bc14 	b.w	8008fe2 <__retarget_lock_release_recursive>
 80087ba:	bf00      	nop
 80087bc:	2000047c 	.word	0x2000047c

080087c0 <_realloc_r>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	4680      	mov	r8, r0
 80087c6:	4614      	mov	r4, r2
 80087c8:	460e      	mov	r6, r1
 80087ca:	b921      	cbnz	r1, 80087d6 <_realloc_r+0x16>
 80087cc:	4611      	mov	r1, r2
 80087ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d2:	f7ff bdad 	b.w	8008330 <_malloc_r>
 80087d6:	b92a      	cbnz	r2, 80087e4 <_realloc_r+0x24>
 80087d8:	f7ff fd42 	bl	8008260 <_free_r>
 80087dc:	4625      	mov	r5, r4
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	f000 fc64 	bl	80090b0 <_malloc_usable_size_r>
 80087e8:	4284      	cmp	r4, r0
 80087ea:	4607      	mov	r7, r0
 80087ec:	d802      	bhi.n	80087f4 <_realloc_r+0x34>
 80087ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087f2:	d812      	bhi.n	800881a <_realloc_r+0x5a>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fd9a 	bl	8008330 <_malloc_r>
 80087fc:	4605      	mov	r5, r0
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0ed      	beq.n	80087de <_realloc_r+0x1e>
 8008802:	42bc      	cmp	r4, r7
 8008804:	4622      	mov	r2, r4
 8008806:	4631      	mov	r1, r6
 8008808:	bf28      	it	cs
 800880a:	463a      	movcs	r2, r7
 800880c:	f7ff f984 	bl	8007b18 <memcpy>
 8008810:	4631      	mov	r1, r6
 8008812:	4640      	mov	r0, r8
 8008814:	f7ff fd24 	bl	8008260 <_free_r>
 8008818:	e7e1      	b.n	80087de <_realloc_r+0x1e>
 800881a:	4635      	mov	r5, r6
 800881c:	e7df      	b.n	80087de <_realloc_r+0x1e>

0800881e <__sfputc_r>:
 800881e:	6893      	ldr	r3, [r2, #8]
 8008820:	b410      	push	{r4}
 8008822:	3b01      	subs	r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	6093      	str	r3, [r2, #8]
 8008828:	da07      	bge.n	800883a <__sfputc_r+0x1c>
 800882a:	6994      	ldr	r4, [r2, #24]
 800882c:	42a3      	cmp	r3, r4
 800882e:	db01      	blt.n	8008834 <__sfputc_r+0x16>
 8008830:	290a      	cmp	r1, #10
 8008832:	d102      	bne.n	800883a <__sfputc_r+0x1c>
 8008834:	bc10      	pop	{r4}
 8008836:	f000 b949 	b.w	8008acc <__swbuf_r>
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	1c58      	adds	r0, r3, #1
 800883e:	6010      	str	r0, [r2, #0]
 8008840:	7019      	strb	r1, [r3, #0]
 8008842:	4608      	mov	r0, r1
 8008844:	bc10      	pop	{r4}
 8008846:	4770      	bx	lr

08008848 <__sfputs_r>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	4614      	mov	r4, r2
 8008850:	18d5      	adds	r5, r2, r3
 8008852:	42ac      	cmp	r4, r5
 8008854:	d101      	bne.n	800885a <__sfputs_r+0x12>
 8008856:	2000      	movs	r0, #0
 8008858:	e007      	b.n	800886a <__sfputs_r+0x22>
 800885a:	463a      	mov	r2, r7
 800885c:	4630      	mov	r0, r6
 800885e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008862:	f7ff ffdc 	bl	800881e <__sfputc_r>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d1f3      	bne.n	8008852 <__sfputs_r+0xa>
 800886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800886c <_vfiprintf_r>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	460d      	mov	r5, r1
 8008872:	4614      	mov	r4, r2
 8008874:	4698      	mov	r8, r3
 8008876:	4606      	mov	r6, r0
 8008878:	b09d      	sub	sp, #116	; 0x74
 800887a:	b118      	cbz	r0, 8008884 <_vfiprintf_r+0x18>
 800887c:	6983      	ldr	r3, [r0, #24]
 800887e:	b90b      	cbnz	r3, 8008884 <_vfiprintf_r+0x18>
 8008880:	f000 fb10 	bl	8008ea4 <__sinit>
 8008884:	4b89      	ldr	r3, [pc, #548]	; (8008aac <_vfiprintf_r+0x240>)
 8008886:	429d      	cmp	r5, r3
 8008888:	d11b      	bne.n	80088c2 <_vfiprintf_r+0x56>
 800888a:	6875      	ldr	r5, [r6, #4]
 800888c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800888e:	07d9      	lsls	r1, r3, #31
 8008890:	d405      	bmi.n	800889e <_vfiprintf_r+0x32>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	059a      	lsls	r2, r3, #22
 8008896:	d402      	bmi.n	800889e <_vfiprintf_r+0x32>
 8008898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889a:	f000 fba1 	bl	8008fe0 <__retarget_lock_acquire_recursive>
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	071b      	lsls	r3, r3, #28
 80088a2:	d501      	bpl.n	80088a8 <_vfiprintf_r+0x3c>
 80088a4:	692b      	ldr	r3, [r5, #16]
 80088a6:	b9eb      	cbnz	r3, 80088e4 <_vfiprintf_r+0x78>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4630      	mov	r0, r6
 80088ac:	f000 f96e 	bl	8008b8c <__swsetup_r>
 80088b0:	b1c0      	cbz	r0, 80088e4 <_vfiprintf_r+0x78>
 80088b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b4:	07dc      	lsls	r4, r3, #31
 80088b6:	d50e      	bpl.n	80088d6 <_vfiprintf_r+0x6a>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	b01d      	add	sp, #116	; 0x74
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	4b7b      	ldr	r3, [pc, #492]	; (8008ab0 <_vfiprintf_r+0x244>)
 80088c4:	429d      	cmp	r5, r3
 80088c6:	d101      	bne.n	80088cc <_vfiprintf_r+0x60>
 80088c8:	68b5      	ldr	r5, [r6, #8]
 80088ca:	e7df      	b.n	800888c <_vfiprintf_r+0x20>
 80088cc:	4b79      	ldr	r3, [pc, #484]	; (8008ab4 <_vfiprintf_r+0x248>)
 80088ce:	429d      	cmp	r5, r3
 80088d0:	bf08      	it	eq
 80088d2:	68f5      	ldreq	r5, [r6, #12]
 80088d4:	e7da      	b.n	800888c <_vfiprintf_r+0x20>
 80088d6:	89ab      	ldrh	r3, [r5, #12]
 80088d8:	0598      	lsls	r0, r3, #22
 80088da:	d4ed      	bmi.n	80088b8 <_vfiprintf_r+0x4c>
 80088dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088de:	f000 fb80 	bl	8008fe2 <__retarget_lock_release_recursive>
 80088e2:	e7e9      	b.n	80088b8 <_vfiprintf_r+0x4c>
 80088e4:	2300      	movs	r3, #0
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
 80088e8:	2320      	movs	r3, #32
 80088ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ee:	2330      	movs	r3, #48	; 0x30
 80088f0:	f04f 0901 	mov.w	r9, #1
 80088f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ab8 <_vfiprintf_r+0x24c>
 80088fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008900:	4623      	mov	r3, r4
 8008902:	469a      	mov	sl, r3
 8008904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008908:	b10a      	cbz	r2, 800890e <_vfiprintf_r+0xa2>
 800890a:	2a25      	cmp	r2, #37	; 0x25
 800890c:	d1f9      	bne.n	8008902 <_vfiprintf_r+0x96>
 800890e:	ebba 0b04 	subs.w	fp, sl, r4
 8008912:	d00b      	beq.n	800892c <_vfiprintf_r+0xc0>
 8008914:	465b      	mov	r3, fp
 8008916:	4622      	mov	r2, r4
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff ff94 	bl	8008848 <__sfputs_r>
 8008920:	3001      	adds	r0, #1
 8008922:	f000 80aa 	beq.w	8008a7a <_vfiprintf_r+0x20e>
 8008926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008928:	445a      	add	r2, fp
 800892a:	9209      	str	r2, [sp, #36]	; 0x24
 800892c:	f89a 3000 	ldrb.w	r3, [sl]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 80a2 	beq.w	8008a7a <_vfiprintf_r+0x20e>
 8008936:	2300      	movs	r3, #0
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008940:	f10a 0a01 	add.w	sl, sl, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800894c:	931a      	str	r3, [sp, #104]	; 0x68
 800894e:	4654      	mov	r4, sl
 8008950:	2205      	movs	r2, #5
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	4858      	ldr	r0, [pc, #352]	; (8008ab8 <_vfiprintf_r+0x24c>)
 8008958:	f7ff f8d0 	bl	8007afc <memchr>
 800895c:	9a04      	ldr	r2, [sp, #16]
 800895e:	b9d8      	cbnz	r0, 8008998 <_vfiprintf_r+0x12c>
 8008960:	06d1      	lsls	r1, r2, #27
 8008962:	bf44      	itt	mi
 8008964:	2320      	movmi	r3, #32
 8008966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896a:	0713      	lsls	r3, r2, #28
 800896c:	bf44      	itt	mi
 800896e:	232b      	movmi	r3, #43	; 0x2b
 8008970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008974:	f89a 3000 	ldrb.w	r3, [sl]
 8008978:	2b2a      	cmp	r3, #42	; 0x2a
 800897a:	d015      	beq.n	80089a8 <_vfiprintf_r+0x13c>
 800897c:	4654      	mov	r4, sl
 800897e:	2000      	movs	r0, #0
 8008980:	f04f 0c0a 	mov.w	ip, #10
 8008984:	9a07      	ldr	r2, [sp, #28]
 8008986:	4621      	mov	r1, r4
 8008988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898c:	3b30      	subs	r3, #48	; 0x30
 800898e:	2b09      	cmp	r3, #9
 8008990:	d94e      	bls.n	8008a30 <_vfiprintf_r+0x1c4>
 8008992:	b1b0      	cbz	r0, 80089c2 <_vfiprintf_r+0x156>
 8008994:	9207      	str	r2, [sp, #28]
 8008996:	e014      	b.n	80089c2 <_vfiprintf_r+0x156>
 8008998:	eba0 0308 	sub.w	r3, r0, r8
 800899c:	fa09 f303 	lsl.w	r3, r9, r3
 80089a0:	4313      	orrs	r3, r2
 80089a2:	46a2      	mov	sl, r4
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	e7d2      	b.n	800894e <_vfiprintf_r+0xe2>
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	1d19      	adds	r1, r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	9103      	str	r1, [sp, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bfbb      	ittet	lt
 80089b4:	425b      	neglt	r3, r3
 80089b6:	f042 0202 	orrlt.w	r2, r2, #2
 80089ba:	9307      	strge	r3, [sp, #28]
 80089bc:	9307      	strlt	r3, [sp, #28]
 80089be:	bfb8      	it	lt
 80089c0:	9204      	strlt	r2, [sp, #16]
 80089c2:	7823      	ldrb	r3, [r4, #0]
 80089c4:	2b2e      	cmp	r3, #46	; 0x2e
 80089c6:	d10c      	bne.n	80089e2 <_vfiprintf_r+0x176>
 80089c8:	7863      	ldrb	r3, [r4, #1]
 80089ca:	2b2a      	cmp	r3, #42	; 0x2a
 80089cc:	d135      	bne.n	8008a3a <_vfiprintf_r+0x1ce>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	3402      	adds	r4, #2
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	9203      	str	r2, [sp, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfb8      	it	lt
 80089dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008abc <_vfiprintf_r+0x250>
 80089e6:	2203      	movs	r2, #3
 80089e8:	4650      	mov	r0, sl
 80089ea:	7821      	ldrb	r1, [r4, #0]
 80089ec:	f7ff f886 	bl	8007afc <memchr>
 80089f0:	b140      	cbz	r0, 8008a04 <_vfiprintf_r+0x198>
 80089f2:	2340      	movs	r3, #64	; 0x40
 80089f4:	eba0 000a 	sub.w	r0, r0, sl
 80089f8:	fa03 f000 	lsl.w	r0, r3, r0
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	3401      	adds	r4, #1
 8008a00:	4303      	orrs	r3, r0
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	2206      	movs	r2, #6
 8008a0a:	482d      	ldr	r0, [pc, #180]	; (8008ac0 <_vfiprintf_r+0x254>)
 8008a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a10:	f7ff f874 	bl	8007afc <memchr>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d03f      	beq.n	8008a98 <_vfiprintf_r+0x22c>
 8008a18:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <_vfiprintf_r+0x258>)
 8008a1a:	bb1b      	cbnz	r3, 8008a64 <_vfiprintf_r+0x1f8>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	f023 0307 	bic.w	r3, r3, #7
 8008a24:	3308      	adds	r3, #8
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	443b      	add	r3, r7
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	e767      	b.n	8008900 <_vfiprintf_r+0x94>
 8008a30:	460c      	mov	r4, r1
 8008a32:	2001      	movs	r0, #1
 8008a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a38:	e7a5      	b.n	8008986 <_vfiprintf_r+0x11a>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4619      	mov	r1, r3
 8008a42:	3401      	adds	r4, #1
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	4620      	mov	r0, r4
 8008a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4c:	3a30      	subs	r2, #48	; 0x30
 8008a4e:	2a09      	cmp	r2, #9
 8008a50:	d903      	bls.n	8008a5a <_vfiprintf_r+0x1ee>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c5      	beq.n	80089e2 <_vfiprintf_r+0x176>
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	e7c3      	b.n	80089e2 <_vfiprintf_r+0x176>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a62:	e7f0      	b.n	8008a46 <_vfiprintf_r+0x1da>
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <_vfiprintf_r+0x25c>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	f7fd fddc 	bl	800662c <_printf_float>
 8008a74:	4607      	mov	r7, r0
 8008a76:	1c78      	adds	r0, r7, #1
 8008a78:	d1d6      	bne.n	8008a28 <_vfiprintf_r+0x1bc>
 8008a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	d405      	bmi.n	8008a8c <_vfiprintf_r+0x220>
 8008a80:	89ab      	ldrh	r3, [r5, #12]
 8008a82:	059a      	lsls	r2, r3, #22
 8008a84:	d402      	bmi.n	8008a8c <_vfiprintf_r+0x220>
 8008a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a88:	f000 faab 	bl	8008fe2 <__retarget_lock_release_recursive>
 8008a8c:	89ab      	ldrh	r3, [r5, #12]
 8008a8e:	065b      	lsls	r3, r3, #25
 8008a90:	f53f af12 	bmi.w	80088b8 <_vfiprintf_r+0x4c>
 8008a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a96:	e711      	b.n	80088bc <_vfiprintf_r+0x50>
 8008a98:	ab03      	add	r3, sp, #12
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <_vfiprintf_r+0x25c>)
 8008aa2:	a904      	add	r1, sp, #16
 8008aa4:	f7fe f85e 	bl	8006b64 <_printf_i>
 8008aa8:	e7e4      	b.n	8008a74 <_vfiprintf_r+0x208>
 8008aaa:	bf00      	nop
 8008aac:	08009734 	.word	0x08009734
 8008ab0:	08009754 	.word	0x08009754
 8008ab4:	08009714 	.word	0x08009714
 8008ab8:	080095bc 	.word	0x080095bc
 8008abc:	080095c2 	.word	0x080095c2
 8008ac0:	080095c6 	.word	0x080095c6
 8008ac4:	0800662d 	.word	0x0800662d
 8008ac8:	08008849 	.word	0x08008849

08008acc <__swbuf_r>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	460e      	mov	r6, r1
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	b118      	cbz	r0, 8008ade <__swbuf_r+0x12>
 8008ad6:	6983      	ldr	r3, [r0, #24]
 8008ad8:	b90b      	cbnz	r3, 8008ade <__swbuf_r+0x12>
 8008ada:	f000 f9e3 	bl	8008ea4 <__sinit>
 8008ade:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <__swbuf_r+0x98>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	d12b      	bne.n	8008b3c <__swbuf_r+0x70>
 8008ae4:	686c      	ldr	r4, [r5, #4]
 8008ae6:	69a3      	ldr	r3, [r4, #24]
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	071a      	lsls	r2, r3, #28
 8008aee:	d52f      	bpl.n	8008b50 <__swbuf_r+0x84>
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	b36b      	cbz	r3, 8008b50 <__swbuf_r+0x84>
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	b2f6      	uxtb	r6, r6
 8008afa:	1ac0      	subs	r0, r0, r3
 8008afc:	6963      	ldr	r3, [r4, #20]
 8008afe:	4637      	mov	r7, r6
 8008b00:	4283      	cmp	r3, r0
 8008b02:	dc04      	bgt.n	8008b0e <__swbuf_r+0x42>
 8008b04:	4621      	mov	r1, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 f938 	bl	8008d7c <_fflush_r>
 8008b0c:	bb30      	cbnz	r0, 8008b5c <__swbuf_r+0x90>
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	3001      	adds	r0, #1
 8008b12:	3b01      	subs	r3, #1
 8008b14:	60a3      	str	r3, [r4, #8]
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	701e      	strb	r6, [r3, #0]
 8008b1e:	6963      	ldr	r3, [r4, #20]
 8008b20:	4283      	cmp	r3, r0
 8008b22:	d004      	beq.n	8008b2e <__swbuf_r+0x62>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	07db      	lsls	r3, r3, #31
 8008b28:	d506      	bpl.n	8008b38 <__swbuf_r+0x6c>
 8008b2a:	2e0a      	cmp	r6, #10
 8008b2c:	d104      	bne.n	8008b38 <__swbuf_r+0x6c>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	f000 f923 	bl	8008d7c <_fflush_r>
 8008b36:	b988      	cbnz	r0, 8008b5c <__swbuf_r+0x90>
 8008b38:	4638      	mov	r0, r7
 8008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <__swbuf_r+0x9c>)
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d101      	bne.n	8008b46 <__swbuf_r+0x7a>
 8008b42:	68ac      	ldr	r4, [r5, #8]
 8008b44:	e7cf      	b.n	8008ae6 <__swbuf_r+0x1a>
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <__swbuf_r+0xa0>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	bf08      	it	eq
 8008b4c:	68ec      	ldreq	r4, [r5, #12]
 8008b4e:	e7ca      	b.n	8008ae6 <__swbuf_r+0x1a>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 f81a 	bl	8008b8c <__swsetup_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d0cb      	beq.n	8008af4 <__swbuf_r+0x28>
 8008b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b60:	e7ea      	b.n	8008b38 <__swbuf_r+0x6c>
 8008b62:	bf00      	nop
 8008b64:	08009734 	.word	0x08009734
 8008b68:	08009754 	.word	0x08009754
 8008b6c:	08009714 	.word	0x08009714

08008b70 <__ascii_wctomb>:
 8008b70:	4603      	mov	r3, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	b141      	cbz	r1, 8008b88 <__ascii_wctomb+0x18>
 8008b76:	2aff      	cmp	r2, #255	; 0xff
 8008b78:	d904      	bls.n	8008b84 <__ascii_wctomb+0x14>
 8008b7a:	228a      	movs	r2, #138	; 0x8a
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	4770      	bx	lr
 8008b84:	2001      	movs	r0, #1
 8008b86:	700a      	strb	r2, [r1, #0]
 8008b88:	4770      	bx	lr
	...

08008b8c <__swsetup_r>:
 8008b8c:	4b32      	ldr	r3, [pc, #200]	; (8008c58 <__swsetup_r+0xcc>)
 8008b8e:	b570      	push	{r4, r5, r6, lr}
 8008b90:	681d      	ldr	r5, [r3, #0]
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	b125      	cbz	r5, 8008ba2 <__swsetup_r+0x16>
 8008b98:	69ab      	ldr	r3, [r5, #24]
 8008b9a:	b913      	cbnz	r3, 8008ba2 <__swsetup_r+0x16>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 f981 	bl	8008ea4 <__sinit>
 8008ba2:	4b2e      	ldr	r3, [pc, #184]	; (8008c5c <__swsetup_r+0xd0>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d10f      	bne.n	8008bc8 <__swsetup_r+0x3c>
 8008ba8:	686c      	ldr	r4, [r5, #4]
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bb0:	0719      	lsls	r1, r3, #28
 8008bb2:	d42c      	bmi.n	8008c0e <__swsetup_r+0x82>
 8008bb4:	06dd      	lsls	r5, r3, #27
 8008bb6:	d411      	bmi.n	8008bdc <__swsetup_r+0x50>
 8008bb8:	2309      	movs	r3, #9
 8008bba:	6033      	str	r3, [r6, #0]
 8008bbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	e03e      	b.n	8008c46 <__swsetup_r+0xba>
 8008bc8:	4b25      	ldr	r3, [pc, #148]	; (8008c60 <__swsetup_r+0xd4>)
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	d101      	bne.n	8008bd2 <__swsetup_r+0x46>
 8008bce:	68ac      	ldr	r4, [r5, #8]
 8008bd0:	e7eb      	b.n	8008baa <__swsetup_r+0x1e>
 8008bd2:	4b24      	ldr	r3, [pc, #144]	; (8008c64 <__swsetup_r+0xd8>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	bf08      	it	eq
 8008bd8:	68ec      	ldreq	r4, [r5, #12]
 8008bda:	e7e6      	b.n	8008baa <__swsetup_r+0x1e>
 8008bdc:	0758      	lsls	r0, r3, #29
 8008bde:	d512      	bpl.n	8008c06 <__swsetup_r+0x7a>
 8008be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008be2:	b141      	cbz	r1, 8008bf6 <__swsetup_r+0x6a>
 8008be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d002      	beq.n	8008bf2 <__swsetup_r+0x66>
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff fb37 	bl	8008260 <_free_r>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6063      	str	r3, [r4, #4]
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f043 0308 	orr.w	r3, r3, #8
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	b94b      	cbnz	r3, 8008c26 <__swsetup_r+0x9a>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c1c:	d003      	beq.n	8008c26 <__swsetup_r+0x9a>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4630      	mov	r0, r6
 8008c22:	f000 fa05 	bl	8009030 <__smakebuf_r>
 8008c26:	89a0      	ldrh	r0, [r4, #12]
 8008c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c2c:	f010 0301 	ands.w	r3, r0, #1
 8008c30:	d00a      	beq.n	8008c48 <__swsetup_r+0xbc>
 8008c32:	2300      	movs	r3, #0
 8008c34:	60a3      	str	r3, [r4, #8]
 8008c36:	6963      	ldr	r3, [r4, #20]
 8008c38:	425b      	negs	r3, r3
 8008c3a:	61a3      	str	r3, [r4, #24]
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	b943      	cbnz	r3, 8008c52 <__swsetup_r+0xc6>
 8008c40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c44:	d1ba      	bne.n	8008bbc <__swsetup_r+0x30>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	0781      	lsls	r1, r0, #30
 8008c4a:	bf58      	it	pl
 8008c4c:	6963      	ldrpl	r3, [r4, #20]
 8008c4e:	60a3      	str	r3, [r4, #8]
 8008c50:	e7f4      	b.n	8008c3c <__swsetup_r+0xb0>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e7f7      	b.n	8008c46 <__swsetup_r+0xba>
 8008c56:	bf00      	nop
 8008c58:	2000000c 	.word	0x2000000c
 8008c5c:	08009734 	.word	0x08009734
 8008c60:	08009754 	.word	0x08009754
 8008c64:	08009714 	.word	0x08009714

08008c68 <abort>:
 8008c68:	2006      	movs	r0, #6
 8008c6a:	b508      	push	{r3, lr}
 8008c6c:	f000 fa50 	bl	8009110 <raise>
 8008c70:	2001      	movs	r0, #1
 8008c72:	f7f9 fd54 	bl	800271e <_exit>
	...

08008c78 <__sflush_r>:
 8008c78:	898a      	ldrh	r2, [r1, #12]
 8008c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	0710      	lsls	r0, r2, #28
 8008c80:	460c      	mov	r4, r1
 8008c82:	d457      	bmi.n	8008d34 <__sflush_r+0xbc>
 8008c84:	684b      	ldr	r3, [r1, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dc04      	bgt.n	8008c94 <__sflush_r+0x1c>
 8008c8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dc01      	bgt.n	8008c94 <__sflush_r+0x1c>
 8008c90:	2000      	movs	r0, #0
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d0fa      	beq.n	8008c90 <__sflush_r+0x18>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ca0:	682f      	ldr	r7, [r5, #0]
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	d032      	beq.n	8008d0c <__sflush_r+0x94>
 8008ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	075a      	lsls	r2, r3, #29
 8008cac:	d505      	bpl.n	8008cba <__sflush_r+0x42>
 8008cae:	6863      	ldr	r3, [r4, #4]
 8008cb0:	1ac0      	subs	r0, r0, r3
 8008cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb4:	b10b      	cbz	r3, 8008cba <__sflush_r+0x42>
 8008cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb8:	1ac0      	subs	r0, r0, r3
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	6a21      	ldr	r1, [r4, #32]
 8008cc4:	47b0      	blx	r6
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	d106      	bne.n	8008cda <__sflush_r+0x62>
 8008ccc:	6829      	ldr	r1, [r5, #0]
 8008cce:	291d      	cmp	r1, #29
 8008cd0:	d82c      	bhi.n	8008d2c <__sflush_r+0xb4>
 8008cd2:	4a29      	ldr	r2, [pc, #164]	; (8008d78 <__sflush_r+0x100>)
 8008cd4:	40ca      	lsrs	r2, r1
 8008cd6:	07d6      	lsls	r6, r2, #31
 8008cd8:	d528      	bpl.n	8008d2c <__sflush_r+0xb4>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	6062      	str	r2, [r4, #4]
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	04d9      	lsls	r1, r3, #19
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	d504      	bpl.n	8008cf0 <__sflush_r+0x78>
 8008ce6:	1c42      	adds	r2, r0, #1
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0x76>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	b903      	cbnz	r3, 8008cf0 <__sflush_r+0x78>
 8008cee:	6560      	str	r0, [r4, #84]	; 0x54
 8008cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf2:	602f      	str	r7, [r5, #0]
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	d0cb      	beq.n	8008c90 <__sflush_r+0x18>
 8008cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cfc:	4299      	cmp	r1, r3
 8008cfe:	d002      	beq.n	8008d06 <__sflush_r+0x8e>
 8008d00:	4628      	mov	r0, r5
 8008d02:	f7ff faad 	bl	8008260 <_free_r>
 8008d06:	2000      	movs	r0, #0
 8008d08:	6360      	str	r0, [r4, #52]	; 0x34
 8008d0a:	e7c2      	b.n	8008c92 <__sflush_r+0x1a>
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b0      	blx	r6
 8008d14:	1c41      	adds	r1, r0, #1
 8008d16:	d1c7      	bne.n	8008ca8 <__sflush_r+0x30>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0c4      	beq.n	8008ca8 <__sflush_r+0x30>
 8008d1e:	2b1d      	cmp	r3, #29
 8008d20:	d001      	beq.n	8008d26 <__sflush_r+0xae>
 8008d22:	2b16      	cmp	r3, #22
 8008d24:	d101      	bne.n	8008d2a <__sflush_r+0xb2>
 8008d26:	602f      	str	r7, [r5, #0]
 8008d28:	e7b2      	b.n	8008c90 <__sflush_r+0x18>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7ae      	b.n	8008c92 <__sflush_r+0x1a>
 8008d34:	690f      	ldr	r7, [r1, #16]
 8008d36:	2f00      	cmp	r7, #0
 8008d38:	d0aa      	beq.n	8008c90 <__sflush_r+0x18>
 8008d3a:	0793      	lsls	r3, r2, #30
 8008d3c:	bf18      	it	ne
 8008d3e:	2300      	movne	r3, #0
 8008d40:	680e      	ldr	r6, [r1, #0]
 8008d42:	bf08      	it	eq
 8008d44:	694b      	ldreq	r3, [r1, #20]
 8008d46:	1bf6      	subs	r6, r6, r7
 8008d48:	600f      	str	r7, [r1, #0]
 8008d4a:	608b      	str	r3, [r1, #8]
 8008d4c:	2e00      	cmp	r6, #0
 8008d4e:	dd9f      	ble.n	8008c90 <__sflush_r+0x18>
 8008d50:	4633      	mov	r3, r6
 8008d52:	463a      	mov	r2, r7
 8008d54:	4628      	mov	r0, r5
 8008d56:	6a21      	ldr	r1, [r4, #32]
 8008d58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008d5c:	47e0      	blx	ip
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	dc06      	bgt.n	8008d70 <__sflush_r+0xf8>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	e790      	b.n	8008c92 <__sflush_r+0x1a>
 8008d70:	4407      	add	r7, r0
 8008d72:	1a36      	subs	r6, r6, r0
 8008d74:	e7ea      	b.n	8008d4c <__sflush_r+0xd4>
 8008d76:	bf00      	nop
 8008d78:	20400001 	.word	0x20400001

08008d7c <_fflush_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	690b      	ldr	r3, [r1, #16]
 8008d80:	4605      	mov	r5, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b913      	cbnz	r3, 8008d8c <_fflush_r+0x10>
 8008d86:	2500      	movs	r5, #0
 8008d88:	4628      	mov	r0, r5
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	b118      	cbz	r0, 8008d96 <_fflush_r+0x1a>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <_fflush_r+0x1a>
 8008d92:	f000 f887 	bl	8008ea4 <__sinit>
 8008d96:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <_fflush_r+0x6c>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d11b      	bne.n	8008dd4 <_fflush_r+0x58>
 8008d9c:	686c      	ldr	r4, [r5, #4]
 8008d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0ef      	beq.n	8008d86 <_fflush_r+0xa>
 8008da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008da8:	07d0      	lsls	r0, r2, #31
 8008daa:	d404      	bmi.n	8008db6 <_fflush_r+0x3a>
 8008dac:	0599      	lsls	r1, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_fflush_r+0x3a>
 8008db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008db2:	f000 f915 	bl	8008fe0 <__retarget_lock_acquire_recursive>
 8008db6:	4628      	mov	r0, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7ff ff5d 	bl	8008c78 <__sflush_r>
 8008dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	07da      	lsls	r2, r3, #31
 8008dc4:	d4e0      	bmi.n	8008d88 <_fflush_r+0xc>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	059b      	lsls	r3, r3, #22
 8008dca:	d4dd      	bmi.n	8008d88 <_fflush_r+0xc>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f000 f908 	bl	8008fe2 <__retarget_lock_release_recursive>
 8008dd2:	e7d9      	b.n	8008d88 <_fflush_r+0xc>
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <_fflush_r+0x70>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <_fflush_r+0x62>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7df      	b.n	8008d9e <_fflush_r+0x22>
 8008dde:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <_fflush_r+0x74>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7da      	b.n	8008d9e <_fflush_r+0x22>
 8008de8:	08009734 	.word	0x08009734
 8008dec:	08009754 	.word	0x08009754
 8008df0:	08009714 	.word	0x08009714

08008df4 <std>:
 8008df4:	2300      	movs	r3, #0
 8008df6:	b510      	push	{r4, lr}
 8008df8:	4604      	mov	r4, r0
 8008dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8008dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e02:	6083      	str	r3, [r0, #8]
 8008e04:	8181      	strh	r1, [r0, #12]
 8008e06:	6643      	str	r3, [r0, #100]	; 0x64
 8008e08:	81c2      	strh	r2, [r0, #14]
 8008e0a:	6183      	str	r3, [r0, #24]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	2208      	movs	r2, #8
 8008e10:	305c      	adds	r0, #92	; 0x5c
 8008e12:	f7fd fb65 	bl	80064e0 <memset>
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <std+0x38>)
 8008e18:	6224      	str	r4, [r4, #32]
 8008e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <std+0x3c>)
 8008e1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e20:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <std+0x40>)
 8008e22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <std+0x44>)
 8008e26:	6323      	str	r3, [r4, #48]	; 0x30
 8008e28:	bd10      	pop	{r4, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08009149 	.word	0x08009149
 8008e30:	0800916b 	.word	0x0800916b
 8008e34:	080091a3 	.word	0x080091a3
 8008e38:	080091c7 	.word	0x080091c7

08008e3c <_cleanup_r>:
 8008e3c:	4901      	ldr	r1, [pc, #4]	; (8008e44 <_cleanup_r+0x8>)
 8008e3e:	f000 b8af 	b.w	8008fa0 <_fwalk_reent>
 8008e42:	bf00      	nop
 8008e44:	08008d7d 	.word	0x08008d7d

08008e48 <__sfmoreglue>:
 8008e48:	2268      	movs	r2, #104	; 0x68
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	1e4d      	subs	r5, r1, #1
 8008e4e:	4355      	muls	r5, r2
 8008e50:	460e      	mov	r6, r1
 8008e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e56:	f7ff fa6b 	bl	8008330 <_malloc_r>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	b140      	cbz	r0, 8008e70 <__sfmoreglue+0x28>
 8008e5e:	2100      	movs	r1, #0
 8008e60:	e9c0 1600 	strd	r1, r6, [r0]
 8008e64:	300c      	adds	r0, #12
 8008e66:	60a0      	str	r0, [r4, #8]
 8008e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e6c:	f7fd fb38 	bl	80064e0 <memset>
 8008e70:	4620      	mov	r0, r4
 8008e72:	bd70      	pop	{r4, r5, r6, pc}

08008e74 <__sfp_lock_acquire>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__sfp_lock_acquire+0x8>)
 8008e76:	f000 b8b3 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	2000047d 	.word	0x2000047d

08008e80 <__sfp_lock_release>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__sfp_lock_release+0x8>)
 8008e82:	f000 b8ae 	b.w	8008fe2 <__retarget_lock_release_recursive>
 8008e86:	bf00      	nop
 8008e88:	2000047d 	.word	0x2000047d

08008e8c <__sinit_lock_acquire>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	; (8008e94 <__sinit_lock_acquire+0x8>)
 8008e8e:	f000 b8a7 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 8008e92:	bf00      	nop
 8008e94:	2000047e 	.word	0x2000047e

08008e98 <__sinit_lock_release>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__sinit_lock_release+0x8>)
 8008e9a:	f000 b8a2 	b.w	8008fe2 <__retarget_lock_release_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2000047e 	.word	0x2000047e

08008ea4 <__sinit>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	f7ff fff0 	bl	8008e8c <__sinit_lock_acquire>
 8008eac:	69a3      	ldr	r3, [r4, #24]
 8008eae:	b11b      	cbz	r3, 8008eb8 <__sinit+0x14>
 8008eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb4:	f7ff bff0 	b.w	8008e98 <__sinit_lock_release>
 8008eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8008ebe:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <__sinit+0x68>)
 8008ec0:	4a13      	ldr	r2, [pc, #76]	; (8008f10 <__sinit+0x6c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	bf08      	it	eq
 8008eca:	2301      	moveq	r3, #1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	bf08      	it	eq
 8008ed0:	61a3      	streq	r3, [r4, #24]
 8008ed2:	f000 f81f 	bl	8008f14 <__sfp>
 8008ed6:	6060      	str	r0, [r4, #4]
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 f81b 	bl	8008f14 <__sfp>
 8008ede:	60a0      	str	r0, [r4, #8]
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 f817 	bl	8008f14 <__sfp>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2104      	movs	r1, #4
 8008eea:	60e0      	str	r0, [r4, #12]
 8008eec:	6860      	ldr	r0, [r4, #4]
 8008eee:	f7ff ff81 	bl	8008df4 <std>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	2109      	movs	r1, #9
 8008ef6:	68a0      	ldr	r0, [r4, #8]
 8008ef8:	f7ff ff7c 	bl	8008df4 <std>
 8008efc:	2202      	movs	r2, #2
 8008efe:	2112      	movs	r1, #18
 8008f00:	68e0      	ldr	r0, [r4, #12]
 8008f02:	f7ff ff77 	bl	8008df4 <std>
 8008f06:	2301      	movs	r3, #1
 8008f08:	61a3      	str	r3, [r4, #24]
 8008f0a:	e7d1      	b.n	8008eb0 <__sinit+0xc>
 8008f0c:	08009398 	.word	0x08009398
 8008f10:	08008e3d 	.word	0x08008e3d

08008f14 <__sfp>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	4607      	mov	r7, r0
 8008f18:	f7ff ffac 	bl	8008e74 <__sfp_lock_acquire>
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <__sfp+0x84>)
 8008f1e:	681e      	ldr	r6, [r3, #0]
 8008f20:	69b3      	ldr	r3, [r6, #24]
 8008f22:	b913      	cbnz	r3, 8008f2a <__sfp+0x16>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff ffbd 	bl	8008ea4 <__sinit>
 8008f2a:	3648      	adds	r6, #72	; 0x48
 8008f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	d503      	bpl.n	8008f3c <__sfp+0x28>
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	b30b      	cbz	r3, 8008f7c <__sfp+0x68>
 8008f38:	6836      	ldr	r6, [r6, #0]
 8008f3a:	e7f7      	b.n	8008f2c <__sfp+0x18>
 8008f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f40:	b9d5      	cbnz	r5, 8008f78 <__sfp+0x64>
 8008f42:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <__sfp+0x88>)
 8008f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f48:	60e3      	str	r3, [r4, #12]
 8008f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f4c:	f000 f847 	bl	8008fde <__retarget_lock_init_recursive>
 8008f50:	f7ff ff96 	bl	8008e80 <__sfp_lock_release>
 8008f54:	2208      	movs	r2, #8
 8008f56:	4629      	mov	r1, r5
 8008f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f60:	6025      	str	r5, [r4, #0]
 8008f62:	61a5      	str	r5, [r4, #24]
 8008f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f68:	f7fd faba 	bl	80064e0 <memset>
 8008f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f74:	4620      	mov	r0, r4
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f78:	3468      	adds	r4, #104	; 0x68
 8008f7a:	e7d9      	b.n	8008f30 <__sfp+0x1c>
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f7ff ff62 	bl	8008e48 <__sfmoreglue>
 8008f84:	4604      	mov	r4, r0
 8008f86:	6030      	str	r0, [r6, #0]
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d1d5      	bne.n	8008f38 <__sfp+0x24>
 8008f8c:	f7ff ff78 	bl	8008e80 <__sfp_lock_release>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	e7ee      	b.n	8008f74 <__sfp+0x60>
 8008f96:	bf00      	nop
 8008f98:	08009398 	.word	0x08009398
 8008f9c:	ffff0001 	.word	0xffff0001

08008fa0 <_fwalk_reent>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	4688      	mov	r8, r1
 8008fa8:	2700      	movs	r7, #0
 8008faa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8008fb6:	d505      	bpl.n	8008fc4 <_fwalk_reent+0x24>
 8008fb8:	6824      	ldr	r4, [r4, #0]
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d1f7      	bne.n	8008fae <_fwalk_reent+0xe>
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc4:	89ab      	ldrh	r3, [r5, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d907      	bls.n	8008fda <_fwalk_reent+0x3a>
 8008fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	d003      	beq.n	8008fda <_fwalk_reent+0x3a>
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	47c0      	blx	r8
 8008fd8:	4307      	orrs	r7, r0
 8008fda:	3568      	adds	r5, #104	; 0x68
 8008fdc:	e7e9      	b.n	8008fb2 <_fwalk_reent+0x12>

08008fde <__retarget_lock_init_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <__retarget_lock_acquire_recursive>:
 8008fe0:	4770      	bx	lr

08008fe2 <__retarget_lock_release_recursive>:
 8008fe2:	4770      	bx	lr

08008fe4 <__swhatbuf_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fec:	4614      	mov	r4, r2
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	461d      	mov	r5, r3
 8008ff2:	b096      	sub	sp, #88	; 0x58
 8008ff4:	da08      	bge.n	8009008 <__swhatbuf_r+0x24>
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	061a      	lsls	r2, r3, #24
 8009000:	d410      	bmi.n	8009024 <__swhatbuf_r+0x40>
 8009002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009006:	e00e      	b.n	8009026 <__swhatbuf_r+0x42>
 8009008:	466a      	mov	r2, sp
 800900a:	f000 f903 	bl	8009214 <_fstat_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	dbf1      	blt.n	8008ff6 <__swhatbuf_r+0x12>
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800901c:	425a      	negs	r2, r3
 800901e:	415a      	adcs	r2, r3
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	e7ee      	b.n	8009002 <__swhatbuf_r+0x1e>
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	2000      	movs	r0, #0
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	b016      	add	sp, #88	; 0x58
 800902c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009030 <__smakebuf_r>:
 8009030:	898b      	ldrh	r3, [r1, #12]
 8009032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009034:	079d      	lsls	r5, r3, #30
 8009036:	4606      	mov	r6, r0
 8009038:	460c      	mov	r4, r1
 800903a:	d507      	bpl.n	800904c <__smakebuf_r+0x1c>
 800903c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	2301      	movs	r3, #1
 8009046:	6163      	str	r3, [r4, #20]
 8009048:	b002      	add	sp, #8
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	466a      	mov	r2, sp
 800904e:	ab01      	add	r3, sp, #4
 8009050:	f7ff ffc8 	bl	8008fe4 <__swhatbuf_r>
 8009054:	9900      	ldr	r1, [sp, #0]
 8009056:	4605      	mov	r5, r0
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff f969 	bl	8008330 <_malloc_r>
 800905e:	b948      	cbnz	r0, 8009074 <__smakebuf_r+0x44>
 8009060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d4ef      	bmi.n	8009048 <__smakebuf_r+0x18>
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	e7e3      	b.n	800903c <__smakebuf_r+0xc>
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <__smakebuf_r+0x7c>)
 8009076:	62b3      	str	r3, [r6, #40]	; 0x28
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	6020      	str	r0, [r4, #0]
 800907c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	6120      	str	r0, [r4, #16]
 8009086:	6163      	str	r3, [r4, #20]
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	b15b      	cbz	r3, 80090a4 <__smakebuf_r+0x74>
 800908c:	4630      	mov	r0, r6
 800908e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009092:	f000 f8d1 	bl	8009238 <_isatty_r>
 8009096:	b128      	cbz	r0, 80090a4 <__smakebuf_r+0x74>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	89a0      	ldrh	r0, [r4, #12]
 80090a6:	4305      	orrs	r5, r0
 80090a8:	81a5      	strh	r5, [r4, #12]
 80090aa:	e7cd      	b.n	8009048 <__smakebuf_r+0x18>
 80090ac:	08008e3d 	.word	0x08008e3d

080090b0 <_malloc_usable_size_r>:
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f18      	subs	r0, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfbc      	itt	lt
 80090ba:	580b      	ldrlt	r3, [r1, r0]
 80090bc:	18c0      	addlt	r0, r0, r3
 80090be:	4770      	bx	lr

080090c0 <_raise_r>:
 80090c0:	291f      	cmp	r1, #31
 80090c2:	b538      	push	{r3, r4, r5, lr}
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	d904      	bls.n	80090d4 <_raise_r+0x14>
 80090ca:	2316      	movs	r3, #22
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090d6:	b112      	cbz	r2, 80090de <_raise_r+0x1e>
 80090d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090dc:	b94b      	cbnz	r3, 80090f2 <_raise_r+0x32>
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f830 	bl	8009144 <_getpid_r>
 80090e4:	462a      	mov	r2, r5
 80090e6:	4601      	mov	r1, r0
 80090e8:	4620      	mov	r0, r4
 80090ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ee:	f000 b817 	b.w	8009120 <_kill_r>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d00a      	beq.n	800910c <_raise_r+0x4c>
 80090f6:	1c59      	adds	r1, r3, #1
 80090f8:	d103      	bne.n	8009102 <_raise_r+0x42>
 80090fa:	2316      	movs	r3, #22
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	2001      	movs	r0, #1
 8009100:	e7e7      	b.n	80090d2 <_raise_r+0x12>
 8009102:	2400      	movs	r4, #0
 8009104:	4628      	mov	r0, r5
 8009106:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800910a:	4798      	blx	r3
 800910c:	2000      	movs	r0, #0
 800910e:	e7e0      	b.n	80090d2 <_raise_r+0x12>

08009110 <raise>:
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <raise+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f7ff bfd3 	b.w	80090c0 <_raise_r>
 800911a:	bf00      	nop
 800911c:	2000000c 	.word	0x2000000c

08009120 <_kill_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	2300      	movs	r3, #0
 8009124:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_kill_r+0x20>)
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	f7f9 fae6 	bl	80026fe <_kill>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d102      	bne.n	800913c <_kill_r+0x1c>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b103      	cbz	r3, 800913c <_kill_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20000478 	.word	0x20000478

08009144 <_getpid_r>:
 8009144:	f7f9 bad4 	b.w	80026f0 <_getpid>

08009148 <__sread>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	f000 f894 	bl	800927c <_read_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	bfab      	itete	ge
 8009158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800915a:	89a3      	ldrhlt	r3, [r4, #12]
 800915c:	181b      	addge	r3, r3, r0
 800915e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009162:	bfac      	ite	ge
 8009164:	6563      	strge	r3, [r4, #84]	; 0x54
 8009166:	81a3      	strhlt	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__swrite>:
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	461f      	mov	r7, r3
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	4605      	mov	r5, r0
 8009174:	05db      	lsls	r3, r3, #23
 8009176:	460c      	mov	r4, r1
 8009178:	4616      	mov	r6, r2
 800917a:	d505      	bpl.n	8009188 <__swrite+0x1e>
 800917c:	2302      	movs	r3, #2
 800917e:	2200      	movs	r2, #0
 8009180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009184:	f000 f868 	bl	8009258 <_lseek_r>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	4632      	mov	r2, r6
 800918c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	4628      	mov	r0, r5
 8009194:	463b      	mov	r3, r7
 8009196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f000 b817 	b.w	80091d0 <_write_r>

080091a2 <__sseek>:
 80091a2:	b510      	push	{r4, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 f855 	bl	8009258 <_lseek_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	bf15      	itete	ne
 80091b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091be:	81a3      	strheq	r3, [r4, #12]
 80091c0:	bf18      	it	ne
 80091c2:	81a3      	strhne	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__sclose>:
 80091c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ca:	f000 b813 	b.w	80091f4 <_close_r>
	...

080091d0 <_write_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	2200      	movs	r2, #0
 80091da:	4d05      	ldr	r5, [pc, #20]	; (80091f0 <_write_r+0x20>)
 80091dc:	602a      	str	r2, [r5, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f7f9 fac4 	bl	800276c <_write>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_write_r+0x1e>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_write_r+0x1e>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000478 	.word	0x20000478

080091f4 <_close_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	2300      	movs	r3, #0
 80091f8:	4d05      	ldr	r5, [pc, #20]	; (8009210 <_close_r+0x1c>)
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f9 fad0 	bl	80027a4 <_close>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_close_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_close_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000478 	.word	0x20000478

08009214 <_fstat_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	2300      	movs	r3, #0
 8009218:	4d06      	ldr	r5, [pc, #24]	; (8009234 <_fstat_r+0x20>)
 800921a:	4604      	mov	r4, r0
 800921c:	4608      	mov	r0, r1
 800921e:	4611      	mov	r1, r2
 8009220:	602b      	str	r3, [r5, #0]
 8009222:	f7f9 faca 	bl	80027ba <_fstat>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d102      	bne.n	8009230 <_fstat_r+0x1c>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	b103      	cbz	r3, 8009230 <_fstat_r+0x1c>
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	bf00      	nop
 8009234:	20000478 	.word	0x20000478

08009238 <_isatty_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	2300      	movs	r3, #0
 800923c:	4d05      	ldr	r5, [pc, #20]	; (8009254 <_isatty_r+0x1c>)
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f9 fac8 	bl	80027d8 <_isatty>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_isatty_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_isatty_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20000478 	.word	0x20000478

08009258 <_lseek_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	2200      	movs	r2, #0
 8009262:	4d05      	ldr	r5, [pc, #20]	; (8009278 <_lseek_r+0x20>)
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f9 fac0 	bl	80027ec <_lseek>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_lseek_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_lseek_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20000478 	.word	0x20000478

0800927c <_read_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	2200      	movs	r2, #0
 8009286:	4d05      	ldr	r5, [pc, #20]	; (800929c <_read_r+0x20>)
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f9 fa51 	bl	8002732 <_read>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_read_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_read_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000478 	.word	0x20000478

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
