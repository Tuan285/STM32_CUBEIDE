
SMART_GAREN_VER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009e08  08009e08  00019e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2dc  0800a2dc  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2dc  0800a2dc  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2dc  0800a2dc  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800a2e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000220  0800a500  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800a500  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162d0  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003003  00000000  00000000  00036515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a56a  00000000  00000000  0003b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd5  00000000  00000000  00055eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094201  00000000  00000000  0006cb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100d80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006020  00000000  00000000  00100dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dec 	.word	0x08009dec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08009dec 	.word	0x08009dec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000fd2:	bf00      	nop
    __ASM volatile ("NOP");
 8000fd4:	bf00      	nop
    __ASM volatile ("NOP");
 8000fd6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000fe4:	2301      	movs	r3, #1
    }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000edf0 	.word	0xe000edf0
 8000ff4:	e0001000 	.word	0xe0001000

08000ff8 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
    uint8_t i = 0, j = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	77fb      	strb	r3, [r7, #31]
 8001010:	2300      	movs	r3, #0
 8001012:	77bb      	strb	r3, [r7, #30]

    DWT_Delay_Init();
 8001014:	f7ff ffc0 	bl	8000f98 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	77fb      	strb	r3, [r7, #31]
 800101c:	e0e7      	b.n	80011ee <STEPPERS_Init+0x1f6>
    {
    	for(j=0; j<4; j++)
 800101e:	2300      	movs	r3, #0
 8001020:	77bb      	strb	r3, [r7, #30]
 8001022:	e06d      	b.n	8001100 <STEPPERS_Init+0x108>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8001024:	7ffa      	ldrb	r2, [r7, #31]
 8001026:	7fb9      	ldrb	r1, [r7, #30]
 8001028:	487c      	ldr	r0, [pc, #496]	; (800121c <STEPPERS_Init+0x224>)
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	440b      	add	r3, r1
 8001032:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001036:	4a7a      	ldr	r2, [pc, #488]	; (8001220 <STEPPERS_Init+0x228>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d10c      	bne.n	8001056 <STEPPERS_Init+0x5e>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b79      	ldr	r3, [pc, #484]	; (8001224 <STEPPERS_Init+0x22c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a78      	ldr	r2, [pc, #480]	; (8001224 <STEPPERS_Init+0x22c>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b76      	ldr	r3, [pc, #472]	; (8001224 <STEPPERS_Init+0x22c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	e030      	b.n	80010b8 <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8001056:	7ffa      	ldrb	r2, [r7, #31]
 8001058:	7fb9      	ldrb	r1, [r7, #30]
 800105a:	4870      	ldr	r0, [pc, #448]	; (800121c <STEPPERS_Init+0x224>)
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	440b      	add	r3, r1
 8001064:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001068:	4a6f      	ldr	r2, [pc, #444]	; (8001228 <STEPPERS_Init+0x230>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10c      	bne.n	8001088 <STEPPERS_Init+0x90>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <STEPPERS_Init+0x22c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a6c      	ldr	r2, [pc, #432]	; (8001224 <STEPPERS_Init+0x22c>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <STEPPERS_Init+0x22c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	e017      	b.n	80010b8 <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8001088:	7ffa      	ldrb	r2, [r7, #31]
 800108a:	7fb9      	ldrb	r1, [r7, #30]
 800108c:	4863      	ldr	r0, [pc, #396]	; (800121c <STEPPERS_Init+0x224>)
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	440b      	add	r3, r1
 8001096:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800109a:	4a64      	ldr	r2, [pc, #400]	; (800122c <STEPPERS_Init+0x234>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d10b      	bne.n	80010b8 <STEPPERS_Init+0xc0>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <STEPPERS_Init+0x22c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <STEPPERS_Init+0x22c>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <STEPPERS_Init+0x22c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 80010b8:	7ffa      	ldrb	r2, [r7, #31]
 80010ba:	7fb9      	ldrb	r1, [r7, #30]
 80010bc:	4857      	ldr	r0, [pc, #348]	; (800121c <STEPPERS_Init+0x224>)
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	440b      	add	r3, r1
 80010c8:	3308      	adds	r3, #8
 80010ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80010ce:	60fb      	str	r3, [r7, #12]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 80010dc:	7ffa      	ldrb	r2, [r7, #31]
 80010de:	7fb9      	ldrb	r1, [r7, #30]
 80010e0:	484e      	ldr	r0, [pc, #312]	; (800121c <STEPPERS_Init+0x224>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 f8ef 	bl	80042d8 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 80010fa:	7fbb      	ldrb	r3, [r7, #30]
 80010fc:	3301      	adds	r3, #1
 80010fe:	77bb      	strb	r3, [r7, #30]
 8001100:	7fbb      	ldrb	r3, [r7, #30]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d98e      	bls.n	8001024 <STEPPERS_Init+0x2c>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8001106:	7ffa      	ldrb	r2, [r7, #31]
 8001108:	4949      	ldr	r1, [pc, #292]	; (8001230 <STEPPERS_Init+0x238>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3311      	adds	r3, #17
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800111a:	7ffa      	ldrb	r2, [r7, #31]
 800111c:	4944      	ldr	r1, [pc, #272]	; (8001230 <STEPPERS_Init+0x238>)
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	330f      	adds	r3, #15
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 800112e:	7ffa      	ldrb	r2, [r7, #31]
 8001130:	493f      	ldr	r1, [pc, #252]	; (8001230 <STEPPERS_Init+0x238>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8001140:	7ffa      	ldrb	r2, [r7, #31]
 8001142:	493b      	ldr	r1, [pc, #236]	; (8001230 <STEPPERS_Init+0x238>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	3304      	adds	r3, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8001154:	7ffa      	ldrb	r2, [r7, #31]
 8001156:	4936      	ldr	r1, [pc, #216]	; (8001230 <STEPPERS_Init+0x238>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3308      	adds	r3, #8
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8001168:	7ffa      	ldrb	r2, [r7, #31]
 800116a:	4931      	ldr	r1, [pc, #196]	; (8001230 <STEPPERS_Init+0x238>)
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	330e      	adds	r3, #14
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800117c:	7ffa      	ldrb	r2, [r7, #31]
 800117e:	4927      	ldr	r1, [pc, #156]	; (800121c <STEPPERS_Init+0x224>)
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	331b      	adds	r3, #27
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d00a      	beq.n	80011a8 <STEPPERS_Init+0x1b0>
 8001192:	7ffa      	ldrb	r2, [r7, #31]
 8001194:	4921      	ldr	r1, [pc, #132]	; (800121c <STEPPERS_Init+0x224>)
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	331b      	adds	r3, #27
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10a      	bne.n	80011be <STEPPERS_Init+0x1c6>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 80011a8:	7ffa      	ldrb	r2, [r7, #31]
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <STEPPERS_Init+0x238>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3310      	adds	r3, #16
 80011b8:	2204      	movs	r2, #4
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e014      	b.n	80011e8 <STEPPERS_Init+0x1f0>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80011be:	7ffa      	ldrb	r2, [r7, #31]
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <STEPPERS_Init+0x224>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	331b      	adds	r3, #27
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d109      	bne.n	80011e8 <STEPPERS_Init+0x1f0>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 80011d4:	7ffa      	ldrb	r2, [r7, #31]
 80011d6:	4916      	ldr	r1, [pc, #88]	; (8001230 <STEPPERS_Init+0x238>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3310      	adds	r3, #16
 80011e4:	2208      	movs	r2, #8
 80011e6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	3301      	adds	r3, #1
 80011ec:	77fb      	strb	r3, [r7, #31]
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f43f af14 	beq.w	800101e <STEPPERS_Init+0x26>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4619      	mov	r1, r3
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <STEPPERS_Init+0x230>)
 800120e:	f003 f863 	bl	80042d8 <HAL_GPIO_Init>
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08009ea0 	.word	0x08009ea0
 8001220:	40010800 	.word	0x40010800
 8001224:	40021000 	.word	0x40021000
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	2000023c 	.word	0x2000023c

08001234 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8001258:	f7ff fece 	bl	8000ff8 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 800125c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <STEPPERS_Init_TMR+0x90>)
 8001266:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2263      	movs	r2, #99	; 0x63
 800126c:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f004 fbef 	bl	8005a6c <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f004 fdda 	bl	8005e54 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f004 ffb4 	bl	800621c <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f004 fc73 	bl	8005ba0 <HAL_TIM_Base_Start_IT>
    }
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40000800 	.word	0x40000800

080012c8 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	4928      	ldr	r1, [pc, #160]	; (8001380 <STEPPER_SetSpeed+0xb8>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	330c      	adds	r3, #12
 80012ec:	88ba      	ldrh	r2, [r7, #4]
 80012ee:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	4924      	ldr	r1, [pc, #144]	; (8001384 <STEPPER_SetSpeed+0xbc>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	331b      	adds	r3, #27
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d10b      	bne.n	800131e <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	491e      	ldr	r1, [pc, #120]	; (8001384 <STEPPER_SetSpeed+0xbc>)
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	3318      	adds	r3, #24
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e009      	b.n	8001332 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	4918      	ldr	r1, [pc, #96]	; (8001384 <STEPPER_SetSpeed+0xbc>)
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	3318      	adds	r3, #24
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f85c 	bl	80003f8 <__aeabi_ui2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	a10c      	add	r1, pc, #48	; (adr r1, 8001378 <STEPPER_SetSpeed+0xb0>)
 8001346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800134a:	f7ff f9f9 	bl	8000740 <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	79fc      	ldrb	r4, [r7, #7]
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fba0 	bl	8000a9c <__aeabi_d2uiz>
 800135c:	4602      	mov	r2, r0
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <STEPPER_SetSpeed+0xb8>)
 8001360:	4623      	mov	r3, r4
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4423      	add	r3, r4
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3308      	adds	r3, #8
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	00000000 	.word	0x00000000
 800137c:	40ed4c00 	.word	0x40ed4c00
 8001380:	2000023c 	.word	0x2000023c
 8001384:	08009ea0 	.word	0x08009ea0

08001388 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	4999      	ldr	r1, [pc, #612]	; (80015fc <STEPPER_One_Step+0x274>)
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	331a      	adds	r3, #26
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 81c5 	bne.w	8001734 <STEPPER_One_Step+0x3ac>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	4993      	ldr	r1, [pc, #588]	; (80015fc <STEPPER_One_Step+0x274>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	331b      	adds	r3, #27
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 8088 	bne.w	80014d2 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	498d      	ldr	r1, [pc, #564]	; (80015fc <STEPPER_One_Step+0x274>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	4989      	ldr	r1, [pc, #548]	; (80015fc <STEPPER_One_Step+0x274>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3310      	adds	r3, #16
 80013e2:	8819      	ldrh	r1, [r3, #0]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	4c86      	ldr	r4, [pc, #536]	; (8001600 <STEPPER_One_Step+0x278>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4423      	add	r3, r4
 80013f2:	330f      	adds	r3, #15
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b82      	ldr	r3, [pc, #520]	; (8001604 <STEPPER_One_Step+0x27c>)
 80013fa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80013fe:	461a      	mov	r2, r3
 8001400:	f003 f905 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	497d      	ldr	r1, [pc, #500]	; (80015fc <STEPPER_One_Step+0x274>)
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4978      	ldr	r1, [pc, #480]	; (80015fc <STEPPER_One_Step+0x274>)
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3312      	adds	r3, #18
 8001426:	8819      	ldrh	r1, [r3, #0]
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	4c75      	ldr	r4, [pc, #468]	; (8001600 <STEPPER_One_Step+0x278>)
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4423      	add	r3, r4
 8001436:	330f      	adds	r3, #15
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <STEPPER_One_Step+0x27c>)
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	461a      	mov	r2, r3
 8001444:	f003 f8e3 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	496c      	ldr	r1, [pc, #432]	; (80015fc <STEPPER_One_Step+0x274>)
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3308      	adds	r3, #8
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4967      	ldr	r1, [pc, #412]	; (80015fc <STEPPER_One_Step+0x274>)
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3314      	adds	r3, #20
 800146a:	8819      	ldrh	r1, [r3, #0]
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4c64      	ldr	r4, [pc, #400]	; (8001600 <STEPPER_One_Step+0x278>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4423      	add	r3, r4
 800147a:	330f      	adds	r3, #15
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4a61      	ldr	r2, [pc, #388]	; (8001604 <STEPPER_One_Step+0x27c>)
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	461a      	mov	r2, r3
 8001488:	f003 f8c1 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	495b      	ldr	r1, [pc, #364]	; (80015fc <STEPPER_One_Step+0x274>)
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	330c      	adds	r3, #12
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4956      	ldr	r1, [pc, #344]	; (80015fc <STEPPER_One_Step+0x274>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3316      	adds	r3, #22
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	4c53      	ldr	r4, [pc, #332]	; (8001600 <STEPPER_One_Step+0x278>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4423      	add	r3, r4
 80014be:	330f      	adds	r3, #15
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4a50      	ldr	r2, [pc, #320]	; (8001604 <STEPPER_One_Step+0x27c>)
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f003 f89f 	bl	800460e <HAL_GPIO_WritePin>
 80014d0:	e135      	b.n	800173e <STEPPER_One_Step+0x3b6>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80014d2:	79fa      	ldrb	r2, [r7, #7]
 80014d4:	4949      	ldr	r1, [pc, #292]	; (80015fc <STEPPER_One_Step+0x274>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	331b      	adds	r3, #27
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f040 8091 	bne.w	800160c <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4943      	ldr	r1, [pc, #268]	; (80015fc <STEPPER_One_Step+0x274>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	493f      	ldr	r1, [pc, #252]	; (80015fc <STEPPER_One_Step+0x274>)
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3310      	adds	r3, #16
 800150a:	8819      	ldrh	r1, [r3, #0]
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	4c3c      	ldr	r4, [pc, #240]	; (8001600 <STEPPER_One_Step+0x278>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4423      	add	r3, r4
 800151a:	330f      	adds	r3, #15
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <STEPPER_One_Step+0x280>)
 8001522:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001526:	461a      	mov	r2, r3
 8001528:	f003 f871 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	4933      	ldr	r1, [pc, #204]	; (80015fc <STEPPER_One_Step+0x274>)
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3304      	adds	r3, #4
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	492e      	ldr	r1, [pc, #184]	; (80015fc <STEPPER_One_Step+0x274>)
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3312      	adds	r3, #18
 800154e:	8819      	ldrh	r1, [r3, #0]
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4c2b      	ldr	r4, [pc, #172]	; (8001600 <STEPPER_One_Step+0x278>)
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4423      	add	r3, r4
 800155e:	330f      	adds	r3, #15
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <STEPPER_One_Step+0x280>)
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	461a      	mov	r2, r3
 800156c:	f003 f84f 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	4922      	ldr	r1, [pc, #136]	; (80015fc <STEPPER_One_Step+0x274>)
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3308      	adds	r3, #8
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	491d      	ldr	r1, [pc, #116]	; (80015fc <STEPPER_One_Step+0x274>)
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3314      	adds	r3, #20
 8001592:	8819      	ldrh	r1, [r3, #0]
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	4c1a      	ldr	r4, [pc, #104]	; (8001600 <STEPPER_One_Step+0x278>)
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4423      	add	r3, r4
 80015a2:	330f      	adds	r3, #15
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <STEPPER_One_Step+0x280>)
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f003 f82d 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	4911      	ldr	r1, [pc, #68]	; (80015fc <STEPPER_One_Step+0x274>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	330c      	adds	r3, #12
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <STEPPER_One_Step+0x274>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3316      	adds	r3, #22
 80015d6:	8819      	ldrh	r1, [r3, #0]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	4c09      	ldr	r4, [pc, #36]	; (8001600 <STEPPER_One_Step+0x278>)
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4423      	add	r3, r4
 80015e6:	330f      	adds	r3, #15
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <STEPPER_One_Step+0x280>)
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	78db      	ldrb	r3, [r3, #3]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f003 f80b 	bl	800460e <HAL_GPIO_WritePin>
 80015f8:	e0a1      	b.n	800173e <STEPPER_One_Step+0x3b6>
 80015fa:	bf00      	nop
 80015fc:	08009ea0 	.word	0x08009ea0
 8001600:	2000023c 	.word	0x2000023c
 8001604:	20000000 	.word	0x20000000
 8001608:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	498b      	ldr	r1, [pc, #556]	; (800183c <STEPPER_One_Step+0x4b4>)
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	331b      	adds	r3, #27
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b02      	cmp	r3, #2
 8001620:	f040 808d 	bne.w	800173e <STEPPER_One_Step+0x3b6>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	4985      	ldr	r1, [pc, #532]	; (800183c <STEPPER_One_Step+0x4b4>)
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4981      	ldr	r1, [pc, #516]	; (800183c <STEPPER_One_Step+0x4b4>)
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3310      	adds	r3, #16
 8001644:	8819      	ldrh	r1, [r3, #0]
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	4c7d      	ldr	r4, [pc, #500]	; (8001840 <STEPPER_One_Step+0x4b8>)
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4423      	add	r3, r4
 8001654:	330f      	adds	r3, #15
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b7a      	ldr	r3, [pc, #488]	; (8001844 <STEPPER_One_Step+0x4bc>)
 800165c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001660:	461a      	mov	r2, r3
 8001662:	f002 ffd4 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	4974      	ldr	r1, [pc, #464]	; (800183c <STEPPER_One_Step+0x4b4>)
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3304      	adds	r3, #4
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	4970      	ldr	r1, [pc, #448]	; (800183c <STEPPER_One_Step+0x4b4>)
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3312      	adds	r3, #18
 8001688:	8819      	ldrh	r1, [r3, #0]
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	4c6c      	ldr	r4, [pc, #432]	; (8001840 <STEPPER_One_Step+0x4b8>)
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4423      	add	r3, r4
 8001698:	330f      	adds	r3, #15
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4a69      	ldr	r2, [pc, #420]	; (8001844 <STEPPER_One_Step+0x4bc>)
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f002 ffb2 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	4963      	ldr	r1, [pc, #396]	; (800183c <STEPPER_One_Step+0x4b4>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3308      	adds	r3, #8
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	495f      	ldr	r1, [pc, #380]	; (800183c <STEPPER_One_Step+0x4b4>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3314      	adds	r3, #20
 80016cc:	8819      	ldrh	r1, [r3, #0]
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	4c5b      	ldr	r4, [pc, #364]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4423      	add	r3, r4
 80016dc:	330f      	adds	r3, #15
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <STEPPER_One_Step+0x4bc>)
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	461a      	mov	r2, r3
 80016ea:	f002 ff90 	bl	800460e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	4952      	ldr	r1, [pc, #328]	; (800183c <STEPPER_One_Step+0x4b4>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	330c      	adds	r3, #12
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	494e      	ldr	r1, [pc, #312]	; (800183c <STEPPER_One_Step+0x4b4>)
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3316      	adds	r3, #22
 8001710:	8819      	ldrh	r1, [r3, #0]
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	4c4a      	ldr	r4, [pc, #296]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4423      	add	r3, r4
 8001720:	330f      	adds	r3, #15
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4a47      	ldr	r2, [pc, #284]	; (8001844 <STEPPER_One_Step+0x4bc>)
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	461a      	mov	r2, r3
 800172e:	f002 ff6e 	bl	800460e <HAL_GPIO_WritePin>
 8001732:	e004      	b.n	800173e <STEPPER_One_Step+0x3b6>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	493f      	ldr	r1, [pc, #252]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3311      	adds	r3, #17
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d132      	bne.n	80017ba <STEPPER_One_Step+0x432>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	493a      	ldr	r1, [pc, #232]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	330f      	adds	r3, #15
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d112      	bne.n	8001790 <STEPPER_One_Step+0x408>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800176a:	79f9      	ldrb	r1, [r7, #7]
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4834      	ldr	r0, [pc, #208]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3310      	adds	r3, #16
 800177c:	7818      	ldrb	r0, [r3, #0]
 800177e:	4930      	ldr	r1, [pc, #192]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	330f      	adds	r3, #15
 800178c:	4602      	mov	r2, r0
 800178e:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	492b      	ldr	r1, [pc, #172]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	330f      	adds	r3, #15
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	4926      	ldr	r1, [pc, #152]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	330f      	adds	r3, #15
 80017b4:	4602      	mov	r2, r0
 80017b6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80017b8:	e03c      	b.n	8001834 <STEPPER_One_Step+0x4ac>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4920      	ldr	r1, [pc, #128]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3311      	adds	r3, #17
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d131      	bne.n	8001834 <STEPPER_One_Step+0x4ac>
		gs_STEPPER_info[i].Step_Index++;
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	330f      	adds	r3, #15
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2d8      	uxtb	r0, r3
 80017e6:	4916      	ldr	r1, [pc, #88]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	330f      	adds	r3, #15
 80017f4:	4602      	mov	r2, r0
 80017f6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	4911      	ldr	r1, [pc, #68]	; (8001840 <STEPPER_One_Step+0x4b8>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	330f      	adds	r3, #15
 8001808:	7819      	ldrb	r1, [r3, #0]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <STEPPER_One_Step+0x4b8>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4403      	add	r3, r0
 8001818:	3310      	adds	r3, #16
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4299      	cmp	r1, r3
 800181e:	d109      	bne.n	8001834 <STEPPER_One_Step+0x4ac>
			gs_STEPPER_info[i].Step_Index = 0;
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	4907      	ldr	r1, [pc, #28]	; (8001840 <STEPPER_One_Step+0x4b8>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	330f      	adds	r3, #15
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	08009ea0 	.word	0x08009ea0
 8001840:	2000023c 	.word	0x2000023c
 8001844:	20000020 	.word	0x20000020

08001848 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	4910      	ldr	r1, [pc, #64]	; (800189c <STEPPER_Step_NonBlocking+0x54>)
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	4419      	add	r1, r3
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <STEPPER_Step_NonBlocking+0x54>)
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4403      	add	r3, r0
 800187a:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 800187c:	79fa      	ldrb	r2, [r7, #7]
 800187e:	4907      	ldr	r1, [pc, #28]	; (800189c <STEPPER_Step_NonBlocking+0x54>)
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3311      	adds	r3, #17
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	701a      	strb	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000023c 	.word	0x2000023c

080018a0 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <STEPPER_TMR_OVF_ISR+0xe4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d162      	bne.n	800197c <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e05c      	b.n	8001976 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	4932      	ldr	r1, [pc, #200]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	482d      	ldr	r0, [pc, #180]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4403      	add	r3, r0
 80018dc:	3308      	adds	r3, #8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4299      	cmp	r1, r3
 80018e2:	d333      	bcc.n	800194c <STEPPER_TMR_OVF_ISR+0xac>
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4928      	ldr	r1, [pc, #160]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	330e      	adds	r3, #14
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <STEPPER_TMR_OVF_ISR+0xac>
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	4922      	ldr	r1, [pc, #136]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01e      	beq.n	800194c <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fd39 	bl	8001388 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	491b      	ldr	r1, [pc, #108]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	4817      	ldr	r0, [pc, #92]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4403      	add	r3, r0
 8001934:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	4913      	ldr	r1, [pc, #76]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3304      	adds	r3, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e011      	b.n	8001970 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1c59      	adds	r1, r3, #1
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4403      	add	r3, r0
 800196c:	3304      	adds	r3, #4
 800196e:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	3301      	adds	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d09f      	beq.n	80018bc <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40000800 	.word	0x40000800
 8001988:	2000023c 	.word	0x2000023c

0800198c <bt_release_callback>:
#include "button.h"

// ----------------- FUNCTION ---------------
__weak void bt_press_callback(Button_t *button) {
}
__weak void bt_release_callback(Button_t *button) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <bt_press_timout_callback>:
__weak void bt_press_timout_callback(Button_t *button) {
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <bt_handle>:
void bt_handle(Button_t *button) {	// GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(button->PORT, button->PIN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	889b      	ldrh	r3, [r3, #4]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f002 fe0c 	bl	80045e0 <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
	if (state != button->btn_filter) {		/// loc nhieu nut nhan
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	799b      	ldrb	r3, [r3, #6]
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d007      	beq.n	80019e6 <bt_handle+0x36>
		button->btn_filter = state;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	719a      	strb	r2, [r3, #6]
		button->t_debounce = HAL_GetTick();
 80019dc:	f001 fc24 	bl	8003228 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
	}
	if (HAL_GetTick() - button->t_debounce >= 15) {		/// het khoang thoi gian nhieu
 80019e6:	f001 fc1f 	bl	8003228 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b0e      	cmp	r3, #14
 80019f4:	d91f      	bls.n	8001a36 <bt_handle+0x86>
		button->btn_current = state;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	721a      	strb	r2, [r3, #8]
		if (button->btn_current != button->btn_last) {			// dang nhan
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a1a      	ldrb	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	79db      	ldrb	r3, [r3, #7]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d016      	beq.n	8001a36 <bt_handle+0x86>
			if (button->btn_current == 0) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7a1b      	ldrb	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10b      	bne.n	8001a28 <bt_handle+0x78>
				button->time_start_press = HAL_GetTick();
 8001a10:	f001 fc0a 	bl	8003228 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
				button->is_press = 1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	751a      	strb	r2, [r3, #20]
				bt_press_callback(button);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 facd 	bl	8001fc0 <bt_press_callback>
 8001a26:	e002      	b.n	8001a2e <bt_handle+0x7e>
			} else {
				bt_release_callback(button);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffaf 	bl	800198c <bt_release_callback>
			}
			button->btn_last = button->btn_current;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7a1a      	ldrb	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	71da      	strb	r2, [r3, #7]
		}
	}
	if (button->is_press && HAL_GetTick() - button->time_start_press >= 3000) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7d1b      	ldrb	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <bt_handle+0xae>
 8001a3e:	f001 fbf3 	bl	8003228 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d905      	bls.n	8001a5e <bt_handle+0xae>
		button->is_press = 0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	751a      	strb	r2, [r3, #20]
		bt_press_timout_callback(button);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffa0 	bl	800199e <bt_press_timout_callback>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <Button_Init>:
void Button_Init(Button_t *button, GPIO_TypeDef *PORT, uint16_t PIN) {
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80fb      	strh	r3, [r7, #6]
	button->PORT = PORT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	601a      	str	r2, [r3, #0]
	button->PIN = PIN;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	809a      	strh	r2, [r3, #4]
	button->btn_filter = 1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	719a      	strb	r2, [r3, #6]
	button->btn_last = 1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	71da      	strb	r2, [r3, #7]
	button->btn_current = 0;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	721a      	strb	r2, [r3, #8]
	button->t_debounce = 0;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
	button->time_start_press = 0;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
	button->is_press = 0;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	751a      	strb	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f023 030f 	bic.w	r3, r3, #15
 8001ac0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	f043 030c 	orr.w	r3, r3, #12
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	f043 030c 	orr.w	r3, r3, #12
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	f107 0208 	add.w	r2, r7, #8
 8001af4:	2364      	movs	r3, #100	; 0x64
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2304      	movs	r3, #4
 8001afa:	214e      	movs	r1, #78	; 0x4e
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <lcd_send_cmd+0x5c>)
 8001afe:	f002 fee3 	bl	80048c8 <HAL_I2C_Master_Transmit>
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000308 	.word	0x20000308

08001b10 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f023 030f 	bic.w	r3, r3, #15
 8001b20:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f043 030d 	orr.w	r3, r3, #13
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	f043 0309 	orr.w	r3, r3, #9
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	f043 030d 	orr.w	r3, r3, #13
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	f043 0309 	orr.w	r3, r3, #9
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	f107 0208 	add.w	r2, r7, #8
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2304      	movs	r3, #4
 8001b5a:	214e      	movs	r1, #78	; 0x4e
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <lcd_send_data+0x5c>)
 8001b5e:	f002 feb3 	bl	80048c8 <HAL_I2C_Master_Transmit>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000308 	.word	0x20000308

08001b70 <lcd_init>:

void lcd_init (void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001b74:	2033      	movs	r0, #51	; 0x33
 8001b76:	f7ff ff9b 	bl	8001ab0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001b7a:	2032      	movs	r0, #50	; 0x32
 8001b7c:	f7ff ff98 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001b80:	2032      	movs	r0, #50	; 0x32
 8001b82:	f001 fb5b 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001b86:	2028      	movs	r0, #40	; 0x28
 8001b88:	f7ff ff92 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f001 fb55 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff ff8c 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001b98:	2032      	movs	r0, #50	; 0x32
 8001b9a:	f001 fb4f 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001b9e:	2006      	movs	r0, #6
 8001ba0:	f7ff ff86 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f001 fb49 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001baa:	200c      	movs	r0, #12
 8001bac:	f7ff ff80 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001bb0:	2032      	movs	r0, #50	; 0x32
 8001bb2:	f001 fb43 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7ff ff7a 	bl	8001ab0 <lcd_send_cmd>
	HAL_Delay(50);
 8001bbc:	2032      	movs	r0, #50	; 0x32
 8001bbe:	f001 fb3d 	bl	800323c <HAL_Delay>
	lcd_send_cmd (0x80);
 8001bc2:	2080      	movs	r0, #128	; 0x80
 8001bc4:	f7ff ff74 	bl	8001ab0 <lcd_send_cmd>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001bd4:	e006      	b.n	8001be4 <lcd_send_string+0x18>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff96 	bl	8001b10 <lcd_send_data>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f4      	bne.n	8001bd6 <lcd_send_string+0xa>
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	337f      	adds	r3, #127	; 0x7f
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e008      	b.n	8001c2a <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3340      	adds	r3, #64	; 0x40
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff3f 	bl	8001ab0 <lcd_send_cmd>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define STEPPER_MOTOR1   0
void microDelay(uint16_t delay) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <microDelay+0x2c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001c4e:	bf00      	nop
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <microDelay+0x2c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d3f9      	bcc.n	8001c50 <microDelay+0x14>
		;
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	200004bc 	.word	0x200004bc

08001c6c <DHT22_Start>:
float tCelsius = 0;

float tFahrenheit = 0;
float RH = 0;

uint8_t DHT22_Start(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001c82:	2301      	movs	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <DHT22_Start+0xd8>)
 8001c98:	f002 fb1e 	bl	80042d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4828      	ldr	r0, [pc, #160]	; (8001d44 <DHT22_Start+0xd8>)
 8001ca2:	f002 fcb4 	bl	800460e <HAL_GPIO_WritePin>
	microDelay(1300);   // wait for 1300us
 8001ca6:	f240 5014 	movw	r0, #1300	; 0x514
 8001caa:	f7ff ffc7 	bl	8001c3c <microDelay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4824      	ldr	r0, [pc, #144]	; (8001d44 <DHT22_Start+0xd8>)
 8001cb4:	f002 fcab 	bl	800460e <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 8001cb8:	201e      	movs	r0, #30
 8001cba:	f7ff ffbf 	bl	8001c3c <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481e      	ldr	r0, [pc, #120]	; (8001d44 <DHT22_Start+0xd8>)
 8001ccc:	f002 fb04 	bl	80042d8 <HAL_GPIO_Init>
	microDelay(40);
 8001cd0:	2028      	movs	r0, #40	; 0x28
 8001cd2:	f7ff ffb3 	bl	8001c3c <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	481a      	ldr	r0, [pc, #104]	; (8001d44 <DHT22_Start+0xd8>)
 8001cda:	f002 fc81 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <DHT22_Start+0x90>
		microDelay(80);
 8001ce4:	2050      	movs	r0, #80	; 0x50
 8001ce6:	f7ff ffa9 	bl	8001c3c <microDelay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 8001cea:	2101      	movs	r1, #1
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <DHT22_Start+0xd8>)
 8001cee:	f002 fc77 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <DHT22_Start+0x90>
			Response = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8001cfc:	f001 fa94 	bl	8003228 <HAL_GetTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <DHT22_Start+0xdc>)
 8001d04:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8001d06:	f001 fa8f 	bl	8003228 <HAL_GetTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <DHT22_Start+0xe0>)
 8001d0e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8001d10:	e004      	b.n	8001d1c <DHT22_Start+0xb0>
		cMillis = HAL_GetTick();
 8001d12:	f001 fa89 	bl	8003228 <HAL_GetTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <DHT22_Start+0xe0>)
 8001d1a:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4809      	ldr	r0, [pc, #36]	; (8001d44 <DHT22_Start+0xd8>)
 8001d20:	f002 fc5e 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <DHT22_Start+0xcc>
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <DHT22_Start+0xdc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1c9a      	adds	r2, r3, #2
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <DHT22_Start+0xe0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8ec      	bhi.n	8001d12 <DHT22_Start+0xa6>
	}
	return Response;
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40010800 	.word	0x40010800
 8001d48:	20000364 	.word	0x20000364
 8001d4c:	2000035c 	.word	0x2000035c

08001d50 <DHT22_Read>:
uint8_t DHT22_Read(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	e063      	b.n	8001e24 <DHT22_Read+0xd4>
		pMillis = HAL_GetTick();
 8001d5c:	f001 fa64 	bl	8003228 <HAL_GetTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <DHT22_Read+0xe4>)
 8001d64:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001d66:	f001 fa5f 	bl	8003228 <HAL_GetTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <DHT22_Read+0xe8>)
 8001d6e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001d70:	e004      	b.n	8001d7c <DHT22_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 8001d72:	f001 fa59 	bl	8003228 <HAL_GetTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <DHT22_Read+0xe8>)
 8001d7a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	482f      	ldr	r0, [pc, #188]	; (8001e3c <DHT22_Read+0xec>)
 8001d80:	f002 fc2e 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <DHT22_Read+0x48>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <DHT22_Read+0xe4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1c9a      	adds	r2, r3, #2
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <DHT22_Read+0xe8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8ec      	bhi.n	8001d72 <DHT22_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 8001d98:	2028      	movs	r0, #40	; 0x28
 8001d9a:	f7ff ff4f 	bl	8001c3c <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4826      	ldr	r0, [pc, #152]	; (8001e3c <DHT22_Read+0xec>)
 8001da2:	f002 fc1d 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10e      	bne.n	8001dca <DHT22_Read+0x7a>
			b &= ~(1 << (7 - a));
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2201      	movs	r2, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	71bb      	strb	r3, [r7, #6]
 8001dc8:	e00b      	b.n	8001de2 <DHT22_Read+0x92>
		else
			b |= (1 << (7 - a));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f1c3 0307 	rsb	r3, r3, #7
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 8001de2:	f001 fa21 	bl	8003228 <HAL_GetTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <DHT22_Read+0xe4>)
 8001dea:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001dec:	f001 fa1c 	bl	8003228 <HAL_GetTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <DHT22_Read+0xe8>)
 8001df4:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001df6:	e004      	b.n	8001e02 <DHT22_Read+0xb2>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 8001df8:	f001 fa16 	bl	8003228 <HAL_GetTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <DHT22_Read+0xe8>)
 8001e00:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001e02:	2101      	movs	r1, #1
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <DHT22_Read+0xec>)
 8001e06:	f002 fbeb 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <DHT22_Read+0xce>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <DHT22_Read+0xe4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c9a      	adds	r2, r3, #2
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <DHT22_Read+0xe8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d8ec      	bhi.n	8001df8 <DHT22_Read+0xa8>
	for (a = 0; a < 8; a++) {
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	3301      	adds	r3, #1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b07      	cmp	r3, #7
 8001e28:	d998      	bls.n	8001d5c <DHT22_Read+0xc>
		}
	}
	return b;
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000364 	.word	0x20000364
 8001e38:	2000035c 	.word	0x2000035c
 8001e3c:	40010800 	.word	0x40010800

08001e40 <DHT22_value>:
void DHT22_value() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	if (DHT22_Start()) {
 8001e44:	f7ff ff12 	bl	8001c6c <DHT22_Start>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8082 	beq.w	8001f54 <DHT22_value+0x114>
		RH1 = DHT22_Read(); // First 8bits of humidity
 8001e50:	f7ff ff7e 	bl	8001d50 <DHT22_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <DHT22_value+0x118>)
 8001e5a:	701a      	strb	r2, [r3, #0]
		RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001e5c:	f7ff ff78 	bl	8001d50 <DHT22_Read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <DHT22_value+0x11c>)
 8001e66:	701a      	strb	r2, [r3, #0]
		TC1 = DHT22_Read(); // First 8bits of Celsius
 8001e68:	f7ff ff72 	bl	8001d50 <DHT22_Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <DHT22_value+0x120>)
 8001e72:	701a      	strb	r2, [r3, #0]
		TC2 = DHT22_Read(); // Second 8bits of Celsius
 8001e74:	f7ff ff6c 	bl	8001d50 <DHT22_Read>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <DHT22_value+0x124>)
 8001e7e:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read(); // Check sum
 8001e80:	f7ff ff66 	bl	8001d50 <DHT22_Read>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <DHT22_value+0x128>)
 8001e8a:	701a      	strb	r2, [r3, #0]
		CHECK = RH1 + RH2 + TC1 + TC2;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <DHT22_value+0x118>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <DHT22_value+0x11c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <DHT22_value+0x120>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <DHT22_value+0x124>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <DHT22_value+0x12c>)
 8001eaa:	701a      	strb	r2, [r3, #0]
		if (CHECK == SUM) {
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <DHT22_value+0x12c>)
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <DHT22_value+0x128>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d14d      	bne.n	8001f54 <DHT22_value+0x114>
			if (TC1 > 127) // If TC1=10000000, negative temperature
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <DHT22_value+0x120>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da0f      	bge.n	8001ee2 <DHT22_value+0xa2>
					{
				tCelsius = (float) TC2 / 10 * (-1);
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <DHT22_value+0x124>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe febe 	bl	8000c48 <__aeabi_ui2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4928      	ldr	r1, [pc, #160]	; (8001f70 <DHT22_value+0x130>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ffc5 	bl	8000e60 <__aeabi_fdiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <DHT22_value+0x134>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e011      	b.n	8001f06 <DHT22_value+0xc6>
			} else {
				tCelsius = (float) ((TC1 << 8) | TC2) / 10;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <DHT22_value+0x120>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <DHT22_value+0x124>)
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe feae 	bl	8000c50 <__aeabi_i2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	491e      	ldr	r1, [pc, #120]	; (8001f70 <DHT22_value+0x130>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe ffb1 	bl	8000e60 <__aeabi_fdiv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <DHT22_value+0x134>)
 8001f04:	601a      	str	r2, [r3, #0]
			}
			tFahrenheit = tCelsius * 9 / 5 + 32;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <DHT22_value+0x134>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	491b      	ldr	r1, [pc, #108]	; (8001f78 <DHT22_value+0x138>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fef3 	bl	8000cf8 <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4919      	ldr	r1, [pc, #100]	; (8001f7c <DHT22_value+0x13c>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ffa2 	bl	8000e60 <__aeabi_fdiv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fde0 	bl	8000ae8 <__addsf3>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <DHT22_value+0x140>)
 8001f2e:	601a      	str	r2, [r3, #0]
			RH = (float) ((RH1 << 8) | RH2) / 10;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <DHT22_value+0x118>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <DHT22_value+0x11c>)
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fe87 	bl	8000c50 <__aeabi_i2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	490a      	ldr	r1, [pc, #40]	; (8001f70 <DHT22_value+0x130>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ff8a 	bl	8000e60 <__aeabi_fdiv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <DHT22_value+0x144>)
 8001f52:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000521 	.word	0x20000521
 8001f5c:	200004a4 	.word	0x200004a4
 8001f60:	20000379 	.word	0x20000379
 8001f64:	20000431 	.word	0x20000431
 8001f68:	20000520 	.word	0x20000520
 8001f6c:	2000037b 	.word	0x2000037b
 8001f70:	41200000 	.word	0x41200000
 8001f74:	20000250 	.word	0x20000250
 8001f78:	41100000 	.word	0x41100000
 8001f7c:	40a00000 	.word	0x40a00000
 8001f80:	20000254 	.word	0x20000254
 8001f84:	20000258 	.word	0x20000258

08001f88 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	1a8a      	subs	r2, r1, r2
 8001fa2:	fb02 f203 	mul.w	r2, r2, r3
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1acb      	subs	r3, r1, r3
 8001fac:	fb92 f2f3 	sdiv	r2, r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4413      	add	r3, r2
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <bt_press_callback>:
uint8_t bom, boms, quat, den, rem;
uint8_t bom1 = 0, bom2 = 0, quat1 = 0, den1 = 0;
uint8_t tt = 0, tt1 = 0;
uint8_t tt_rem;
void bt_press_callback(Button_t *button) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	if (tt == 1) {					// bang tay
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <bt_press_callback+0xa8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d138      	bne.n	8002042 <bt_press_callback+0x82>
		if (button == &bt1) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a26      	ldr	r2, [pc, #152]	; (800206c <bt_press_callback+0xac>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d10a      	bne.n	8001fee <bt_press_callback+0x2e>
			if (bom == 1) {
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <bt_press_callback+0xb0>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d103      	bne.n	8001fe8 <bt_press_callback+0x28>
				bom = 0;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <bt_press_callback+0xb0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <bt_press_callback+0x2e>
			} else {
				bom = 1;
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <bt_press_callback+0xb0>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
			}
		}
		if (button == &bt2) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <bt_press_callback+0xb4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <bt_press_callback+0x4c>
			if (boms == 1) {
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <bt_press_callback+0xb8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d103      	bne.n	8002006 <bt_press_callback+0x46>
				boms = 0;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <bt_press_callback+0xb8>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e002      	b.n	800200c <bt_press_callback+0x4c>
			} else {
				boms = 1;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <bt_press_callback+0xb8>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (button == &bt3) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a1b      	ldr	r2, [pc, #108]	; (800207c <bt_press_callback+0xbc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d116      	bne.n	8002042 <bt_press_callback+0x82>
			if (tt_rem == 1) {
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <bt_press_callback+0xc0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d109      	bne.n	8002030 <bt_press_callback+0x70>
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CCW);
 800201c:	2201      	movs	r2, #1
 800201e:	f641 1164 	movw	r1, #6500	; 0x1964
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff fc10 	bl	8001848 <STEPPER_Step_NonBlocking>
				tt_rem = 0;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <bt_press_callback+0xc0>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e008      	b.n	8002042 <bt_press_callback+0x82>
			} else {
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CW);
 8002030:	2200      	movs	r2, #0
 8002032:	f641 1164 	movw	r1, #6500	; 0x1964
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fc06 	bl	8001848 <STEPPER_Step_NonBlocking>
				tt_rem = 1;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <bt_press_callback+0xc0>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (button == &bt4) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <bt_press_callback+0xc4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10a      	bne.n	8002060 <bt_press_callback+0xa0>
		if (tt == 1) {
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <bt_press_callback+0xa8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d103      	bne.n	800205a <bt_press_callback+0x9a>
			tt = 0;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <bt_press_callback+0xa8>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
		} else {
			tt = 1;
		}
	}
}
 8002058:	e002      	b.n	8002060 <bt_press_callback+0xa0>
			tt = 1;
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <bt_press_callback+0xa8>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000025c 	.word	0x2000025c
 800206c:	20000508 	.word	0x20000508
 8002070:	20000505 	.word	0x20000505
 8002074:	2000028c 	.word	0x2000028c
 8002078:	20000304 	.word	0x20000304
 800207c:	200002a4 	.word	0x200002a4
 8002080:	20000305 	.word	0x20000305
 8002084:	20000524 	.word	0x20000524

08002088 <on_off_led>:
void on_off_led(uint8_t b, uint8_t b2) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	4613      	mov	r3, r2
 8002096:	71bb      	strb	r3, [r7, #6]
	switch (b) {
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <on_off_led+0x26>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10b      	bne.n	80020ba <on_off_led+0x32>
	case 1:
		HAL_GPIO_WritePin(BOM_GPIO_Port, BOM_Pin, 1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2110      	movs	r1, #16
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <on_off_led+0x64>)
 80020a8:	f002 fab1 	bl	800460e <HAL_GPIO_WritePin>
		break;
 80020ac:	e006      	b.n	80020bc <on_off_led+0x34>
	case 0:
		HAL_GPIO_WritePin(BOM_GPIO_Port, BOM_Pin, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2110      	movs	r1, #16
 80020b2:	480e      	ldr	r0, [pc, #56]	; (80020ec <on_off_led+0x64>)
 80020b4:	f002 faab 	bl	800460e <HAL_GPIO_WritePin>
		break;
 80020b8:	e000      	b.n	80020bc <on_off_led+0x34>
	default:
		break;
 80020ba:	bf00      	nop
	}
	switch (b2) {
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <on_off_led+0x4c>
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10d      	bne.n	80020e2 <on_off_led+0x5a>
	case 1:
		HAL_GPIO_WritePin(BOM2_GPIO_Port, BOM2_Pin, 1);
 80020c6:	2201      	movs	r2, #1
 80020c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020cc:	4808      	ldr	r0, [pc, #32]	; (80020f0 <on_off_led+0x68>)
 80020ce:	f002 fa9e 	bl	800460e <HAL_GPIO_WritePin>
		break;
 80020d2:	e007      	b.n	80020e4 <on_off_led+0x5c>
	case 0:
		HAL_GPIO_WritePin(BOM2_GPIO_Port, BOM2_Pin, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <on_off_led+0x68>)
 80020dc:	f002 fa97 	bl	800460e <HAL_GPIO_WritePin>
		break;
 80020e0:	e000      	b.n	80020e4 <on_off_led+0x5c>
	default:
		break;
 80020e2:	bf00      	nop
	}
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010c00 	.word	0x40010c00
 80020f0:	40010800 	.word	0x40010800

080020f4 <show_lcd>:
uint8_t buf1[20], buf2[20], buf3[20], buffer[30];
void show_lcd() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	sprintf((char*) buf1, "Nhiet Do: %2.1f ", tCelsius);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <show_lcd+0x6c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f99d 	bl	800043c <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4917      	ldr	r1, [pc, #92]	; (8002164 <show_lcd+0x70>)
 8002108:	4817      	ldr	r0, [pc, #92]	; (8002168 <show_lcd+0x74>)
 800210a:	f005 fc37 	bl	800797c <siprintf>
	sprintf((char*) buf2, "DAD:%d", DAD);
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <show_lcd+0x78>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <show_lcd+0x7c>)
 8002116:	4817      	ldr	r0, [pc, #92]	; (8002174 <show_lcd+0x80>)
 8002118:	f005 fc30 	bl	800797c <siprintf>
	sprintf((char*) buf3, " DA:%.1f", RH);
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <show_lcd+0x84>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f98b 	bl	800043c <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4914      	ldr	r1, [pc, #80]	; (800217c <show_lcd+0x88>)
 800212c:	4814      	ldr	r0, [pc, #80]	; (8002180 <show_lcd+0x8c>)
 800212e:	f005 fc25 	bl	800797c <siprintf>
	//lcd_clear_display();
	lcd_goto_XY(1, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff fd5e 	bl	8001bf6 <lcd_goto_XY>
	lcd_send_string((char*) buf1);
 800213a:	480b      	ldr	r0, [pc, #44]	; (8002168 <show_lcd+0x74>)
 800213c:	f7ff fd46 	bl	8001bcc <lcd_send_string>
	lcd_send_string("C");
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <show_lcd+0x90>)
 8002142:	f7ff fd43 	bl	8001bcc <lcd_send_string>
	lcd_goto_XY(2, 0);
 8002146:	2100      	movs	r1, #0
 8002148:	2002      	movs	r0, #2
 800214a:	f7ff fd54 	bl	8001bf6 <lcd_goto_XY>
	lcd_send_string((char*) buf2);
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <show_lcd+0x80>)
 8002150:	f7ff fd3c 	bl	8001bcc <lcd_send_string>
	lcd_send_string((char*) buf3);
 8002154:	480a      	ldr	r0, [pc, #40]	; (8002180 <show_lcd+0x8c>)
 8002156:	f7ff fd39 	bl	8001bcc <lcd_send_string>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000250 	.word	0x20000250
 8002164:	08009e08 	.word	0x08009e08
 8002168:	200003bc 	.word	0x200003bc
 800216c:	200003b8 	.word	0x200003b8
 8002170:	08009e1c 	.word	0x08009e1c
 8002174:	200003d4 	.word	0x200003d4
 8002178:	20000258 	.word	0x20000258
 800217c:	08009e24 	.word	0x08009e24
 8002180:	20000274 	.word	0x20000274
 8002184:	08009e30 	.word	0x08009e30

08002188 <HAL_UARTEx_RxEventCallback>:
uint8_t DataRx[20];
uint8_t flag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_UARTEx_RxEventCallback+0x24>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DataRx, sizeof(DataRx));
 800219a:	2214      	movs	r2, #20
 800219c:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_UARTEx_RxEventCallback+0x28>)
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_UARTEx_RxEventCallback+0x2c>)
 80021a0:	f004 f97f 	bl	80064a2 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000025d 	.word	0x2000025d
 80021b0:	200004a8 	.word	0x200004a8
 80021b4:	200003e8 	.word	0x200003e8

080021b8 <check>:
void check() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	if (strcmp((char*) DataRx, "B11\r\n") == 0) {
 80021bc:	4940      	ldr	r1, [pc, #256]	; (80022c0 <check+0x108>)
 80021be:	4841      	ldr	r0, [pc, #260]	; (80022c4 <check+0x10c>)
 80021c0:	f7fd ffc6 	bl	8000150 <strcmp>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <check+0x1a>
		bom = 1;
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <check+0x110>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
	} else if (strcmp((char*) DataRx, "T0\r\n") == 0) {
		tt = 0;
	} else if (strcmp((char*) DataRx, "T1\r\n") == 0) {
		tt = 1;
	}
}
 80021d0:	e073      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "B10\r\n") == 0) {
 80021d2:	493e      	ldr	r1, [pc, #248]	; (80022cc <check+0x114>)
 80021d4:	483b      	ldr	r0, [pc, #236]	; (80022c4 <check+0x10c>)
 80021d6:	f7fd ffbb 	bl	8000150 <strcmp>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <check+0x30>
		bom = 0;
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <check+0x110>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
}
 80021e6:	e068      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "B20\r\n") == 0) {
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <check+0x118>)
 80021ea:	4836      	ldr	r0, [pc, #216]	; (80022c4 <check+0x10c>)
 80021ec:	f7fd ffb0 	bl	8000150 <strcmp>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <check+0x46>
		boms = 0;
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <check+0x11c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
}
 80021fc:	e05d      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "B21\r\n") == 0) {
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <check+0x120>)
 8002200:	4830      	ldr	r0, [pc, #192]	; (80022c4 <check+0x10c>)
 8002202:	f7fd ffa5 	bl	8000150 <strcmp>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <check+0x5c>
		boms = 1;
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <check+0x11c>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	e052      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "R0\r\n") == 0) {
 8002214:	4931      	ldr	r1, [pc, #196]	; (80022dc <check+0x124>)
 8002216:	482b      	ldr	r0, [pc, #172]	; (80022c4 <check+0x10c>)
 8002218:	f7fd ff9a 	bl	8000150 <strcmp>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d117      	bne.n	8002252 <check+0x9a>
		if (tt_rem == 1) {
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <check+0x128>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d109      	bne.n	800223e <check+0x86>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CCW);
 800222a:	2201      	movs	r2, #1
 800222c:	f641 1164 	movw	r1, #6500	; 0x1964
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff fb09 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 0;
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <check+0x128>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
}
 800223c:	e03d      	b.n	80022ba <check+0x102>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CW);
 800223e:	2200      	movs	r2, #0
 8002240:	f641 1164 	movw	r1, #6500	; 0x1964
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff faff 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 1;
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <check+0x128>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
}
 8002250:	e033      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "R1\r\n") == 0) {
 8002252:	4924      	ldr	r1, [pc, #144]	; (80022e4 <check+0x12c>)
 8002254:	481b      	ldr	r0, [pc, #108]	; (80022c4 <check+0x10c>)
 8002256:	f7fd ff7b 	bl	8000150 <strcmp>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d117      	bne.n	8002290 <check+0xd8>
		if (tt_rem == 1) {
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <check+0x128>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d109      	bne.n	800227c <check+0xc4>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CCW);
 8002268:	2201      	movs	r2, #1
 800226a:	f641 1164 	movw	r1, #6500	; 0x1964
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff faea 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 0;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <check+0x128>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
}
 800227a:	e01e      	b.n	80022ba <check+0x102>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CW);
 800227c:	2200      	movs	r2, #0
 800227e:	f641 1164 	movw	r1, #6500	; 0x1964
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fae0 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 1;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <check+0x128>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	e014      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "T0\r\n") == 0) {
 8002290:	4915      	ldr	r1, [pc, #84]	; (80022e8 <check+0x130>)
 8002292:	480c      	ldr	r0, [pc, #48]	; (80022c4 <check+0x10c>)
 8002294:	f7fd ff5c 	bl	8000150 <strcmp>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <check+0xee>
		tt = 0;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <check+0x134>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
}
 80022a4:	e009      	b.n	80022ba <check+0x102>
	} else if (strcmp((char*) DataRx, "T1\r\n") == 0) {
 80022a6:	4912      	ldr	r1, [pc, #72]	; (80022f0 <check+0x138>)
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <check+0x10c>)
 80022aa:	f7fd ff51 	bl	8000150 <strcmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <check+0x102>
		tt = 1;
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <check+0x134>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08009e34 	.word	0x08009e34
 80022c4:	200004a8 	.word	0x200004a8
 80022c8:	20000505 	.word	0x20000505
 80022cc:	08009e3c 	.word	0x08009e3c
 80022d0:	08009e44 	.word	0x08009e44
 80022d4:	20000304 	.word	0x20000304
 80022d8:	08009e4c 	.word	0x08009e4c
 80022dc:	08009e54 	.word	0x08009e54
 80022e0:	20000305 	.word	0x20000305
 80022e4:	08009e5c 	.word	0x08009e5c
 80022e8:	08009e64 	.word	0x08009e64
 80022ec:	2000025c 	.word	0x2000025c
 80022f0:	08009e6c 	.word	0x08009e6c

080022f4 <HAL_TIM_PeriodElapsedCallback>:
uint8_t cb_mua, check_cbmua;
uint8_t b1, b2, b3, b4;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff facf 	bl	80018a0 <STEPPER_TMR_OVF_ISR>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <auto_rem>:
uint16_t AD_RES = 0;
uint8_t t_rems;
void auto_rem() {
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	af00      	add	r7, sp, #0
	cb_mua = HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin);
 8002310:	2110      	movs	r1, #16
 8002312:	4824      	ldr	r0, [pc, #144]	; (80023a4 <auto_rem+0x98>)
 8002314:	f002 f964 	bl	80045e0 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <auto_rem+0x9c>)
 800231e:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(MUA_GPIO_Port, MUA_Pin) == 0) {
 8002320:	2110      	movs	r1, #16
 8002322:	4820      	ldr	r0, [pc, #128]	; (80023a4 <auto_rem+0x98>)
 8002324:	f002 f95c 	bl	80045e0 <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <auto_rem+0x50>
		t_prev2  = HAL_GetTick();
 800232e:	f000 ff7b 	bl	8003228 <HAL_GetTick>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	491c      	ldr	r1, [pc, #112]	; (80023ac <auto_rem+0xa0>)
 800233c:	e9c1 2300 	strd	r2, r3, [r1]
		if (tt_rem == 0) {
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <auto_rem+0xa4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d12a      	bne.n	800239e <auto_rem+0x92>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CW);
 8002348:	2200      	movs	r2, #0
 800234a:	f641 1164 	movw	r1, #6500	; 0x1964
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fa7a 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 1;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <auto_rem+0xa4>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
		if (tt_rem == 1 && HAL_GetTick() - t_prev2 >= 3000) {
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CCW);
			tt_rem = 0;
		}
	}
}
 800235a:	e020      	b.n	800239e <auto_rem+0x92>
		if (tt_rem == 1 && HAL_GetTick() - t_prev2 >= 3000) {
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <auto_rem+0xa4>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d11c      	bne.n	800239e <auto_rem+0x92>
 8002364:	f000 ff60 	bl	8003228 <HAL_GetTick>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <auto_rem+0xa0>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	1a84      	subs	r4, r0, r2
 8002378:	eb61 0503 	sbc.w	r5, r1, r3
 800237c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	42ab      	cmp	r3, r5
 8002386:	bf08      	it	eq
 8002388:	42a2      	cmpeq	r2, r4
 800238a:	d208      	bcs.n	800239e <auto_rem+0x92>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 6500, DIR_CCW);
 800238c:	2201      	movs	r2, #1
 800238e:	f641 1164 	movw	r1, #6500	; 0x1964
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fa58 	bl	8001848 <STEPPER_Step_NonBlocking>
			tt_rem = 0;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <auto_rem+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	bdb0      	pop	{r4, r5, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40010800 	.word	0x40010800
 80023a8:	20000452 	.word	0x20000452
 80023ac:	20000370 	.word	0x20000370
 80023b0:	20000305 	.word	0x20000305

080023b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80023b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023b8:	b08d      	sub	sp, #52	; 0x34
 80023ba:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80023bc:	f000 fedc 	bl	8003178 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80023c0:	f000 f9a0 	bl	8002704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023c4:	f000 fb6e 	bl	8002aa4 <MX_GPIO_Init>
	MX_DMA_Init();
 80023c8:	f000 fb4e 	bl	8002a68 <MX_DMA_Init>
	MX_ADC1_Init();
 80023cc:	f000 f9f6 	bl	80027bc <MX_ADC1_Init>
	MX_I2C1_Init();
 80023d0:	f000 fa54 	bl	800287c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80023d4:	f000 fb1e 	bl	8002a14 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80023d8:	f000 fa7e 	bl	80028d8 <MX_TIM1_Init>
	MX_TIM4_Init();
 80023dc:	f000 facc 	bl	8002978 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	Button_Init(&bt1, BT1_GPIO_Port, BT1_Pin);
 80023e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e4:	49a9      	ldr	r1, [pc, #676]	; (800268c <main+0x2d8>)
 80023e6:	48aa      	ldr	r0, [pc, #680]	; (8002690 <main+0x2dc>)
 80023e8:	f7ff fb3d 	bl	8001a66 <Button_Init>
	Button_Init(&bt2, BT2_GPIO_Port, BT2_Pin);
 80023ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f0:	49a6      	ldr	r1, [pc, #664]	; (800268c <main+0x2d8>)
 80023f2:	48a8      	ldr	r0, [pc, #672]	; (8002694 <main+0x2e0>)
 80023f4:	f7ff fb37 	bl	8001a66 <Button_Init>
	Button_Init(&bt3, BT3_GPIO_Port, BT3_Pin);
 80023f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fc:	49a3      	ldr	r1, [pc, #652]	; (800268c <main+0x2d8>)
 80023fe:	48a6      	ldr	r0, [pc, #664]	; (8002698 <main+0x2e4>)
 8002400:	f7ff fb31 	bl	8001a66 <Button_Init>
	Button_Init(&bt4, BT4_GPIO_Port, BT4_Pin);
 8002404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002408:	49a0      	ldr	r1, [pc, #640]	; (800268c <main+0x2d8>)
 800240a:	48a4      	ldr	r0, [pc, #656]	; (800269c <main+0x2e8>)
 800240c:	f7ff fb2b 	bl	8001a66 <Button_Init>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DataRx, sizeof(DataRx));
 8002410:	2214      	movs	r2, #20
 8002412:	49a3      	ldr	r1, [pc, #652]	; (80026a0 <main+0x2ec>)
 8002414:	48a3      	ldr	r0, [pc, #652]	; (80026a4 <main+0x2f0>)
 8002416:	f004 f844 	bl	80064a2 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_ADC_Start_DMA(&hadc1, value_adc, 3);
 800241a:	2203      	movs	r2, #3
 800241c:	49a2      	ldr	r1, [pc, #648]	; (80026a8 <main+0x2f4>)
 800241e:	48a3      	ldr	r0, [pc, #652]	; (80026ac <main+0x2f8>)
 8002420:	f001 f808 	bl	8003434 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002424:	48a1      	ldr	r0, [pc, #644]	; (80026ac <main+0x2f8>)
 8002426:	f001 faf9 	bl	8003a1c <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start(&htim1);
 800242a:	48a1      	ldr	r0, [pc, #644]	; (80026b0 <main+0x2fc>)
 800242c:	f003 fb6e 	bl	8005b0c <HAL_TIM_Base_Start>

	lcd_init();
 8002430:	f7ff fb9e 	bl	8001b70 <lcd_init>
	lcd_goto_XY(1, 0);
 8002434:	2100      	movs	r1, #0
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fbdd 	bl	8001bf6 <lcd_goto_XY>
	lcd_send_string("XIN CHAO");
 800243c:	489d      	ldr	r0, [pc, #628]	; (80026b4 <main+0x300>)
 800243e:	f7ff fbc5 	bl	8001bcc <lcd_send_string>
	t_prev = HAL_GetTick();
 8002442:	f000 fef1 	bl	8003228 <HAL_GetTick>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	499a      	ldr	r1, [pc, #616]	; (80026b8 <main+0x304>)
 8002450:	e9c1 2300 	strd	r2, r3, [r1]
	t_prev2 = HAL_GetTick();
 8002454:	f000 fee8 	bl	8003228 <HAL_GetTick>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	4996      	ldr	r1, [pc, #600]	; (80026bc <main+0x308>)
 8002462:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246c:	4894      	ldr	r0, [pc, #592]	; (80026c0 <main+0x30c>)
 800246e:	f002 f8ce 	bl	800460e <HAL_GPIO_WritePin>
	STEPPERS_Init_TMR(&htim4);
 8002472:	4894      	ldr	r0, [pc, #592]	; (80026c4 <main+0x310>)
 8002474:	f7fe fede 	bl	8001234 <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 4096 >> 8);
 8002478:	2110      	movs	r1, #16
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe ff24 	bl	80012c8 <STEPPER_SetSpeed>
	tt = 1;
 8002480:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <main+0x314>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
	bom = 0;
 8002486:	4b91      	ldr	r3, [pc, #580]	; (80026cc <main+0x318>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
	boms = 0;
 800248c:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <main+0x31c>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		bt_handle(&bt1);
 8002492:	487f      	ldr	r0, [pc, #508]	; (8002690 <main+0x2dc>)
 8002494:	f7ff fa8c 	bl	80019b0 <bt_handle>
		bt_handle(&bt2);
 8002498:	487e      	ldr	r0, [pc, #504]	; (8002694 <main+0x2e0>)
 800249a:	f7ff fa89 	bl	80019b0 <bt_handle>
		bt_handle(&bt3);
 800249e:	487e      	ldr	r0, [pc, #504]	; (8002698 <main+0x2e4>)
 80024a0:	f7ff fa86 	bl	80019b0 <bt_handle>
		bt_handle(&bt4);
 80024a4:	487d      	ldr	r0, [pc, #500]	; (800269c <main+0x2e8>)
 80024a6:	f7ff fa83 	bl	80019b0 <bt_handle>
		b1 = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 80024aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ae:	4877      	ldr	r0, [pc, #476]	; (800268c <main+0x2d8>)
 80024b0:	f002 f896 	bl	80045e0 <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b86      	ldr	r3, [pc, #536]	; (80026d4 <main+0x320>)
 80024ba:	701a      	strb	r2, [r3, #0]
		b2 = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 80024bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c0:	4872      	ldr	r0, [pc, #456]	; (800268c <main+0x2d8>)
 80024c2:	f002 f88d 	bl	80045e0 <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <main+0x324>)
 80024cc:	701a      	strb	r2, [r3, #0]
		b3 = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 80024ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d2:	486e      	ldr	r0, [pc, #440]	; (800268c <main+0x2d8>)
 80024d4:	f002 f884 	bl	80045e0 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <main+0x328>)
 80024de:	701a      	strb	r2, [r3, #0]
		b4 = HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin);
 80024e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e4:	4869      	ldr	r0, [pc, #420]	; (800268c <main+0x2d8>)
 80024e6:	f002 f87b 	bl	80045e0 <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <main+0x32c>)
 80024f0:	701a      	strb	r2, [r3, #0]
		if (flag == 1) {
 80024f2:	4b7c      	ldr	r3, [pc, #496]	; (80026e4 <main+0x330>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10d      	bne.n	8002516 <main+0x162>
			check();
 80024fa:	f7ff fe5d 	bl	80021b8 <check>
			memset(DataRx, 0, strlen((char*) DataRx));
 80024fe:	4868      	ldr	r0, [pc, #416]	; (80026a0 <main+0x2ec>)
 8002500:	f7fd fe30 	bl	8000164 <strlen>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	2100      	movs	r1, #0
 800250a:	4865      	ldr	r0, [pc, #404]	; (80026a0 <main+0x2ec>)
 800250c:	f004 fdce 	bl	80070ac <memset>
			flag = 0;
 8002510:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <main+0x330>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - t_prev >= 500) {
 8002516:	f000 fe87 	bl	8003228 <HAL_GetTick>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <main+0x304>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	1a84      	subs	r4, r0, r2
 800252a:	eb61 0503 	sbc.w	r5, r1, r3
 800252e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	42ab      	cmp	r3, r5
 8002538:	bf08      	it	eq
 800253a:	42a2      	cmpeq	r2, r4
 800253c:	d27a      	bcs.n	8002634 <main+0x280>
			//HAL_GPIO_TogglePin(DEN_GPIO_Port, DEN_Pin);
			DHT22_value();
 800253e:	f7ff fc7f 	bl	8001e40 <DHT22_value>
			HAL_ADC_Start_DMA(&hadc1, value_adc, 3);
 8002542:	2203      	movs	r2, #3
 8002544:	4958      	ldr	r1, [pc, #352]	; (80026a8 <main+0x2f4>)
 8002546:	4859      	ldr	r0, [pc, #356]	; (80026ac <main+0x2f8>)
 8002548:	f000 ff74 	bl	8003434 <HAL_ADC_Start_DMA>
			DAD = map(value_adc[0], 0, 4096, 0, 100);
 800254c:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <main+0x2f4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	2364      	movs	r3, #100	; 0x64
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255c:	2100      	movs	r1, #0
 800255e:	f7ff fd13 	bl	8001f88 <map>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <main+0x334>)
 8002568:	801a      	strh	r2, [r3, #0]
			DAD2 = map(value_adc[1], 0, 4096, 0, 100);
 800256a:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <main+0x2f4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	2364      	movs	r3, #100	; 0x64
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800257a:	2100      	movs	r1, #0
 800257c:	f7ff fd04 	bl	8001f88 <map>
 8002580:	4603      	mov	r3, r0
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <main+0x338>)
 8002586:	801a      	strh	r2, [r3, #0]
			if (value_adc[2] >= 2800) {
 8002588:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <main+0x2f4>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002590:	d305      	bcc.n	800259e <main+0x1ea>
				HAL_GPIO_WritePin(DEN_GPIO_Port, DEN_Pin, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	2108      	movs	r1, #8
 8002596:	483d      	ldr	r0, [pc, #244]	; (800268c <main+0x2d8>)
 8002598:	f002 f839 	bl	800460e <HAL_GPIO_WritePin>
 800259c:	e004      	b.n	80025a8 <main+0x1f4>
			} else {
				HAL_GPIO_WritePin(DEN_GPIO_Port, DEN_Pin, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2108      	movs	r1, #8
 80025a2:	483a      	ldr	r0, [pc, #232]	; (800268c <main+0x2d8>)
 80025a4:	f002 f833 	bl	800460e <HAL_GPIO_WritePin>
			}
			show_lcd();
 80025a8:	f7ff fda4 	bl	80020f4 <show_lcd>
			sprintf((char*) buffer, "%.1f/%.1f/%d/%d/%d/%d/%d/%d\r\n", tCelsius,
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <main+0x33c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ff43 	bl	800043c <__aeabi_f2d>
 80025b6:	4680      	mov	r8, r0
 80025b8:	4689      	mov	r9, r1
 80025ba:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <main+0x340>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff3c 	bl	800043c <__aeabi_f2d>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4947      	ldr	r1, [pc, #284]	; (80026e8 <main+0x334>)
 80025ca:	8809      	ldrh	r1, [r1, #0]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4947      	ldr	r1, [pc, #284]	; (80026ec <main+0x338>)
 80025d0:	8809      	ldrh	r1, [r1, #0]
 80025d2:	460e      	mov	r6, r1
 80025d4:	493d      	ldr	r1, [pc, #244]	; (80026cc <main+0x318>)
 80025d6:	7809      	ldrb	r1, [r1, #0]
 80025d8:	60f9      	str	r1, [r7, #12]
 80025da:	493d      	ldr	r1, [pc, #244]	; (80026d0 <main+0x31c>)
 80025dc:	7809      	ldrb	r1, [r1, #0]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	4945      	ldr	r1, [pc, #276]	; (80026f8 <main+0x344>)
 80025e2:	7809      	ldrb	r1, [r1, #0]
 80025e4:	6079      	str	r1, [r7, #4]
 80025e6:	4938      	ldr	r1, [pc, #224]	; (80026c8 <main+0x314>)
 80025e8:	7809      	ldrb	r1, [r1, #0]
 80025ea:	9107      	str	r1, [sp, #28]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	9106      	str	r1, [sp, #24]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	9105      	str	r1, [sp, #20]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	9104      	str	r1, [sp, #16]
 80025f8:	9603      	str	r6, [sp, #12]
 80025fa:	9002      	str	r0, [sp, #8]
 80025fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	493d      	ldr	r1, [pc, #244]	; (80026fc <main+0x348>)
 8002606:	483e      	ldr	r0, [pc, #248]	; (8002700 <main+0x34c>)
 8002608:	f005 f9b8 	bl	800797c <siprintf>
					RH, DAD, DAD2, bom, boms, tt_rem, tt);
			HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 2000);
 800260c:	483c      	ldr	r0, [pc, #240]	; (8002700 <main+0x34c>)
 800260e:	f7fd fda9 	bl	8000164 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800261a:	4939      	ldr	r1, [pc, #228]	; (8002700 <main+0x34c>)
 800261c:	4821      	ldr	r0, [pc, #132]	; (80026a4 <main+0x2f0>)
 800261e:	f003 febd 	bl	800639c <HAL_UART_Transmit>
			t_prev = HAL_GetTick();
 8002622:	f000 fe01 	bl	8003228 <HAL_GetTick>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	4922      	ldr	r1, [pc, #136]	; (80026b8 <main+0x304>)
 8002630:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (tt == 0) {
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <main+0x314>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d11d      	bne.n	8002678 <main+0x2c4>
			auto_rem();
 800263c:	f7ff fe66 	bl	800230c <auto_rem>
			if (DAD >= 65) {
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <main+0x334>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d902      	bls.n	800264e <main+0x29a>
				bom = 1;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <main+0x318>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
			}
			if (DAD < 30) {
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <main+0x334>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	2b1d      	cmp	r3, #29
 8002654:	d802      	bhi.n	800265c <main+0x2a8>
				bom = 0;
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <main+0x318>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
			}
			if (DAD2 >= 60) {
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <main+0x338>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b3b      	cmp	r3, #59	; 0x3b
 8002662:	d902      	bls.n	800266a <main+0x2b6>
				boms = 1;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <main+0x31c>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
			}
			if (DAD2 < 60) {
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <main+0x338>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b3b      	cmp	r3, #59	; 0x3b
 8002670:	d802      	bhi.n	8002678 <main+0x2c4>
				boms = 0;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <main+0x31c>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
			}
		}
		on_off_led(bom, boms);
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <main+0x318>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <main+0x31c>)
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd00 	bl	8002088 <on_off_led>
		bt_handle(&bt1);
 8002688:	e703      	b.n	8002492 <main+0xde>
 800268a:	bf00      	nop
 800268c:	40010c00 	.word	0x40010c00
 8002690:	20000508 	.word	0x20000508
 8002694:	2000028c 	.word	0x2000028c
 8002698:	200002a4 	.word	0x200002a4
 800269c:	20000524 	.word	0x20000524
 80026a0:	200004a8 	.word	0x200004a8
 80026a4:	200003e8 	.word	0x200003e8
 80026a8:	20000454 	.word	0x20000454
 80026ac:	20000388 	.word	0x20000388
 80026b0:	200004bc 	.word	0x200004bc
 80026b4:	08009e74 	.word	0x08009e74
 80026b8:	20000380 	.word	0x20000380
 80026bc:	20000370 	.word	0x20000370
 80026c0:	40011000 	.word	0x40011000
 80026c4:	200002bc 	.word	0x200002bc
 80026c8:	2000025c 	.word	0x2000025c
 80026cc:	20000505 	.word	0x20000505
 80026d0:	20000304 	.word	0x20000304
 80026d4:	20000360 	.word	0x20000360
 80026d8:	20000270 	.word	0x20000270
 80026dc:	20000504 	.word	0x20000504
 80026e0:	2000037a 	.word	0x2000037a
 80026e4:	2000025d 	.word	0x2000025d
 80026e8:	200003b8 	.word	0x200003b8
 80026ec:	200003d0 	.word	0x200003d0
 80026f0:	20000250 	.word	0x20000250
 80026f4:	20000258 	.word	0x20000258
 80026f8:	20000305 	.word	0x20000305
 80026fc:	08009e80 	.word	0x08009e80
 8002700:	20000434 	.word	0x20000434

08002704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800270a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270e:	2228      	movs	r2, #40	; 0x28
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f004 fcca 	bl	80070ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002742:	2301      	movs	r3, #1
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002746:	2302      	movs	r3, #2
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002750:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002754:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fc0c 	bl	8004f78 <HAL_RCC_OscConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <SystemClock_Config+0x66>
		Error_Handler();
 8002766:	f000 fa51 	bl	8002c0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800276a:	230f      	movs	r3, #15
 800276c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276e:	2302      	movs	r3, #2
 8002770:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fe76 	bl	8005478 <HAL_RCC_ClockConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SystemClock_Config+0x92>
		Error_Handler();
 8002792:	f000 fa3b 	bl	8002c0c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002796:	2302      	movs	r3, #2
 8002798:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800279a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fff6 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0xae>
		Error_Handler();
 80027ae:	f000 fa2d 	bl	8002c0c <Error_Handler>
	}
}
 80027b2:	bf00      	nop
 80027b4:	3750      	adds	r7, #80	; 0x50
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <MX_ADC1_Init+0xbc>)
 80027d0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d2:	4b28      	ldr	r3, [pc, #160]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027ec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 3;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027f6:	2203      	movs	r2, #3
 80027f8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80027fa:	481e      	ldr	r0, [pc, #120]	; (8002874 <MX_ADC1_Init+0xb8>)
 80027fc:	f000 fd42 	bl	8003284 <HAL_ADC_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_ADC1_Init+0x4e>
		Error_Handler();
 8002806:	f000 fa01 	bl	8002c0c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800280a:	2309      	movs	r3, #9
 800280c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800280e:	2301      	movs	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002812:	2303      	movs	r3, #3
 8002814:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4816      	ldr	r0, [pc, #88]	; (8002874 <MX_ADC1_Init+0xb8>)
 800281c:	f000 ff04 	bl	8003628 <HAL_ADC_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002826:	f000 f9f1 	bl	8002c0c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800282a:	2303      	movs	r3, #3
 800282c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800282e:	2302      	movs	r3, #2
 8002830:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8002832:	2304      	movs	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	4619      	mov	r1, r3
 800283a:	480e      	ldr	r0, [pc, #56]	; (8002874 <MX_ADC1_Init+0xb8>)
 800283c:	f000 fef4 	bl	8003628 <HAL_ADC_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8002846:	f000 f9e1 	bl	8002c0c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800284a:	2301      	movs	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800284e:	2303      	movs	r3, #3
 8002850:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002852:	2305      	movs	r3, #5
 8002854:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	; (8002874 <MX_ADC1_Init+0xb8>)
 800285c:	f000 fee4 	bl	8003628 <HAL_ADC_ConfigChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_ADC1_Init+0xae>
		Error_Handler();
 8002866:	f000 f9d1 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000388 	.word	0x20000388
 8002878:	40012400 	.word	0x40012400

0800287c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <MX_I2C1_Init+0x50>)
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <MX_I2C1_Init+0x54>)
 8002884:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_I2C1_Init+0x50>)
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <MX_I2C1_Init+0x58>)
 800288a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_I2C1_Init+0x50>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_I2C1_Init+0x50>)
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_I2C1_Init+0x50>)
 800289a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <MX_I2C1_Init+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_I2C1_Init+0x50>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <MX_I2C1_Init+0x50>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_I2C1_Init+0x50>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <MX_I2C1_Init+0x50>)
 80028ba:	f001 fec1 	bl	8004640 <HAL_I2C_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80028c4:	f000 f9a2 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000308 	.word	0x20000308
 80028d0:	40005400 	.word	0x40005400
 80028d4:	000186a0 	.word	0x000186a0

080028d8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028ec:	463b      	mov	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <MX_TIM1_Init+0x98>)
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <MX_TIM1_Init+0x9c>)
 80028f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <MX_TIM1_Init+0x98>)
 80028fc:	2247      	movs	r2, #71	; 0x47
 80028fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <MX_TIM1_Init+0x98>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <MX_TIM1_Init+0x98>)
 8002908:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800290c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <MX_TIM1_Init+0x98>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <MX_TIM1_Init+0x98>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <MX_TIM1_Init+0x98>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002920:	4813      	ldr	r0, [pc, #76]	; (8002970 <MX_TIM1_Init+0x98>)
 8002922:	f003 f8a3 	bl	8005a6c <HAL_TIM_Base_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0x58>
		Error_Handler();
 800292c:	f000 f96e 	bl	8002c0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002934:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4619      	mov	r1, r3
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <MX_TIM1_Init+0x98>)
 800293e:	f003 fa89 	bl	8005e54 <HAL_TIM_ConfigClockSource>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM1_Init+0x74>
		Error_Handler();
 8002948:	f000 f960 	bl	8002c0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294c:	2300      	movs	r3, #0
 800294e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002954:	463b      	mov	r3, r7
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_TIM1_Init+0x98>)
 800295a:	f003 fc5f 	bl	800621c <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002964:	f000 f952 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200004bc 	.word	0x200004bc
 8002974:	40012c00 	.word	0x40012c00

08002978 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800298c:	463b      	mov	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_TIM4_Init+0x94>)
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <MX_TIM4_Init+0x98>)
 8002998:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_TIM4_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ac:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80029ba:	4814      	ldr	r0, [pc, #80]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029bc:	f003 f856 	bl	8005a6c <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM4_Init+0x52>
		Error_Handler();
 80029c6:	f000 f921 	bl	8002c0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ce:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80029d0:	f107 0308 	add.w	r3, r7, #8
 80029d4:	4619      	mov	r1, r3
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029d8:	f003 fa3c 	bl	8005e54 <HAL_TIM_ConfigClockSource>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM4_Init+0x6e>
		Error_Handler();
 80029e2:	f000 f913 	bl	8002c0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80029ee:	463b      	mov	r3, r7
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <MX_TIM4_Init+0x94>)
 80029f4:	f003 fc12 	bl	800621c <HAL_TIMEx_MasterConfigSynchronization>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80029fe:	f000 f905 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200002bc 	.word	0x200002bc
 8002a10:	40000800 	.word	0x40000800

08002a14 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <MX_USART1_UART_Init+0x50>)
 8002a1c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a24:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	f003 fc56 	bl	80062fc <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002a56:	f000 f8d9 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200003e8 	.word	0x200003e8
 8002a64:	40013800 	.word	0x40013800

08002a68 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_DMA_Init+0x38>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <MX_DMA_Init+0x38>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6153      	str	r3, [r2, #20]
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_DMA_Init+0x38>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	200b      	movs	r0, #11
 8002a8c:	f001 f94b 	bl	8003d26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a90:	200b      	movs	r0, #11
 8002a92:	f001 f964 	bl	8003d5e <HAL_NVIC_EnableIRQ>

}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a4f      	ldr	r2, [pc, #316]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a49      	ldr	r2, [pc, #292]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4a43      	ldr	r2, [pc, #268]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6193      	str	r3, [r2, #24]
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	6193      	str	r3, [r2, #24]
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <MX_GPIO_Init+0x158>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1e:	4838      	ldr	r0, [pc, #224]	; (8002c00 <MX_GPIO_Init+0x15c>)
 8002b20:	f001 fd75 	bl	800460e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, IN4_Pin | IN3_Pin | IN2_Pin | BOM2_Pin,
 8002b24:	2200      	movs	r2, #0
 8002b26:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8002b2a:	4836      	ldr	r0, [pc, #216]	; (8002c04 <MX_GPIO_Init+0x160>)
 8002b2c:	f001 fd6f 	bl	800460e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DEN_Pin | BOM_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2118      	movs	r1, #24
 8002b34:	4834      	ldr	r0, [pc, #208]	; (8002c08 <MX_GPIO_Init+0x164>)
 8002b36:	f001 fd6a 	bl	800460e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8002b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	4619      	mov	r1, r3
 8002b52:	482b      	ldr	r0, [pc, #172]	; (8002c00 <MX_GPIO_Init+0x15c>)
 8002b54:	f001 fbc0 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT22_Pin */
	GPIO_InitStruct.Pin = DHT22_Pin;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4826      	ldr	r0, [pc, #152]	; (8002c04 <MX_GPIO_Init+0x160>)
 8002b6c:	f001 fbb4 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MUA_Pin */
	GPIO_InitStruct.Pin = MUA_Pin;
 8002b70:	2310      	movs	r3, #16
 8002b72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MUA_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4619      	mov	r1, r3
 8002b82:	4820      	ldr	r0, [pc, #128]	; (8002c04 <MX_GPIO_Init+0x160>)
 8002b84:	f001 fba8 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin BOM2_Pin */
	GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin | BOM2_Pin;
 8002b88:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8002b8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4818      	ldr	r0, [pc, #96]	; (8002c04 <MX_GPIO_Init+0x160>)
 8002ba2:	f001 fb99 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 0310 	add.w	r3, r7, #16
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4813      	ldr	r0, [pc, #76]	; (8002c08 <MX_GPIO_Init+0x164>)
 8002bba:	f001 fb8d 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BT2_Pin BT3_Pin BT1_Pin BT4_Pin */
	GPIO_InitStruct.Pin = BT2_Pin | BT3_Pin | BT1_Pin | BT4_Pin;
 8002bbe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002bc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_GPIO_Init+0x164>)
 8002bd4:	f001 fb80 	bl	80042d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEN_Pin BOM_Pin */
	GPIO_InitStruct.Pin = DEN_Pin | BOM_Pin;
 8002bd8:	2318      	movs	r3, #24
 8002bda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_GPIO_Init+0x164>)
 8002bf0:	f001 fb72 	bl	80042d8 <HAL_GPIO_Init>

}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40010800 	.word	0x40010800
 8002c08:	40010c00 	.word	0x40010c00

08002c0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c14:	e7fe      	b.n	8002c14 <Error_Handler+0x8>
	...

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6193      	str	r3, [r2, #24]
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_MspInit+0x60>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_MspInit+0x60>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000

08002c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0318 	add.w	r3, r7, #24
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_ADC_MspInit+0xe8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d15f      	bne.n	8002d5c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6193      	str	r3, [r2, #24]
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ccc:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	6193      	str	r3, [r2, #24]
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	481e      	ldr	r0, [pc, #120]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cf4:	f001 faf0 	bl	80042d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4619      	mov	r1, r3
 8002d06:	481a      	ldr	r0, [pc, #104]	; (8002d70 <HAL_ADC_MspInit+0xf4>)
 8002d08:	f001 fae6 	bl	80042d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_ADC_MspInit+0xfc>)
 8002d10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d18:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d36:	2220      	movs	r2, #32
 8002d38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d42:	f001 f827 	bl	8003d94 <HAL_DMA_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002d4c:	f7ff ff5e 	bl	8002c0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d54:	621a      	str	r2, [r3, #32]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40012400 	.word	0x40012400
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010800 	.word	0x40010800
 8002d70:	40010c00 	.word	0x40010c00
 8002d74:	20000460 	.word	0x20000460
 8002d78:	40020008 	.word	0x40020008

08002d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_I2C_MspInit+0x70>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d123      	bne.n	8002de4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	6193      	str	r3, [r2, #24]
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db8:	2312      	movs	r3, #18
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	480b      	ldr	r0, [pc, #44]	; (8002df4 <HAL_I2C_MspInit+0x78>)
 8002dc8:	f001 fa86 	bl	80042d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd6:	61d3      	str	r3, [r2, #28]
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_I2C_MspInit+0x74>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010c00 	.word	0x40010c00

08002df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_TIM_Base_MspInit+0x68>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10c      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e14:	6193      	str	r3, [r2, #24]
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e22:	e018      	b.n	8002e56 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_TIM_Base_MspInit+0x70>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d113      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_TIM_Base_MspInit+0x6c>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	201e      	movs	r0, #30
 8002e4c:	f000 ff6b 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e50:	201e      	movs	r0, #30
 8002e52:	f000 ff84 	bl	8003d5e <HAL_NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40000800 	.word	0x40000800

08002e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <HAL_UART_MspInit+0x9c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d139      	bne.n	8002f00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e96:	6193      	str	r3, [r2, #24]
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_UART_MspInit+0xa0>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480f      	ldr	r0, [pc, #60]	; (8002f10 <HAL_UART_MspInit+0xa4>)
 8002ed2:	f001 fa01 	bl	80042d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4809      	ldr	r0, [pc, #36]	; (8002f10 <HAL_UART_MspInit+0xa4>)
 8002eec:	f001 f9f4 	bl	80042d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2025      	movs	r0, #37	; 0x25
 8002ef6:	f000 ff16 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002efa:	2025      	movs	r0, #37	; 0x25
 8002efc:	f000 ff2f 	bl	8003d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f00:	bf00      	nop
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010800 	.word	0x40010800

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <NMI_Handler+0x4>

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <MemManage_Handler+0x4>

08002f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5a:	f000 f953 	bl	8003204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <DMA1_Channel1_IRQHandler+0x10>)
 8002f6a:	f001 f881 	bl	8004070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000460 	.word	0x20000460

08002f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <TIM4_IRQHandler+0x10>)
 8002f7e:	f002 fe61 	bl	8005c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200002bc 	.word	0x200002bc

08002f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <USART1_IRQHandler+0x10>)
 8002f92:	f003 fae3 	bl	800655c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200003e8 	.word	0x200003e8

08002fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
	return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <_kill>:

int _kill(int pid, int sig)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fb8:	f004 f84e 	bl	8007058 <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2216      	movs	r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
	return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_exit>:

void _exit (int status)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffe7 	bl	8002fae <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fe0:	e7fe      	b.n	8002fe0 <_exit+0x12>

08002fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e00a      	b.n	800300a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	b2ca      	uxtb	r2, r1
 8003002:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf0      	blt.n	8002ff4 <_read+0x12>
	}

return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e009      	b.n	8003042 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbf1      	blt.n	800302e <_write+0x12>
	}
	return len;
 800304a:	687b      	ldr	r3, [r7, #4]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_close>:

int _close(int file)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307a:	605a      	str	r2, [r3, #4]
	return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <_isatty>:

int _isatty(int file)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <_sbrk+0x5c>)
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <_sbrk+0x60>)
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <_sbrk+0x64>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <_sbrk+0x68>)
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d207      	bcs.n	80030f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e4:	f003 ffb8 	bl	8007058 <__errno>
 80030e8:	4603      	mov	r3, r0
 80030ea:	220c      	movs	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e009      	b.n	8003108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	4a05      	ldr	r2, [pc, #20]	; (8003118 <_sbrk+0x64>)
 8003104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20005000 	.word	0x20005000
 8003114:	00000400 	.word	0x00000400
 8003118:	20000260 	.word	0x20000260
 800311c:	20000550 	.word	0x20000550

08003120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800312c:	f7ff fff8 	bl	8003120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003132:	490c      	ldr	r1, [pc, #48]	; (8003164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003134:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003148:	4c09      	ldr	r4, [pc, #36]	; (8003170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003156:	f003 ff85 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800315a:	f7ff f92b 	bl	80023b4 <main>
  bx lr
 800315e:	4770      	bx	lr
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003168:	0800a2e4 	.word	0x0800a2e4
  ldr r2, =_sbss
 800316c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003170:	20000550 	.word	0x20000550

08003174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC1_2_IRQHandler>
	...

08003178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_Init+0x28>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_Init+0x28>)
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003188:	2003      	movs	r0, #3
 800318a:	f000 fdc1 	bl	8003d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318e:	2000      	movs	r0, #0
 8003190:	f000 f808 	bl	80031a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003194:	f7ff fd40 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_InitTick+0x54>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_InitTick+0x58>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fdd9 	bl	8003d7a <HAL_SYSTICK_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00e      	b.n	80031f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d80a      	bhi.n	80031ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d8:	2200      	movs	r2, #0
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	f000 fda1 	bl	8003d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <HAL_InitTick+0x5c>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000040 	.word	0x20000040
 80031fc:	20000048 	.word	0x20000048
 8003200:	20000044 	.word	0x20000044

08003204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_IncTick+0x1c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_IncTick+0x20>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4413      	add	r3, r2
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <HAL_IncTick+0x20>)
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	20000048 	.word	0x20000048
 8003224:	2000053c 	.word	0x2000053c

08003228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return uwTick;
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <HAL_GetTick+0x10>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	2000053c 	.word	0x2000053c

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff fff0 	bl	8003228 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffe0 	bl	8003228 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000048 	.word	0x20000048

08003284 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0be      	b.n	8003424 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fcda 	bl	8002c7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 faff 	bl	80038cc <ADC_ConversionStop_Disable>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8099 	bne.w	8003412 <HAL_ADC_Init+0x18e>
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8095 	bne.w	8003412 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003304:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800330c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d003      	beq.n	8003326 <HAL_ADC_Init+0xa2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_ADC_Init+0xa8>
 8003326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332a:	e000      	b.n	800332e <HAL_ADC_Init+0xaa>
 800332c:	2300      	movs	r3, #0
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7d1b      	ldrb	r3, [r3, #20]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d119      	bne.n	8003370 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b1b      	ldrb	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	3b01      	subs	r3, #1
 800334a:	035a      	lsls	r2, r3, #13
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e00b      	b.n	8003370 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_ADC_Init+0x1a8>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	430b      	orrs	r3, r1
 8003396:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d003      	beq.n	80033aa <HAL_ADC_Init+0x126>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	051b      	lsls	r3, r3, #20
 80033b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_ADC_Init+0x1ac>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10b      	bne.n	80033f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033ee:	e018      	b.n	8003422 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f023 0312 	bic.w	r3, r3, #18
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003410:	e007      	b.n	8003422 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	f043 0210 	orr.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffe1f7fd 	.word	0xffe1f7fd
 8003430:	ff1f0efe 	.word	0xff1f0efe

08003434 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a64      	ldr	r2, [pc, #400]	; (80035dc <HAL_ADC_Start_DMA+0x1a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_ADC_Start_DMA+0x24>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_ADC_Start_DMA+0x1ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d106      	bne.n	8003466 <HAL_ADC_Start_DMA+0x32>
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <HAL_ADC_Start_DMA+0x1a8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 80b3 	bne.w	80035cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_ADC_Start_DMA+0x40>
 8003470:	2302      	movs	r3, #2
 8003472:	e0ae      	b.n	80035d2 <HAL_ADC_Start_DMA+0x19e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f9cb 	bl	8003818 <ADC_Enable>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 809a 	bne.w	80035c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <HAL_ADC_Start_DMA+0x1ac>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d105      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x84>
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_ADC_Start_DMA+0x1a8>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d026      	beq.n	8003520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034e2:	e01d      	b.n	8003520 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a39      	ldr	r2, [pc, #228]	; (80035dc <HAL_ADC_Start_DMA+0x1a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_ADC_Start_DMA+0xd0>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_ADC_Start_DMA+0x1ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <HAL_ADC_Start_DMA+0xec>
 8003504:	4b35      	ldr	r3, [pc, #212]	; (80035dc <HAL_ADC_Start_DMA+0x1a8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003518:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f023 0206 	bic.w	r2, r3, #6
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
 8003538:	e002      	b.n	8003540 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <HAL_ADC_Start_DMA+0x1b0>)
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <HAL_ADC_Start_DMA+0x1b4>)
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_ADC_Start_DMA+0x1b8>)
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0202 	mvn.w	r2, #2
 8003568:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a18      	ldr	r0, [r3, #32]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	334c      	adds	r3, #76	; 0x4c
 8003584:	4619      	mov	r1, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f000 fc5d 	bl	8003e48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003598:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800359c:	d108      	bne.n	80035b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80035ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80035ae:	e00f      	b.n	80035d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80035c0:	e006      	b.n	80035d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80035ca:	e001      	b.n	80035d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40012400 	.word	0x40012400
 80035e0:	40012800 	.word	0x40012800
 80035e4:	0800394f 	.word	0x0800394f
 80035e8:	080039cb 	.word	0x080039cb
 80035ec:	080039e7 	.word	0x080039e7

080035f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
	...

08003628 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x20>
 8003644:	2302      	movs	r3, #2
 8003646:	e0dc      	b.n	8003802 <HAL_ADC_ConfigChannel+0x1da>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b06      	cmp	r3, #6
 8003656:	d81c      	bhi.n	8003692 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b05      	subs	r3, #5
 800366a:	221f      	movs	r2, #31
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	4019      	ands	r1, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	3b05      	subs	r3, #5
 8003684:	fa00 f203 	lsl.w	r2, r0, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	635a      	str	r2, [r3, #52]	; 0x34
 8003690:	e03c      	b.n	800370c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d81c      	bhi.n	80036d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b23      	subs	r3, #35	; 0x23
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	4019      	ands	r1, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	3b23      	subs	r3, #35	; 0x23
 80036c6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
 80036d2:	e01b      	b.n	800370c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b41      	subs	r3, #65	; 0x41
 80036e6:	221f      	movs	r2, #31
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4019      	ands	r1, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	3b41      	subs	r3, #65	; 0x41
 8003700:	fa00 f203 	lsl.w	r2, r0, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b09      	cmp	r3, #9
 8003712:	d91c      	bls.n	800374e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	3b1e      	subs	r3, #30
 8003726:	2207      	movs	r2, #7
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	4019      	ands	r1, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6898      	ldr	r0, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	3b1e      	subs	r3, #30
 8003740:	fa00 f203 	lsl.w	r2, r0, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e019      	b.n	8003782 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6919      	ldr	r1, [r3, #16]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	2207      	movs	r2, #7
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	4019      	ands	r1, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6898      	ldr	r0, [r3, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	fa00 f203 	lsl.w	r2, r0, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d003      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800378e:	2b11      	cmp	r3, #17
 8003790:	d132      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_ADC_ConfigChannel+0x1e4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d125      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d126      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d11a      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <HAL_ADC_ConfigChannel+0x1e8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_ADC_ConfigChannel+0x1ec>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	0c9a      	lsrs	r2, r3, #18
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d8:	e002      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3b01      	subs	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f9      	bne.n	80037da <HAL_ADC_ConfigChannel+0x1b2>
 80037e6:	e007      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40012400 	.word	0x40012400
 8003810:	20000040 	.word	0x20000040
 8003814:	431bde83 	.word	0x431bde83

08003818 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d040      	beq.n	80038b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <ADC_Enable+0xac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <ADC_Enable+0xb0>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	0c9b      	lsrs	r3, r3, #18
 8003852:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003854:	e002      	b.n	800385c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3b01      	subs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f9      	bne.n	8003856 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003862:	f7ff fce1 	bl	8003228 <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003868:	e01f      	b.n	80038aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800386a:	f7ff fcdd 	bl	8003228 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d918      	bls.n	80038aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d011      	beq.n	80038aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d1d8      	bne.n	800386a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000040 	.word	0x20000040
 80038c8:	431bde83 	.word	0x431bde83

080038cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d12e      	bne.n	8003944 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f6:	f7ff fc97 	bl	8003228 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038fc:	e01b      	b.n	8003936 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038fe:	f7ff fc93 	bl	8003228 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d914      	bls.n	8003936 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e007      	b.n	8003946 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d0dc      	beq.n	80038fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003964:	2b00      	cmp	r3, #0
 8003966:	d127      	bne.n	80039b8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800397e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003982:	d115      	bne.n	80039b0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff fe1d 	bl	80035f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80039b6:	e004      	b.n	80039c2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fe12 	bl	8003602 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f043 0204 	orr.w	r2, r3, #4
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7ff fe01 	bl	8003614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_ADCEx_Calibration_Start+0x1e>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e097      	b.n	8003b6a <HAL_ADCEx_Calibration_Start+0x14e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff42 	bl	80038cc <ADC_ConversionStop_Disable>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fee3 	bl	8003818 <ADC_Enable>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 8081 	bne.w	8003b60 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a66:	f023 0302 	bic.w	r3, r3, #2
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_ADCEx_Calibration_Start+0x158>)
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	2002      	movs	r0, #2
 8003a78:	f001 ff42 	bl	8005900 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003a82:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003a84:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003a86:	e002      	b.n	8003a8e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0208 	orr.w	r2, r2, #8
 8003aa2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003aa4:	f7ff fbc0 	bl	8003228 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003aaa:	e01b      	b.n	8003ae4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003aac:	f7ff fbbc 	bl	8003228 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b0a      	cmp	r3, #10
 8003ab8:	d914      	bls.n	8003ae4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f023 0312 	bic.w	r3, r3, #18
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e042      	b.n	8003b6a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1dc      	bne.n	8003aac <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003b02:	f7ff fb91 	bl	8003228 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b08:	e01b      	b.n	8003b42 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b0a:	f7ff fb8d 	bl	8003228 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b0a      	cmp	r3, #10
 8003b16:	d914      	bls.n	8003b42 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f023 0312 	bic.w	r3, r3, #18
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e013      	b.n	8003b6a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1dc      	bne.n	8003b0a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f023 0303 	bic.w	r3, r3, #3
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000040 	.word	0x20000040

08003b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b94:	4013      	ands	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	60d3      	str	r3, [r2, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 0307 	and.w	r3, r3, #7
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db0b      	blt.n	8003c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	4906      	ldr	r1, [pc, #24]	; (8003c10 <__NVIC_EnableIRQ+0x34>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	; (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cdc:	d301      	bcc.n	8003ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <SysTick_Config+0x40>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cea:	210f      	movs	r1, #15
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	f7ff ff90 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <SysTick_Config+0x40>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SysTick_Config+0x40>)
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000e010 	.word	0xe000e010

08003d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff2d 	bl	8003b78 <__NVIC_SetPriorityGrouping>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d38:	f7ff ff42 	bl	8003bc0 <__NVIC_GetPriorityGrouping>
 8003d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff ff90 	bl	8003c68 <NVIC_EncodePriority>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5f 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff35 	bl	8003bdc <__NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffa2 	bl	8003ccc <SysTick_Config>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e043      	b.n	8003e32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_DMA_Init+0xa8>)
 8003db2:	4413      	add	r3, r2
 8003db4:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <HAL_DMA_Init+0xac>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	009a      	lsls	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_DMA_Init+0xb0>)
 8003dc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	bffdfff8 	.word	0xbffdfff8
 8003e40:	cccccccd 	.word	0xcccccccd
 8003e44:	40020000 	.word	0x40020000

08003e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Start_IT+0x20>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e04b      	b.n	8003f00 <HAL_DMA_Start_IT+0xb8>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d13a      	bne.n	8003ef2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f9eb 	bl	800427c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 020e 	orr.w	r2, r2, #14
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e00f      	b.n	8003ee0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 020a 	orr.w	r2, r2, #10
 8003ede:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e005      	b.n	8003efe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d008      	beq.n	8003f32 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e020      	b.n	8003f74 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 020e 	bic.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d005      	beq.n	8003fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e051      	b.n	8004048 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 020e 	bic.w	r2, r2, #14
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_DMA_Abort_IT+0xd4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d029      	beq.n	8004022 <HAL_DMA_Abort_IT+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a21      	ldr	r2, [pc, #132]	; (8004058 <HAL_DMA_Abort_IT+0xd8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <HAL_DMA_Abort_IT+0x9e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_DMA_Abort_IT+0xdc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01a      	beq.n	8004018 <HAL_DMA_Abort_IT+0x98>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_DMA_Abort_IT+0xe0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d012      	beq.n	8004012 <HAL_DMA_Abort_IT+0x92>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_DMA_Abort_IT+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00a      	beq.n	800400c <HAL_DMA_Abort_IT+0x8c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_DMA_Abort_IT+0xe8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d102      	bne.n	8004006 <HAL_DMA_Abort_IT+0x86>
 8004000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004004:	e00e      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 8004006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400a:	e00b      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 800400c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004010:	e008      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 8004012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004016:	e005      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 8004018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401c:	e002      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 800401e:	2310      	movs	r3, #16
 8004020:	e000      	b.n	8004024 <HAL_DMA_Abort_IT+0xa4>
 8004022:	2301      	movs	r3, #1
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_DMA_Abort_IT+0xec>)
 8004026:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
    } 
  }
  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40020008 	.word	0x40020008
 8004058:	4002001c 	.word	0x4002001c
 800405c:	40020030 	.word	0x40020030
 8004060:	40020044 	.word	0x40020044
 8004064:	40020058 	.word	0x40020058
 8004068:	4002006c 	.word	0x4002006c
 800406c:	40020000 	.word	0x40020000

08004070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2204      	movs	r2, #4
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04f      	beq.n	8004138 <HAL_DMA_IRQHandler+0xc8>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04a      	beq.n	8004138 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0204 	bic.w	r2, r2, #4
 80040be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a66      	ldr	r2, [pc, #408]	; (8004260 <HAL_DMA_IRQHandler+0x1f0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d029      	beq.n	800411e <HAL_DMA_IRQHandler+0xae>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_DMA_IRQHandler+0x1f4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_IRQHandler+0xaa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a63      	ldr	r2, [pc, #396]	; (8004268 <HAL_DMA_IRQHandler+0x1f8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01a      	beq.n	8004114 <HAL_DMA_IRQHandler+0xa4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a62      	ldr	r2, [pc, #392]	; (800426c <HAL_DMA_IRQHandler+0x1fc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d012      	beq.n	800410e <HAL_DMA_IRQHandler+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a60      	ldr	r2, [pc, #384]	; (8004270 <HAL_DMA_IRQHandler+0x200>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00a      	beq.n	8004108 <HAL_DMA_IRQHandler+0x98>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5f      	ldr	r2, [pc, #380]	; (8004274 <HAL_DMA_IRQHandler+0x204>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d102      	bne.n	8004102 <HAL_DMA_IRQHandler+0x92>
 80040fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004100:	e00e      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004102:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004106:	e00b      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004108:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800410c:	e008      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800410e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004112:	e005      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004118:	e002      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800411a:	2340      	movs	r3, #64	; 0x40
 800411c:	e000      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800411e:	2304      	movs	r3, #4
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_DMA_IRQHandler+0x208>)
 8004122:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8094 	beq.w	8004256 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004136:	e08e      	b.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2202      	movs	r2, #2
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d056      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x186>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d051      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020a 	bic.w	r2, r2, #10
 800416e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_DMA_IRQHandler+0x1f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d029      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x166>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a37      	ldr	r2, [pc, #220]	; (8004264 <HAL_DMA_IRQHandler+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x162>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a35      	ldr	r2, [pc, #212]	; (8004268 <HAL_DMA_IRQHandler+0x1f8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x15c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <HAL_DMA_IRQHandler+0x1fc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x156>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a32      	ldr	r2, [pc, #200]	; (8004270 <HAL_DMA_IRQHandler+0x200>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x150>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_DMA_IRQHandler+0x204>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d102      	bne.n	80041ba <HAL_DMA_IRQHandler+0x14a>
 80041b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041be:	e00b      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c4:	e008      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ca:	e005      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d0:	e002      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041d2:	2320      	movs	r3, #32
 80041d4:	e000      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041d6:	2302      	movs	r3, #2
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_DMA_IRQHandler+0x208>)
 80041da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d034      	beq.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041f4:	e02f      	b.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2208      	movs	r2, #8
 80041fc:	409a      	lsls	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d028      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
    }
  }
  return;
 8004256:	bf00      	nop
 8004258:	bf00      	nop
}
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40020008 	.word	0x40020008
 8004264:	4002001c 	.word	0x4002001c
 8004268:	40020030 	.word	0x40020030
 800426c:	40020044 	.word	0x40020044
 8004270:	40020058 	.word	0x40020058
 8004274:	4002006c 	.word	0x4002006c
 8004278:	40020000 	.word	0x40020000

0800427c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d108      	bne.n	80042bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ba:	e007      	b.n	80042cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b08b      	sub	sp, #44	; 0x2c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ea:	e169      	b.n	80045c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042ec:	2201      	movs	r2, #1
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 8158 	bne.w	80045ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a9a      	ldr	r2, [pc, #616]	; (8004578 <HAL_GPIO_Init+0x2a0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d05e      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004314:	4a98      	ldr	r2, [pc, #608]	; (8004578 <HAL_GPIO_Init+0x2a0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d875      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800431a:	4a98      	ldr	r2, [pc, #608]	; (800457c <HAL_GPIO_Init+0x2a4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d058      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004320:	4a96      	ldr	r2, [pc, #600]	; (800457c <HAL_GPIO_Init+0x2a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d86f      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004326:	4a96      	ldr	r2, [pc, #600]	; (8004580 <HAL_GPIO_Init+0x2a8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d052      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 800432c:	4a94      	ldr	r2, [pc, #592]	; (8004580 <HAL_GPIO_Init+0x2a8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d869      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004332:	4a94      	ldr	r2, [pc, #592]	; (8004584 <HAL_GPIO_Init+0x2ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04c      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004338:	4a92      	ldr	r2, [pc, #584]	; (8004584 <HAL_GPIO_Init+0x2ac>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d863      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800433e:	4a92      	ldr	r2, [pc, #584]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d046      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004344:	4a90      	ldr	r2, [pc, #576]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d85d      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800434a:	2b12      	cmp	r3, #18
 800434c:	d82a      	bhi.n	80043a4 <HAL_GPIO_Init+0xcc>
 800434e:	2b12      	cmp	r3, #18
 8004350:	d859      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <HAL_GPIO_Init+0x80>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	080043d3 	.word	0x080043d3
 800435c:	080043ad 	.word	0x080043ad
 8004360:	080043bf 	.word	0x080043bf
 8004364:	08004401 	.word	0x08004401
 8004368:	08004407 	.word	0x08004407
 800436c:	08004407 	.word	0x08004407
 8004370:	08004407 	.word	0x08004407
 8004374:	08004407 	.word	0x08004407
 8004378:	08004407 	.word	0x08004407
 800437c:	08004407 	.word	0x08004407
 8004380:	08004407 	.word	0x08004407
 8004384:	08004407 	.word	0x08004407
 8004388:	08004407 	.word	0x08004407
 800438c:	08004407 	.word	0x08004407
 8004390:	08004407 	.word	0x08004407
 8004394:	08004407 	.word	0x08004407
 8004398:	08004407 	.word	0x08004407
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	4a79      	ldr	r2, [pc, #484]	; (800458c <HAL_GPIO_Init+0x2b4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043aa:	e02c      	b.n	8004406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	623b      	str	r3, [r7, #32]
          break;
 80043b2:	e029      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	623b      	str	r3, [r7, #32]
          break;
 80043bc:	e024      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	3308      	adds	r3, #8
 80043c4:	623b      	str	r3, [r7, #32]
          break;
 80043c6:	e01f      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	330c      	adds	r3, #12
 80043ce:	623b      	str	r3, [r7, #32]
          break;
 80043d0:	e01a      	b.n	8004408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043da:	2304      	movs	r3, #4
 80043dc:	623b      	str	r3, [r7, #32]
          break;
 80043de:	e013      	b.n	8004408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043e8:	2308      	movs	r3, #8
 80043ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	611a      	str	r2, [r3, #16]
          break;
 80043f2:	e009      	b.n	8004408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043f4:	2308      	movs	r3, #8
 80043f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	615a      	str	r2, [r3, #20]
          break;
 80043fe:	e003      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004400:	2300      	movs	r3, #0
 8004402:	623b      	str	r3, [r7, #32]
          break;
 8004404:	e000      	b.n	8004408 <HAL_GPIO_Init+0x130>
          break;
 8004406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2bff      	cmp	r3, #255	; 0xff
 800440c:	d801      	bhi.n	8004412 <HAL_GPIO_Init+0x13a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	e001      	b.n	8004416 <HAL_GPIO_Init+0x13e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d802      	bhi.n	8004424 <HAL_GPIO_Init+0x14c>
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	e002      	b.n	800442a <HAL_GPIO_Init+0x152>
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	3b08      	subs	r3, #8
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	210f      	movs	r1, #15
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	6a39      	ldr	r1, [r7, #32]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80b1 	beq.w	80045ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004458:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <HAL_GPIO_Init+0x2b8>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <HAL_GPIO_Init+0x2b8>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6193      	str	r3, [r2, #24]
 8004464:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_GPIO_Init+0x2b8>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004470:	4a48      	ldr	r2, [pc, #288]	; (8004594 <HAL_GPIO_Init+0x2bc>)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3302      	adds	r3, #2
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a40      	ldr	r2, [pc, #256]	; (8004598 <HAL_GPIO_Init+0x2c0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_GPIO_Init+0x1ec>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3f      	ldr	r2, [pc, #252]	; (800459c <HAL_GPIO_Init+0x2c4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00d      	beq.n	80044c0 <HAL_GPIO_Init+0x1e8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <HAL_GPIO_Init+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <HAL_GPIO_Init+0x1e4>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3d      	ldr	r2, [pc, #244]	; (80045a4 <HAL_GPIO_Init+0x2cc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_GPIO_Init+0x1e0>
 80044b4:	2303      	movs	r3, #3
 80044b6:	e006      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044b8:	2304      	movs	r3, #4
 80044ba:	e004      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044bc:	2302      	movs	r3, #2
 80044be:	e002      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044c4:	2300      	movs	r3, #0
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	f002 0203 	and.w	r2, r2, #3
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	4093      	lsls	r3, r2
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044d6:	492f      	ldr	r1, [pc, #188]	; (8004594 <HAL_GPIO_Init+0x2bc>)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	492c      	ldr	r1, [pc, #176]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]
 80044fc:	e006      	b.n	800450c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	43db      	mvns	r3, r3
 8004506:	4928      	ldr	r1, [pc, #160]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004508:	4013      	ands	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4922      	ldr	r1, [pc, #136]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	60cb      	str	r3, [r1, #12]
 8004524:	e006      	b.n	8004534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	43db      	mvns	r3, r3
 800452e:	491e      	ldr	r1, [pc, #120]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004530:	4013      	ands	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	4918      	ldr	r1, [pc, #96]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e006      	b.n	800455c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	43db      	mvns	r3, r3
 8004556:	4914      	ldr	r1, [pc, #80]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004558:	4013      	ands	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	490e      	ldr	r1, [pc, #56]	; (80045a8 <HAL_GPIO_Init+0x2d0>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	e021      	b.n	80045ba <HAL_GPIO_Init+0x2e2>
 8004576:	bf00      	nop
 8004578:	10320000 	.word	0x10320000
 800457c:	10310000 	.word	0x10310000
 8004580:	10220000 	.word	0x10220000
 8004584:	10210000 	.word	0x10210000
 8004588:	10120000 	.word	0x10120000
 800458c:	10110000 	.word	0x10110000
 8004590:	40021000 	.word	0x40021000
 8004594:	40010000 	.word	0x40010000
 8004598:	40010800 	.word	0x40010800
 800459c:	40010c00 	.word	0x40010c00
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40011400 	.word	0x40011400
 80045a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_GPIO_Init+0x304>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	4909      	ldr	r1, [pc, #36]	; (80045dc <HAL_GPIO_Init+0x304>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	3301      	adds	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f47f ae8e 	bne.w	80042ec <HAL_GPIO_Init+0x14>
  }
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	372c      	adds	r7, #44	; 0x2c
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e001      	b.n	8004602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	807b      	strh	r3, [r7, #2]
 800461a:	4613      	mov	r3, r2
 800461c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800461e:	787b      	ldrb	r3, [r7, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800462a:	e003      	b.n	8004634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	041a      	lsls	r2, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	611a      	str	r2, [r3, #16]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
	...

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe fb88 	bl	8002d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f001 f830 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	; (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	; (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	; (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	; (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	; (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	; (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	; (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7fe fca4 	bl	8003228 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 80e0 	bne.w	8004ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2319      	movs	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	4970      	ldr	r1, [pc, #448]	; (8004abc <HAL_I2C_Master_Transmit+0x1f4>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f964 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
 8004908:	e0d3      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x50>
 8004914:	2302      	movs	r3, #2
 8004916:	e0cc      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d007      	beq.n	800493e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	; 0x21
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2210      	movs	r2, #16
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a50      	ldr	r2, [pc, #320]	; (8004ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f89c 	bl	8004ac4 <I2C_MasterRequestWrite>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e08d      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049ac:	e066      	b.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fa22 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06b      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11b      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa19 	bl	8004e8c <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e01a      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d194      	bne.n	80049ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	00100002 	.word	0x00100002
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d006      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d003      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aec:	d108      	bne.n	8004b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00b      	b.n	8004b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	2b12      	cmp	r3, #18
 8004b06:	d107      	bne.n	8004b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f84f 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e035      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b54:	d108      	bne.n	8004b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e01b      	b.n	8004ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	11db      	asrs	r3, r3, #7
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f063 030f 	orn	r3, r3, #15
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <I2C_MasterRequestWrite+0xfc>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f898 	bl	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e010      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4907      	ldr	r1, [pc, #28]	; (8004bc4 <I2C_MasterRequestWrite+0x100>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f888 	bl	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	00010008 	.word	0x00010008
 8004bc4:	00010002 	.word	0x00010002

08004bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd8:	e048      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d044      	beq.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fe fb21 	bl	8003228 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d139      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10d      	bne.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	43da      	mvns	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	e00c      	b.n	8004c38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d116      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e023      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d10d      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	e00c      	b.n	8004cac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d093      	beq.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cca:	e071      	b.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d123      	bne.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e067      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d041      	beq.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7fe fa7c 	bl	8003228 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d136      	bne.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10c      	bne.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e00b      	b.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e021      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10c      	bne.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e00b      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f af6d 	bne.w	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e08:	e034      	b.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f886 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e034      	b.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d028      	beq.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fe fa01 	bl	8003228 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d016      	beq.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d1c3      	bne.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e98:	e034      	b.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f83e 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e034      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d028      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe f9b9 	bl	8003228 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11d      	bne.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d016      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e007      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d1c3      	bne.n	8004e9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d11b      	bne.n	8004f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e26c      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8087 	beq.w	80050a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f98:	4b92      	ldr	r3, [pc, #584]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d00c      	beq.n	8004fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d112      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
 8004fb0:	4b8c      	ldr	r3, [pc, #560]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbe:	4b89      	ldr	r3, [pc, #548]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06c      	beq.n	80050a4 <HAL_RCC_OscConfig+0x12c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d168      	bne.n	80050a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e246      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x76>
 8004fe0:	4b80      	ldr	r3, [pc, #512]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e02e      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b7b      	ldr	r3, [pc, #492]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7a      	ldr	r2, [pc, #488]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b78      	ldr	r3, [pc, #480]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a77      	ldr	r2, [pc, #476]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e01d      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0xbc>
 800501a:	4b72      	ldr	r3, [pc, #456]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a71      	ldr	r2, [pc, #452]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4b6f      	ldr	r3, [pc, #444]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6e      	ldr	r2, [pc, #440]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e00b      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8005034:	4b6b      	ldr	r3, [pc, #428]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6a      	ldr	r2, [pc, #424]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a67      	ldr	r2, [pc, #412]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800504a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d013      	beq.n	800507c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fe f8e8 	bl	8003228 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800505c:	f7fe f8e4 	bl	8003228 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e1fa      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b5d      	ldr	r3, [pc, #372]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0xe4>
 800507a:	e014      	b.n	80050a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fe f8d4 	bl	8003228 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fe f8d0 	bl	8003228 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	; 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1e6      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x10c>
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d063      	beq.n	800517a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b2:	4b4c      	ldr	r3, [pc, #304]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050be:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d11c      	bne.n	8005104 <HAL_RCC_OscConfig+0x18c>
 80050ca:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d116      	bne.n	8005104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	4b43      	ldr	r3, [pc, #268]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_RCC_OscConfig+0x176>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e1ba      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ee:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4939      	ldr	r1, [pc, #228]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	e03a      	b.n	800517a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800510c:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <HAL_RCC_OscConfig+0x270>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe f889 	bl	8003228 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511a:	f7fe f885 	bl	8003228 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e19b      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512c:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4927      	ldr	r1, [pc, #156]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514e:	4b26      	ldr	r3, [pc, #152]	; (80051e8 <HAL_RCC_OscConfig+0x270>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe f868 	bl	8003228 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515c:	f7fe f864 	bl	8003228 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e17a      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03a      	beq.n	80051fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <HAL_RCC_OscConfig+0x274>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fe f848 	bl	8003228 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519c:	f7fe f844 	bl	8003228 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e15a      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f000 facc 	bl	8005758 <RCC_Delay>
 80051c0:	e01c      	b.n	80051fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <HAL_RCC_OscConfig+0x274>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c8:	f7fe f82e 	bl	8003228 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ce:	e00f      	b.n	80051f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fe f82a 	bl	8003228 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d908      	bls.n	80051f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e140      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000
 80051e8:	42420000 	.word	0x42420000
 80051ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	4b9e      	ldr	r3, [pc, #632]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e9      	bne.n	80051d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a6 	beq.w	8005356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520e:	4b97      	ldr	r3, [pc, #604]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	4b94      	ldr	r3, [pc, #592]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4a93      	ldr	r2, [pc, #588]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005224:	61d3      	str	r3, [r2, #28]
 8005226:	4b91      	ldr	r3, [pc, #580]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b8e      	ldr	r3, [pc, #568]	; (8005470 <HAL_RCC_OscConfig+0x4f8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d118      	bne.n	8005274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b8b      	ldr	r3, [pc, #556]	; (8005470 <HAL_RCC_OscConfig+0x4f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a8a      	ldr	r2, [pc, #552]	; (8005470 <HAL_RCC_OscConfig+0x4f8>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7fd ffeb 	bl	8003228 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fd ffe7 	bl	8003228 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e0fd      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	4b81      	ldr	r3, [pc, #516]	; (8005470 <HAL_RCC_OscConfig+0x4f8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x312>
 800527c:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4a7a      	ldr	r2, [pc, #488]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6213      	str	r3, [r2, #32]
 8005288:	e02d      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0x334>
 8005292:	4b76      	ldr	r3, [pc, #472]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a75      	ldr	r2, [pc, #468]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6213      	str	r3, [r2, #32]
 800529e:	4b73      	ldr	r3, [pc, #460]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a72      	ldr	r2, [pc, #456]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	6213      	str	r3, [r2, #32]
 80052aa:	e01c      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d10c      	bne.n	80052ce <HAL_RCC_OscConfig+0x356>
 80052b4:	4b6d      	ldr	r3, [pc, #436]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a6c      	ldr	r2, [pc, #432]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	6213      	str	r3, [r2, #32]
 80052c0:	4b6a      	ldr	r3, [pc, #424]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4a69      	ldr	r2, [pc, #420]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6213      	str	r3, [r2, #32]
 80052cc:	e00b      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 80052ce:	4b67      	ldr	r3, [pc, #412]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a66      	ldr	r2, [pc, #408]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6213      	str	r3, [r2, #32]
 80052da:	4b64      	ldr	r3, [pc, #400]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a63      	ldr	r2, [pc, #396]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d015      	beq.n	800531a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fd ff9b 	bl	8003228 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fd ff97 	bl	8003228 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e0ab      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ee      	beq.n	80052f6 <HAL_RCC_OscConfig+0x37e>
 8005318:	e014      	b.n	8005344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531a:	f7fd ff85 	bl	8003228 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fd ff81 	bl	8003228 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e095      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005338:	4b4c      	ldr	r3, [pc, #304]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ee      	bne.n	8005322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4b48      	ldr	r3, [pc, #288]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4a47      	ldr	r2, [pc, #284]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8081 	beq.w	8005462 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005360:	4b42      	ldr	r3, [pc, #264]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d061      	beq.n	8005430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d146      	bne.n	8005402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005374:	4b3f      	ldr	r3, [pc, #252]	; (8005474 <HAL_RCC_OscConfig+0x4fc>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537a:	f7fd ff55 	bl	8003228 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005382:	f7fd ff51 	bl	8003228 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e067      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d108      	bne.n	80053bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053aa:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	492d      	ldr	r1, [pc, #180]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a19      	ldr	r1, [r3, #32]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	430b      	orrs	r3, r1
 80053ce:	4927      	ldr	r1, [pc, #156]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <HAL_RCC_OscConfig+0x4fc>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fd ff25 	bl	8003228 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fd ff21 	bl	8003228 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e037      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x46a>
 8005400:	e02f      	b.n	8005462 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <HAL_RCC_OscConfig+0x4fc>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fd ff0e 	bl	8003228 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fd ff0a 	bl	8003228 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e020      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x498>
 800542e:	e018      	b.n	8005462 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e013      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	429a      	cmp	r2, r3
 800544e:	d106      	bne.n	800545e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
 8005474:	42420060 	.word	0x42420060

08005478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0d0      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b6a      	ldr	r3, [pc, #424]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d910      	bls.n	80054bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 0207 	bic.w	r2, r3, #7
 80054a2:	4965      	ldr	r1, [pc, #404]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b63      	ldr	r3, [pc, #396]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0b8      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d020      	beq.n	800550a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d4:	4b59      	ldr	r3, [pc, #356]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a58      	ldr	r2, [pc, #352]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054ec:	4b53      	ldr	r3, [pc, #332]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4a52      	ldr	r2, [pc, #328]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f8:	4b50      	ldr	r3, [pc, #320]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	494d      	ldr	r1, [pc, #308]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d040      	beq.n	8005598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d115      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07f      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005536:	4b41      	ldr	r3, [pc, #260]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e073      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	4b3d      	ldr	r3, [pc, #244]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06b      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4936      	ldr	r1, [pc, #216]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005568:	f7fd fe5e 	bl	8003228 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fd fe5a 	bl	8003228 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e053      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d210      	bcs.n	80055c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0207 	bic.w	r2, r3, #7
 80055ae:	4922      	ldr	r1, [pc, #136]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b20      	ldr	r3, [pc, #128]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e032      	b.n	800562e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d4:	4b19      	ldr	r3, [pc, #100]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4916      	ldr	r1, [pc, #88]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	490e      	ldr	r1, [pc, #56]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005606:	f000 f821 	bl	800564c <HAL_RCC_GetSysClockFreq>
 800560a:	4602      	mov	r2, r0
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	490a      	ldr	r1, [pc, #40]	; (8005640 <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	5ccb      	ldrb	r3, [r1, r3]
 800561a:	fa22 f303 	lsr.w	r3, r2, r3
 800561e:	4a09      	ldr	r2, [pc, #36]	; (8005644 <HAL_RCC_ClockConfig+0x1cc>)
 8005620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_RCC_ClockConfig+0x1d0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd fdbc 	bl	80031a4 <HAL_InitTick>

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40022000 	.word	0x40022000
 800563c:	40021000 	.word	0x40021000
 8005640:	08009ebc 	.word	0x08009ebc
 8005644:	20000040 	.word	0x20000040
 8005648:	20000044 	.word	0x20000044

0800564c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005666:	4b1e      	ldr	r3, [pc, #120]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x30>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x36>
 800567a:	e027      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800567e:	613b      	str	r3, [r7, #16]
      break;
 8005680:	e027      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0c9b      	lsrs	r3, r3, #18
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800569a:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	0c5b      	lsrs	r3, r3, #17
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	4a11      	ldr	r2, [pc, #68]	; (80056ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a0d      	ldr	r2, [pc, #52]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ae:	fb02 f203 	mul.w	r2, r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e004      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	613b      	str	r3, [r7, #16]
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ce:	613b      	str	r3, [r7, #16]
      break;
 80056d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d2:	693b      	ldr	r3, [r7, #16]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	007a1200 	.word	0x007a1200
 80056e8:	08009ed4 	.word	0x08009ed4
 80056ec:	08009ee4 	.word	0x08009ee4
 80056f0:	003d0900 	.word	0x003d0900

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <HAL_RCC_GetHCLKFreq+0x10>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	20000040 	.word	0x20000040

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800570c:	f7ff fff2 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	; (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	08009ecc 	.word	0x08009ecc

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005734:	f7ff ffde 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000
 8005754:	08009ecc 	.word	0x08009ecc

08005758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <RCC_Delay+0x34>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <RCC_Delay+0x38>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	0a5b      	lsrs	r3, r3, #9
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005774:	bf00      	nop
  }
  while (Delay --);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f9      	bne.n	8005774 <RCC_Delay+0x1c>
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	20000040 	.word	0x20000040
 8005790:	10624dd3 	.word	0x10624dd3

08005794 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d07d      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b4:	4b4f      	ldr	r3, [pc, #316]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10d      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c0:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	4a4b      	ldr	r2, [pc, #300]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ca:	61d3      	str	r3, [r2, #28]
 80057cc:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d8:	2301      	movs	r3, #1
 80057da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d118      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a42      	ldr	r2, [pc, #264]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f4:	f7fd fd18 	bl	8003228 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	e008      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fc:	f7fd fd14 	bl	8003228 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e06d      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d02e      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d027      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005838:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005840:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005842:	4b2e      	ldr	r3, [pc, #184]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005848:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800584e:	4a29      	ldr	r2, [pc, #164]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d014      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585e:	f7fd fce3 	bl	8003228 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	e00a      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fd fcdf 	bl	8003228 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e036      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4917      	ldr	r1, [pc, #92]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	4313      	orrs	r3, r2
 8005898:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	490b      	ldr	r1, [pc, #44]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058d6:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	4904      	ldr	r1, [pc, #16]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40007000 	.word	0x40007000
 80058fc:	42420440 	.word	0x42420440

08005900 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b10      	cmp	r3, #16
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b10      	cmp	r3, #16
 8005926:	f200 808a 	bhi.w	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d045      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d075      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005936:	e082      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005938:	4b46      	ldr	r3, [pc, #280]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800593e:	4b45      	ldr	r3, [pc, #276]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d07b      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0c9b      	lsrs	r3, r3, #18
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	4a41      	ldr	r2, [pc, #260]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005954:	5cd3      	ldrb	r3, [r2, r3]
 8005956:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d015      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005962:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	0c5b      	lsrs	r3, r3, #17
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800597c:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	fbb2 f2f3 	udiv	r2, r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e004      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4a34      	ldr	r2, [pc, #208]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005998:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a4:	d102      	bne.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	61bb      	str	r3, [r7, #24]
      break;
 80059aa:	e04a      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	61bb      	str	r3, [r7, #24]
      break;
 80059ba:	e042      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059cc:	d108      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80059d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	e01f      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ea:	d109      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80059f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e00f      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0a:	d11c      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d016      	beq.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005a18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a1c:	61bb      	str	r3, [r7, #24]
      break;
 8005a1e:	e012      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a20:	e011      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a22:	f7ff fe85 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0b9b      	lsrs	r3, r3, #14
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	61bb      	str	r3, [r7, #24]
      break;
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a46:	bf00      	nop
    }
  }
  return (frequency);
 8005a48:	69bb      	ldr	r3, [r7, #24]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	08009ee8 	.word	0x08009ee8
 8005a5c:	08009ef8 	.word	0x08009ef8
 8005a60:	007a1200 	.word	0x007a1200
 8005a64:	003d0900 	.word	0x003d0900
 8005a68:	aaaaaaab 	.word	0xaaaaaaab

08005a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e041      	b.n	8005b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fd f9b0 	bl	8002df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f000 fabe 	bl	800602c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e032      	b.n	8005b8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIM_Base_Start+0x88>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIM_Base_Start+0x48>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIM_Base_Start+0x48>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <HAL_TIM_Base_Start+0x8c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIM_Base_Start+0x48>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <HAL_TIM_Base_Start+0x90>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d111      	bne.n	8005b78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d010      	beq.n	8005b88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	e007      	b.n	8005b88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800

08005ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d001      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e03a      	b.n	8005c2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <HAL_TIM_Base_Start_IT+0x98>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x58>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x58>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <HAL_TIM_Base_Start_IT+0x9c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x58>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d111      	bne.n	8005c1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d010      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	e007      	b.n	8005c2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800

08005c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d122      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d11b      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0202 	mvn.w	r2, #2
 8005c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f9b4 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9a7 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f9b6 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d122      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0204 	mvn.w	r2, #4
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f98a 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f97d 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f98c 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d122      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d11b      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0208 	mvn.w	r2, #8
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f960 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f953 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f962 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0210 	mvn.w	r2, #16
 8005d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2208      	movs	r2, #8
 8005d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f936 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f929 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f938 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0201 	mvn.w	r2, #1
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fa96 	bl	80022f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de0:	2b80      	cmp	r3, #128	; 0x80
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa7b 	bl	80062ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8fc 	bl	8006018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d10e      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d107      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0220 	mvn.w	r2, #32
 8005e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa46 	bl	80062d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_ConfigClockSource+0x1c>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0b4      	b.n	8005fda <HAL_TIM_ConfigClockSource+0x186>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d03e      	beq.n	8005f28 <HAL_TIM_ConfigClockSource+0xd4>
 8005eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eae:	f200 8087 	bhi.w	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	f000 8086 	beq.w	8005fc6 <HAL_TIM_ConfigClockSource+0x172>
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d87f      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d01a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0xa6>
 8005ec4:	2b70      	cmp	r3, #112	; 0x70
 8005ec6:	d87b      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b60      	cmp	r3, #96	; 0x60
 8005eca:	d050      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x11a>
 8005ecc:	2b60      	cmp	r3, #96	; 0x60
 8005ece:	d877      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b50      	cmp	r3, #80	; 0x50
 8005ed2:	d03c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0xfa>
 8005ed4:	2b50      	cmp	r3, #80	; 0x50
 8005ed6:	d873      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d058      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x13a>
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d86f      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d064      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d86b      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d060      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d867      	bhi.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d05c      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d05a      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	e062      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6899      	ldr	r1, [r3, #8]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f000 f968 	bl	80061de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	609a      	str	r2, [r3, #8]
      break;
 8005f26:	e04f      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6899      	ldr	r1, [r3, #8]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f000 f951 	bl	80061de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f4a:	609a      	str	r2, [r3, #8]
      break;
 8005f4c:	e03c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 f8c8 	bl	80060f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2150      	movs	r1, #80	; 0x50
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f91f 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e02c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 f8e6 	bl	800614c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2160      	movs	r1, #96	; 0x60
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f90f 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005f8c:	e01c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f000 f8a8 	bl	80060f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2140      	movs	r1, #64	; 0x40
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f8ff 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005fac:	e00c      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 f8f6 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005fbe:	e003      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e000      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
	...

0800602c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <TIM_Base_SetConfig+0xbc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a25      	ldr	r2, [pc, #148]	; (80060ec <TIM_Base_SetConfig+0xc0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <TIM_Base_SetConfig+0xbc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <TIM_Base_SetConfig+0xc0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d103      	bne.n	80060d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	615a      	str	r2, [r3, #20]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800

080060f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800611a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 030a 	bic.w	r3, r3, #10
 800612c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0210 	bic.w	r2, r3, #16
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	031b      	lsls	r3, r3, #12
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f043 0307 	orr.w	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	021a      	lsls	r2, r3, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	431a      	orrs	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	609a      	str	r2, [r3, #8]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006230:	2302      	movs	r3, #2
 8006232:	e046      	b.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006280:	d009      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10c      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800629c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800

080062d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e042      	b.n	8006394 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fc fda2 	bl	8002e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2224      	movs	r2, #36	; 0x24
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800633e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fdfb 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d16d      	bne.n	8006498 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_UART_Transmit+0x2c>
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e066      	b.n	800649a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063da:	f7fc ff25 	bl	8003228 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d108      	bne.n	8006408 <HAL_UART_Transmit+0x6c>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e003      	b.n	8006410 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006410:	e02a      	b.n	8006468 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2180      	movs	r1, #128	; 0x80
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fb4a 	bl	8006ab6 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e036      	b.n	800649a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3302      	adds	r3, #2
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e007      	b.n	800645a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1cf      	bne.n	8006412 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2140      	movs	r1, #64	; 0x40
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fb1a 	bl	8006ab6 <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e006      	b.n	800649a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	e000      	b.n	800649a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006498:	2302      	movs	r3, #2
  }
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08c      	sub	sp, #48	; 0x30
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	4613      	mov	r3, r2
 80064ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d14a      	bne.n	8006552 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e043      	b.n	8006554 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	461a      	mov	r2, r3
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fb57 	bl	8006b92 <UART_Start_Receive_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d12c      	bne.n	800654c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d125      	bne.n	8006546 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	617b      	str	r3, [r7, #20]
   return(result);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f043 0310 	orr.w	r3, r3, #16
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006530:	627a      	str	r2, [r7, #36]	; 0x24
 8006532:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6a39      	ldr	r1, [r7, #32]
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	61fb      	str	r3, [r7, #28]
   return(result);
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006544:	e002      	b.n	800654c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800654c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006550:	e000      	b.n	8006554 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b0ba      	sub	sp, #232	; 0xe8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800659a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_UART_IRQHandler+0x66>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbff 	bl	8006dbe <UART_Receive_IT>
      return;
 80065c0:	e25b      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80de 	beq.w	8006788 <HAL_UART_IRQHandler+0x22c>
 80065cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80d1 	beq.w	8006788 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <HAL_UART_IRQHandler+0xae>
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <HAL_UART_IRQHandler+0xd2>
 8006616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	f043 0202 	orr.w	r2, r3, #2
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_UART_IRQHandler+0xf6>
 800663a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d011      	beq.n	8006682 <HAL_UART_IRQHandler+0x126>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	f043 0208 	orr.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 81f2 	beq.w	8006a70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_UART_IRQHandler+0x14e>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fb8a 	bl	8006dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_UART_IRQHandler+0x17a>
 80066ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04f      	beq.n	8006776 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa94 	bl	8006c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d041      	beq.n	800676e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800671a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800672e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1d9      	bne.n	80066ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d013      	beq.n	8006766 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	4a7e      	ldr	r2, [pc, #504]	; (800693c <HAL_UART_IRQHandler+0x3e0>)
 8006744:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	4618      	mov	r0, r3
 800674c:	f7fd fc18 	bl	8003f80 <HAL_DMA_Abort_IT>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e00e      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f99c 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e00a      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f998 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e006      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f994 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006782:	e175      	b.n	8006a70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	bf00      	nop
    return;
 8006786:	e173      	b.n	8006a70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 814f 	bne.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8148 	beq.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8141 	beq.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 80b6 	beq.w	8006940 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8145 	beq.w	8006a74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067f2:	429a      	cmp	r2, r3
 80067f4:	f080 813e 	bcs.w	8006a74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b20      	cmp	r3, #32
 8006808:	f000 8088 	beq.w	800691c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800682a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006838:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800683c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006844:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1d9      	bne.n	800680c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800687c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006880:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006884:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800688e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e1      	bne.n	8006858 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e3      	bne.n	8006894 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006900:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800690c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e3      	bne.n	80068da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd faf6 	bl	8003f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800692a:	b29b      	uxth	r3, r3
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	b29b      	uxth	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb fc28 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006938:	e09c      	b.n	8006a74 <HAL_UART_IRQHandler+0x518>
 800693a:	bf00      	nop
 800693c:	08006cc9 	.word	0x08006cc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006948:	b29b      	uxth	r3, r3
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 808e 	beq.w	8006a78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800695c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8089 	beq.w	8006a78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800697c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800698a:	647a      	str	r2, [r7, #68]	; 0x44
 800698c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e3      	bne.n	8006966 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3314      	adds	r3, #20
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	623b      	str	r3, [r7, #32]
   return(result);
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069c2:	633a      	str	r2, [r7, #48]	; 0x30
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e3      	bne.n	800699e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a08:	61fa      	str	r2, [r7, #28]
 8006a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	69b9      	ldr	r1, [r7, #24]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	617b      	str	r3, [r7, #20]
   return(result);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e3      	bne.n	80069e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fb fbad 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a2e:	e023      	b.n	8006a78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <HAL_UART_IRQHandler+0x4f4>
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f951 	bl	8006cf0 <UART_Transmit_IT>
    return;
 8006a4e:	e014      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <HAL_UART_IRQHandler+0x51e>
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f990 	bl	8006d8e <UART_EndTransmit_IT>
    return;
 8006a6e:	e004      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a78:	bf00      	nop
  }
}
 8006a7a:	37e8      	adds	r7, #232	; 0xe8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b090      	sub	sp, #64	; 0x40
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac6:	e050      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d04c      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ad6:	f7fc fba7 	bl	8003228 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d241      	bcs.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b06:	637a      	str	r2, [r7, #52]	; 0x34
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3314      	adds	r3, #20
 8006b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b3a:	623a      	str	r2, [r7, #32]
 8006b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	69f9      	ldr	r1, [r7, #28]
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e00f      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4013      	ands	r3, r2
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	bf0c      	ite	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	2300      	movne	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d09f      	beq.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3740      	adds	r7, #64	; 0x40
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2222      	movs	r2, #34	; 0x22
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0220 	orr.w	r2, r2, #32
 8006bf6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b095      	sub	sp, #84	; 0x54
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d119      	bne.n	8006cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9c:	61ba      	str	r2, [r7, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6979      	ldr	r1, [r7, #20]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cbe:	bf00      	nop
 8006cc0:	3754      	adds	r7, #84	; 0x54
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fede 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce8:	bf00      	nop
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b21      	cmp	r3, #33	; 0x21
 8006d02:	d13e      	bne.n	8006d82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	d114      	bne.n	8006d38 <UART_Transmit_IT+0x48>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]
 8006d36:	e008      	b.n	8006d4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6211      	str	r1, [r2, #32]
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4619      	mov	r1, r3
 8006d58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10f      	bne.n	8006d7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fe66 	bl	8006a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08c      	sub	sp, #48	; 0x30
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b22      	cmp	r3, #34	; 0x22
 8006dd0:	f040 80ae 	bne.w	8006f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ddc:	d117      	bne.n	8006e0e <UART_Receive_IT+0x50>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d113      	bne.n	8006e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	1c9a      	adds	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e0c:	e026      	b.n	8006e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d007      	beq.n	8006e32 <UART_Receive_IT+0x74>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <UART_Receive_IT+0x82>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e008      	b.n	8006e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d15d      	bne.n	8006f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0220 	bic.w	r2, r2, #32
 8006e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d135      	bne.n	8006f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006edc:	623a      	str	r2, [r7, #32]
 8006ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d10a      	bne.n	8006f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fb f934 	bl	8002188 <HAL_UARTEx_RxEventCallback>
 8006f20:	e002      	b.n	8006f28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fdb5 	bl	8006a92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e002      	b.n	8006f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3730      	adds	r7, #48	; 0x30
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f76:	f023 030c 	bic.w	r3, r3, #12
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <UART_SetConfig+0x114>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d103      	bne.n	8006fac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fa4:	f7fe fbc4 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	e002      	b.n	8006fb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fe fbac 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8006fb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009a      	lsls	r2, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	4a22      	ldr	r2, [pc, #136]	; (8007054 <UART_SetConfig+0x118>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	0119      	lsls	r1, r3, #4
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009a      	lsls	r2, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fe8:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <UART_SetConfig+0x118>)
 8006fea:	fba3 0302 	umull	r0, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2064      	movs	r0, #100	; 0x64
 8006ff2:	fb00 f303 	mul.w	r3, r0, r3
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	3332      	adds	r3, #50	; 0x32
 8006ffc:	4a15      	ldr	r2, [pc, #84]	; (8007054 <UART_SetConfig+0x118>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007008:	4419      	add	r1, r3
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009a      	lsls	r2, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <UART_SetConfig+0x118>)
 8007022:	fba3 0302 	umull	r0, r3, r3, r2
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2064      	movs	r0, #100	; 0x64
 800702a:	fb00 f303 	mul.w	r3, r0, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	3332      	adds	r3, #50	; 0x32
 8007034:	4a07      	ldr	r2, [pc, #28]	; (8007054 <UART_SetConfig+0x118>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	440a      	add	r2, r1
 8007046:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40013800 	.word	0x40013800
 8007054:	51eb851f 	.word	0x51eb851f

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000004c 	.word	0x2000004c

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	2600      	movs	r6, #0
 8007068:	4d0c      	ldr	r5, [pc, #48]	; (800709c <__libc_init_array+0x38>)
 800706a:	4c0d      	ldr	r4, [pc, #52]	; (80070a0 <__libc_init_array+0x3c>)
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	42a6      	cmp	r6, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	f002 feba 	bl	8009dec <_init>
 8007078:	2600      	movs	r6, #0
 800707a:	4d0a      	ldr	r5, [pc, #40]	; (80070a4 <__libc_init_array+0x40>)
 800707c:	4c0a      	ldr	r4, [pc, #40]	; (80070a8 <__libc_init_array+0x44>)
 800707e:	1b64      	subs	r4, r4, r5
 8007080:	10a4      	asrs	r4, r4, #2
 8007082:	42a6      	cmp	r6, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f855 3b04 	ldr.w	r3, [r5], #4
 800708c:	4798      	blx	r3
 800708e:	3601      	adds	r6, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f855 3b04 	ldr.w	r3, [r5], #4
 8007096:	4798      	blx	r3
 8007098:	3601      	adds	r6, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	0800a2dc 	.word	0x0800a2dc
 80070a0:	0800a2dc 	.word	0x0800a2dc
 80070a4:	0800a2dc 	.word	0x0800a2dc
 80070a8:	0800a2e0 	.word	0x0800a2e0

080070ac <memset>:
 80070ac:	4603      	mov	r3, r0
 80070ae:	4402      	add	r2, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <__cvt>:
 80070bc:	2b00      	cmp	r3, #0
 80070be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c2:	461f      	mov	r7, r3
 80070c4:	bfbb      	ittet	lt
 80070c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070ca:	461f      	movlt	r7, r3
 80070cc:	2300      	movge	r3, #0
 80070ce:	232d      	movlt	r3, #45	; 0x2d
 80070d0:	b088      	sub	sp, #32
 80070d2:	4614      	mov	r4, r2
 80070d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070d8:	7013      	strb	r3, [r2, #0]
 80070da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070e0:	f023 0820 	bic.w	r8, r3, #32
 80070e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070e8:	d005      	beq.n	80070f6 <__cvt+0x3a>
 80070ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070ee:	d100      	bne.n	80070f2 <__cvt+0x36>
 80070f0:	3501      	adds	r5, #1
 80070f2:	2302      	movs	r3, #2
 80070f4:	e000      	b.n	80070f8 <__cvt+0x3c>
 80070f6:	2303      	movs	r3, #3
 80070f8:	aa07      	add	r2, sp, #28
 80070fa:	9204      	str	r2, [sp, #16]
 80070fc:	aa06      	add	r2, sp, #24
 80070fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007102:	e9cd 3500 	strd	r3, r5, [sp]
 8007106:	4622      	mov	r2, r4
 8007108:	463b      	mov	r3, r7
 800710a:	f000 fce5 	bl	8007ad8 <_dtoa_r>
 800710e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007112:	4606      	mov	r6, r0
 8007114:	d102      	bne.n	800711c <__cvt+0x60>
 8007116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007118:	07db      	lsls	r3, r3, #31
 800711a:	d522      	bpl.n	8007162 <__cvt+0xa6>
 800711c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007120:	eb06 0905 	add.w	r9, r6, r5
 8007124:	d110      	bne.n	8007148 <__cvt+0x8c>
 8007126:	7833      	ldrb	r3, [r6, #0]
 8007128:	2b30      	cmp	r3, #48	; 0x30
 800712a:	d10a      	bne.n	8007142 <__cvt+0x86>
 800712c:	2200      	movs	r2, #0
 800712e:	2300      	movs	r3, #0
 8007130:	4620      	mov	r0, r4
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fc42 	bl	80009bc <__aeabi_dcmpeq>
 8007138:	b918      	cbnz	r0, 8007142 <__cvt+0x86>
 800713a:	f1c5 0501 	rsb	r5, r5, #1
 800713e:	f8ca 5000 	str.w	r5, [sl]
 8007142:	f8da 3000 	ldr.w	r3, [sl]
 8007146:	4499      	add	r9, r3
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4620      	mov	r0, r4
 800714e:	4639      	mov	r1, r7
 8007150:	f7f9 fc34 	bl	80009bc <__aeabi_dcmpeq>
 8007154:	b108      	cbz	r0, 800715a <__cvt+0x9e>
 8007156:	f8cd 901c 	str.w	r9, [sp, #28]
 800715a:	2230      	movs	r2, #48	; 0x30
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	454b      	cmp	r3, r9
 8007160:	d307      	bcc.n	8007172 <__cvt+0xb6>
 8007162:	4630      	mov	r0, r6
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007168:	1b9b      	subs	r3, r3, r6
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	b008      	add	sp, #32
 800716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	9107      	str	r1, [sp, #28]
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e7f0      	b.n	800715c <__cvt+0xa0>

0800717a <__exponent>:
 800717a:	4603      	mov	r3, r0
 800717c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800717e:	2900      	cmp	r1, #0
 8007180:	f803 2b02 	strb.w	r2, [r3], #2
 8007184:	bfb6      	itet	lt
 8007186:	222d      	movlt	r2, #45	; 0x2d
 8007188:	222b      	movge	r2, #43	; 0x2b
 800718a:	4249      	neglt	r1, r1
 800718c:	2909      	cmp	r1, #9
 800718e:	7042      	strb	r2, [r0, #1]
 8007190:	dd2b      	ble.n	80071ea <__exponent+0x70>
 8007192:	f10d 0407 	add.w	r4, sp, #7
 8007196:	46a4      	mov	ip, r4
 8007198:	270a      	movs	r7, #10
 800719a:	fb91 f6f7 	sdiv	r6, r1, r7
 800719e:	460a      	mov	r2, r1
 80071a0:	46a6      	mov	lr, r4
 80071a2:	fb07 1516 	mls	r5, r7, r6, r1
 80071a6:	2a63      	cmp	r2, #99	; 0x63
 80071a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80071ac:	4631      	mov	r1, r6
 80071ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80071b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071b6:	dcf0      	bgt.n	800719a <__exponent+0x20>
 80071b8:	3130      	adds	r1, #48	; 0x30
 80071ba:	f1ae 0502 	sub.w	r5, lr, #2
 80071be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071c2:	4629      	mov	r1, r5
 80071c4:	1c44      	adds	r4, r0, #1
 80071c6:	4561      	cmp	r1, ip
 80071c8:	d30a      	bcc.n	80071e0 <__exponent+0x66>
 80071ca:	f10d 0209 	add.w	r2, sp, #9
 80071ce:	eba2 020e 	sub.w	r2, r2, lr
 80071d2:	4565      	cmp	r5, ip
 80071d4:	bf88      	it	hi
 80071d6:	2200      	movhi	r2, #0
 80071d8:	4413      	add	r3, r2
 80071da:	1a18      	subs	r0, r3, r0
 80071dc:	b003      	add	sp, #12
 80071de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071e8:	e7ed      	b.n	80071c6 <__exponent+0x4c>
 80071ea:	2330      	movs	r3, #48	; 0x30
 80071ec:	3130      	adds	r1, #48	; 0x30
 80071ee:	7083      	strb	r3, [r0, #2]
 80071f0:	70c1      	strb	r1, [r0, #3]
 80071f2:	1d03      	adds	r3, r0, #4
 80071f4:	e7f1      	b.n	80071da <__exponent+0x60>
	...

080071f8 <_printf_float>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b091      	sub	sp, #68	; 0x44
 80071fe:	460c      	mov	r4, r1
 8007200:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007204:	4616      	mov	r6, r2
 8007206:	461f      	mov	r7, r3
 8007208:	4605      	mov	r5, r0
 800720a:	f001 fa53 	bl	80086b4 <_localeconv_r>
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	9309      	str	r3, [sp, #36]	; 0x24
 8007214:	f7f8 ffa6 	bl	8000164 <strlen>
 8007218:	2300      	movs	r3, #0
 800721a:	930e      	str	r3, [sp, #56]	; 0x38
 800721c:	f8d8 3000 	ldr.w	r3, [r8]
 8007220:	900a      	str	r0, [sp, #40]	; 0x28
 8007222:	3307      	adds	r3, #7
 8007224:	f023 0307 	bic.w	r3, r3, #7
 8007228:	f103 0208 	add.w	r2, r3, #8
 800722c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007230:	f8d4 b000 	ldr.w	fp, [r4]
 8007234:	f8c8 2000 	str.w	r2, [r8]
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007240:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007244:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007248:	930b      	str	r3, [sp, #44]	; 0x2c
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	4640      	mov	r0, r8
 8007250:	4b9c      	ldr	r3, [pc, #624]	; (80074c4 <_printf_float+0x2cc>)
 8007252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007254:	f7f9 fbe4 	bl	8000a20 <__aeabi_dcmpun>
 8007258:	bb70      	cbnz	r0, 80072b8 <_printf_float+0xc0>
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	4640      	mov	r0, r8
 8007260:	4b98      	ldr	r3, [pc, #608]	; (80074c4 <_printf_float+0x2cc>)
 8007262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007264:	f7f9 fbbe 	bl	80009e4 <__aeabi_dcmple>
 8007268:	bb30      	cbnz	r0, 80072b8 <_printf_float+0xc0>
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4640      	mov	r0, r8
 8007270:	4651      	mov	r1, sl
 8007272:	f7f9 fbad 	bl	80009d0 <__aeabi_dcmplt>
 8007276:	b110      	cbz	r0, 800727e <_printf_float+0x86>
 8007278:	232d      	movs	r3, #45	; 0x2d
 800727a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727e:	4b92      	ldr	r3, [pc, #584]	; (80074c8 <_printf_float+0x2d0>)
 8007280:	4892      	ldr	r0, [pc, #584]	; (80074cc <_printf_float+0x2d4>)
 8007282:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007286:	bf94      	ite	ls
 8007288:	4698      	movls	r8, r3
 800728a:	4680      	movhi	r8, r0
 800728c:	2303      	movs	r3, #3
 800728e:	f04f 0a00 	mov.w	sl, #0
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	f02b 0304 	bic.w	r3, fp, #4
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	4633      	mov	r3, r6
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	9700      	str	r7, [sp, #0]
 80072a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80072a4:	f000 f9d4 	bl	8007650 <_printf_common>
 80072a8:	3001      	adds	r0, #1
 80072aa:	f040 8090 	bne.w	80073ce <_printf_float+0x1d6>
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	b011      	add	sp, #68	; 0x44
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	4642      	mov	r2, r8
 80072ba:	4653      	mov	r3, sl
 80072bc:	4640      	mov	r0, r8
 80072be:	4651      	mov	r1, sl
 80072c0:	f7f9 fbae 	bl	8000a20 <__aeabi_dcmpun>
 80072c4:	b148      	cbz	r0, 80072da <_printf_float+0xe2>
 80072c6:	f1ba 0f00 	cmp.w	sl, #0
 80072ca:	bfb8      	it	lt
 80072cc:	232d      	movlt	r3, #45	; 0x2d
 80072ce:	4880      	ldr	r0, [pc, #512]	; (80074d0 <_printf_float+0x2d8>)
 80072d0:	bfb8      	it	lt
 80072d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072d6:	4b7f      	ldr	r3, [pc, #508]	; (80074d4 <_printf_float+0x2dc>)
 80072d8:	e7d3      	b.n	8007282 <_printf_float+0x8a>
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	d142      	bne.n	800736a <_printf_float+0x172>
 80072e4:	2306      	movs	r3, #6
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	9206      	str	r2, [sp, #24]
 80072ec:	aa0e      	add	r2, sp, #56	; 0x38
 80072ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80072f2:	aa0d      	add	r2, sp, #52	; 0x34
 80072f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80072f8:	9203      	str	r2, [sp, #12]
 80072fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80072fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	4642      	mov	r2, r8
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4628      	mov	r0, r5
 800730c:	4653      	mov	r3, sl
 800730e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007310:	f7ff fed4 	bl	80070bc <__cvt>
 8007314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007316:	4680      	mov	r8, r0
 8007318:	2947      	cmp	r1, #71	; 0x47
 800731a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800731c:	d108      	bne.n	8007330 <_printf_float+0x138>
 800731e:	1cc8      	adds	r0, r1, #3
 8007320:	db02      	blt.n	8007328 <_printf_float+0x130>
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	4299      	cmp	r1, r3
 8007326:	dd40      	ble.n	80073aa <_printf_float+0x1b2>
 8007328:	f1a9 0902 	sub.w	r9, r9, #2
 800732c:	fa5f f989 	uxtb.w	r9, r9
 8007330:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007334:	d81f      	bhi.n	8007376 <_printf_float+0x17e>
 8007336:	464a      	mov	r2, r9
 8007338:	3901      	subs	r1, #1
 800733a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800733e:	910d      	str	r1, [sp, #52]	; 0x34
 8007340:	f7ff ff1b 	bl	800717a <__exponent>
 8007344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007346:	4682      	mov	sl, r0
 8007348:	1813      	adds	r3, r2, r0
 800734a:	2a01      	cmp	r2, #1
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	dc02      	bgt.n	8007356 <_printf_float+0x15e>
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	07d2      	lsls	r2, r2, #31
 8007354:	d501      	bpl.n	800735a <_printf_float+0x162>
 8007356:	3301      	adds	r3, #1
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800735e:	2b00      	cmp	r3, #0
 8007360:	d09b      	beq.n	800729a <_printf_float+0xa2>
 8007362:	232d      	movs	r3, #45	; 0x2d
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007368:	e797      	b.n	800729a <_printf_float+0xa2>
 800736a:	2947      	cmp	r1, #71	; 0x47
 800736c:	d1bc      	bne.n	80072e8 <_printf_float+0xf0>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1ba      	bne.n	80072e8 <_printf_float+0xf0>
 8007372:	2301      	movs	r3, #1
 8007374:	e7b7      	b.n	80072e6 <_printf_float+0xee>
 8007376:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800737a:	d118      	bne.n	80073ae <_printf_float+0x1b6>
 800737c:	2900      	cmp	r1, #0
 800737e:	6863      	ldr	r3, [r4, #4]
 8007380:	dd0b      	ble.n	800739a <_printf_float+0x1a2>
 8007382:	6121      	str	r1, [r4, #16]
 8007384:	b913      	cbnz	r3, 800738c <_printf_float+0x194>
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	07d0      	lsls	r0, r2, #31
 800738a:	d502      	bpl.n	8007392 <_printf_float+0x19a>
 800738c:	3301      	adds	r3, #1
 800738e:	440b      	add	r3, r1
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	f04f 0a00 	mov.w	sl, #0
 8007396:	65a1      	str	r1, [r4, #88]	; 0x58
 8007398:	e7df      	b.n	800735a <_printf_float+0x162>
 800739a:	b913      	cbnz	r3, 80073a2 <_printf_float+0x1aa>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	07d2      	lsls	r2, r2, #31
 80073a0:	d501      	bpl.n	80073a6 <_printf_float+0x1ae>
 80073a2:	3302      	adds	r3, #2
 80073a4:	e7f4      	b.n	8007390 <_printf_float+0x198>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e7f2      	b.n	8007390 <_printf_float+0x198>
 80073aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b0:	4299      	cmp	r1, r3
 80073b2:	db05      	blt.n	80073c0 <_printf_float+0x1c8>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	6121      	str	r1, [r4, #16]
 80073b8:	07d8      	lsls	r0, r3, #31
 80073ba:	d5ea      	bpl.n	8007392 <_printf_float+0x19a>
 80073bc:	1c4b      	adds	r3, r1, #1
 80073be:	e7e7      	b.n	8007390 <_printf_float+0x198>
 80073c0:	2900      	cmp	r1, #0
 80073c2:	bfcc      	ite	gt
 80073c4:	2201      	movgt	r2, #1
 80073c6:	f1c1 0202 	rsble	r2, r1, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	e7e0      	b.n	8007390 <_printf_float+0x198>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	055a      	lsls	r2, r3, #21
 80073d2:	d407      	bmi.n	80073e4 <_printf_float+0x1ec>
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	4642      	mov	r2, r8
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	d12b      	bne.n	800743a <_printf_float+0x242>
 80073e2:	e764      	b.n	80072ae <_printf_float+0xb6>
 80073e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073e8:	f240 80dd 	bls.w	80075a6 <_printf_float+0x3ae>
 80073ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f0:	2200      	movs	r2, #0
 80073f2:	2300      	movs	r3, #0
 80073f4:	f7f9 fae2 	bl	80009bc <__aeabi_dcmpeq>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d033      	beq.n	8007464 <_printf_float+0x26c>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	4a35      	ldr	r2, [pc, #212]	; (80074d8 <_printf_float+0x2e0>)
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af51 	beq.w	80072ae <_printf_float+0xb6>
 800740c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007410:	429a      	cmp	r2, r3
 8007412:	db02      	blt.n	800741a <_printf_float+0x222>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	07d8      	lsls	r0, r3, #31
 8007418:	d50f      	bpl.n	800743a <_printf_float+0x242>
 800741a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f af42 	beq.w	80072ae <_printf_float+0xb6>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	f104 091a 	add.w	r9, r4, #26
 8007432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007434:	3b01      	subs	r3, #1
 8007436:	4543      	cmp	r3, r8
 8007438:	dc09      	bgt.n	800744e <_printf_float+0x256>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	079b      	lsls	r3, r3, #30
 800743e:	f100 8102 	bmi.w	8007646 <_printf_float+0x44e>
 8007442:	68e0      	ldr	r0, [r4, #12]
 8007444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007446:	4298      	cmp	r0, r3
 8007448:	bfb8      	it	lt
 800744a:	4618      	movlt	r0, r3
 800744c:	e731      	b.n	80072b2 <_printf_float+0xba>
 800744e:	2301      	movs	r3, #1
 8007450:	464a      	mov	r2, r9
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f af28 	beq.w	80072ae <_printf_float+0xb6>
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	e7e6      	b.n	8007432 <_printf_float+0x23a>
 8007464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007466:	2b00      	cmp	r3, #0
 8007468:	dc38      	bgt.n	80074dc <_printf_float+0x2e4>
 800746a:	2301      	movs	r3, #1
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <_printf_float+0x2e0>)
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f af1a 	beq.w	80072ae <_printf_float+0xb6>
 800747a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800747e:	4313      	orrs	r3, r2
 8007480:	d102      	bne.n	8007488 <_printf_float+0x290>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d5d8      	bpl.n	800743a <_printf_float+0x242>
 8007488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af0b 	beq.w	80072ae <_printf_float+0xb6>
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	f104 0a1a 	add.w	sl, r4, #26
 80074a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a2:	425b      	negs	r3, r3
 80074a4:	454b      	cmp	r3, r9
 80074a6:	dc01      	bgt.n	80074ac <_printf_float+0x2b4>
 80074a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074aa:	e794      	b.n	80073d6 <_printf_float+0x1de>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4652      	mov	r2, sl
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f aef9 	beq.w	80072ae <_printf_float+0xb6>
 80074bc:	f109 0901 	add.w	r9, r9, #1
 80074c0:	e7ee      	b.n	80074a0 <_printf_float+0x2a8>
 80074c2:	bf00      	nop
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	08009f00 	.word	0x08009f00
 80074cc:	08009f04 	.word	0x08009f04
 80074d0:	08009f0c 	.word	0x08009f0c
 80074d4:	08009f08 	.word	0x08009f08
 80074d8:	08009f10 	.word	0x08009f10
 80074dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfa8      	it	ge
 80074e4:	461a      	movge	r2, r3
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	4691      	mov	r9, r2
 80074ea:	dc37      	bgt.n	800755c <_printf_float+0x364>
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f4:	f104 021a 	add.w	r2, r4, #26
 80074f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074fc:	ebaa 0309 	sub.w	r3, sl, r9
 8007500:	455b      	cmp	r3, fp
 8007502:	dc33      	bgt.n	800756c <_printf_float+0x374>
 8007504:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007508:	429a      	cmp	r2, r3
 800750a:	db3b      	blt.n	8007584 <_printf_float+0x38c>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d438      	bmi.n	8007584 <_printf_float+0x38c>
 8007512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007514:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007516:	eba2 030a 	sub.w	r3, r2, sl
 800751a:	eba2 0901 	sub.w	r9, r2, r1
 800751e:	4599      	cmp	r9, r3
 8007520:	bfa8      	it	ge
 8007522:	4699      	movge	r9, r3
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	dc34      	bgt.n	8007594 <_printf_float+0x39c>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007532:	f104 0a1a 	add.w	sl, r4, #26
 8007536:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	eba3 0309 	sub.w	r3, r3, r9
 8007540:	4543      	cmp	r3, r8
 8007542:	f77f af7a 	ble.w	800743a <_printf_float+0x242>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f aeac 	beq.w	80072ae <_printf_float+0xb6>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	e7ec      	b.n	8007536 <_printf_float+0x33e>
 800755c:	4613      	mov	r3, r2
 800755e:	4631      	mov	r1, r6
 8007560:	4642      	mov	r2, r8
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d1c0      	bne.n	80074ec <_printf_float+0x2f4>
 800756a:	e6a0      	b.n	80072ae <_printf_float+0xb6>
 800756c:	2301      	movs	r3, #1
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	920b      	str	r2, [sp, #44]	; 0x2c
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f ae99 	beq.w	80072ae <_printf_float+0xb6>
 800757c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800757e:	f10b 0b01 	add.w	fp, fp, #1
 8007582:	e7b9      	b.n	80074f8 <_printf_float+0x300>
 8007584:	4631      	mov	r1, r6
 8007586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	d1bf      	bne.n	8007512 <_printf_float+0x31a>
 8007592:	e68c      	b.n	80072ae <_printf_float+0xb6>
 8007594:	464b      	mov	r3, r9
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	eb08 020a 	add.w	r2, r8, sl
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	d1c2      	bne.n	800752a <_printf_float+0x332>
 80075a4:	e683      	b.n	80072ae <_printf_float+0xb6>
 80075a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a8:	2a01      	cmp	r2, #1
 80075aa:	dc01      	bgt.n	80075b0 <_printf_float+0x3b8>
 80075ac:	07db      	lsls	r3, r3, #31
 80075ae:	d537      	bpl.n	8007620 <_printf_float+0x428>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4642      	mov	r2, r8
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f ae77 	beq.w	80072ae <_printf_float+0xb6>
 80075c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f ae6f 	beq.w	80072ae <_printf_float+0xb6>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	f7f9 f9f0 	bl	80009bc <__aeabi_dcmpeq>
 80075dc:	b9d8      	cbnz	r0, 8007616 <_printf_float+0x41e>
 80075de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e0:	f108 0201 	add.w	r2, r8, #1
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	d10e      	bne.n	800760e <_printf_float+0x416>
 80075f0:	e65d      	b.n	80072ae <_printf_float+0xb6>
 80075f2:	2301      	movs	r3, #1
 80075f4:	464a      	mov	r2, r9
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f ae56 	beq.w	80072ae <_printf_float+0xb6>
 8007602:	f108 0801 	add.w	r8, r8, #1
 8007606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007608:	3b01      	subs	r3, #1
 800760a:	4543      	cmp	r3, r8
 800760c:	dcf1      	bgt.n	80075f2 <_printf_float+0x3fa>
 800760e:	4653      	mov	r3, sl
 8007610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007614:	e6e0      	b.n	80073d8 <_printf_float+0x1e0>
 8007616:	f04f 0800 	mov.w	r8, #0
 800761a:	f104 091a 	add.w	r9, r4, #26
 800761e:	e7f2      	b.n	8007606 <_printf_float+0x40e>
 8007620:	2301      	movs	r3, #1
 8007622:	4642      	mov	r2, r8
 8007624:	e7df      	b.n	80075e6 <_printf_float+0x3ee>
 8007626:	2301      	movs	r3, #1
 8007628:	464a      	mov	r2, r9
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	f43f ae3c 	beq.w	80072ae <_printf_float+0xb6>
 8007636:	f108 0801 	add.w	r8, r8, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	4543      	cmp	r3, r8
 8007642:	dcf0      	bgt.n	8007626 <_printf_float+0x42e>
 8007644:	e6fd      	b.n	8007442 <_printf_float+0x24a>
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	f104 0919 	add.w	r9, r4, #25
 800764e:	e7f4      	b.n	800763a <_printf_float+0x442>

08007650 <_printf_common>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	4699      	mov	r9, r3
 8007658:	688a      	ldr	r2, [r1, #8]
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	4607      	mov	r7, r0
 800765e:	4293      	cmp	r3, r2
 8007660:	bfb8      	it	lt
 8007662:	4613      	movlt	r3, r2
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800766a:	460c      	mov	r4, r1
 800766c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007670:	b10a      	cbz	r2, 8007676 <_printf_common+0x26>
 8007672:	3301      	adds	r3, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	0699      	lsls	r1, r3, #26
 800767a:	bf42      	ittt	mi
 800767c:	6833      	ldrmi	r3, [r6, #0]
 800767e:	3302      	addmi	r3, #2
 8007680:	6033      	strmi	r3, [r6, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d106      	bne.n	8007698 <_printf_common+0x48>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	6832      	ldr	r2, [r6, #0]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc28      	bgt.n	80076ea <_printf_common+0x9a>
 8007698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800769c:	1e13      	subs	r3, r2, #0
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	0692      	lsls	r2, r2, #26
 80076a6:	d42d      	bmi.n	8007704 <_printf_common+0xb4>
 80076a8:	4649      	mov	r1, r9
 80076aa:	4638      	mov	r0, r7
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	47c0      	blx	r8
 80076b2:	3001      	adds	r0, #1
 80076b4:	d020      	beq.n	80076f8 <_printf_common+0xa8>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	68e5      	ldr	r5, [r4, #12]
 80076ba:	f003 0306 	and.w	r3, r3, #6
 80076be:	2b04      	cmp	r3, #4
 80076c0:	bf18      	it	ne
 80076c2:	2500      	movne	r5, #0
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	f04f 0600 	mov.w	r6, #0
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	bf08      	it	eq
 80076ce:	1aad      	subeq	r5, r5, r2
 80076d0:	6922      	ldr	r2, [r4, #16]
 80076d2:	bf08      	it	eq
 80076d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d8:	4293      	cmp	r3, r2
 80076da:	bfc4      	itt	gt
 80076dc:	1a9b      	subgt	r3, r3, r2
 80076de:	18ed      	addgt	r5, r5, r3
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xcc>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xac>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xb0>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c4      	b.n	800768e <_printf_common+0x3e>
 8007704:	2030      	movs	r0, #48	; 0x30
 8007706:	18e1      	adds	r1, r4, r3
 8007708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007712:	4422      	add	r2, r4
 8007714:	3302      	adds	r3, #2
 8007716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800771a:	e7c5      	b.n	80076a8 <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa8>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x92>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	7e27      	ldrb	r7, [r4, #24]
 8007738:	4691      	mov	r9, r2
 800773a:	2f78      	cmp	r7, #120	; 0x78
 800773c:	4680      	mov	r8, r0
 800773e:	469a      	mov	sl, r3
 8007740:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d9 	beq.w	8007904 <_printf_i+0x1d4>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80a4 	beq.w	80078a0 <_printf_i+0x170>
 8007758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a001      	add	r0, pc, #4	; (adr r0, 8007770 <_printf_i+0x40>)
 800776c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078eb 	.word	0x080078eb
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	080078cd 	.word	0x080078cd
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	0800790d 	.word	0x0800790d
 80077b4:	08007759 	.word	0x08007759
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078d5 	.word	0x080078d5
 80077c8:	680b      	ldr	r3, [r1, #0]
 80077ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	600a      	str	r2, [r1, #0]
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e0a4      	b.n	8007926 <_printf_i+0x1f6>
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	6808      	ldr	r0, [r1, #0]
 80077e0:	062e      	lsls	r6, r5, #24
 80077e2:	f100 0304 	add.w	r3, r0, #4
 80077e6:	d50a      	bpl.n	80077fe <_printf_i+0xce>
 80077e8:	6805      	ldr	r5, [r0, #0]
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	da03      	bge.n	80077f8 <_printf_i+0xc8>
 80077f0:	232d      	movs	r3, #45	; 0x2d
 80077f2:	426d      	negs	r5, r5
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	230a      	movs	r3, #10
 80077fa:	485e      	ldr	r0, [pc, #376]	; (8007974 <_printf_i+0x244>)
 80077fc:	e019      	b.n	8007832 <_printf_i+0x102>
 80077fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007802:	6805      	ldr	r5, [r0, #0]
 8007804:	600b      	str	r3, [r1, #0]
 8007806:	bf18      	it	ne
 8007808:	b22d      	sxthne	r5, r5
 800780a:	e7ef      	b.n	80077ec <_printf_i+0xbc>
 800780c:	680b      	ldr	r3, [r1, #0]
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	1d18      	adds	r0, r3, #4
 8007812:	6008      	str	r0, [r1, #0]
 8007814:	0628      	lsls	r0, r5, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xec>
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	e002      	b.n	8007822 <_printf_i+0xf2>
 800781c:	0669      	lsls	r1, r5, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xe8>
 8007820:	881d      	ldrh	r5, [r3, #0]
 8007822:	2f6f      	cmp	r7, #111	; 0x6f
 8007824:	bf0c      	ite	eq
 8007826:	2308      	moveq	r3, #8
 8007828:	230a      	movne	r3, #10
 800782a:	4852      	ldr	r0, [pc, #328]	; (8007974 <_printf_i+0x244>)
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007832:	6866      	ldr	r6, [r4, #4]
 8007834:	2e00      	cmp	r6, #0
 8007836:	bfa8      	it	ge
 8007838:	6821      	ldrge	r1, [r4, #0]
 800783a:	60a6      	str	r6, [r4, #8]
 800783c:	bfa4      	itt	ge
 800783e:	f021 0104 	bicge.w	r1, r1, #4
 8007842:	6021      	strge	r1, [r4, #0]
 8007844:	b90d      	cbnz	r5, 800784a <_printf_i+0x11a>
 8007846:	2e00      	cmp	r6, #0
 8007848:	d04d      	beq.n	80078e6 <_printf_i+0x1b6>
 800784a:	4616      	mov	r6, r2
 800784c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007850:	fb03 5711 	mls	r7, r3, r1, r5
 8007854:	5dc7      	ldrb	r7, [r0, r7]
 8007856:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800785a:	462f      	mov	r7, r5
 800785c:	42bb      	cmp	r3, r7
 800785e:	460d      	mov	r5, r1
 8007860:	d9f4      	bls.n	800784c <_printf_i+0x11c>
 8007862:	2b08      	cmp	r3, #8
 8007864:	d10b      	bne.n	800787e <_printf_i+0x14e>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	07df      	lsls	r7, r3, #31
 800786a:	d508      	bpl.n	800787e <_printf_i+0x14e>
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	6861      	ldr	r1, [r4, #4]
 8007870:	4299      	cmp	r1, r3
 8007872:	bfde      	ittt	le
 8007874:	2330      	movle	r3, #48	; 0x30
 8007876:	f806 3c01 	strble.w	r3, [r6, #-1]
 800787a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800787e:	1b92      	subs	r2, r2, r6
 8007880:	6122      	str	r2, [r4, #16]
 8007882:	464b      	mov	r3, r9
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f8cd a000 	str.w	sl, [sp]
 800788c:	aa03      	add	r2, sp, #12
 800788e:	f7ff fedf 	bl	8007650 <_printf_common>
 8007892:	3001      	adds	r0, #1
 8007894:	d14c      	bne.n	8007930 <_printf_i+0x200>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	b004      	add	sp, #16
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	4834      	ldr	r0, [pc, #208]	; (8007974 <_printf_i+0x244>)
 80078a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078a6:	680e      	ldr	r6, [r1, #0]
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80078ae:	061f      	lsls	r7, r3, #24
 80078b0:	600e      	str	r6, [r1, #0]
 80078b2:	d514      	bpl.n	80078de <_printf_i+0x1ae>
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	bf44      	itt	mi
 80078b8:	f043 0320 	orrmi.w	r3, r3, #32
 80078bc:	6023      	strmi	r3, [r4, #0]
 80078be:	b91d      	cbnz	r5, 80078c8 <_printf_i+0x198>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	f023 0320 	bic.w	r3, r3, #32
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	2310      	movs	r3, #16
 80078ca:	e7af      	b.n	800782c <_printf_i+0xfc>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	f043 0320 	orr.w	r3, r3, #32
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	2378      	movs	r3, #120	; 0x78
 80078d6:	4828      	ldr	r0, [pc, #160]	; (8007978 <_printf_i+0x248>)
 80078d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078dc:	e7e3      	b.n	80078a6 <_printf_i+0x176>
 80078de:	065e      	lsls	r6, r3, #25
 80078e0:	bf48      	it	mi
 80078e2:	b2ad      	uxthmi	r5, r5
 80078e4:	e7e6      	b.n	80078b4 <_printf_i+0x184>
 80078e6:	4616      	mov	r6, r2
 80078e8:	e7bb      	b.n	8007862 <_printf_i+0x132>
 80078ea:	680b      	ldr	r3, [r1, #0]
 80078ec:	6826      	ldr	r6, [r4, #0]
 80078ee:	1d1d      	adds	r5, r3, #4
 80078f0:	6960      	ldr	r0, [r4, #20]
 80078f2:	600d      	str	r5, [r1, #0]
 80078f4:	0635      	lsls	r5, r6, #24
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	d501      	bpl.n	80078fe <_printf_i+0x1ce>
 80078fa:	6018      	str	r0, [r3, #0]
 80078fc:	e002      	b.n	8007904 <_printf_i+0x1d4>
 80078fe:	0671      	lsls	r1, r6, #25
 8007900:	d5fb      	bpl.n	80078fa <_printf_i+0x1ca>
 8007902:	8018      	strh	r0, [r3, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	4616      	mov	r6, r2
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	e7ba      	b.n	8007882 <_printf_i+0x152>
 800790c:	680b      	ldr	r3, [r1, #0]
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	600a      	str	r2, [r1, #0]
 8007912:	681e      	ldr	r6, [r3, #0]
 8007914:	2100      	movs	r1, #0
 8007916:	4630      	mov	r0, r6
 8007918:	6862      	ldr	r2, [r4, #4]
 800791a:	f000 fed7 	bl	80086cc <memchr>
 800791e:	b108      	cbz	r0, 8007924 <_printf_i+0x1f4>
 8007920:	1b80      	subs	r0, r0, r6
 8007922:	6060      	str	r0, [r4, #4]
 8007924:	6863      	ldr	r3, [r4, #4]
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	2300      	movs	r3, #0
 800792a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792e:	e7a8      	b.n	8007882 <_printf_i+0x152>
 8007930:	4632      	mov	r2, r6
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	47d0      	blx	sl
 800793a:	3001      	adds	r0, #1
 800793c:	d0ab      	beq.n	8007896 <_printf_i+0x166>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	079b      	lsls	r3, r3, #30
 8007942:	d413      	bmi.n	800796c <_printf_i+0x23c>
 8007944:	68e0      	ldr	r0, [r4, #12]
 8007946:	9b03      	ldr	r3, [sp, #12]
 8007948:	4298      	cmp	r0, r3
 800794a:	bfb8      	it	lt
 800794c:	4618      	movlt	r0, r3
 800794e:	e7a4      	b.n	800789a <_printf_i+0x16a>
 8007950:	2301      	movs	r3, #1
 8007952:	4632      	mov	r2, r6
 8007954:	4649      	mov	r1, r9
 8007956:	4640      	mov	r0, r8
 8007958:	47d0      	blx	sl
 800795a:	3001      	adds	r0, #1
 800795c:	d09b      	beq.n	8007896 <_printf_i+0x166>
 800795e:	3501      	adds	r5, #1
 8007960:	68e3      	ldr	r3, [r4, #12]
 8007962:	9903      	ldr	r1, [sp, #12]
 8007964:	1a5b      	subs	r3, r3, r1
 8007966:	42ab      	cmp	r3, r5
 8007968:	dcf2      	bgt.n	8007950 <_printf_i+0x220>
 800796a:	e7eb      	b.n	8007944 <_printf_i+0x214>
 800796c:	2500      	movs	r5, #0
 800796e:	f104 0619 	add.w	r6, r4, #25
 8007972:	e7f5      	b.n	8007960 <_printf_i+0x230>
 8007974:	08009f12 	.word	0x08009f12
 8007978:	08009f23 	.word	0x08009f23

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007982:	b500      	push	{lr}
 8007984:	b09c      	sub	sp, #112	; 0x70
 8007986:	ab1d      	add	r3, sp, #116	; 0x74
 8007988:	9002      	str	r0, [sp, #8]
 800798a:	9006      	str	r0, [sp, #24]
 800798c:	9107      	str	r1, [sp, #28]
 800798e:	9104      	str	r1, [sp, #16]
 8007990:	4808      	ldr	r0, [pc, #32]	; (80079b4 <siprintf+0x38>)
 8007992:	4909      	ldr	r1, [pc, #36]	; (80079b8 <siprintf+0x3c>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	a902      	add	r1, sp, #8
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	f001 fb42 	bl	8009028 <_svfiprintf_r>
 80079a4:	2200      	movs	r2, #0
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	b01c      	add	sp, #112	; 0x70
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	2000004c 	.word	0x2000004c
 80079b8:	ffff0208 	.word	0xffff0208

080079bc <quorem>:
 80079bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	6903      	ldr	r3, [r0, #16]
 80079c2:	690c      	ldr	r4, [r1, #16]
 80079c4:	4607      	mov	r7, r0
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	f2c0 8083 	blt.w	8007ad2 <quorem+0x116>
 80079cc:	3c01      	subs	r4, #1
 80079ce:	f100 0514 	add.w	r5, r0, #20
 80079d2:	f101 0814 	add.w	r8, r1, #20
 80079d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e4:	3301      	adds	r3, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80079ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079f4:	d332      	bcc.n	8007a5c <quorem+0xa0>
 80079f6:	f04f 0e00 	mov.w	lr, #0
 80079fa:	4640      	mov	r0, r8
 80079fc:	46ac      	mov	ip, r5
 80079fe:	46f2      	mov	sl, lr
 8007a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a04:	b293      	uxth	r3, r2
 8007a06:	fb06 e303 	mla	r3, r6, r3, lr
 8007a0a:	0c12      	lsrs	r2, r2, #16
 8007a0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a10:	fb06 e202 	mla	r2, r6, r2, lr
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ebaa 0303 	sub.w	r3, sl, r3
 8007a1a:	f8dc a000 	ldr.w	sl, [ip]
 8007a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a22:	fa1f fa8a 	uxth.w	sl, sl
 8007a26:	4453      	add	r3, sl
 8007a28:	fa1f fa82 	uxth.w	sl, r2
 8007a2c:	f8dc 2000 	ldr.w	r2, [ip]
 8007a30:	4581      	cmp	r9, r0
 8007a32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a44:	f84c 3b04 	str.w	r3, [ip], #4
 8007a48:	d2da      	bcs.n	8007a00 <quorem+0x44>
 8007a4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a4e:	b92b      	cbnz	r3, 8007a5c <quorem+0xa0>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	3b04      	subs	r3, #4
 8007a54:	429d      	cmp	r5, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	d32f      	bcc.n	8007aba <quorem+0xfe>
 8007a5a:	613c      	str	r4, [r7, #16]
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f001 f8cb 	bl	8008bf8 <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	db25      	blt.n	8007ab2 <quorem+0xf6>
 8007a66:	4628      	mov	r0, r5
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007a72:	f8d0 e000 	ldr.w	lr, [r0]
 8007a76:	b28b      	uxth	r3, r1
 8007a78:	ebac 0303 	sub.w	r3, ip, r3
 8007a7c:	fa1f f28e 	uxth.w	r2, lr
 8007a80:	4413      	add	r3, r2
 8007a82:	0c0a      	lsrs	r2, r1, #16
 8007a84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a92:	45c1      	cmp	r9, r8
 8007a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a98:	f840 3b04 	str.w	r3, [r0], #4
 8007a9c:	d2e7      	bcs.n	8007a6e <quorem+0xb2>
 8007a9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa6:	b922      	cbnz	r2, 8007ab2 <quorem+0xf6>
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	d30a      	bcc.n	8007ac6 <quorem+0x10a>
 8007ab0:	613c      	str	r4, [r7, #16]
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	3b04      	subs	r3, #4
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1cb      	bne.n	8007a5a <quorem+0x9e>
 8007ac2:	3c01      	subs	r4, #1
 8007ac4:	e7c6      	b.n	8007a54 <quorem+0x98>
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1f0      	bne.n	8007ab0 <quorem+0xf4>
 8007ace:	3c01      	subs	r4, #1
 8007ad0:	e7eb      	b.n	8007aaa <quorem+0xee>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e7ee      	b.n	8007ab4 <quorem+0xf8>
	...

08007ad8 <_dtoa_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4616      	mov	r6, r2
 8007ade:	461f      	mov	r7, r3
 8007ae0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ae2:	b099      	sub	sp, #100	; 0x64
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007aea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007aee:	b974      	cbnz	r4, 8007b0e <_dtoa_r+0x36>
 8007af0:	2010      	movs	r0, #16
 8007af2:	f000 fde3 	bl	80086bc <malloc>
 8007af6:	4602      	mov	r2, r0
 8007af8:	6268      	str	r0, [r5, #36]	; 0x24
 8007afa:	b920      	cbnz	r0, 8007b06 <_dtoa_r+0x2e>
 8007afc:	21ea      	movs	r1, #234	; 0xea
 8007afe:	4bae      	ldr	r3, [pc, #696]	; (8007db8 <_dtoa_r+0x2e0>)
 8007b00:	48ae      	ldr	r0, [pc, #696]	; (8007dbc <_dtoa_r+0x2e4>)
 8007b02:	f001 fba1 	bl	8009248 <__assert_func>
 8007b06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b0a:	6004      	str	r4, [r0, #0]
 8007b0c:	60c4      	str	r4, [r0, #12]
 8007b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	b151      	cbz	r1, 8007b2a <_dtoa_r+0x52>
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	2301      	movs	r3, #1
 8007b18:	4093      	lsls	r3, r2
 8007b1a:	604a      	str	r2, [r1, #4]
 8007b1c:	608b      	str	r3, [r1, #8]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fe30 	bl	8008784 <_Bfree>
 8007b24:	2200      	movs	r2, #0
 8007b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	1e3b      	subs	r3, r7, #0
 8007b2c:	bfaf      	iteee	ge
 8007b2e:	2300      	movge	r3, #0
 8007b30:	2201      	movlt	r2, #1
 8007b32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b36:	9305      	strlt	r3, [sp, #20]
 8007b38:	bfa8      	it	ge
 8007b3a:	f8c8 3000 	strge.w	r3, [r8]
 8007b3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b42:	4b9f      	ldr	r3, [pc, #636]	; (8007dc0 <_dtoa_r+0x2e8>)
 8007b44:	bfb8      	it	lt
 8007b46:	f8c8 2000 	strlt.w	r2, [r8]
 8007b4a:	ea33 0309 	bics.w	r3, r3, r9
 8007b4e:	d119      	bne.n	8007b84 <_dtoa_r+0xac>
 8007b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b5c:	4333      	orrs	r3, r6
 8007b5e:	f000 8580 	beq.w	8008662 <_dtoa_r+0xb8a>
 8007b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b64:	b953      	cbnz	r3, 8007b7c <_dtoa_r+0xa4>
 8007b66:	4b97      	ldr	r3, [pc, #604]	; (8007dc4 <_dtoa_r+0x2ec>)
 8007b68:	e022      	b.n	8007bb0 <_dtoa_r+0xd8>
 8007b6a:	4b97      	ldr	r3, [pc, #604]	; (8007dc8 <_dtoa_r+0x2f0>)
 8007b6c:	9308      	str	r3, [sp, #32]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	9808      	ldr	r0, [sp, #32]
 8007b76:	b019      	add	sp, #100	; 0x64
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	4b91      	ldr	r3, [pc, #580]	; (8007dc4 <_dtoa_r+0x2ec>)
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	3303      	adds	r3, #3
 8007b82:	e7f5      	b.n	8007b70 <_dtoa_r+0x98>
 8007b84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	2300      	movs	r3, #0
 8007b94:	f7f8 ff12 	bl	80009bc <__aeabi_dcmpeq>
 8007b98:	4680      	mov	r8, r0
 8007b9a:	b158      	cbz	r0, 8007bb4 <_dtoa_r+0xdc>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8559 	beq.w	800865c <_dtoa_r+0xb84>
 8007baa:	4888      	ldr	r0, [pc, #544]	; (8007dcc <_dtoa_r+0x2f4>)
 8007bac:	6018      	str	r0, [r3, #0]
 8007bae:	1e43      	subs	r3, r0, #1
 8007bb0:	9308      	str	r3, [sp, #32]
 8007bb2:	e7df      	b.n	8007b74 <_dtoa_r+0x9c>
 8007bb4:	ab16      	add	r3, sp, #88	; 0x58
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	ab17      	add	r3, sp, #92	; 0x5c
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bc2:	f001 f8c5 	bl	8008d50 <__d2b>
 8007bc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007bca:	4682      	mov	sl, r0
 8007bcc:	2c00      	cmp	r4, #0
 8007bce:	d07e      	beq.n	8007cce <_dtoa_r+0x1f6>
 8007bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007be2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007be6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b78      	ldr	r3, [pc, #480]	; (8007dd0 <_dtoa_r+0x2f8>)
 8007bee:	f7f8 fac5 	bl	800017c <__aeabi_dsub>
 8007bf2:	a36b      	add	r3, pc, #428	; (adr r3, 8007da0 <_dtoa_r+0x2c8>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 fc78 	bl	80004ec <__aeabi_dmul>
 8007bfc:	a36a      	add	r3, pc, #424	; (adr r3, 8007da8 <_dtoa_r+0x2d0>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fabd 	bl	8000180 <__adddf3>
 8007c06:	4606      	mov	r6, r0
 8007c08:	4620      	mov	r0, r4
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	f7f8 fc04 	bl	8000418 <__aeabi_i2d>
 8007c10:	a367      	add	r3, pc, #412	; (adr r3, 8007db0 <_dtoa_r+0x2d8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fc69 	bl	80004ec <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4630      	mov	r0, r6
 8007c20:	4639      	mov	r1, r7
 8007c22:	f7f8 faad 	bl	8000180 <__adddf3>
 8007c26:	4606      	mov	r6, r0
 8007c28:	460f      	mov	r7, r1
 8007c2a:	f7f8 ff0f 	bl	8000a4c <__aeabi_d2iz>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4681      	mov	r9, r0
 8007c32:	2300      	movs	r3, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 feca 	bl	80009d0 <__aeabi_dcmplt>
 8007c3c:	b148      	cbz	r0, 8007c52 <_dtoa_r+0x17a>
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f7f8 fbea 	bl	8000418 <__aeabi_i2d>
 8007c44:	4632      	mov	r2, r6
 8007c46:	463b      	mov	r3, r7
 8007c48:	f7f8 feb8 	bl	80009bc <__aeabi_dcmpeq>
 8007c4c:	b908      	cbnz	r0, 8007c52 <_dtoa_r+0x17a>
 8007c4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c52:	f1b9 0f16 	cmp.w	r9, #22
 8007c56:	d857      	bhi.n	8007d08 <_dtoa_r+0x230>
 8007c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c5c:	4b5d      	ldr	r3, [pc, #372]	; (8007dd4 <_dtoa_r+0x2fc>)
 8007c5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 feb3 	bl	80009d0 <__aeabi_dcmplt>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d04e      	beq.n	8007d0c <_dtoa_r+0x234>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c78:	1b1c      	subs	r4, r3, r4
 8007c7a:	1e63      	subs	r3, r4, #1
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	bf49      	itett	mi
 8007c80:	f1c4 0301 	rsbmi	r3, r4, #1
 8007c84:	2300      	movpl	r3, #0
 8007c86:	9306      	strmi	r3, [sp, #24]
 8007c88:	2300      	movmi	r3, #0
 8007c8a:	bf54      	ite	pl
 8007c8c:	9306      	strpl	r3, [sp, #24]
 8007c8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	db3c      	blt.n	8007d10 <_dtoa_r+0x238>
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007c9c:	444b      	add	r3, r9
 8007c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d86c      	bhi.n	8007d84 <_dtoa_r+0x2ac>
 8007caa:	2b05      	cmp	r3, #5
 8007cac:	bfc4      	itt	gt
 8007cae:	3b04      	subgt	r3, #4
 8007cb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb4:	bfc8      	it	gt
 8007cb6:	2400      	movgt	r4, #0
 8007cb8:	f1a3 0302 	sub.w	r3, r3, #2
 8007cbc:	bfd8      	it	le
 8007cbe:	2401      	movle	r4, #1
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	f200 808b 	bhi.w	8007ddc <_dtoa_r+0x304>
 8007cc6:	e8df f003 	tbb	[pc, r3]
 8007cca:	4f2d      	.short	0x4f2d
 8007ccc:	5b4d      	.short	0x5b4d
 8007cce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007cd2:	441c      	add	r4, r3
 8007cd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	bfc3      	ittte	gt
 8007cdc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ce0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007ce4:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ce8:	f1c3 0320 	rsble	r3, r3, #32
 8007cec:	bfc6      	itte	gt
 8007cee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cf2:	4318      	orrgt	r0, r3
 8007cf4:	fa06 f003 	lslle.w	r0, r6, r3
 8007cf8:	f7f8 fb7e 	bl	80003f8 <__aeabi_ui2d>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007d02:	3c01      	subs	r4, #1
 8007d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d06:	e770      	b.n	8007bea <_dtoa_r+0x112>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7b3      	b.n	8007c74 <_dtoa_r+0x19c>
 8007d0c:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d0e:	e7b2      	b.n	8007c76 <_dtoa_r+0x19e>
 8007d10:	9b06      	ldr	r3, [sp, #24]
 8007d12:	eba3 0309 	sub.w	r3, r3, r9
 8007d16:	9306      	str	r3, [sp, #24]
 8007d18:	f1c9 0300 	rsb	r3, r9, #0
 8007d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1e:	2300      	movs	r3, #0
 8007d20:	930e      	str	r3, [sp, #56]	; 0x38
 8007d22:	e7bf      	b.n	8007ca4 <_dtoa_r+0x1cc>
 8007d24:	2300      	movs	r3, #0
 8007d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	dc59      	bgt.n	8007de2 <_dtoa_r+0x30a>
 8007d2e:	f04f 0b01 	mov.w	fp, #1
 8007d32:	465b      	mov	r3, fp
 8007d34:	f8cd b008 	str.w	fp, [sp, #8]
 8007d38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007d40:	6042      	str	r2, [r0, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	f102 0614 	add.w	r6, r2, #20
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	6841      	ldr	r1, [r0, #4]
 8007d4c:	d94f      	bls.n	8007dee <_dtoa_r+0x316>
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fcd8 	bl	8008704 <_Balloc>
 8007d54:	9008      	str	r0, [sp, #32]
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d14d      	bne.n	8007df6 <_dtoa_r+0x31e>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d60:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <_dtoa_r+0x300>)
 8007d62:	e6cd      	b.n	8007b00 <_dtoa_r+0x28>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e7de      	b.n	8007d26 <_dtoa_r+0x24e>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d6e:	eb09 0b03 	add.w	fp, r9, r3
 8007d72:	f10b 0301 	add.w	r3, fp, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	9302      	str	r3, [sp, #8]
 8007d7a:	bfb8      	it	lt
 8007d7c:	2301      	movlt	r3, #1
 8007d7e:	e7dd      	b.n	8007d3c <_dtoa_r+0x264>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e7f2      	b.n	8007d6a <_dtoa_r+0x292>
 8007d84:	2401      	movs	r4, #1
 8007d86:	2300      	movs	r3, #0
 8007d88:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d8a:	9322      	str	r3, [sp, #136]	; 0x88
 8007d8c:	f04f 3bff 	mov.w	fp, #4294967295
 8007d90:	2200      	movs	r2, #0
 8007d92:	2312      	movs	r3, #18
 8007d94:	f8cd b008 	str.w	fp, [sp, #8]
 8007d98:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d9a:	e7cf      	b.n	8007d3c <_dtoa_r+0x264>
 8007d9c:	f3af 8000 	nop.w
 8007da0:	636f4361 	.word	0x636f4361
 8007da4:	3fd287a7 	.word	0x3fd287a7
 8007da8:	8b60c8b3 	.word	0x8b60c8b3
 8007dac:	3fc68a28 	.word	0x3fc68a28
 8007db0:	509f79fb 	.word	0x509f79fb
 8007db4:	3fd34413 	.word	0x3fd34413
 8007db8:	08009f41 	.word	0x08009f41
 8007dbc:	08009f58 	.word	0x08009f58
 8007dc0:	7ff00000 	.word	0x7ff00000
 8007dc4:	08009f3d 	.word	0x08009f3d
 8007dc8:	08009f34 	.word	0x08009f34
 8007dcc:	08009f11 	.word	0x08009f11
 8007dd0:	3ff80000 	.word	0x3ff80000
 8007dd4:	0800a050 	.word	0x0800a050
 8007dd8:	08009fb7 	.word	0x08009fb7
 8007ddc:	2301      	movs	r3, #1
 8007dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8007de0:	e7d4      	b.n	8007d8c <_dtoa_r+0x2b4>
 8007de2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007de6:	465b      	mov	r3, fp
 8007de8:	f8cd b008 	str.w	fp, [sp, #8]
 8007dec:	e7a6      	b.n	8007d3c <_dtoa_r+0x264>
 8007dee:	3101      	adds	r1, #1
 8007df0:	6041      	str	r1, [r0, #4]
 8007df2:	0052      	lsls	r2, r2, #1
 8007df4:	e7a6      	b.n	8007d44 <_dtoa_r+0x26c>
 8007df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df8:	9a08      	ldr	r2, [sp, #32]
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	2b0e      	cmp	r3, #14
 8007e00:	f200 80a8 	bhi.w	8007f54 <_dtoa_r+0x47c>
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	f000 80a5 	beq.w	8007f54 <_dtoa_r+0x47c>
 8007e0a:	f1b9 0f00 	cmp.w	r9, #0
 8007e0e:	dd34      	ble.n	8007e7a <_dtoa_r+0x3a2>
 8007e10:	4a9a      	ldr	r2, [pc, #616]	; (800807c <_dtoa_r+0x5a4>)
 8007e12:	f009 030f 	and.w	r3, r9, #15
 8007e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e1a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007e1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e26:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007e2a:	d016      	beq.n	8007e5a <_dtoa_r+0x382>
 8007e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e30:	4b93      	ldr	r3, [pc, #588]	; (8008080 <_dtoa_r+0x5a8>)
 8007e32:	2703      	movs	r7, #3
 8007e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e38:	f7f8 fc82 	bl	8000740 <__aeabi_ddiv>
 8007e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e40:	f004 040f 	and.w	r4, r4, #15
 8007e44:	4e8e      	ldr	r6, [pc, #568]	; (8008080 <_dtoa_r+0x5a8>)
 8007e46:	b954      	cbnz	r4, 8007e5e <_dtoa_r+0x386>
 8007e48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e50:	f7f8 fc76 	bl	8000740 <__aeabi_ddiv>
 8007e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e58:	e029      	b.n	8007eae <_dtoa_r+0x3d6>
 8007e5a:	2702      	movs	r7, #2
 8007e5c:	e7f2      	b.n	8007e44 <_dtoa_r+0x36c>
 8007e5e:	07e1      	lsls	r1, r4, #31
 8007e60:	d508      	bpl.n	8007e74 <_dtoa_r+0x39c>
 8007e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e6a:	f7f8 fb3f 	bl	80004ec <__aeabi_dmul>
 8007e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e72:	3701      	adds	r7, #1
 8007e74:	1064      	asrs	r4, r4, #1
 8007e76:	3608      	adds	r6, #8
 8007e78:	e7e5      	b.n	8007e46 <_dtoa_r+0x36e>
 8007e7a:	f000 80a5 	beq.w	8007fc8 <_dtoa_r+0x4f0>
 8007e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e82:	f1c9 0400 	rsb	r4, r9, #0
 8007e86:	4b7d      	ldr	r3, [pc, #500]	; (800807c <_dtoa_r+0x5a4>)
 8007e88:	f004 020f 	and.w	r2, r4, #15
 8007e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 fb2a 	bl	80004ec <__aeabi_dmul>
 8007e98:	2702      	movs	r7, #2
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ea0:	4e77      	ldr	r6, [pc, #476]	; (8008080 <_dtoa_r+0x5a8>)
 8007ea2:	1124      	asrs	r4, r4, #4
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f040 8084 	bne.w	8007fb2 <_dtoa_r+0x4da>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d2      	bne.n	8007e54 <_dtoa_r+0x37c>
 8007eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 808b 	beq.w	8007fcc <_dtoa_r+0x4f4>
 8007eb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007eba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ebe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b6f      	ldr	r3, [pc, #444]	; (8008084 <_dtoa_r+0x5ac>)
 8007ec6:	f7f8 fd83 	bl	80009d0 <__aeabi_dcmplt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d07e      	beq.n	8007fcc <_dtoa_r+0x4f4>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d07b      	beq.n	8007fcc <_dtoa_r+0x4f4>
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	dd38      	ble.n	8007f4c <_dtoa_r+0x474>
 8007eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4b69      	ldr	r3, [pc, #420]	; (8008088 <_dtoa_r+0x5b0>)
 8007ee2:	f7f8 fb03 	bl	80004ec <__aeabi_dmul>
 8007ee6:	465c      	mov	r4, fp
 8007ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eec:	f109 38ff 	add.w	r8, r9, #4294967295
 8007ef0:	3701      	adds	r7, #1
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7f8 fa90 	bl	8000418 <__aeabi_i2d>
 8007ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efc:	f7f8 faf6 	bl	80004ec <__aeabi_dmul>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b62      	ldr	r3, [pc, #392]	; (800808c <_dtoa_r+0x5b4>)
 8007f04:	f7f8 f93c 	bl	8000180 <__adddf3>
 8007f08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f10:	9611      	str	r6, [sp, #68]	; 0x44
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d15d      	bne.n	8007fd2 <_dtoa_r+0x4fa>
 8007f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4b5c      	ldr	r3, [pc, #368]	; (8008090 <_dtoa_r+0x5b8>)
 8007f1e:	f7f8 f92d 	bl	800017c <__aeabi_dsub>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f2e:	f7f8 fd6d 	bl	8000a0c <__aeabi_dcmpgt>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	f040 829e 	bne.w	8008474 <_dtoa_r+0x99c>
 8007f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f42:	f7f8 fd45 	bl	80009d0 <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f040 8292 	bne.w	8008470 <_dtoa_r+0x998>
 8007f4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f2c0 8153 	blt.w	8008202 <_dtoa_r+0x72a>
 8007f5c:	f1b9 0f0e 	cmp.w	r9, #14
 8007f60:	f300 814f 	bgt.w	8008202 <_dtoa_r+0x72a>
 8007f64:	4b45      	ldr	r3, [pc, #276]	; (800807c <_dtoa_r+0x5a4>)
 8007f66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007f6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f280 80db 	bge.w	8008130 <_dtoa_r+0x658>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f300 80d7 	bgt.w	8008130 <_dtoa_r+0x658>
 8007f82:	f040 8274 	bne.w	800846e <_dtoa_r+0x996>
 8007f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b40      	ldr	r3, [pc, #256]	; (8008090 <_dtoa_r+0x5b8>)
 8007f8e:	f7f8 faad 	bl	80004ec <__aeabi_dmul>
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	f7f8 fd2f 	bl	80009f8 <__aeabi_dcmpge>
 8007f9a:	9c02      	ldr	r4, [sp, #8]
 8007f9c:	4626      	mov	r6, r4
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f040 824a 	bne.w	8008438 <_dtoa_r+0x960>
 8007fa4:	2331      	movs	r3, #49	; 0x31
 8007fa6:	9f08      	ldr	r7, [sp, #32]
 8007fa8:	f109 0901 	add.w	r9, r9, #1
 8007fac:	f807 3b01 	strb.w	r3, [r7], #1
 8007fb0:	e246      	b.n	8008440 <_dtoa_r+0x968>
 8007fb2:	07e2      	lsls	r2, r4, #31
 8007fb4:	d505      	bpl.n	8007fc2 <_dtoa_r+0x4ea>
 8007fb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fba:	f7f8 fa97 	bl	80004ec <__aeabi_dmul>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	3701      	adds	r7, #1
 8007fc2:	1064      	asrs	r4, r4, #1
 8007fc4:	3608      	adds	r6, #8
 8007fc6:	e76d      	b.n	8007ea4 <_dtoa_r+0x3cc>
 8007fc8:	2702      	movs	r7, #2
 8007fca:	e770      	b.n	8007eae <_dtoa_r+0x3d6>
 8007fcc:	46c8      	mov	r8, r9
 8007fce:	9c02      	ldr	r4, [sp, #8]
 8007fd0:	e78f      	b.n	8007ef2 <_dtoa_r+0x41a>
 8007fd2:	9908      	ldr	r1, [sp, #32]
 8007fd4:	4b29      	ldr	r3, [pc, #164]	; (800807c <_dtoa_r+0x5a4>)
 8007fd6:	4421      	add	r1, r4
 8007fd8:	9112      	str	r1, [sp, #72]	; 0x48
 8007fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fe0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007fe4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d055      	beq.n	8008098 <_dtoa_r+0x5c0>
 8007fec:	2000      	movs	r0, #0
 8007fee:	4929      	ldr	r1, [pc, #164]	; (8008094 <_dtoa_r+0x5bc>)
 8007ff0:	f7f8 fba6 	bl	8000740 <__aeabi_ddiv>
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	f7f8 f8c0 	bl	800017c <__aeabi_dsub>
 8007ffc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008000:	9f08      	ldr	r7, [sp, #32]
 8008002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008006:	f7f8 fd21 	bl	8000a4c <__aeabi_d2iz>
 800800a:	4604      	mov	r4, r0
 800800c:	f7f8 fa04 	bl	8000418 <__aeabi_i2d>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008018:	f7f8 f8b0 	bl	800017c <__aeabi_dsub>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	3430      	adds	r4, #48	; 0x30
 8008022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800802a:	f807 4b01 	strb.w	r4, [r7], #1
 800802e:	f7f8 fccf 	bl	80009d0 <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	d174      	bne.n	8008120 <_dtoa_r+0x648>
 8008036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803a:	2000      	movs	r0, #0
 800803c:	4911      	ldr	r1, [pc, #68]	; (8008084 <_dtoa_r+0x5ac>)
 800803e:	f7f8 f89d 	bl	800017c <__aeabi_dsub>
 8008042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008046:	f7f8 fcc3 	bl	80009d0 <__aeabi_dcmplt>
 800804a:	2800      	cmp	r0, #0
 800804c:	f040 80b6 	bne.w	80081bc <_dtoa_r+0x6e4>
 8008050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008052:	429f      	cmp	r7, r3
 8008054:	f43f af7a 	beq.w	8007f4c <_dtoa_r+0x474>
 8008058:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800805c:	2200      	movs	r2, #0
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <_dtoa_r+0x5b0>)
 8008060:	f7f8 fa44 	bl	80004ec <__aeabi_dmul>
 8008064:	2200      	movs	r2, #0
 8008066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800806a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <_dtoa_r+0x5b0>)
 8008070:	f7f8 fa3c 	bl	80004ec <__aeabi_dmul>
 8008074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008078:	e7c3      	b.n	8008002 <_dtoa_r+0x52a>
 800807a:	bf00      	nop
 800807c:	0800a050 	.word	0x0800a050
 8008080:	0800a028 	.word	0x0800a028
 8008084:	3ff00000 	.word	0x3ff00000
 8008088:	40240000 	.word	0x40240000
 800808c:	401c0000 	.word	0x401c0000
 8008090:	40140000 	.word	0x40140000
 8008094:	3fe00000 	.word	0x3fe00000
 8008098:	4630      	mov	r0, r6
 800809a:	4639      	mov	r1, r7
 800809c:	f7f8 fa26 	bl	80004ec <__aeabi_dmul>
 80080a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080a6:	9c08      	ldr	r4, [sp, #32]
 80080a8:	9314      	str	r3, [sp, #80]	; 0x50
 80080aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ae:	f7f8 fccd 	bl	8000a4c <__aeabi_d2iz>
 80080b2:	9015      	str	r0, [sp, #84]	; 0x54
 80080b4:	f7f8 f9b0 	bl	8000418 <__aeabi_i2d>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c0:	f7f8 f85c 	bl	800017c <__aeabi_dsub>
 80080c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080c6:	4606      	mov	r6, r0
 80080c8:	3330      	adds	r3, #48	; 0x30
 80080ca:	f804 3b01 	strb.w	r3, [r4], #1
 80080ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080d0:	460f      	mov	r7, r1
 80080d2:	429c      	cmp	r4, r3
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	d124      	bne.n	8008124 <_dtoa_r+0x64c>
 80080da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080de:	4bb3      	ldr	r3, [pc, #716]	; (80083ac <_dtoa_r+0x8d4>)
 80080e0:	f7f8 f84e 	bl	8000180 <__adddf3>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fc8e 	bl	8000a0c <__aeabi_dcmpgt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d162      	bne.n	80081ba <_dtoa_r+0x6e2>
 80080f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080f8:	2000      	movs	r0, #0
 80080fa:	49ac      	ldr	r1, [pc, #688]	; (80083ac <_dtoa_r+0x8d4>)
 80080fc:	f7f8 f83e 	bl	800017c <__aeabi_dsub>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fc62 	bl	80009d0 <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f43f af1d 	beq.w	8007f4c <_dtoa_r+0x474>
 8008112:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008114:	1e7b      	subs	r3, r7, #1
 8008116:	9314      	str	r3, [sp, #80]	; 0x50
 8008118:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800811c:	2b30      	cmp	r3, #48	; 0x30
 800811e:	d0f8      	beq.n	8008112 <_dtoa_r+0x63a>
 8008120:	46c1      	mov	r9, r8
 8008122:	e03a      	b.n	800819a <_dtoa_r+0x6c2>
 8008124:	4ba2      	ldr	r3, [pc, #648]	; (80083b0 <_dtoa_r+0x8d8>)
 8008126:	f7f8 f9e1 	bl	80004ec <__aeabi_dmul>
 800812a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800812e:	e7bc      	b.n	80080aa <_dtoa_r+0x5d2>
 8008130:	9f08      	ldr	r7, [sp, #32]
 8008132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813a:	f7f8 fb01 	bl	8000740 <__aeabi_ddiv>
 800813e:	f7f8 fc85 	bl	8000a4c <__aeabi_d2iz>
 8008142:	4604      	mov	r4, r0
 8008144:	f7f8 f968 	bl	8000418 <__aeabi_i2d>
 8008148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800814c:	f7f8 f9ce 	bl	80004ec <__aeabi_dmul>
 8008150:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008154:	460b      	mov	r3, r1
 8008156:	4602      	mov	r2, r0
 8008158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815c:	f7f8 f80e 	bl	800017c <__aeabi_dsub>
 8008160:	f807 6b01 	strb.w	r6, [r7], #1
 8008164:	9e08      	ldr	r6, [sp, #32]
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	1bbe      	subs	r6, r7, r6
 800816a:	42b3      	cmp	r3, r6
 800816c:	d13a      	bne.n	80081e4 <_dtoa_r+0x70c>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	f7f8 f805 	bl	8000180 <__adddf3>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800817e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008182:	f7f8 fc43 	bl	8000a0c <__aeabi_dcmpgt>
 8008186:	bb58      	cbnz	r0, 80081e0 <_dtoa_r+0x708>
 8008188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800818c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008190:	f7f8 fc14 	bl	80009bc <__aeabi_dcmpeq>
 8008194:	b108      	cbz	r0, 800819a <_dtoa_r+0x6c2>
 8008196:	07e1      	lsls	r1, r4, #31
 8008198:	d422      	bmi.n	80081e0 <_dtoa_r+0x708>
 800819a:	4628      	mov	r0, r5
 800819c:	4651      	mov	r1, sl
 800819e:	f000 faf1 	bl	8008784 <_Bfree>
 80081a2:	2300      	movs	r3, #0
 80081a4:	703b      	strb	r3, [r7, #0]
 80081a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80081a8:	f109 0001 	add.w	r0, r9, #1
 80081ac:	6018      	str	r0, [r3, #0]
 80081ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f43f acdf 	beq.w	8007b74 <_dtoa_r+0x9c>
 80081b6:	601f      	str	r7, [r3, #0]
 80081b8:	e4dc      	b.n	8007b74 <_dtoa_r+0x9c>
 80081ba:	4627      	mov	r7, r4
 80081bc:	463b      	mov	r3, r7
 80081be:	461f      	mov	r7, r3
 80081c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081c4:	2a39      	cmp	r2, #57	; 0x39
 80081c6:	d107      	bne.n	80081d8 <_dtoa_r+0x700>
 80081c8:	9a08      	ldr	r2, [sp, #32]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d1f7      	bne.n	80081be <_dtoa_r+0x6e6>
 80081ce:	2230      	movs	r2, #48	; 0x30
 80081d0:	9908      	ldr	r1, [sp, #32]
 80081d2:	f108 0801 	add.w	r8, r8, #1
 80081d6:	700a      	strb	r2, [r1, #0]
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	3201      	adds	r2, #1
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	e79f      	b.n	8008120 <_dtoa_r+0x648>
 80081e0:	46c8      	mov	r8, r9
 80081e2:	e7eb      	b.n	80081bc <_dtoa_r+0x6e4>
 80081e4:	2200      	movs	r2, #0
 80081e6:	4b72      	ldr	r3, [pc, #456]	; (80083b0 <_dtoa_r+0x8d8>)
 80081e8:	f7f8 f980 	bl	80004ec <__aeabi_dmul>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2300      	movs	r3, #0
 80081f8:	f7f8 fbe0 	bl	80009bc <__aeabi_dcmpeq>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d098      	beq.n	8008132 <_dtoa_r+0x65a>
 8008200:	e7cb      	b.n	800819a <_dtoa_r+0x6c2>
 8008202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008204:	2a00      	cmp	r2, #0
 8008206:	f000 80cd 	beq.w	80083a4 <_dtoa_r+0x8cc>
 800820a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800820c:	2a01      	cmp	r2, #1
 800820e:	f300 80af 	bgt.w	8008370 <_dtoa_r+0x898>
 8008212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008214:	2a00      	cmp	r2, #0
 8008216:	f000 80a7 	beq.w	8008368 <_dtoa_r+0x890>
 800821a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800821e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008220:	9f06      	ldr	r7, [sp, #24]
 8008222:	9a06      	ldr	r2, [sp, #24]
 8008224:	2101      	movs	r1, #1
 8008226:	441a      	add	r2, r3
 8008228:	9206      	str	r2, [sp, #24]
 800822a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800822c:	4628      	mov	r0, r5
 800822e:	441a      	add	r2, r3
 8008230:	9209      	str	r2, [sp, #36]	; 0x24
 8008232:	f000 fb61 	bl	80088f8 <__i2b>
 8008236:	4606      	mov	r6, r0
 8008238:	2f00      	cmp	r7, #0
 800823a:	dd0c      	ble.n	8008256 <_dtoa_r+0x77e>
 800823c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd09      	ble.n	8008256 <_dtoa_r+0x77e>
 8008242:	42bb      	cmp	r3, r7
 8008244:	bfa8      	it	ge
 8008246:	463b      	movge	r3, r7
 8008248:	9a06      	ldr	r2, [sp, #24]
 800824a:	1aff      	subs	r7, r7, r3
 800824c:	1ad2      	subs	r2, r2, r3
 800824e:	9206      	str	r2, [sp, #24]
 8008250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	9309      	str	r3, [sp, #36]	; 0x24
 8008256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008258:	b1f3      	cbz	r3, 8008298 <_dtoa_r+0x7c0>
 800825a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80a9 	beq.w	80083b4 <_dtoa_r+0x8dc>
 8008262:	2c00      	cmp	r4, #0
 8008264:	dd10      	ble.n	8008288 <_dtoa_r+0x7b0>
 8008266:	4631      	mov	r1, r6
 8008268:	4622      	mov	r2, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f000 fbfe 	bl	8008a6c <__pow5mult>
 8008270:	4652      	mov	r2, sl
 8008272:	4601      	mov	r1, r0
 8008274:	4606      	mov	r6, r0
 8008276:	4628      	mov	r0, r5
 8008278:	f000 fb54 	bl	8008924 <__multiply>
 800827c:	4680      	mov	r8, r0
 800827e:	4651      	mov	r1, sl
 8008280:	4628      	mov	r0, r5
 8008282:	f000 fa7f 	bl	8008784 <_Bfree>
 8008286:	46c2      	mov	sl, r8
 8008288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828a:	1b1a      	subs	r2, r3, r4
 800828c:	d004      	beq.n	8008298 <_dtoa_r+0x7c0>
 800828e:	4651      	mov	r1, sl
 8008290:	4628      	mov	r0, r5
 8008292:	f000 fbeb 	bl	8008a6c <__pow5mult>
 8008296:	4682      	mov	sl, r0
 8008298:	2101      	movs	r1, #1
 800829a:	4628      	mov	r0, r5
 800829c:	f000 fb2c 	bl	80088f8 <__i2b>
 80082a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a2:	4604      	mov	r4, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f340 8087 	ble.w	80083b8 <_dtoa_r+0x8e0>
 80082aa:	461a      	mov	r2, r3
 80082ac:	4601      	mov	r1, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fbdc 	bl	8008a6c <__pow5mult>
 80082b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b6:	4604      	mov	r4, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f340 8080 	ble.w	80083be <_dtoa_r+0x8e6>
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082c8:	6918      	ldr	r0, [r3, #16]
 80082ca:	f000 fac7 	bl	800885c <__hi0bits>
 80082ce:	f1c0 0020 	rsb	r0, r0, #32
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	4418      	add	r0, r3
 80082d6:	f010 001f 	ands.w	r0, r0, #31
 80082da:	f000 8092 	beq.w	8008402 <_dtoa_r+0x92a>
 80082de:	f1c0 0320 	rsb	r3, r0, #32
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	f340 808a 	ble.w	80083fc <_dtoa_r+0x924>
 80082e8:	f1c0 001c 	rsb	r0, r0, #28
 80082ec:	9b06      	ldr	r3, [sp, #24]
 80082ee:	4407      	add	r7, r0
 80082f0:	4403      	add	r3, r0
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	4403      	add	r3, r0
 80082f8:	9309      	str	r3, [sp, #36]	; 0x24
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dd05      	ble.n	800830c <_dtoa_r+0x834>
 8008300:	4651      	mov	r1, sl
 8008302:	461a      	mov	r2, r3
 8008304:	4628      	mov	r0, r5
 8008306:	f000 fc0b 	bl	8008b20 <__lshift>
 800830a:	4682      	mov	sl, r0
 800830c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	dd05      	ble.n	800831e <_dtoa_r+0x846>
 8008312:	4621      	mov	r1, r4
 8008314:	461a      	mov	r2, r3
 8008316:	4628      	mov	r0, r5
 8008318:	f000 fc02 	bl	8008b20 <__lshift>
 800831c:	4604      	mov	r4, r0
 800831e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d070      	beq.n	8008406 <_dtoa_r+0x92e>
 8008324:	4621      	mov	r1, r4
 8008326:	4650      	mov	r0, sl
 8008328:	f000 fc66 	bl	8008bf8 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	da6a      	bge.n	8008406 <_dtoa_r+0x92e>
 8008330:	2300      	movs	r3, #0
 8008332:	4651      	mov	r1, sl
 8008334:	220a      	movs	r2, #10
 8008336:	4628      	mov	r0, r5
 8008338:	f000 fa46 	bl	80087c8 <__multadd>
 800833c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833e:	4682      	mov	sl, r0
 8008340:	f109 39ff 	add.w	r9, r9, #4294967295
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8193 	beq.w	8008670 <_dtoa_r+0xb98>
 800834a:	4631      	mov	r1, r6
 800834c:	2300      	movs	r3, #0
 800834e:	220a      	movs	r2, #10
 8008350:	4628      	mov	r0, r5
 8008352:	f000 fa39 	bl	80087c8 <__multadd>
 8008356:	f1bb 0f00 	cmp.w	fp, #0
 800835a:	4606      	mov	r6, r0
 800835c:	f300 8093 	bgt.w	8008486 <_dtoa_r+0x9ae>
 8008360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008362:	2b02      	cmp	r3, #2
 8008364:	dc57      	bgt.n	8008416 <_dtoa_r+0x93e>
 8008366:	e08e      	b.n	8008486 <_dtoa_r+0x9ae>
 8008368:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800836a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800836e:	e756      	b.n	800821e <_dtoa_r+0x746>
 8008370:	9b02      	ldr	r3, [sp, #8]
 8008372:	1e5c      	subs	r4, r3, #1
 8008374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008376:	42a3      	cmp	r3, r4
 8008378:	bfb7      	itett	lt
 800837a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800837c:	1b1c      	subge	r4, r3, r4
 800837e:	1ae2      	sublt	r2, r4, r3
 8008380:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008382:	bfbe      	ittt	lt
 8008384:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008386:	189b      	addlt	r3, r3, r2
 8008388:	930e      	strlt	r3, [sp, #56]	; 0x38
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	bfb8      	it	lt
 800838e:	2400      	movlt	r4, #0
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfbb      	ittet	lt
 8008394:	9b06      	ldrlt	r3, [sp, #24]
 8008396:	9a02      	ldrlt	r2, [sp, #8]
 8008398:	9f06      	ldrge	r7, [sp, #24]
 800839a:	1a9f      	sublt	r7, r3, r2
 800839c:	bfac      	ite	ge
 800839e:	9b02      	ldrge	r3, [sp, #8]
 80083a0:	2300      	movlt	r3, #0
 80083a2:	e73e      	b.n	8008222 <_dtoa_r+0x74a>
 80083a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083a6:	9f06      	ldr	r7, [sp, #24]
 80083a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80083aa:	e745      	b.n	8008238 <_dtoa_r+0x760>
 80083ac:	3fe00000 	.word	0x3fe00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083b6:	e76a      	b.n	800828e <_dtoa_r+0x7b6>
 80083b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	dc19      	bgt.n	80083f2 <_dtoa_r+0x91a>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	b9bb      	cbnz	r3, 80083f2 <_dtoa_r+0x91a>
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083c8:	b99b      	cbnz	r3, 80083f2 <_dtoa_r+0x91a>
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083d0:	0d1b      	lsrs	r3, r3, #20
 80083d2:	051b      	lsls	r3, r3, #20
 80083d4:	b183      	cbz	r3, 80083f8 <_dtoa_r+0x920>
 80083d6:	f04f 0801 	mov.w	r8, #1
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	3301      	adds	r3, #1
 80083de:	9306      	str	r3, [sp, #24]
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	3301      	adds	r3, #1
 80083e4:	9309      	str	r3, [sp, #36]	; 0x24
 80083e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f47f af6a 	bne.w	80082c2 <_dtoa_r+0x7ea>
 80083ee:	2001      	movs	r0, #1
 80083f0:	e76f      	b.n	80082d2 <_dtoa_r+0x7fa>
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	e7f6      	b.n	80083e6 <_dtoa_r+0x90e>
 80083f8:	4698      	mov	r8, r3
 80083fa:	e7f4      	b.n	80083e6 <_dtoa_r+0x90e>
 80083fc:	f43f af7d 	beq.w	80082fa <_dtoa_r+0x822>
 8008400:	4618      	mov	r0, r3
 8008402:	301c      	adds	r0, #28
 8008404:	e772      	b.n	80082ec <_dtoa_r+0x814>
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	dc36      	bgt.n	800847a <_dtoa_r+0x9a2>
 800840c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800840e:	2b02      	cmp	r3, #2
 8008410:	dd33      	ble.n	800847a <_dtoa_r+0x9a2>
 8008412:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008416:	f1bb 0f00 	cmp.w	fp, #0
 800841a:	d10d      	bne.n	8008438 <_dtoa_r+0x960>
 800841c:	4621      	mov	r1, r4
 800841e:	465b      	mov	r3, fp
 8008420:	2205      	movs	r2, #5
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f9d0 	bl	80087c8 <__multadd>
 8008428:	4601      	mov	r1, r0
 800842a:	4604      	mov	r4, r0
 800842c:	4650      	mov	r0, sl
 800842e:	f000 fbe3 	bl	8008bf8 <__mcmp>
 8008432:	2800      	cmp	r0, #0
 8008434:	f73f adb6 	bgt.w	8007fa4 <_dtoa_r+0x4cc>
 8008438:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800843a:	9f08      	ldr	r7, [sp, #32]
 800843c:	ea6f 0903 	mvn.w	r9, r3
 8008440:	f04f 0800 	mov.w	r8, #0
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f99c 	bl	8008784 <_Bfree>
 800844c:	2e00      	cmp	r6, #0
 800844e:	f43f aea4 	beq.w	800819a <_dtoa_r+0x6c2>
 8008452:	f1b8 0f00 	cmp.w	r8, #0
 8008456:	d005      	beq.n	8008464 <_dtoa_r+0x98c>
 8008458:	45b0      	cmp	r8, r6
 800845a:	d003      	beq.n	8008464 <_dtoa_r+0x98c>
 800845c:	4641      	mov	r1, r8
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f990 	bl	8008784 <_Bfree>
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	f000 f98c 	bl	8008784 <_Bfree>
 800846c:	e695      	b.n	800819a <_dtoa_r+0x6c2>
 800846e:	2400      	movs	r4, #0
 8008470:	4626      	mov	r6, r4
 8008472:	e7e1      	b.n	8008438 <_dtoa_r+0x960>
 8008474:	46c1      	mov	r9, r8
 8008476:	4626      	mov	r6, r4
 8008478:	e594      	b.n	8007fa4 <_dtoa_r+0x4cc>
 800847a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800847c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 80fc 	beq.w	800867e <_dtoa_r+0xba6>
 8008486:	2f00      	cmp	r7, #0
 8008488:	dd05      	ble.n	8008496 <_dtoa_r+0x9be>
 800848a:	4631      	mov	r1, r6
 800848c:	463a      	mov	r2, r7
 800848e:	4628      	mov	r0, r5
 8008490:	f000 fb46 	bl	8008b20 <__lshift>
 8008494:	4606      	mov	r6, r0
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	d05c      	beq.n	8008556 <_dtoa_r+0xa7e>
 800849c:	4628      	mov	r0, r5
 800849e:	6871      	ldr	r1, [r6, #4]
 80084a0:	f000 f930 	bl	8008704 <_Balloc>
 80084a4:	4607      	mov	r7, r0
 80084a6:	b928      	cbnz	r0, 80084b4 <_dtoa_r+0x9dc>
 80084a8:	4602      	mov	r2, r0
 80084aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ae:	4b7e      	ldr	r3, [pc, #504]	; (80086a8 <_dtoa_r+0xbd0>)
 80084b0:	f7ff bb26 	b.w	8007b00 <_dtoa_r+0x28>
 80084b4:	6932      	ldr	r2, [r6, #16]
 80084b6:	f106 010c 	add.w	r1, r6, #12
 80084ba:	3202      	adds	r2, #2
 80084bc:	0092      	lsls	r2, r2, #2
 80084be:	300c      	adds	r0, #12
 80084c0:	f000 f912 	bl	80086e8 <memcpy>
 80084c4:	2201      	movs	r2, #1
 80084c6:	4639      	mov	r1, r7
 80084c8:	4628      	mov	r0, r5
 80084ca:	f000 fb29 	bl	8008b20 <__lshift>
 80084ce:	46b0      	mov	r8, r6
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	3301      	adds	r3, #1
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	9b08      	ldr	r3, [sp, #32]
 80084da:	445b      	add	r3, fp
 80084dc:	930a      	str	r3, [sp, #40]	; 0x28
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	4621      	mov	r1, r4
 80084ea:	4650      	mov	r0, sl
 80084ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80084f0:	f7ff fa64 	bl	80079bc <quorem>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4641      	mov	r1, r8
 80084f8:	3330      	adds	r3, #48	; 0x30
 80084fa:	9004      	str	r0, [sp, #16]
 80084fc:	4650      	mov	r0, sl
 80084fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008500:	f000 fb7a 	bl	8008bf8 <__mcmp>
 8008504:	4632      	mov	r2, r6
 8008506:	9006      	str	r0, [sp, #24]
 8008508:	4621      	mov	r1, r4
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fb90 	bl	8008c30 <__mdiff>
 8008510:	68c2      	ldr	r2, [r0, #12]
 8008512:	4607      	mov	r7, r0
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	bb02      	cbnz	r2, 800855a <_dtoa_r+0xa82>
 8008518:	4601      	mov	r1, r0
 800851a:	4650      	mov	r0, sl
 800851c:	f000 fb6c 	bl	8008bf8 <__mcmp>
 8008520:	4602      	mov	r2, r0
 8008522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008524:	4639      	mov	r1, r7
 8008526:	4628      	mov	r0, r5
 8008528:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800852c:	f000 f92a 	bl	8008784 <_Bfree>
 8008530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008534:	9f02      	ldr	r7, [sp, #8]
 8008536:	ea43 0102 	orr.w	r1, r3, r2
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	430b      	orrs	r3, r1
 800853e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008540:	d10d      	bne.n	800855e <_dtoa_r+0xa86>
 8008542:	2b39      	cmp	r3, #57	; 0x39
 8008544:	d027      	beq.n	8008596 <_dtoa_r+0xabe>
 8008546:	9a06      	ldr	r2, [sp, #24]
 8008548:	2a00      	cmp	r2, #0
 800854a:	dd01      	ble.n	8008550 <_dtoa_r+0xa78>
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	3331      	adds	r3, #49	; 0x31
 8008550:	f88b 3000 	strb.w	r3, [fp]
 8008554:	e776      	b.n	8008444 <_dtoa_r+0x96c>
 8008556:	4630      	mov	r0, r6
 8008558:	e7b9      	b.n	80084ce <_dtoa_r+0x9f6>
 800855a:	2201      	movs	r2, #1
 800855c:	e7e2      	b.n	8008524 <_dtoa_r+0xa4c>
 800855e:	9906      	ldr	r1, [sp, #24]
 8008560:	2900      	cmp	r1, #0
 8008562:	db04      	blt.n	800856e <_dtoa_r+0xa96>
 8008564:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008566:	4301      	orrs	r1, r0
 8008568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856a:	4301      	orrs	r1, r0
 800856c:	d120      	bne.n	80085b0 <_dtoa_r+0xad8>
 800856e:	2a00      	cmp	r2, #0
 8008570:	ddee      	ble.n	8008550 <_dtoa_r+0xa78>
 8008572:	4651      	mov	r1, sl
 8008574:	2201      	movs	r2, #1
 8008576:	4628      	mov	r0, r5
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	f000 fad1 	bl	8008b20 <__lshift>
 800857e:	4621      	mov	r1, r4
 8008580:	4682      	mov	sl, r0
 8008582:	f000 fb39 	bl	8008bf8 <__mcmp>
 8008586:	2800      	cmp	r0, #0
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	dc02      	bgt.n	8008592 <_dtoa_r+0xaba>
 800858c:	d1e0      	bne.n	8008550 <_dtoa_r+0xa78>
 800858e:	07da      	lsls	r2, r3, #31
 8008590:	d5de      	bpl.n	8008550 <_dtoa_r+0xa78>
 8008592:	2b39      	cmp	r3, #57	; 0x39
 8008594:	d1da      	bne.n	800854c <_dtoa_r+0xa74>
 8008596:	2339      	movs	r3, #57	; 0x39
 8008598:	f88b 3000 	strb.w	r3, [fp]
 800859c:	463b      	mov	r3, r7
 800859e:	461f      	mov	r7, r3
 80085a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	2a39      	cmp	r2, #57	; 0x39
 80085a8:	d050      	beq.n	800864c <_dtoa_r+0xb74>
 80085aa:	3201      	adds	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e749      	b.n	8008444 <_dtoa_r+0x96c>
 80085b0:	2a00      	cmp	r2, #0
 80085b2:	dd03      	ble.n	80085bc <_dtoa_r+0xae4>
 80085b4:	2b39      	cmp	r3, #57	; 0x39
 80085b6:	d0ee      	beq.n	8008596 <_dtoa_r+0xabe>
 80085b8:	3301      	adds	r3, #1
 80085ba:	e7c9      	b.n	8008550 <_dtoa_r+0xa78>
 80085bc:	9a02      	ldr	r2, [sp, #8]
 80085be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085c4:	428a      	cmp	r2, r1
 80085c6:	d02a      	beq.n	800861e <_dtoa_r+0xb46>
 80085c8:	4651      	mov	r1, sl
 80085ca:	2300      	movs	r3, #0
 80085cc:	220a      	movs	r2, #10
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f8fa 	bl	80087c8 <__multadd>
 80085d4:	45b0      	cmp	r8, r6
 80085d6:	4682      	mov	sl, r0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	f04f 020a 	mov.w	r2, #10
 80085e0:	4641      	mov	r1, r8
 80085e2:	4628      	mov	r0, r5
 80085e4:	d107      	bne.n	80085f6 <_dtoa_r+0xb1e>
 80085e6:	f000 f8ef 	bl	80087c8 <__multadd>
 80085ea:	4680      	mov	r8, r0
 80085ec:	4606      	mov	r6, r0
 80085ee:	9b02      	ldr	r3, [sp, #8]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9302      	str	r3, [sp, #8]
 80085f4:	e777      	b.n	80084e6 <_dtoa_r+0xa0e>
 80085f6:	f000 f8e7 	bl	80087c8 <__multadd>
 80085fa:	4631      	mov	r1, r6
 80085fc:	4680      	mov	r8, r0
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4628      	mov	r0, r5
 8008604:	f000 f8e0 	bl	80087c8 <__multadd>
 8008608:	4606      	mov	r6, r0
 800860a:	e7f0      	b.n	80085ee <_dtoa_r+0xb16>
 800860c:	f1bb 0f00 	cmp.w	fp, #0
 8008610:	bfcc      	ite	gt
 8008612:	465f      	movgt	r7, fp
 8008614:	2701      	movle	r7, #1
 8008616:	f04f 0800 	mov.w	r8, #0
 800861a:	9a08      	ldr	r2, [sp, #32]
 800861c:	4417      	add	r7, r2
 800861e:	4651      	mov	r1, sl
 8008620:	2201      	movs	r2, #1
 8008622:	4628      	mov	r0, r5
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	f000 fa7b 	bl	8008b20 <__lshift>
 800862a:	4621      	mov	r1, r4
 800862c:	4682      	mov	sl, r0
 800862e:	f000 fae3 	bl	8008bf8 <__mcmp>
 8008632:	2800      	cmp	r0, #0
 8008634:	dcb2      	bgt.n	800859c <_dtoa_r+0xac4>
 8008636:	d102      	bne.n	800863e <_dtoa_r+0xb66>
 8008638:	9b02      	ldr	r3, [sp, #8]
 800863a:	07db      	lsls	r3, r3, #31
 800863c:	d4ae      	bmi.n	800859c <_dtoa_r+0xac4>
 800863e:	463b      	mov	r3, r7
 8008640:	461f      	mov	r7, r3
 8008642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008646:	2a30      	cmp	r2, #48	; 0x30
 8008648:	d0fa      	beq.n	8008640 <_dtoa_r+0xb68>
 800864a:	e6fb      	b.n	8008444 <_dtoa_r+0x96c>
 800864c:	9a08      	ldr	r2, [sp, #32]
 800864e:	429a      	cmp	r2, r3
 8008650:	d1a5      	bne.n	800859e <_dtoa_r+0xac6>
 8008652:	2331      	movs	r3, #49	; 0x31
 8008654:	f109 0901 	add.w	r9, r9, #1
 8008658:	7013      	strb	r3, [r2, #0]
 800865a:	e6f3      	b.n	8008444 <_dtoa_r+0x96c>
 800865c:	4b13      	ldr	r3, [pc, #76]	; (80086ac <_dtoa_r+0xbd4>)
 800865e:	f7ff baa7 	b.w	8007bb0 <_dtoa_r+0xd8>
 8008662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008664:	2b00      	cmp	r3, #0
 8008666:	f47f aa80 	bne.w	8007b6a <_dtoa_r+0x92>
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <_dtoa_r+0xbd8>)
 800866c:	f7ff baa0 	b.w	8007bb0 <_dtoa_r+0xd8>
 8008670:	f1bb 0f00 	cmp.w	fp, #0
 8008674:	dc03      	bgt.n	800867e <_dtoa_r+0xba6>
 8008676:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008678:	2b02      	cmp	r3, #2
 800867a:	f73f aecc 	bgt.w	8008416 <_dtoa_r+0x93e>
 800867e:	9f08      	ldr	r7, [sp, #32]
 8008680:	4621      	mov	r1, r4
 8008682:	4650      	mov	r0, sl
 8008684:	f7ff f99a 	bl	80079bc <quorem>
 8008688:	9a08      	ldr	r2, [sp, #32]
 800868a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800868e:	f807 3b01 	strb.w	r3, [r7], #1
 8008692:	1aba      	subs	r2, r7, r2
 8008694:	4593      	cmp	fp, r2
 8008696:	ddb9      	ble.n	800860c <_dtoa_r+0xb34>
 8008698:	4651      	mov	r1, sl
 800869a:	2300      	movs	r3, #0
 800869c:	220a      	movs	r2, #10
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f892 	bl	80087c8 <__multadd>
 80086a4:	4682      	mov	sl, r0
 80086a6:	e7eb      	b.n	8008680 <_dtoa_r+0xba8>
 80086a8:	08009fb7 	.word	0x08009fb7
 80086ac:	08009f10 	.word	0x08009f10
 80086b0:	08009f34 	.word	0x08009f34

080086b4 <_localeconv_r>:
 80086b4:	4800      	ldr	r0, [pc, #0]	; (80086b8 <_localeconv_r+0x4>)
 80086b6:	4770      	bx	lr
 80086b8:	200001a0 	.word	0x200001a0

080086bc <malloc>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <malloc+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f000 bbfb 	b.w	8008ebc <_malloc_r>
 80086c6:	bf00      	nop
 80086c8:	2000004c 	.word	0x2000004c

080086cc <memchr>:
 80086cc:	4603      	mov	r3, r0
 80086ce:	b510      	push	{r4, lr}
 80086d0:	b2c9      	uxtb	r1, r1
 80086d2:	4402      	add	r2, r0
 80086d4:	4293      	cmp	r3, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	d101      	bne.n	80086de <memchr+0x12>
 80086da:	2000      	movs	r0, #0
 80086dc:	e003      	b.n	80086e6 <memchr+0x1a>
 80086de:	7804      	ldrb	r4, [r0, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	428c      	cmp	r4, r1
 80086e4:	d1f6      	bne.n	80086d4 <memchr+0x8>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <memcpy>:
 80086e8:	440a      	add	r2, r1
 80086ea:	4291      	cmp	r1, r2
 80086ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80086f0:	d100      	bne.n	80086f4 <memcpy+0xc>
 80086f2:	4770      	bx	lr
 80086f4:	b510      	push	{r4, lr}
 80086f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008700:	d1f9      	bne.n	80086f6 <memcpy+0xe>
 8008702:	bd10      	pop	{r4, pc}

08008704 <_Balloc>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008708:	4604      	mov	r4, r0
 800870a:	460d      	mov	r5, r1
 800870c:	b976      	cbnz	r6, 800872c <_Balloc+0x28>
 800870e:	2010      	movs	r0, #16
 8008710:	f7ff ffd4 	bl	80086bc <malloc>
 8008714:	4602      	mov	r2, r0
 8008716:	6260      	str	r0, [r4, #36]	; 0x24
 8008718:	b920      	cbnz	r0, 8008724 <_Balloc+0x20>
 800871a:	2166      	movs	r1, #102	; 0x66
 800871c:	4b17      	ldr	r3, [pc, #92]	; (800877c <_Balloc+0x78>)
 800871e:	4818      	ldr	r0, [pc, #96]	; (8008780 <_Balloc+0x7c>)
 8008720:	f000 fd92 	bl	8009248 <__assert_func>
 8008724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008728:	6006      	str	r6, [r0, #0]
 800872a:	60c6      	str	r6, [r0, #12]
 800872c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800872e:	68f3      	ldr	r3, [r6, #12]
 8008730:	b183      	cbz	r3, 8008754 <_Balloc+0x50>
 8008732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800873a:	b9b8      	cbnz	r0, 800876c <_Balloc+0x68>
 800873c:	2101      	movs	r1, #1
 800873e:	fa01 f605 	lsl.w	r6, r1, r5
 8008742:	1d72      	adds	r2, r6, #5
 8008744:	4620      	mov	r0, r4
 8008746:	0092      	lsls	r2, r2, #2
 8008748:	f000 fb5e 	bl	8008e08 <_calloc_r>
 800874c:	b160      	cbz	r0, 8008768 <_Balloc+0x64>
 800874e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008752:	e00e      	b.n	8008772 <_Balloc+0x6e>
 8008754:	2221      	movs	r2, #33	; 0x21
 8008756:	2104      	movs	r1, #4
 8008758:	4620      	mov	r0, r4
 800875a:	f000 fb55 	bl	8008e08 <_calloc_r>
 800875e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008760:	60f0      	str	r0, [r6, #12]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e4      	bne.n	8008732 <_Balloc+0x2e>
 8008768:	2000      	movs	r0, #0
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	6802      	ldr	r2, [r0, #0]
 800876e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008772:	2300      	movs	r3, #0
 8008774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008778:	e7f7      	b.n	800876a <_Balloc+0x66>
 800877a:	bf00      	nop
 800877c:	08009f41 	.word	0x08009f41
 8008780:	08009fc8 	.word	0x08009fc8

08008784 <_Bfree>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008788:	4605      	mov	r5, r0
 800878a:	460c      	mov	r4, r1
 800878c:	b976      	cbnz	r6, 80087ac <_Bfree+0x28>
 800878e:	2010      	movs	r0, #16
 8008790:	f7ff ff94 	bl	80086bc <malloc>
 8008794:	4602      	mov	r2, r0
 8008796:	6268      	str	r0, [r5, #36]	; 0x24
 8008798:	b920      	cbnz	r0, 80087a4 <_Bfree+0x20>
 800879a:	218a      	movs	r1, #138	; 0x8a
 800879c:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <_Bfree+0x3c>)
 800879e:	4809      	ldr	r0, [pc, #36]	; (80087c4 <_Bfree+0x40>)
 80087a0:	f000 fd52 	bl	8009248 <__assert_func>
 80087a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087a8:	6006      	str	r6, [r0, #0]
 80087aa:	60c6      	str	r6, [r0, #12]
 80087ac:	b13c      	cbz	r4, 80087be <_Bfree+0x3a>
 80087ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087b0:	6862      	ldr	r2, [r4, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087b8:	6021      	str	r1, [r4, #0]
 80087ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	08009f41 	.word	0x08009f41
 80087c4:	08009fc8 	.word	0x08009fc8

080087c8 <__multadd>:
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	4698      	mov	r8, r3
 80087ce:	460c      	mov	r4, r1
 80087d0:	2300      	movs	r3, #0
 80087d2:	690e      	ldr	r6, [r1, #16]
 80087d4:	4607      	mov	r7, r0
 80087d6:	f101 0014 	add.w	r0, r1, #20
 80087da:	6805      	ldr	r5, [r0, #0]
 80087dc:	3301      	adds	r3, #1
 80087de:	b2a9      	uxth	r1, r5
 80087e0:	fb02 8101 	mla	r1, r2, r1, r8
 80087e4:	0c2d      	lsrs	r5, r5, #16
 80087e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087ea:	fb02 c505 	mla	r5, r2, r5, ip
 80087ee:	b289      	uxth	r1, r1
 80087f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087f4:	429e      	cmp	r6, r3
 80087f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087fa:	f840 1b04 	str.w	r1, [r0], #4
 80087fe:	dcec      	bgt.n	80087da <__multadd+0x12>
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	d022      	beq.n	800884c <__multadd+0x84>
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	42b3      	cmp	r3, r6
 800880a:	dc19      	bgt.n	8008840 <__multadd+0x78>
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	4638      	mov	r0, r7
 8008810:	3101      	adds	r1, #1
 8008812:	f7ff ff77 	bl	8008704 <_Balloc>
 8008816:	4605      	mov	r5, r0
 8008818:	b928      	cbnz	r0, 8008826 <__multadd+0x5e>
 800881a:	4602      	mov	r2, r0
 800881c:	21b5      	movs	r1, #181	; 0xb5
 800881e:	4b0d      	ldr	r3, [pc, #52]	; (8008854 <__multadd+0x8c>)
 8008820:	480d      	ldr	r0, [pc, #52]	; (8008858 <__multadd+0x90>)
 8008822:	f000 fd11 	bl	8009248 <__assert_func>
 8008826:	6922      	ldr	r2, [r4, #16]
 8008828:	f104 010c 	add.w	r1, r4, #12
 800882c:	3202      	adds	r2, #2
 800882e:	0092      	lsls	r2, r2, #2
 8008830:	300c      	adds	r0, #12
 8008832:	f7ff ff59 	bl	80086e8 <memcpy>
 8008836:	4621      	mov	r1, r4
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ffa3 	bl	8008784 <_Bfree>
 800883e:	462c      	mov	r4, r5
 8008840:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008844:	3601      	adds	r6, #1
 8008846:	f8c3 8014 	str.w	r8, [r3, #20]
 800884a:	6126      	str	r6, [r4, #16]
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008852:	bf00      	nop
 8008854:	08009fb7 	.word	0x08009fb7
 8008858:	08009fc8 	.word	0x08009fc8

0800885c <__hi0bits>:
 800885c:	0c02      	lsrs	r2, r0, #16
 800885e:	0412      	lsls	r2, r2, #16
 8008860:	4603      	mov	r3, r0
 8008862:	b9ca      	cbnz	r2, 8008898 <__hi0bits+0x3c>
 8008864:	0403      	lsls	r3, r0, #16
 8008866:	2010      	movs	r0, #16
 8008868:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800886c:	bf04      	itt	eq
 800886e:	021b      	lsleq	r3, r3, #8
 8008870:	3008      	addeq	r0, #8
 8008872:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008876:	bf04      	itt	eq
 8008878:	011b      	lsleq	r3, r3, #4
 800887a:	3004      	addeq	r0, #4
 800887c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008880:	bf04      	itt	eq
 8008882:	009b      	lsleq	r3, r3, #2
 8008884:	3002      	addeq	r0, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	db05      	blt.n	8008896 <__hi0bits+0x3a>
 800888a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800888e:	f100 0001 	add.w	r0, r0, #1
 8008892:	bf08      	it	eq
 8008894:	2020      	moveq	r0, #32
 8008896:	4770      	bx	lr
 8008898:	2000      	movs	r0, #0
 800889a:	e7e5      	b.n	8008868 <__hi0bits+0xc>

0800889c <__lo0bits>:
 800889c:	6803      	ldr	r3, [r0, #0]
 800889e:	4602      	mov	r2, r0
 80088a0:	f013 0007 	ands.w	r0, r3, #7
 80088a4:	d00b      	beq.n	80088be <__lo0bits+0x22>
 80088a6:	07d9      	lsls	r1, r3, #31
 80088a8:	d422      	bmi.n	80088f0 <__lo0bits+0x54>
 80088aa:	0798      	lsls	r0, r3, #30
 80088ac:	bf49      	itett	mi
 80088ae:	085b      	lsrmi	r3, r3, #1
 80088b0:	089b      	lsrpl	r3, r3, #2
 80088b2:	2001      	movmi	r0, #1
 80088b4:	6013      	strmi	r3, [r2, #0]
 80088b6:	bf5c      	itt	pl
 80088b8:	2002      	movpl	r0, #2
 80088ba:	6013      	strpl	r3, [r2, #0]
 80088bc:	4770      	bx	lr
 80088be:	b299      	uxth	r1, r3
 80088c0:	b909      	cbnz	r1, 80088c6 <__lo0bits+0x2a>
 80088c2:	2010      	movs	r0, #16
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088ca:	bf04      	itt	eq
 80088cc:	0a1b      	lsreq	r3, r3, #8
 80088ce:	3008      	addeq	r0, #8
 80088d0:	0719      	lsls	r1, r3, #28
 80088d2:	bf04      	itt	eq
 80088d4:	091b      	lsreq	r3, r3, #4
 80088d6:	3004      	addeq	r0, #4
 80088d8:	0799      	lsls	r1, r3, #30
 80088da:	bf04      	itt	eq
 80088dc:	089b      	lsreq	r3, r3, #2
 80088de:	3002      	addeq	r0, #2
 80088e0:	07d9      	lsls	r1, r3, #31
 80088e2:	d403      	bmi.n	80088ec <__lo0bits+0x50>
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	f100 0001 	add.w	r0, r0, #1
 80088ea:	d003      	beq.n	80088f4 <__lo0bits+0x58>
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	4770      	bx	lr
 80088f0:	2000      	movs	r0, #0
 80088f2:	4770      	bx	lr
 80088f4:	2020      	movs	r0, #32
 80088f6:	4770      	bx	lr

080088f8 <__i2b>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	460c      	mov	r4, r1
 80088fc:	2101      	movs	r1, #1
 80088fe:	f7ff ff01 	bl	8008704 <_Balloc>
 8008902:	4602      	mov	r2, r0
 8008904:	b928      	cbnz	r0, 8008912 <__i2b+0x1a>
 8008906:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800890a:	4b04      	ldr	r3, [pc, #16]	; (800891c <__i2b+0x24>)
 800890c:	4804      	ldr	r0, [pc, #16]	; (8008920 <__i2b+0x28>)
 800890e:	f000 fc9b 	bl	8009248 <__assert_func>
 8008912:	2301      	movs	r3, #1
 8008914:	6144      	str	r4, [r0, #20]
 8008916:	6103      	str	r3, [r0, #16]
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	08009fb7 	.word	0x08009fb7
 8008920:	08009fc8 	.word	0x08009fc8

08008924 <__multiply>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4614      	mov	r4, r2
 800892a:	690a      	ldr	r2, [r1, #16]
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	460d      	mov	r5, r1
 8008930:	429a      	cmp	r2, r3
 8008932:	bfbe      	ittt	lt
 8008934:	460b      	movlt	r3, r1
 8008936:	4625      	movlt	r5, r4
 8008938:	461c      	movlt	r4, r3
 800893a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800893e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008942:	68ab      	ldr	r3, [r5, #8]
 8008944:	6869      	ldr	r1, [r5, #4]
 8008946:	eb0a 0709 	add.w	r7, sl, r9
 800894a:	42bb      	cmp	r3, r7
 800894c:	b085      	sub	sp, #20
 800894e:	bfb8      	it	lt
 8008950:	3101      	addlt	r1, #1
 8008952:	f7ff fed7 	bl	8008704 <_Balloc>
 8008956:	b930      	cbnz	r0, 8008966 <__multiply+0x42>
 8008958:	4602      	mov	r2, r0
 800895a:	f240 115d 	movw	r1, #349	; 0x15d
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <__multiply+0x140>)
 8008960:	4841      	ldr	r0, [pc, #260]	; (8008a68 <__multiply+0x144>)
 8008962:	f000 fc71 	bl	8009248 <__assert_func>
 8008966:	f100 0614 	add.w	r6, r0, #20
 800896a:	4633      	mov	r3, r6
 800896c:	2200      	movs	r2, #0
 800896e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008972:	4543      	cmp	r3, r8
 8008974:	d31e      	bcc.n	80089b4 <__multiply+0x90>
 8008976:	f105 0c14 	add.w	ip, r5, #20
 800897a:	f104 0314 	add.w	r3, r4, #20
 800897e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008982:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008986:	9202      	str	r2, [sp, #8]
 8008988:	ebac 0205 	sub.w	r2, ip, r5
 800898c:	3a15      	subs	r2, #21
 800898e:	f022 0203 	bic.w	r2, r2, #3
 8008992:	3204      	adds	r2, #4
 8008994:	f105 0115 	add.w	r1, r5, #21
 8008998:	458c      	cmp	ip, r1
 800899a:	bf38      	it	cc
 800899c:	2204      	movcc	r2, #4
 800899e:	9201      	str	r2, [sp, #4]
 80089a0:	9a02      	ldr	r2, [sp, #8]
 80089a2:	9303      	str	r3, [sp, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d808      	bhi.n	80089ba <__multiply+0x96>
 80089a8:	2f00      	cmp	r7, #0
 80089aa:	dc55      	bgt.n	8008a58 <__multiply+0x134>
 80089ac:	6107      	str	r7, [r0, #16]
 80089ae:	b005      	add	sp, #20
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	f843 2b04 	str.w	r2, [r3], #4
 80089b8:	e7db      	b.n	8008972 <__multiply+0x4e>
 80089ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80089be:	f1ba 0f00 	cmp.w	sl, #0
 80089c2:	d020      	beq.n	8008a06 <__multiply+0xe2>
 80089c4:	46b1      	mov	r9, r6
 80089c6:	2200      	movs	r2, #0
 80089c8:	f105 0e14 	add.w	lr, r5, #20
 80089cc:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089d0:	f8d9 b000 	ldr.w	fp, [r9]
 80089d4:	b2a1      	uxth	r1, r4
 80089d6:	fa1f fb8b 	uxth.w	fp, fp
 80089da:	fb0a b101 	mla	r1, sl, r1, fp
 80089de:	4411      	add	r1, r2
 80089e0:	f8d9 2000 	ldr.w	r2, [r9]
 80089e4:	0c24      	lsrs	r4, r4, #16
 80089e6:	0c12      	lsrs	r2, r2, #16
 80089e8:	fb0a 2404 	mla	r4, sl, r4, r2
 80089ec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089f0:	b289      	uxth	r1, r1
 80089f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089f6:	45f4      	cmp	ip, lr
 80089f8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089fc:	f849 1b04 	str.w	r1, [r9], #4
 8008a00:	d8e4      	bhi.n	80089cc <__multiply+0xa8>
 8008a02:	9901      	ldr	r1, [sp, #4]
 8008a04:	5072      	str	r2, [r6, r1]
 8008a06:	9a03      	ldr	r2, [sp, #12]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a0e:	f1b9 0f00 	cmp.w	r9, #0
 8008a12:	d01f      	beq.n	8008a54 <__multiply+0x130>
 8008a14:	46b6      	mov	lr, r6
 8008a16:	f04f 0a00 	mov.w	sl, #0
 8008a1a:	6834      	ldr	r4, [r6, #0]
 8008a1c:	f105 0114 	add.w	r1, r5, #20
 8008a20:	880a      	ldrh	r2, [r1, #0]
 8008a22:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a26:	b2a4      	uxth	r4, r4
 8008a28:	fb09 b202 	mla	r2, r9, r2, fp
 8008a2c:	4492      	add	sl, r2
 8008a2e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a32:	f84e 4b04 	str.w	r4, [lr], #4
 8008a36:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a3a:	f8be 2000 	ldrh.w	r2, [lr]
 8008a3e:	0c24      	lsrs	r4, r4, #16
 8008a40:	fb09 2404 	mla	r4, r9, r4, r2
 8008a44:	458c      	cmp	ip, r1
 8008a46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a4e:	d8e7      	bhi.n	8008a20 <__multiply+0xfc>
 8008a50:	9a01      	ldr	r2, [sp, #4]
 8008a52:	50b4      	str	r4, [r6, r2]
 8008a54:	3604      	adds	r6, #4
 8008a56:	e7a3      	b.n	80089a0 <__multiply+0x7c>
 8008a58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1a5      	bne.n	80089ac <__multiply+0x88>
 8008a60:	3f01      	subs	r7, #1
 8008a62:	e7a1      	b.n	80089a8 <__multiply+0x84>
 8008a64:	08009fb7 	.word	0x08009fb7
 8008a68:	08009fc8 	.word	0x08009fc8

08008a6c <__pow5mult>:
 8008a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a70:	4615      	mov	r5, r2
 8008a72:	f012 0203 	ands.w	r2, r2, #3
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	d007      	beq.n	8008a8c <__pow5mult+0x20>
 8008a7c:	4c25      	ldr	r4, [pc, #148]	; (8008b14 <__pow5mult+0xa8>)
 8008a7e:	3a01      	subs	r2, #1
 8008a80:	2300      	movs	r3, #0
 8008a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a86:	f7ff fe9f 	bl	80087c8 <__multadd>
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	10ad      	asrs	r5, r5, #2
 8008a8e:	d03d      	beq.n	8008b0c <__pow5mult+0xa0>
 8008a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a92:	b97c      	cbnz	r4, 8008ab4 <__pow5mult+0x48>
 8008a94:	2010      	movs	r0, #16
 8008a96:	f7ff fe11 	bl	80086bc <malloc>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a9e:	b928      	cbnz	r0, 8008aac <__pow5mult+0x40>
 8008aa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008aa4:	4b1c      	ldr	r3, [pc, #112]	; (8008b18 <__pow5mult+0xac>)
 8008aa6:	481d      	ldr	r0, [pc, #116]	; (8008b1c <__pow5mult+0xb0>)
 8008aa8:	f000 fbce 	bl	8009248 <__assert_func>
 8008aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ab0:	6004      	str	r4, [r0, #0]
 8008ab2:	60c4      	str	r4, [r0, #12]
 8008ab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008abc:	b94c      	cbnz	r4, 8008ad2 <__pow5mult+0x66>
 8008abe:	f240 2171 	movw	r1, #625	; 0x271
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ff18 	bl	80088f8 <__i2b>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ad0:	6003      	str	r3, [r0, #0]
 8008ad2:	f04f 0900 	mov.w	r9, #0
 8008ad6:	07eb      	lsls	r3, r5, #31
 8008ad8:	d50a      	bpl.n	8008af0 <__pow5mult+0x84>
 8008ada:	4639      	mov	r1, r7
 8008adc:	4622      	mov	r2, r4
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ff20 	bl	8008924 <__multiply>
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fe4b 	bl	8008784 <_Bfree>
 8008aee:	4647      	mov	r7, r8
 8008af0:	106d      	asrs	r5, r5, #1
 8008af2:	d00b      	beq.n	8008b0c <__pow5mult+0xa0>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	b938      	cbnz	r0, 8008b08 <__pow5mult+0x9c>
 8008af8:	4622      	mov	r2, r4
 8008afa:	4621      	mov	r1, r4
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff ff11 	bl	8008924 <__multiply>
 8008b02:	6020      	str	r0, [r4, #0]
 8008b04:	f8c0 9000 	str.w	r9, [r0]
 8008b08:	4604      	mov	r4, r0
 8008b0a:	e7e4      	b.n	8008ad6 <__pow5mult+0x6a>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b12:	bf00      	nop
 8008b14:	0800a118 	.word	0x0800a118
 8008b18:	08009f41 	.word	0x08009f41
 8008b1c:	08009fc8 	.word	0x08009fc8

08008b20 <__lshift>:
 8008b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	460c      	mov	r4, r1
 8008b26:	4607      	mov	r7, r0
 8008b28:	4691      	mov	r9, r2
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	6849      	ldr	r1, [r1, #4]
 8008b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b32:	68a3      	ldr	r3, [r4, #8]
 8008b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b38:	f108 0601 	add.w	r6, r8, #1
 8008b3c:	42b3      	cmp	r3, r6
 8008b3e:	db0b      	blt.n	8008b58 <__lshift+0x38>
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7ff fddf 	bl	8008704 <_Balloc>
 8008b46:	4605      	mov	r5, r0
 8008b48:	b948      	cbnz	r0, 8008b5e <__lshift+0x3e>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b50:	4b27      	ldr	r3, [pc, #156]	; (8008bf0 <__lshift+0xd0>)
 8008b52:	4828      	ldr	r0, [pc, #160]	; (8008bf4 <__lshift+0xd4>)
 8008b54:	f000 fb78 	bl	8009248 <__assert_func>
 8008b58:	3101      	adds	r1, #1
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	e7ee      	b.n	8008b3c <__lshift+0x1c>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f100 0114 	add.w	r1, r0, #20
 8008b64:	f100 0210 	add.w	r2, r0, #16
 8008b68:	4618      	mov	r0, r3
 8008b6a:	4553      	cmp	r3, sl
 8008b6c:	db33      	blt.n	8008bd6 <__lshift+0xb6>
 8008b6e:	6920      	ldr	r0, [r4, #16]
 8008b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b74:	f104 0314 	add.w	r3, r4, #20
 8008b78:	f019 091f 	ands.w	r9, r9, #31
 8008b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b84:	d02b      	beq.n	8008bde <__lshift+0xbe>
 8008b86:	468a      	mov	sl, r1
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	fa00 f009 	lsl.w	r0, r0, r9
 8008b94:	4302      	orrs	r2, r0
 8008b96:	f84a 2b04 	str.w	r2, [sl], #4
 8008b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9e:	459c      	cmp	ip, r3
 8008ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ba4:	d8f3      	bhi.n	8008b8e <__lshift+0x6e>
 8008ba6:	ebac 0304 	sub.w	r3, ip, r4
 8008baa:	3b15      	subs	r3, #21
 8008bac:	f023 0303 	bic.w	r3, r3, #3
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	f104 0015 	add.w	r0, r4, #21
 8008bb6:	4584      	cmp	ip, r0
 8008bb8:	bf38      	it	cc
 8008bba:	2304      	movcc	r3, #4
 8008bbc:	50ca      	str	r2, [r1, r3]
 8008bbe:	b10a      	cbz	r2, 8008bc4 <__lshift+0xa4>
 8008bc0:	f108 0602 	add.w	r6, r8, #2
 8008bc4:	3e01      	subs	r6, #1
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	4621      	mov	r1, r4
 8008bca:	612e      	str	r6, [r5, #16]
 8008bcc:	f7ff fdda 	bl	8008784 <_Bfree>
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bda:	3301      	adds	r3, #1
 8008bdc:	e7c5      	b.n	8008b6a <__lshift+0x4a>
 8008bde:	3904      	subs	r1, #4
 8008be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be4:	459c      	cmp	ip, r3
 8008be6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bea:	d8f9      	bhi.n	8008be0 <__lshift+0xc0>
 8008bec:	e7ea      	b.n	8008bc4 <__lshift+0xa4>
 8008bee:	bf00      	nop
 8008bf0:	08009fb7 	.word	0x08009fb7
 8008bf4:	08009fc8 	.word	0x08009fc8

08008bf8 <__mcmp>:
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	690a      	ldr	r2, [r1, #16]
 8008bfc:	6900      	ldr	r0, [r0, #16]
 8008bfe:	b530      	push	{r4, r5, lr}
 8008c00:	1a80      	subs	r0, r0, r2
 8008c02:	d10d      	bne.n	8008c20 <__mcmp+0x28>
 8008c04:	3314      	adds	r3, #20
 8008c06:	3114      	adds	r1, #20
 8008c08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c18:	4295      	cmp	r5, r2
 8008c1a:	d002      	beq.n	8008c22 <__mcmp+0x2a>
 8008c1c:	d304      	bcc.n	8008c28 <__mcmp+0x30>
 8008c1e:	2001      	movs	r0, #1
 8008c20:	bd30      	pop	{r4, r5, pc}
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	d3f4      	bcc.n	8008c10 <__mcmp+0x18>
 8008c26:	e7fb      	b.n	8008c20 <__mcmp+0x28>
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	e7f8      	b.n	8008c20 <__mcmp+0x28>
	...

08008c30 <__mdiff>:
 8008c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	460c      	mov	r4, r1
 8008c36:	4606      	mov	r6, r0
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4692      	mov	sl, r2
 8008c3e:	f7ff ffdb 	bl	8008bf8 <__mcmp>
 8008c42:	1e05      	subs	r5, r0, #0
 8008c44:	d111      	bne.n	8008c6a <__mdiff+0x3a>
 8008c46:	4629      	mov	r1, r5
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff fd5b 	bl	8008704 <_Balloc>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	b928      	cbnz	r0, 8008c5e <__mdiff+0x2e>
 8008c52:	f240 2132 	movw	r1, #562	; 0x232
 8008c56:	4b3c      	ldr	r3, [pc, #240]	; (8008d48 <__mdiff+0x118>)
 8008c58:	483c      	ldr	r0, [pc, #240]	; (8008d4c <__mdiff+0x11c>)
 8008c5a:	f000 faf5 	bl	8009248 <__assert_func>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c64:	4610      	mov	r0, r2
 8008c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	bfa4      	itt	ge
 8008c6c:	4653      	movge	r3, sl
 8008c6e:	46a2      	movge	sl, r4
 8008c70:	4630      	mov	r0, r6
 8008c72:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008c76:	bfa6      	itte	ge
 8008c78:	461c      	movge	r4, r3
 8008c7a:	2500      	movge	r5, #0
 8008c7c:	2501      	movlt	r5, #1
 8008c7e:	f7ff fd41 	bl	8008704 <_Balloc>
 8008c82:	4602      	mov	r2, r0
 8008c84:	b918      	cbnz	r0, 8008c8e <__mdiff+0x5e>
 8008c86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c8a:	4b2f      	ldr	r3, [pc, #188]	; (8008d48 <__mdiff+0x118>)
 8008c8c:	e7e4      	b.n	8008c58 <__mdiff+0x28>
 8008c8e:	f100 0814 	add.w	r8, r0, #20
 8008c92:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008c96:	60c5      	str	r5, [r0, #12]
 8008c98:	f04f 0c00 	mov.w	ip, #0
 8008c9c:	f10a 0514 	add.w	r5, sl, #20
 8008ca0:	f10a 0010 	add.w	r0, sl, #16
 8008ca4:	46c2      	mov	sl, r8
 8008ca6:	6926      	ldr	r6, [r4, #16]
 8008ca8:	f104 0914 	add.w	r9, r4, #20
 8008cac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008cb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cb4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008cb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cbc:	fa1f f18b 	uxth.w	r1, fp
 8008cc0:	4461      	add	r1, ip
 8008cc2:	fa1f fc83 	uxth.w	ip, r3
 8008cc6:	0c1b      	lsrs	r3, r3, #16
 8008cc8:	eba1 010c 	sub.w	r1, r1, ip
 8008ccc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cd0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cd4:	b289      	uxth	r1, r1
 8008cd6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008cda:	454e      	cmp	r6, r9
 8008cdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ce0:	f84a 3b04 	str.w	r3, [sl], #4
 8008ce4:	d8e6      	bhi.n	8008cb4 <__mdiff+0x84>
 8008ce6:	1b33      	subs	r3, r6, r4
 8008ce8:	3b15      	subs	r3, #21
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	3415      	adds	r4, #21
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	42a6      	cmp	r6, r4
 8008cf4:	bf38      	it	cc
 8008cf6:	2304      	movcc	r3, #4
 8008cf8:	441d      	add	r5, r3
 8008cfa:	4443      	add	r3, r8
 8008cfc:	461e      	mov	r6, r3
 8008cfe:	462c      	mov	r4, r5
 8008d00:	4574      	cmp	r4, lr
 8008d02:	d30e      	bcc.n	8008d22 <__mdiff+0xf2>
 8008d04:	f10e 0103 	add.w	r1, lr, #3
 8008d08:	1b49      	subs	r1, r1, r5
 8008d0a:	f021 0103 	bic.w	r1, r1, #3
 8008d0e:	3d03      	subs	r5, #3
 8008d10:	45ae      	cmp	lr, r5
 8008d12:	bf38      	it	cc
 8008d14:	2100      	movcc	r1, #0
 8008d16:	4419      	add	r1, r3
 8008d18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008d1c:	b18b      	cbz	r3, 8008d42 <__mdiff+0x112>
 8008d1e:	6117      	str	r7, [r2, #16]
 8008d20:	e7a0      	b.n	8008c64 <__mdiff+0x34>
 8008d22:	f854 8b04 	ldr.w	r8, [r4], #4
 8008d26:	fa1f f188 	uxth.w	r1, r8
 8008d2a:	4461      	add	r1, ip
 8008d2c:	1408      	asrs	r0, r1, #16
 8008d2e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008d32:	b289      	uxth	r1, r1
 8008d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d3c:	f846 1b04 	str.w	r1, [r6], #4
 8008d40:	e7de      	b.n	8008d00 <__mdiff+0xd0>
 8008d42:	3f01      	subs	r7, #1
 8008d44:	e7e8      	b.n	8008d18 <__mdiff+0xe8>
 8008d46:	bf00      	nop
 8008d48:	08009fb7 	.word	0x08009fb7
 8008d4c:	08009fc8 	.word	0x08009fc8

08008d50 <__d2b>:
 8008d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d54:	2101      	movs	r1, #1
 8008d56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008d5a:	4690      	mov	r8, r2
 8008d5c:	461d      	mov	r5, r3
 8008d5e:	f7ff fcd1 	bl	8008704 <_Balloc>
 8008d62:	4604      	mov	r4, r0
 8008d64:	b930      	cbnz	r0, 8008d74 <__d2b+0x24>
 8008d66:	4602      	mov	r2, r0
 8008d68:	f240 310a 	movw	r1, #778	; 0x30a
 8008d6c:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <__d2b+0xb0>)
 8008d6e:	4825      	ldr	r0, [pc, #148]	; (8008e04 <__d2b+0xb4>)
 8008d70:	f000 fa6a 	bl	8009248 <__assert_func>
 8008d74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008d78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008d7c:	bb2d      	cbnz	r5, 8008dca <__d2b+0x7a>
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	f1b8 0300 	subs.w	r3, r8, #0
 8008d84:	d026      	beq.n	8008dd4 <__d2b+0x84>
 8008d86:	4668      	mov	r0, sp
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	f7ff fd87 	bl	800889c <__lo0bits>
 8008d8e:	9900      	ldr	r1, [sp, #0]
 8008d90:	b1f0      	cbz	r0, 8008dd0 <__d2b+0x80>
 8008d92:	9a01      	ldr	r2, [sp, #4]
 8008d94:	f1c0 0320 	rsb	r3, r0, #32
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	40c2      	lsrs	r2, r0
 8008da0:	6163      	str	r3, [r4, #20]
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	bf14      	ite	ne
 8008daa:	2102      	movne	r1, #2
 8008dac:	2101      	moveq	r1, #1
 8008dae:	61a3      	str	r3, [r4, #24]
 8008db0:	6121      	str	r1, [r4, #16]
 8008db2:	b1c5      	cbz	r5, 8008de6 <__d2b+0x96>
 8008db4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008db8:	4405      	add	r5, r0
 8008dba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008dbe:	603d      	str	r5, [r7, #0]
 8008dc0:	6030      	str	r0, [r6, #0]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	b002      	add	sp, #8
 8008dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dce:	e7d6      	b.n	8008d7e <__d2b+0x2e>
 8008dd0:	6161      	str	r1, [r4, #20]
 8008dd2:	e7e7      	b.n	8008da4 <__d2b+0x54>
 8008dd4:	a801      	add	r0, sp, #4
 8008dd6:	f7ff fd61 	bl	800889c <__lo0bits>
 8008dda:	2101      	movs	r1, #1
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	6121      	str	r1, [r4, #16]
 8008de0:	6163      	str	r3, [r4, #20]
 8008de2:	3020      	adds	r0, #32
 8008de4:	e7e5      	b.n	8008db2 <__d2b+0x62>
 8008de6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dee:	6038      	str	r0, [r7, #0]
 8008df0:	6918      	ldr	r0, [r3, #16]
 8008df2:	f7ff fd33 	bl	800885c <__hi0bits>
 8008df6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008dfa:	6031      	str	r1, [r6, #0]
 8008dfc:	e7e1      	b.n	8008dc2 <__d2b+0x72>
 8008dfe:	bf00      	nop
 8008e00:	08009fb7 	.word	0x08009fb7
 8008e04:	08009fc8 	.word	0x08009fc8

08008e08 <_calloc_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	fb02 f501 	mul.w	r5, r2, r1
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f000 f854 	bl	8008ebc <_malloc_r>
 8008e14:	4604      	mov	r4, r0
 8008e16:	b118      	cbz	r0, 8008e20 <_calloc_r+0x18>
 8008e18:	462a      	mov	r2, r5
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	f7fe f946 	bl	80070ac <memset>
 8008e20:	4620      	mov	r0, r4
 8008e22:	bd38      	pop	{r3, r4, r5, pc}

08008e24 <_free_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4605      	mov	r5, r0
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	d043      	beq.n	8008eb4 <_free_r+0x90>
 8008e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e30:	1f0c      	subs	r4, r1, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bfb8      	it	lt
 8008e36:	18e4      	addlt	r4, r4, r3
 8008e38:	f000 fa62 	bl	8009300 <__malloc_lock>
 8008e3c:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <_free_r+0x94>)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	4610      	mov	r0, r2
 8008e42:	b933      	cbnz	r3, 8008e52 <_free_r+0x2e>
 8008e44:	6063      	str	r3, [r4, #4]
 8008e46:	6014      	str	r4, [r2, #0]
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e4e:	f000 ba5d 	b.w	800930c <__malloc_unlock>
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	d90a      	bls.n	8008e6c <_free_r+0x48>
 8008e56:	6821      	ldr	r1, [r4, #0]
 8008e58:	1862      	adds	r2, r4, r1
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	bf01      	itttt	eq
 8008e5e:	681a      	ldreq	r2, [r3, #0]
 8008e60:	685b      	ldreq	r3, [r3, #4]
 8008e62:	1852      	addeq	r2, r2, r1
 8008e64:	6022      	streq	r2, [r4, #0]
 8008e66:	6063      	str	r3, [r4, #4]
 8008e68:	6004      	str	r4, [r0, #0]
 8008e6a:	e7ed      	b.n	8008e48 <_free_r+0x24>
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	b10b      	cbz	r3, 8008e76 <_free_r+0x52>
 8008e72:	42a3      	cmp	r3, r4
 8008e74:	d9fa      	bls.n	8008e6c <_free_r+0x48>
 8008e76:	6811      	ldr	r1, [r2, #0]
 8008e78:	1850      	adds	r0, r2, r1
 8008e7a:	42a0      	cmp	r0, r4
 8008e7c:	d10b      	bne.n	8008e96 <_free_r+0x72>
 8008e7e:	6820      	ldr	r0, [r4, #0]
 8008e80:	4401      	add	r1, r0
 8008e82:	1850      	adds	r0, r2, r1
 8008e84:	4283      	cmp	r3, r0
 8008e86:	6011      	str	r1, [r2, #0]
 8008e88:	d1de      	bne.n	8008e48 <_free_r+0x24>
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	4401      	add	r1, r0
 8008e90:	6011      	str	r1, [r2, #0]
 8008e92:	6053      	str	r3, [r2, #4]
 8008e94:	e7d8      	b.n	8008e48 <_free_r+0x24>
 8008e96:	d902      	bls.n	8008e9e <_free_r+0x7a>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	e7d4      	b.n	8008e48 <_free_r+0x24>
 8008e9e:	6820      	ldr	r0, [r4, #0]
 8008ea0:	1821      	adds	r1, r4, r0
 8008ea2:	428b      	cmp	r3, r1
 8008ea4:	bf01      	itttt	eq
 8008ea6:	6819      	ldreq	r1, [r3, #0]
 8008ea8:	685b      	ldreq	r3, [r3, #4]
 8008eaa:	1809      	addeq	r1, r1, r0
 8008eac:	6021      	streq	r1, [r4, #0]
 8008eae:	6063      	str	r3, [r4, #4]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7c9      	b.n	8008e48 <_free_r+0x24>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000264 	.word	0x20000264

08008ebc <_malloc_r>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	1ccd      	adds	r5, r1, #3
 8008ec0:	f025 0503 	bic.w	r5, r5, #3
 8008ec4:	3508      	adds	r5, #8
 8008ec6:	2d0c      	cmp	r5, #12
 8008ec8:	bf38      	it	cc
 8008eca:	250c      	movcc	r5, #12
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	4606      	mov	r6, r0
 8008ed0:	db01      	blt.n	8008ed6 <_malloc_r+0x1a>
 8008ed2:	42a9      	cmp	r1, r5
 8008ed4:	d903      	bls.n	8008ede <_malloc_r+0x22>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6033      	str	r3, [r6, #0]
 8008eda:	2000      	movs	r0, #0
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ede:	f000 fa0f 	bl	8009300 <__malloc_lock>
 8008ee2:	4921      	ldr	r1, [pc, #132]	; (8008f68 <_malloc_r+0xac>)
 8008ee4:	680a      	ldr	r2, [r1, #0]
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	b99c      	cbnz	r4, 8008f12 <_malloc_r+0x56>
 8008eea:	4f20      	ldr	r7, [pc, #128]	; (8008f6c <_malloc_r+0xb0>)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	b923      	cbnz	r3, 8008efa <_malloc_r+0x3e>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 f998 	bl	8009228 <_sbrk_r>
 8008ef8:	6038      	str	r0, [r7, #0]
 8008efa:	4629      	mov	r1, r5
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f993 	bl	8009228 <_sbrk_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d123      	bne.n	8008f4e <_malloc_r+0x92>
 8008f06:	230c      	movs	r3, #12
 8008f08:	4630      	mov	r0, r6
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	f000 f9fe 	bl	800930c <__malloc_unlock>
 8008f10:	e7e3      	b.n	8008eda <_malloc_r+0x1e>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	1b5b      	subs	r3, r3, r5
 8008f16:	d417      	bmi.n	8008f48 <_malloc_r+0x8c>
 8008f18:	2b0b      	cmp	r3, #11
 8008f1a:	d903      	bls.n	8008f24 <_malloc_r+0x68>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	441c      	add	r4, r3
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	e004      	b.n	8008f2e <_malloc_r+0x72>
 8008f24:	6863      	ldr	r3, [r4, #4]
 8008f26:	42a2      	cmp	r2, r4
 8008f28:	bf0c      	ite	eq
 8008f2a:	600b      	streq	r3, [r1, #0]
 8008f2c:	6053      	strne	r3, [r2, #4]
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 f9ec 	bl	800930c <__malloc_unlock>
 8008f34:	f104 000b 	add.w	r0, r4, #11
 8008f38:	1d23      	adds	r3, r4, #4
 8008f3a:	f020 0007 	bic.w	r0, r0, #7
 8008f3e:	1ac2      	subs	r2, r0, r3
 8008f40:	d0cc      	beq.n	8008edc <_malloc_r+0x20>
 8008f42:	1a1b      	subs	r3, r3, r0
 8008f44:	50a3      	str	r3, [r4, r2]
 8008f46:	e7c9      	b.n	8008edc <_malloc_r+0x20>
 8008f48:	4622      	mov	r2, r4
 8008f4a:	6864      	ldr	r4, [r4, #4]
 8008f4c:	e7cc      	b.n	8008ee8 <_malloc_r+0x2c>
 8008f4e:	1cc4      	adds	r4, r0, #3
 8008f50:	f024 0403 	bic.w	r4, r4, #3
 8008f54:	42a0      	cmp	r0, r4
 8008f56:	d0e3      	beq.n	8008f20 <_malloc_r+0x64>
 8008f58:	1a21      	subs	r1, r4, r0
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f000 f964 	bl	8009228 <_sbrk_r>
 8008f60:	3001      	adds	r0, #1
 8008f62:	d1dd      	bne.n	8008f20 <_malloc_r+0x64>
 8008f64:	e7cf      	b.n	8008f06 <_malloc_r+0x4a>
 8008f66:	bf00      	nop
 8008f68:	20000264 	.word	0x20000264
 8008f6c:	20000268 	.word	0x20000268

08008f70 <__ssputs_r>:
 8008f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	688e      	ldr	r6, [r1, #8]
 8008f76:	4682      	mov	sl, r0
 8008f78:	429e      	cmp	r6, r3
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	461f      	mov	r7, r3
 8008f80:	d838      	bhi.n	8008ff4 <__ssputs_r+0x84>
 8008f82:	898a      	ldrh	r2, [r1, #12]
 8008f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f88:	d032      	beq.n	8008ff0 <__ssputs_r+0x80>
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	6909      	ldr	r1, [r1, #16]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	eba5 0901 	sub.w	r9, r5, r1
 8008f94:	6965      	ldr	r5, [r4, #20]
 8008f96:	444b      	add	r3, r9
 8008f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fa0:	106d      	asrs	r5, r5, #1
 8008fa2:	429d      	cmp	r5, r3
 8008fa4:	bf38      	it	cc
 8008fa6:	461d      	movcc	r5, r3
 8008fa8:	0553      	lsls	r3, r2, #21
 8008faa:	d531      	bpl.n	8009010 <__ssputs_r+0xa0>
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7ff ff85 	bl	8008ebc <_malloc_r>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	b950      	cbnz	r0, 8008fcc <__ssputs_r+0x5c>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	f8ca 3000 	str.w	r3, [sl]
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	464a      	mov	r2, r9
 8008fce:	6921      	ldr	r1, [r4, #16]
 8008fd0:	f7ff fb8a 	bl	80086e8 <memcpy>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6126      	str	r6, [r4, #16]
 8008fe2:	444e      	add	r6, r9
 8008fe4:	6026      	str	r6, [r4, #0]
 8008fe6:	463e      	mov	r6, r7
 8008fe8:	6165      	str	r5, [r4, #20]
 8008fea:	eba5 0509 	sub.w	r5, r5, r9
 8008fee:	60a5      	str	r5, [r4, #8]
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d900      	bls.n	8008ff6 <__ssputs_r+0x86>
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	6820      	ldr	r0, [r4, #0]
 8008ffc:	f000 f966 	bl	80092cc <memmove>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	1b9b      	subs	r3, r3, r6
 8009006:	4432      	add	r2, r6
 8009008:	2000      	movs	r0, #0
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	6022      	str	r2, [r4, #0]
 800900e:	e7db      	b.n	8008fc8 <__ssputs_r+0x58>
 8009010:	462a      	mov	r2, r5
 8009012:	f000 f981 	bl	8009318 <_realloc_r>
 8009016:	4606      	mov	r6, r0
 8009018:	2800      	cmp	r0, #0
 800901a:	d1e1      	bne.n	8008fe0 <__ssputs_r+0x70>
 800901c:	4650      	mov	r0, sl
 800901e:	6921      	ldr	r1, [r4, #16]
 8009020:	f7ff ff00 	bl	8008e24 <_free_r>
 8009024:	e7c7      	b.n	8008fb6 <__ssputs_r+0x46>
	...

08009028 <_svfiprintf_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4698      	mov	r8, r3
 800902e:	898b      	ldrh	r3, [r1, #12]
 8009030:	4607      	mov	r7, r0
 8009032:	061b      	lsls	r3, r3, #24
 8009034:	460d      	mov	r5, r1
 8009036:	4614      	mov	r4, r2
 8009038:	b09d      	sub	sp, #116	; 0x74
 800903a:	d50e      	bpl.n	800905a <_svfiprintf_r+0x32>
 800903c:	690b      	ldr	r3, [r1, #16]
 800903e:	b963      	cbnz	r3, 800905a <_svfiprintf_r+0x32>
 8009040:	2140      	movs	r1, #64	; 0x40
 8009042:	f7ff ff3b 	bl	8008ebc <_malloc_r>
 8009046:	6028      	str	r0, [r5, #0]
 8009048:	6128      	str	r0, [r5, #16]
 800904a:	b920      	cbnz	r0, 8009056 <_svfiprintf_r+0x2e>
 800904c:	230c      	movs	r3, #12
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	e0d1      	b.n	80091fa <_svfiprintf_r+0x1d2>
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	616b      	str	r3, [r5, #20]
 800905a:	2300      	movs	r3, #0
 800905c:	9309      	str	r3, [sp, #36]	; 0x24
 800905e:	2320      	movs	r3, #32
 8009060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009064:	2330      	movs	r3, #48	; 0x30
 8009066:	f04f 0901 	mov.w	r9, #1
 800906a:	f8cd 800c 	str.w	r8, [sp, #12]
 800906e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009214 <_svfiprintf_r+0x1ec>
 8009072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009076:	4623      	mov	r3, r4
 8009078:	469a      	mov	sl, r3
 800907a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800907e:	b10a      	cbz	r2, 8009084 <_svfiprintf_r+0x5c>
 8009080:	2a25      	cmp	r2, #37	; 0x25
 8009082:	d1f9      	bne.n	8009078 <_svfiprintf_r+0x50>
 8009084:	ebba 0b04 	subs.w	fp, sl, r4
 8009088:	d00b      	beq.n	80090a2 <_svfiprintf_r+0x7a>
 800908a:	465b      	mov	r3, fp
 800908c:	4622      	mov	r2, r4
 800908e:	4629      	mov	r1, r5
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ff6d 	bl	8008f70 <__ssputs_r>
 8009096:	3001      	adds	r0, #1
 8009098:	f000 80aa 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 800909c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800909e:	445a      	add	r2, fp
 80090a0:	9209      	str	r2, [sp, #36]	; 0x24
 80090a2:	f89a 3000 	ldrb.w	r3, [sl]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80a2 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b6:	f10a 0a01 	add.w	sl, sl, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c2:	931a      	str	r3, [sp, #104]	; 0x68
 80090c4:	4654      	mov	r4, sl
 80090c6:	2205      	movs	r2, #5
 80090c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090cc:	4851      	ldr	r0, [pc, #324]	; (8009214 <_svfiprintf_r+0x1ec>)
 80090ce:	f7ff fafd 	bl	80086cc <memchr>
 80090d2:	9a04      	ldr	r2, [sp, #16]
 80090d4:	b9d8      	cbnz	r0, 800910e <_svfiprintf_r+0xe6>
 80090d6:	06d0      	lsls	r0, r2, #27
 80090d8:	bf44      	itt	mi
 80090da:	2320      	movmi	r3, #32
 80090dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e0:	0711      	lsls	r1, r2, #28
 80090e2:	bf44      	itt	mi
 80090e4:	232b      	movmi	r3, #43	; 0x2b
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b2a      	cmp	r3, #42	; 0x2a
 80090f0:	d015      	beq.n	800911e <_svfiprintf_r+0xf6>
 80090f2:	4654      	mov	r4, sl
 80090f4:	2000      	movs	r0, #0
 80090f6:	f04f 0c0a 	mov.w	ip, #10
 80090fa:	9a07      	ldr	r2, [sp, #28]
 80090fc:	4621      	mov	r1, r4
 80090fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009102:	3b30      	subs	r3, #48	; 0x30
 8009104:	2b09      	cmp	r3, #9
 8009106:	d94e      	bls.n	80091a6 <_svfiprintf_r+0x17e>
 8009108:	b1b0      	cbz	r0, 8009138 <_svfiprintf_r+0x110>
 800910a:	9207      	str	r2, [sp, #28]
 800910c:	e014      	b.n	8009138 <_svfiprintf_r+0x110>
 800910e:	eba0 0308 	sub.w	r3, r0, r8
 8009112:	fa09 f303 	lsl.w	r3, r9, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	46a2      	mov	sl, r4
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	e7d2      	b.n	80090c4 <_svfiprintf_r+0x9c>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	1d19      	adds	r1, r3, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfbb      	ittet	lt
 800912a:	425b      	neglt	r3, r3
 800912c:	f042 0202 	orrlt.w	r2, r2, #2
 8009130:	9307      	strge	r3, [sp, #28]
 8009132:	9307      	strlt	r3, [sp, #28]
 8009134:	bfb8      	it	lt
 8009136:	9204      	strlt	r2, [sp, #16]
 8009138:	7823      	ldrb	r3, [r4, #0]
 800913a:	2b2e      	cmp	r3, #46	; 0x2e
 800913c:	d10c      	bne.n	8009158 <_svfiprintf_r+0x130>
 800913e:	7863      	ldrb	r3, [r4, #1]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	d135      	bne.n	80091b0 <_svfiprintf_r+0x188>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	3402      	adds	r4, #2
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	f04f 33ff 	movlt.w	r3, #4294967295
 8009156:	9305      	str	r3, [sp, #20]
 8009158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009224 <_svfiprintf_r+0x1fc>
 800915c:	2203      	movs	r2, #3
 800915e:	4650      	mov	r0, sl
 8009160:	7821      	ldrb	r1, [r4, #0]
 8009162:	f7ff fab3 	bl	80086cc <memchr>
 8009166:	b140      	cbz	r0, 800917a <_svfiprintf_r+0x152>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	eba0 000a 	sub.w	r0, r0, sl
 800916e:	fa03 f000 	lsl.w	r0, r3, r0
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	3401      	adds	r4, #1
 8009176:	4303      	orrs	r3, r0
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917e:	2206      	movs	r2, #6
 8009180:	4825      	ldr	r0, [pc, #148]	; (8009218 <_svfiprintf_r+0x1f0>)
 8009182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009186:	f7ff faa1 	bl	80086cc <memchr>
 800918a:	2800      	cmp	r0, #0
 800918c:	d038      	beq.n	8009200 <_svfiprintf_r+0x1d8>
 800918e:	4b23      	ldr	r3, [pc, #140]	; (800921c <_svfiprintf_r+0x1f4>)
 8009190:	bb1b      	cbnz	r3, 80091da <_svfiprintf_r+0x1b2>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	3308      	adds	r3, #8
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	4433      	add	r3, r6
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	e767      	b.n	8009076 <_svfiprintf_r+0x4e>
 80091a6:	460c      	mov	r4, r1
 80091a8:	2001      	movs	r0, #1
 80091aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ae:	e7a5      	b.n	80090fc <_svfiprintf_r+0xd4>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 0c0a 	mov.w	ip, #10
 80091b6:	4619      	mov	r1, r3
 80091b8:	3401      	adds	r4, #1
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	4620      	mov	r0, r4
 80091be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c2:	3a30      	subs	r2, #48	; 0x30
 80091c4:	2a09      	cmp	r2, #9
 80091c6:	d903      	bls.n	80091d0 <_svfiprintf_r+0x1a8>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0c5      	beq.n	8009158 <_svfiprintf_r+0x130>
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	e7c3      	b.n	8009158 <_svfiprintf_r+0x130>
 80091d0:	4604      	mov	r4, r0
 80091d2:	2301      	movs	r3, #1
 80091d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d8:	e7f0      	b.n	80091bc <_svfiprintf_r+0x194>
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	462a      	mov	r2, r5
 80091e0:	4638      	mov	r0, r7
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <_svfiprintf_r+0x1f8>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	f7fe f807 	bl	80071f8 <_printf_float>
 80091ea:	1c42      	adds	r2, r0, #1
 80091ec:	4606      	mov	r6, r0
 80091ee:	d1d6      	bne.n	800919e <_svfiprintf_r+0x176>
 80091f0:	89ab      	ldrh	r3, [r5, #12]
 80091f2:	065b      	lsls	r3, r3, #25
 80091f4:	f53f af2c 	bmi.w	8009050 <_svfiprintf_r+0x28>
 80091f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fa:	b01d      	add	sp, #116	; 0x74
 80091fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4638      	mov	r0, r7
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <_svfiprintf_r+0x1f8>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	f7fe fa90 	bl	8007730 <_printf_i>
 8009210:	e7eb      	b.n	80091ea <_svfiprintf_r+0x1c2>
 8009212:	bf00      	nop
 8009214:	0800a124 	.word	0x0800a124
 8009218:	0800a12e 	.word	0x0800a12e
 800921c:	080071f9 	.word	0x080071f9
 8009220:	08008f71 	.word	0x08008f71
 8009224:	0800a12a 	.word	0x0800a12a

08009228 <_sbrk_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	2300      	movs	r3, #0
 800922c:	4d05      	ldr	r5, [pc, #20]	; (8009244 <_sbrk_r+0x1c>)
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f9 ff3e 	bl	80030b4 <_sbrk>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_sbrk_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_sbrk_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20000540 	.word	0x20000540

08009248 <__assert_func>:
 8009248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800924a:	4614      	mov	r4, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <__assert_func+0x2c>)
 8009250:	4605      	mov	r5, r0
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68d8      	ldr	r0, [r3, #12]
 8009256:	b14c      	cbz	r4, 800926c <__assert_func+0x24>
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <__assert_func+0x30>)
 800925a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800925e:	9100      	str	r1, [sp, #0]
 8009260:	462b      	mov	r3, r5
 8009262:	4906      	ldr	r1, [pc, #24]	; (800927c <__assert_func+0x34>)
 8009264:	f000 f80e 	bl	8009284 <fiprintf>
 8009268:	f000 faa2 	bl	80097b0 <abort>
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <__assert_func+0x38>)
 800926e:	461c      	mov	r4, r3
 8009270:	e7f3      	b.n	800925a <__assert_func+0x12>
 8009272:	bf00      	nop
 8009274:	2000004c 	.word	0x2000004c
 8009278:	0800a135 	.word	0x0800a135
 800927c:	0800a142 	.word	0x0800a142
 8009280:	0800a170 	.word	0x0800a170

08009284 <fiprintf>:
 8009284:	b40e      	push	{r1, r2, r3}
 8009286:	b503      	push	{r0, r1, lr}
 8009288:	4601      	mov	r1, r0
 800928a:	ab03      	add	r3, sp, #12
 800928c:	4805      	ldr	r0, [pc, #20]	; (80092a4 <fiprintf+0x20>)
 800928e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009292:	6800      	ldr	r0, [r0, #0]
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	f000 f88d 	bl	80093b4 <_vfiprintf_r>
 800929a:	b002      	add	sp, #8
 800929c:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a0:	b003      	add	sp, #12
 80092a2:	4770      	bx	lr
 80092a4:	2000004c 	.word	0x2000004c

080092a8 <__ascii_mbtowc>:
 80092a8:	b082      	sub	sp, #8
 80092aa:	b901      	cbnz	r1, 80092ae <__ascii_mbtowc+0x6>
 80092ac:	a901      	add	r1, sp, #4
 80092ae:	b142      	cbz	r2, 80092c2 <__ascii_mbtowc+0x1a>
 80092b0:	b14b      	cbz	r3, 80092c6 <__ascii_mbtowc+0x1e>
 80092b2:	7813      	ldrb	r3, [r2, #0]
 80092b4:	600b      	str	r3, [r1, #0]
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	1e10      	subs	r0, r2, #0
 80092ba:	bf18      	it	ne
 80092bc:	2001      	movne	r0, #1
 80092be:	b002      	add	sp, #8
 80092c0:	4770      	bx	lr
 80092c2:	4610      	mov	r0, r2
 80092c4:	e7fb      	b.n	80092be <__ascii_mbtowc+0x16>
 80092c6:	f06f 0001 	mvn.w	r0, #1
 80092ca:	e7f8      	b.n	80092be <__ascii_mbtowc+0x16>

080092cc <memmove>:
 80092cc:	4288      	cmp	r0, r1
 80092ce:	b510      	push	{r4, lr}
 80092d0:	eb01 0402 	add.w	r4, r1, r2
 80092d4:	d902      	bls.n	80092dc <memmove+0x10>
 80092d6:	4284      	cmp	r4, r0
 80092d8:	4623      	mov	r3, r4
 80092da:	d807      	bhi.n	80092ec <memmove+0x20>
 80092dc:	1e43      	subs	r3, r0, #1
 80092de:	42a1      	cmp	r1, r4
 80092e0:	d008      	beq.n	80092f4 <memmove+0x28>
 80092e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ea:	e7f8      	b.n	80092de <memmove+0x12>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4402      	add	r2, r0
 80092f0:	428a      	cmp	r2, r1
 80092f2:	d100      	bne.n	80092f6 <memmove+0x2a>
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092fe:	e7f7      	b.n	80092f0 <memmove+0x24>

08009300 <__malloc_lock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_lock+0x8>)
 8009302:	f000 bc15 	b.w	8009b30 <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	20000548 	.word	0x20000548

0800930c <__malloc_unlock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_unlock+0x8>)
 800930e:	f000 bc10 	b.w	8009b32 <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	20000548 	.word	0x20000548

08009318 <_realloc_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	4607      	mov	r7, r0
 800931c:	4614      	mov	r4, r2
 800931e:	460e      	mov	r6, r1
 8009320:	b921      	cbnz	r1, 800932c <_realloc_r+0x14>
 8009322:	4611      	mov	r1, r2
 8009324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009328:	f7ff bdc8 	b.w	8008ebc <_malloc_r>
 800932c:	b922      	cbnz	r2, 8009338 <_realloc_r+0x20>
 800932e:	f7ff fd79 	bl	8008e24 <_free_r>
 8009332:	4625      	mov	r5, r4
 8009334:	4628      	mov	r0, r5
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	f000 fc60 	bl	8009bfc <_malloc_usable_size_r>
 800933c:	42a0      	cmp	r0, r4
 800933e:	d20f      	bcs.n	8009360 <_realloc_r+0x48>
 8009340:	4621      	mov	r1, r4
 8009342:	4638      	mov	r0, r7
 8009344:	f7ff fdba 	bl	8008ebc <_malloc_r>
 8009348:	4605      	mov	r5, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d0f2      	beq.n	8009334 <_realloc_r+0x1c>
 800934e:	4631      	mov	r1, r6
 8009350:	4622      	mov	r2, r4
 8009352:	f7ff f9c9 	bl	80086e8 <memcpy>
 8009356:	4631      	mov	r1, r6
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff fd63 	bl	8008e24 <_free_r>
 800935e:	e7e9      	b.n	8009334 <_realloc_r+0x1c>
 8009360:	4635      	mov	r5, r6
 8009362:	e7e7      	b.n	8009334 <_realloc_r+0x1c>

08009364 <__sfputc_r>:
 8009364:	6893      	ldr	r3, [r2, #8]
 8009366:	b410      	push	{r4}
 8009368:	3b01      	subs	r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	6093      	str	r3, [r2, #8]
 800936e:	da07      	bge.n	8009380 <__sfputc_r+0x1c>
 8009370:	6994      	ldr	r4, [r2, #24]
 8009372:	42a3      	cmp	r3, r4
 8009374:	db01      	blt.n	800937a <__sfputc_r+0x16>
 8009376:	290a      	cmp	r1, #10
 8009378:	d102      	bne.n	8009380 <__sfputc_r+0x1c>
 800937a:	bc10      	pop	{r4}
 800937c:	f000 b94a 	b.w	8009614 <__swbuf_r>
 8009380:	6813      	ldr	r3, [r2, #0]
 8009382:	1c58      	adds	r0, r3, #1
 8009384:	6010      	str	r0, [r2, #0]
 8009386:	7019      	strb	r1, [r3, #0]
 8009388:	4608      	mov	r0, r1
 800938a:	bc10      	pop	{r4}
 800938c:	4770      	bx	lr

0800938e <__sfputs_r>:
 800938e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009390:	4606      	mov	r6, r0
 8009392:	460f      	mov	r7, r1
 8009394:	4614      	mov	r4, r2
 8009396:	18d5      	adds	r5, r2, r3
 8009398:	42ac      	cmp	r4, r5
 800939a:	d101      	bne.n	80093a0 <__sfputs_r+0x12>
 800939c:	2000      	movs	r0, #0
 800939e:	e007      	b.n	80093b0 <__sfputs_r+0x22>
 80093a0:	463a      	mov	r2, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a8:	f7ff ffdc 	bl	8009364 <__sfputc_r>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d1f3      	bne.n	8009398 <__sfputs_r+0xa>
 80093b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093b4 <_vfiprintf_r>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	460d      	mov	r5, r1
 80093ba:	4614      	mov	r4, r2
 80093bc:	4698      	mov	r8, r3
 80093be:	4606      	mov	r6, r0
 80093c0:	b09d      	sub	sp, #116	; 0x74
 80093c2:	b118      	cbz	r0, 80093cc <_vfiprintf_r+0x18>
 80093c4:	6983      	ldr	r3, [r0, #24]
 80093c6:	b90b      	cbnz	r3, 80093cc <_vfiprintf_r+0x18>
 80093c8:	f000 fb14 	bl	80099f4 <__sinit>
 80093cc:	4b89      	ldr	r3, [pc, #548]	; (80095f4 <_vfiprintf_r+0x240>)
 80093ce:	429d      	cmp	r5, r3
 80093d0:	d11b      	bne.n	800940a <_vfiprintf_r+0x56>
 80093d2:	6875      	ldr	r5, [r6, #4]
 80093d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d6:	07d9      	lsls	r1, r3, #31
 80093d8:	d405      	bmi.n	80093e6 <_vfiprintf_r+0x32>
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	059a      	lsls	r2, r3, #22
 80093de:	d402      	bmi.n	80093e6 <_vfiprintf_r+0x32>
 80093e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e2:	f000 fba5 	bl	8009b30 <__retarget_lock_acquire_recursive>
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	071b      	lsls	r3, r3, #28
 80093ea:	d501      	bpl.n	80093f0 <_vfiprintf_r+0x3c>
 80093ec:	692b      	ldr	r3, [r5, #16]
 80093ee:	b9eb      	cbnz	r3, 800942c <_vfiprintf_r+0x78>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4630      	mov	r0, r6
 80093f4:	f000 f96e 	bl	80096d4 <__swsetup_r>
 80093f8:	b1c0      	cbz	r0, 800942c <_vfiprintf_r+0x78>
 80093fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093fc:	07dc      	lsls	r4, r3, #31
 80093fe:	d50e      	bpl.n	800941e <_vfiprintf_r+0x6a>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	b01d      	add	sp, #116	; 0x74
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	4b7b      	ldr	r3, [pc, #492]	; (80095f8 <_vfiprintf_r+0x244>)
 800940c:	429d      	cmp	r5, r3
 800940e:	d101      	bne.n	8009414 <_vfiprintf_r+0x60>
 8009410:	68b5      	ldr	r5, [r6, #8]
 8009412:	e7df      	b.n	80093d4 <_vfiprintf_r+0x20>
 8009414:	4b79      	ldr	r3, [pc, #484]	; (80095fc <_vfiprintf_r+0x248>)
 8009416:	429d      	cmp	r5, r3
 8009418:	bf08      	it	eq
 800941a:	68f5      	ldreq	r5, [r6, #12]
 800941c:	e7da      	b.n	80093d4 <_vfiprintf_r+0x20>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	0598      	lsls	r0, r3, #22
 8009422:	d4ed      	bmi.n	8009400 <_vfiprintf_r+0x4c>
 8009424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009426:	f000 fb84 	bl	8009b32 <__retarget_lock_release_recursive>
 800942a:	e7e9      	b.n	8009400 <_vfiprintf_r+0x4c>
 800942c:	2300      	movs	r3, #0
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	2320      	movs	r3, #32
 8009432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009436:	2330      	movs	r3, #48	; 0x30
 8009438:	f04f 0901 	mov.w	r9, #1
 800943c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009440:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009600 <_vfiprintf_r+0x24c>
 8009444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009448:	4623      	mov	r3, r4
 800944a:	469a      	mov	sl, r3
 800944c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009450:	b10a      	cbz	r2, 8009456 <_vfiprintf_r+0xa2>
 8009452:	2a25      	cmp	r2, #37	; 0x25
 8009454:	d1f9      	bne.n	800944a <_vfiprintf_r+0x96>
 8009456:	ebba 0b04 	subs.w	fp, sl, r4
 800945a:	d00b      	beq.n	8009474 <_vfiprintf_r+0xc0>
 800945c:	465b      	mov	r3, fp
 800945e:	4622      	mov	r2, r4
 8009460:	4629      	mov	r1, r5
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ff93 	bl	800938e <__sfputs_r>
 8009468:	3001      	adds	r0, #1
 800946a:	f000 80aa 	beq.w	80095c2 <_vfiprintf_r+0x20e>
 800946e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009470:	445a      	add	r2, fp
 8009472:	9209      	str	r2, [sp, #36]	; 0x24
 8009474:	f89a 3000 	ldrb.w	r3, [sl]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80a2 	beq.w	80095c2 <_vfiprintf_r+0x20e>
 800947e:	2300      	movs	r3, #0
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009488:	f10a 0a01 	add.w	sl, sl, #1
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	9307      	str	r3, [sp, #28]
 8009490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009494:	931a      	str	r3, [sp, #104]	; 0x68
 8009496:	4654      	mov	r4, sl
 8009498:	2205      	movs	r2, #5
 800949a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949e:	4858      	ldr	r0, [pc, #352]	; (8009600 <_vfiprintf_r+0x24c>)
 80094a0:	f7ff f914 	bl	80086cc <memchr>
 80094a4:	9a04      	ldr	r2, [sp, #16]
 80094a6:	b9d8      	cbnz	r0, 80094e0 <_vfiprintf_r+0x12c>
 80094a8:	06d1      	lsls	r1, r2, #27
 80094aa:	bf44      	itt	mi
 80094ac:	2320      	movmi	r3, #32
 80094ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b2:	0713      	lsls	r3, r2, #28
 80094b4:	bf44      	itt	mi
 80094b6:	232b      	movmi	r3, #43	; 0x2b
 80094b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094bc:	f89a 3000 	ldrb.w	r3, [sl]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d015      	beq.n	80094f0 <_vfiprintf_r+0x13c>
 80094c4:	4654      	mov	r4, sl
 80094c6:	2000      	movs	r0, #0
 80094c8:	f04f 0c0a 	mov.w	ip, #10
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	4621      	mov	r1, r4
 80094d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d4:	3b30      	subs	r3, #48	; 0x30
 80094d6:	2b09      	cmp	r3, #9
 80094d8:	d94e      	bls.n	8009578 <_vfiprintf_r+0x1c4>
 80094da:	b1b0      	cbz	r0, 800950a <_vfiprintf_r+0x156>
 80094dc:	9207      	str	r2, [sp, #28]
 80094de:	e014      	b.n	800950a <_vfiprintf_r+0x156>
 80094e0:	eba0 0308 	sub.w	r3, r0, r8
 80094e4:	fa09 f303 	lsl.w	r3, r9, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	46a2      	mov	sl, r4
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	e7d2      	b.n	8009496 <_vfiprintf_r+0xe2>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	1d19      	adds	r1, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	9103      	str	r1, [sp, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfbb      	ittet	lt
 80094fc:	425b      	neglt	r3, r3
 80094fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009502:	9307      	strge	r3, [sp, #28]
 8009504:	9307      	strlt	r3, [sp, #28]
 8009506:	bfb8      	it	lt
 8009508:	9204      	strlt	r2, [sp, #16]
 800950a:	7823      	ldrb	r3, [r4, #0]
 800950c:	2b2e      	cmp	r3, #46	; 0x2e
 800950e:	d10c      	bne.n	800952a <_vfiprintf_r+0x176>
 8009510:	7863      	ldrb	r3, [r4, #1]
 8009512:	2b2a      	cmp	r3, #42	; 0x2a
 8009514:	d135      	bne.n	8009582 <_vfiprintf_r+0x1ce>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	3402      	adds	r4, #2
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	9203      	str	r2, [sp, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfb8      	it	lt
 8009524:	f04f 33ff 	movlt.w	r3, #4294967295
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009610 <_vfiprintf_r+0x25c>
 800952e:	2203      	movs	r2, #3
 8009530:	4650      	mov	r0, sl
 8009532:	7821      	ldrb	r1, [r4, #0]
 8009534:	f7ff f8ca 	bl	80086cc <memchr>
 8009538:	b140      	cbz	r0, 800954c <_vfiprintf_r+0x198>
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	eba0 000a 	sub.w	r0, r0, sl
 8009540:	fa03 f000 	lsl.w	r0, r3, r0
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	3401      	adds	r4, #1
 8009548:	4303      	orrs	r3, r0
 800954a:	9304      	str	r3, [sp, #16]
 800954c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009550:	2206      	movs	r2, #6
 8009552:	482c      	ldr	r0, [pc, #176]	; (8009604 <_vfiprintf_r+0x250>)
 8009554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009558:	f7ff f8b8 	bl	80086cc <memchr>
 800955c:	2800      	cmp	r0, #0
 800955e:	d03f      	beq.n	80095e0 <_vfiprintf_r+0x22c>
 8009560:	4b29      	ldr	r3, [pc, #164]	; (8009608 <_vfiprintf_r+0x254>)
 8009562:	bb1b      	cbnz	r3, 80095ac <_vfiprintf_r+0x1f8>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	3307      	adds	r3, #7
 8009568:	f023 0307 	bic.w	r3, r3, #7
 800956c:	3308      	adds	r3, #8
 800956e:	9303      	str	r3, [sp, #12]
 8009570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009572:	443b      	add	r3, r7
 8009574:	9309      	str	r3, [sp, #36]	; 0x24
 8009576:	e767      	b.n	8009448 <_vfiprintf_r+0x94>
 8009578:	460c      	mov	r4, r1
 800957a:	2001      	movs	r0, #1
 800957c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009580:	e7a5      	b.n	80094ce <_vfiprintf_r+0x11a>
 8009582:	2300      	movs	r3, #0
 8009584:	f04f 0c0a 	mov.w	ip, #10
 8009588:	4619      	mov	r1, r3
 800958a:	3401      	adds	r4, #1
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	4620      	mov	r0, r4
 8009590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009594:	3a30      	subs	r2, #48	; 0x30
 8009596:	2a09      	cmp	r2, #9
 8009598:	d903      	bls.n	80095a2 <_vfiprintf_r+0x1ee>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0c5      	beq.n	800952a <_vfiprintf_r+0x176>
 800959e:	9105      	str	r1, [sp, #20]
 80095a0:	e7c3      	b.n	800952a <_vfiprintf_r+0x176>
 80095a2:	4604      	mov	r4, r0
 80095a4:	2301      	movs	r3, #1
 80095a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095aa:	e7f0      	b.n	800958e <_vfiprintf_r+0x1da>
 80095ac:	ab03      	add	r3, sp, #12
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	462a      	mov	r2, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	4b15      	ldr	r3, [pc, #84]	; (800960c <_vfiprintf_r+0x258>)
 80095b6:	a904      	add	r1, sp, #16
 80095b8:	f7fd fe1e 	bl	80071f8 <_printf_float>
 80095bc:	4607      	mov	r7, r0
 80095be:	1c78      	adds	r0, r7, #1
 80095c0:	d1d6      	bne.n	8009570 <_vfiprintf_r+0x1bc>
 80095c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c4:	07d9      	lsls	r1, r3, #31
 80095c6:	d405      	bmi.n	80095d4 <_vfiprintf_r+0x220>
 80095c8:	89ab      	ldrh	r3, [r5, #12]
 80095ca:	059a      	lsls	r2, r3, #22
 80095cc:	d402      	bmi.n	80095d4 <_vfiprintf_r+0x220>
 80095ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095d0:	f000 faaf 	bl	8009b32 <__retarget_lock_release_recursive>
 80095d4:	89ab      	ldrh	r3, [r5, #12]
 80095d6:	065b      	lsls	r3, r3, #25
 80095d8:	f53f af12 	bmi.w	8009400 <_vfiprintf_r+0x4c>
 80095dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095de:	e711      	b.n	8009404 <_vfiprintf_r+0x50>
 80095e0:	ab03      	add	r3, sp, #12
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	462a      	mov	r2, r5
 80095e6:	4630      	mov	r0, r6
 80095e8:	4b08      	ldr	r3, [pc, #32]	; (800960c <_vfiprintf_r+0x258>)
 80095ea:	a904      	add	r1, sp, #16
 80095ec:	f7fe f8a0 	bl	8007730 <_printf_i>
 80095f0:	e7e4      	b.n	80095bc <_vfiprintf_r+0x208>
 80095f2:	bf00      	nop
 80095f4:	0800a29c 	.word	0x0800a29c
 80095f8:	0800a2bc 	.word	0x0800a2bc
 80095fc:	0800a27c 	.word	0x0800a27c
 8009600:	0800a124 	.word	0x0800a124
 8009604:	0800a12e 	.word	0x0800a12e
 8009608:	080071f9 	.word	0x080071f9
 800960c:	0800938f 	.word	0x0800938f
 8009610:	0800a12a 	.word	0x0800a12a

08009614 <__swbuf_r>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	460e      	mov	r6, r1
 8009618:	4614      	mov	r4, r2
 800961a:	4605      	mov	r5, r0
 800961c:	b118      	cbz	r0, 8009626 <__swbuf_r+0x12>
 800961e:	6983      	ldr	r3, [r0, #24]
 8009620:	b90b      	cbnz	r3, 8009626 <__swbuf_r+0x12>
 8009622:	f000 f9e7 	bl	80099f4 <__sinit>
 8009626:	4b21      	ldr	r3, [pc, #132]	; (80096ac <__swbuf_r+0x98>)
 8009628:	429c      	cmp	r4, r3
 800962a:	d12b      	bne.n	8009684 <__swbuf_r+0x70>
 800962c:	686c      	ldr	r4, [r5, #4]
 800962e:	69a3      	ldr	r3, [r4, #24]
 8009630:	60a3      	str	r3, [r4, #8]
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	071a      	lsls	r2, r3, #28
 8009636:	d52f      	bpl.n	8009698 <__swbuf_r+0x84>
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	b36b      	cbz	r3, 8009698 <__swbuf_r+0x84>
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	6820      	ldr	r0, [r4, #0]
 8009640:	b2f6      	uxtb	r6, r6
 8009642:	1ac0      	subs	r0, r0, r3
 8009644:	6963      	ldr	r3, [r4, #20]
 8009646:	4637      	mov	r7, r6
 8009648:	4283      	cmp	r3, r0
 800964a:	dc04      	bgt.n	8009656 <__swbuf_r+0x42>
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f93c 	bl	80098cc <_fflush_r>
 8009654:	bb30      	cbnz	r0, 80096a4 <__swbuf_r+0x90>
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	3001      	adds	r0, #1
 800965a:	3b01      	subs	r3, #1
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	6022      	str	r2, [r4, #0]
 8009664:	701e      	strb	r6, [r3, #0]
 8009666:	6963      	ldr	r3, [r4, #20]
 8009668:	4283      	cmp	r3, r0
 800966a:	d004      	beq.n	8009676 <__swbuf_r+0x62>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	07db      	lsls	r3, r3, #31
 8009670:	d506      	bpl.n	8009680 <__swbuf_r+0x6c>
 8009672:	2e0a      	cmp	r6, #10
 8009674:	d104      	bne.n	8009680 <__swbuf_r+0x6c>
 8009676:	4621      	mov	r1, r4
 8009678:	4628      	mov	r0, r5
 800967a:	f000 f927 	bl	80098cc <_fflush_r>
 800967e:	b988      	cbnz	r0, 80096a4 <__swbuf_r+0x90>
 8009680:	4638      	mov	r0, r7
 8009682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <__swbuf_r+0x9c>)
 8009686:	429c      	cmp	r4, r3
 8009688:	d101      	bne.n	800968e <__swbuf_r+0x7a>
 800968a:	68ac      	ldr	r4, [r5, #8]
 800968c:	e7cf      	b.n	800962e <__swbuf_r+0x1a>
 800968e:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <__swbuf_r+0xa0>)
 8009690:	429c      	cmp	r4, r3
 8009692:	bf08      	it	eq
 8009694:	68ec      	ldreq	r4, [r5, #12]
 8009696:	e7ca      	b.n	800962e <__swbuf_r+0x1a>
 8009698:	4621      	mov	r1, r4
 800969a:	4628      	mov	r0, r5
 800969c:	f000 f81a 	bl	80096d4 <__swsetup_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d0cb      	beq.n	800963c <__swbuf_r+0x28>
 80096a4:	f04f 37ff 	mov.w	r7, #4294967295
 80096a8:	e7ea      	b.n	8009680 <__swbuf_r+0x6c>
 80096aa:	bf00      	nop
 80096ac:	0800a29c 	.word	0x0800a29c
 80096b0:	0800a2bc 	.word	0x0800a2bc
 80096b4:	0800a27c 	.word	0x0800a27c

080096b8 <__ascii_wctomb>:
 80096b8:	4603      	mov	r3, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	b141      	cbz	r1, 80096d0 <__ascii_wctomb+0x18>
 80096be:	2aff      	cmp	r2, #255	; 0xff
 80096c0:	d904      	bls.n	80096cc <__ascii_wctomb+0x14>
 80096c2:	228a      	movs	r2, #138	; 0x8a
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	4770      	bx	lr
 80096cc:	2001      	movs	r0, #1
 80096ce:	700a      	strb	r2, [r1, #0]
 80096d0:	4770      	bx	lr
	...

080096d4 <__swsetup_r>:
 80096d4:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <__swsetup_r+0xcc>)
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	681d      	ldr	r5, [r3, #0]
 80096da:	4606      	mov	r6, r0
 80096dc:	460c      	mov	r4, r1
 80096de:	b125      	cbz	r5, 80096ea <__swsetup_r+0x16>
 80096e0:	69ab      	ldr	r3, [r5, #24]
 80096e2:	b913      	cbnz	r3, 80096ea <__swsetup_r+0x16>
 80096e4:	4628      	mov	r0, r5
 80096e6:	f000 f985 	bl	80099f4 <__sinit>
 80096ea:	4b2e      	ldr	r3, [pc, #184]	; (80097a4 <__swsetup_r+0xd0>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	d10f      	bne.n	8009710 <__swsetup_r+0x3c>
 80096f0:	686c      	ldr	r4, [r5, #4]
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096f8:	0719      	lsls	r1, r3, #28
 80096fa:	d42c      	bmi.n	8009756 <__swsetup_r+0x82>
 80096fc:	06dd      	lsls	r5, r3, #27
 80096fe:	d411      	bmi.n	8009724 <__swsetup_r+0x50>
 8009700:	2309      	movs	r3, #9
 8009702:	6033      	str	r3, [r6, #0]
 8009704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	e03e      	b.n	800978e <__swsetup_r+0xba>
 8009710:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <__swsetup_r+0xd4>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <__swsetup_r+0x46>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7eb      	b.n	80096f2 <__swsetup_r+0x1e>
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <__swsetup_r+0xd8>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7e6      	b.n	80096f2 <__swsetup_r+0x1e>
 8009724:	0758      	lsls	r0, r3, #29
 8009726:	d512      	bpl.n	800974e <__swsetup_r+0x7a>
 8009728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800972a:	b141      	cbz	r1, 800973e <__swsetup_r+0x6a>
 800972c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009730:	4299      	cmp	r1, r3
 8009732:	d002      	beq.n	800973a <__swsetup_r+0x66>
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff fb75 	bl	8008e24 <_free_r>
 800973a:	2300      	movs	r3, #0
 800973c:	6363      	str	r3, [r4, #52]	; 0x34
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	2300      	movs	r3, #0
 8009748:	6063      	str	r3, [r4, #4]
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	f043 0308 	orr.w	r3, r3, #8
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	b94b      	cbnz	r3, 800976e <__swsetup_r+0x9a>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009764:	d003      	beq.n	800976e <__swsetup_r+0x9a>
 8009766:	4621      	mov	r1, r4
 8009768:	4630      	mov	r0, r6
 800976a:	f000 fa07 	bl	8009b7c <__smakebuf_r>
 800976e:	89a0      	ldrh	r0, [r4, #12]
 8009770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009774:	f010 0301 	ands.w	r3, r0, #1
 8009778:	d00a      	beq.n	8009790 <__swsetup_r+0xbc>
 800977a:	2300      	movs	r3, #0
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	6963      	ldr	r3, [r4, #20]
 8009780:	425b      	negs	r3, r3
 8009782:	61a3      	str	r3, [r4, #24]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	b943      	cbnz	r3, 800979a <__swsetup_r+0xc6>
 8009788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800978c:	d1ba      	bne.n	8009704 <__swsetup_r+0x30>
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	0781      	lsls	r1, r0, #30
 8009792:	bf58      	it	pl
 8009794:	6963      	ldrpl	r3, [r4, #20]
 8009796:	60a3      	str	r3, [r4, #8]
 8009798:	e7f4      	b.n	8009784 <__swsetup_r+0xb0>
 800979a:	2000      	movs	r0, #0
 800979c:	e7f7      	b.n	800978e <__swsetup_r+0xba>
 800979e:	bf00      	nop
 80097a0:	2000004c 	.word	0x2000004c
 80097a4:	0800a29c 	.word	0x0800a29c
 80097a8:	0800a2bc 	.word	0x0800a2bc
 80097ac:	0800a27c 	.word	0x0800a27c

080097b0 <abort>:
 80097b0:	2006      	movs	r0, #6
 80097b2:	b508      	push	{r3, lr}
 80097b4:	f000 fa52 	bl	8009c5c <raise>
 80097b8:	2001      	movs	r0, #1
 80097ba:	f7f9 fc08 	bl	8002fce <_exit>
	...

080097c0 <__sflush_r>:
 80097c0:	898a      	ldrh	r2, [r1, #12]
 80097c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c6:	4605      	mov	r5, r0
 80097c8:	0710      	lsls	r0, r2, #28
 80097ca:	460c      	mov	r4, r1
 80097cc:	d458      	bmi.n	8009880 <__sflush_r+0xc0>
 80097ce:	684b      	ldr	r3, [r1, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dc05      	bgt.n	80097e0 <__sflush_r+0x20>
 80097d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dc02      	bgt.n	80097e0 <__sflush_r+0x20>
 80097da:	2000      	movs	r0, #0
 80097dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d0f9      	beq.n	80097da <__sflush_r+0x1a>
 80097e6:	2300      	movs	r3, #0
 80097e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097ec:	682f      	ldr	r7, [r5, #0]
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	d032      	beq.n	8009858 <__sflush_r+0x98>
 80097f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	075a      	lsls	r2, r3, #29
 80097f8:	d505      	bpl.n	8009806 <__sflush_r+0x46>
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	1ac0      	subs	r0, r0, r3
 80097fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009800:	b10b      	cbz	r3, 8009806 <__sflush_r+0x46>
 8009802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009804:	1ac0      	subs	r0, r0, r3
 8009806:	2300      	movs	r3, #0
 8009808:	4602      	mov	r2, r0
 800980a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800980c:	4628      	mov	r0, r5
 800980e:	6a21      	ldr	r1, [r4, #32]
 8009810:	47b0      	blx	r6
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	d106      	bne.n	8009826 <__sflush_r+0x66>
 8009818:	6829      	ldr	r1, [r5, #0]
 800981a:	291d      	cmp	r1, #29
 800981c:	d82c      	bhi.n	8009878 <__sflush_r+0xb8>
 800981e:	4a2a      	ldr	r2, [pc, #168]	; (80098c8 <__sflush_r+0x108>)
 8009820:	40ca      	lsrs	r2, r1
 8009822:	07d6      	lsls	r6, r2, #31
 8009824:	d528      	bpl.n	8009878 <__sflush_r+0xb8>
 8009826:	2200      	movs	r2, #0
 8009828:	6062      	str	r2, [r4, #4]
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	04d9      	lsls	r1, r3, #19
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	d504      	bpl.n	800983c <__sflush_r+0x7c>
 8009832:	1c42      	adds	r2, r0, #1
 8009834:	d101      	bne.n	800983a <__sflush_r+0x7a>
 8009836:	682b      	ldr	r3, [r5, #0]
 8009838:	b903      	cbnz	r3, 800983c <__sflush_r+0x7c>
 800983a:	6560      	str	r0, [r4, #84]	; 0x54
 800983c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800983e:	602f      	str	r7, [r5, #0]
 8009840:	2900      	cmp	r1, #0
 8009842:	d0ca      	beq.n	80097da <__sflush_r+0x1a>
 8009844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009848:	4299      	cmp	r1, r3
 800984a:	d002      	beq.n	8009852 <__sflush_r+0x92>
 800984c:	4628      	mov	r0, r5
 800984e:	f7ff fae9 	bl	8008e24 <_free_r>
 8009852:	2000      	movs	r0, #0
 8009854:	6360      	str	r0, [r4, #52]	; 0x34
 8009856:	e7c1      	b.n	80097dc <__sflush_r+0x1c>
 8009858:	6a21      	ldr	r1, [r4, #32]
 800985a:	2301      	movs	r3, #1
 800985c:	4628      	mov	r0, r5
 800985e:	47b0      	blx	r6
 8009860:	1c41      	adds	r1, r0, #1
 8009862:	d1c7      	bne.n	80097f4 <__sflush_r+0x34>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0c4      	beq.n	80097f4 <__sflush_r+0x34>
 800986a:	2b1d      	cmp	r3, #29
 800986c:	d001      	beq.n	8009872 <__sflush_r+0xb2>
 800986e:	2b16      	cmp	r3, #22
 8009870:	d101      	bne.n	8009876 <__sflush_r+0xb6>
 8009872:	602f      	str	r7, [r5, #0]
 8009874:	e7b1      	b.n	80097da <__sflush_r+0x1a>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	e7ad      	b.n	80097dc <__sflush_r+0x1c>
 8009880:	690f      	ldr	r7, [r1, #16]
 8009882:	2f00      	cmp	r7, #0
 8009884:	d0a9      	beq.n	80097da <__sflush_r+0x1a>
 8009886:	0793      	lsls	r3, r2, #30
 8009888:	bf18      	it	ne
 800988a:	2300      	movne	r3, #0
 800988c:	680e      	ldr	r6, [r1, #0]
 800988e:	bf08      	it	eq
 8009890:	694b      	ldreq	r3, [r1, #20]
 8009892:	eba6 0807 	sub.w	r8, r6, r7
 8009896:	600f      	str	r7, [r1, #0]
 8009898:	608b      	str	r3, [r1, #8]
 800989a:	f1b8 0f00 	cmp.w	r8, #0
 800989e:	dd9c      	ble.n	80097da <__sflush_r+0x1a>
 80098a0:	4643      	mov	r3, r8
 80098a2:	463a      	mov	r2, r7
 80098a4:	4628      	mov	r0, r5
 80098a6:	6a21      	ldr	r1, [r4, #32]
 80098a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098aa:	47b0      	blx	r6
 80098ac:	2800      	cmp	r0, #0
 80098ae:	dc06      	bgt.n	80098be <__sflush_r+0xfe>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
 80098b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	e78e      	b.n	80097dc <__sflush_r+0x1c>
 80098be:	4407      	add	r7, r0
 80098c0:	eba8 0800 	sub.w	r8, r8, r0
 80098c4:	e7e9      	b.n	800989a <__sflush_r+0xda>
 80098c6:	bf00      	nop
 80098c8:	20400001 	.word	0x20400001

080098cc <_fflush_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	690b      	ldr	r3, [r1, #16]
 80098d0:	4605      	mov	r5, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	b913      	cbnz	r3, 80098dc <_fflush_r+0x10>
 80098d6:	2500      	movs	r5, #0
 80098d8:	4628      	mov	r0, r5
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	b118      	cbz	r0, 80098e6 <_fflush_r+0x1a>
 80098de:	6983      	ldr	r3, [r0, #24]
 80098e0:	b90b      	cbnz	r3, 80098e6 <_fflush_r+0x1a>
 80098e2:	f000 f887 	bl	80099f4 <__sinit>
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <_fflush_r+0x6c>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	d11b      	bne.n	8009924 <_fflush_r+0x58>
 80098ec:	686c      	ldr	r4, [r5, #4]
 80098ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0ef      	beq.n	80098d6 <_fflush_r+0xa>
 80098f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098f8:	07d0      	lsls	r0, r2, #31
 80098fa:	d404      	bmi.n	8009906 <_fflush_r+0x3a>
 80098fc:	0599      	lsls	r1, r3, #22
 80098fe:	d402      	bmi.n	8009906 <_fflush_r+0x3a>
 8009900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009902:	f000 f915 	bl	8009b30 <__retarget_lock_acquire_recursive>
 8009906:	4628      	mov	r0, r5
 8009908:	4621      	mov	r1, r4
 800990a:	f7ff ff59 	bl	80097c0 <__sflush_r>
 800990e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009910:	4605      	mov	r5, r0
 8009912:	07da      	lsls	r2, r3, #31
 8009914:	d4e0      	bmi.n	80098d8 <_fflush_r+0xc>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	059b      	lsls	r3, r3, #22
 800991a:	d4dd      	bmi.n	80098d8 <_fflush_r+0xc>
 800991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991e:	f000 f908 	bl	8009b32 <__retarget_lock_release_recursive>
 8009922:	e7d9      	b.n	80098d8 <_fflush_r+0xc>
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <_fflush_r+0x70>)
 8009926:	429c      	cmp	r4, r3
 8009928:	d101      	bne.n	800992e <_fflush_r+0x62>
 800992a:	68ac      	ldr	r4, [r5, #8]
 800992c:	e7df      	b.n	80098ee <_fflush_r+0x22>
 800992e:	4b04      	ldr	r3, [pc, #16]	; (8009940 <_fflush_r+0x74>)
 8009930:	429c      	cmp	r4, r3
 8009932:	bf08      	it	eq
 8009934:	68ec      	ldreq	r4, [r5, #12]
 8009936:	e7da      	b.n	80098ee <_fflush_r+0x22>
 8009938:	0800a29c 	.word	0x0800a29c
 800993c:	0800a2bc 	.word	0x0800a2bc
 8009940:	0800a27c 	.word	0x0800a27c

08009944 <std>:
 8009944:	2300      	movs	r3, #0
 8009946:	b510      	push	{r4, lr}
 8009948:	4604      	mov	r4, r0
 800994a:	e9c0 3300 	strd	r3, r3, [r0]
 800994e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009952:	6083      	str	r3, [r0, #8]
 8009954:	8181      	strh	r1, [r0, #12]
 8009956:	6643      	str	r3, [r0, #100]	; 0x64
 8009958:	81c2      	strh	r2, [r0, #14]
 800995a:	6183      	str	r3, [r0, #24]
 800995c:	4619      	mov	r1, r3
 800995e:	2208      	movs	r2, #8
 8009960:	305c      	adds	r0, #92	; 0x5c
 8009962:	f7fd fba3 	bl	80070ac <memset>
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <std+0x38>)
 8009968:	6224      	str	r4, [r4, #32]
 800996a:	6263      	str	r3, [r4, #36]	; 0x24
 800996c:	4b04      	ldr	r3, [pc, #16]	; (8009980 <std+0x3c>)
 800996e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <std+0x40>)
 8009972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <std+0x44>)
 8009976:	6323      	str	r3, [r4, #48]	; 0x30
 8009978:	bd10      	pop	{r4, pc}
 800997a:	bf00      	nop
 800997c:	08009c95 	.word	0x08009c95
 8009980:	08009cb7 	.word	0x08009cb7
 8009984:	08009cef 	.word	0x08009cef
 8009988:	08009d13 	.word	0x08009d13

0800998c <_cleanup_r>:
 800998c:	4901      	ldr	r1, [pc, #4]	; (8009994 <_cleanup_r+0x8>)
 800998e:	f000 b8af 	b.w	8009af0 <_fwalk_reent>
 8009992:	bf00      	nop
 8009994:	080098cd 	.word	0x080098cd

08009998 <__sfmoreglue>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	2568      	movs	r5, #104	; 0x68
 800999c:	1e4a      	subs	r2, r1, #1
 800999e:	4355      	muls	r5, r2
 80099a0:	460e      	mov	r6, r1
 80099a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099a6:	f7ff fa89 	bl	8008ebc <_malloc_r>
 80099aa:	4604      	mov	r4, r0
 80099ac:	b140      	cbz	r0, 80099c0 <__sfmoreglue+0x28>
 80099ae:	2100      	movs	r1, #0
 80099b0:	e9c0 1600 	strd	r1, r6, [r0]
 80099b4:	300c      	adds	r0, #12
 80099b6:	60a0      	str	r0, [r4, #8]
 80099b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099bc:	f7fd fb76 	bl	80070ac <memset>
 80099c0:	4620      	mov	r0, r4
 80099c2:	bd70      	pop	{r4, r5, r6, pc}

080099c4 <__sfp_lock_acquire>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__sfp_lock_acquire+0x8>)
 80099c6:	f000 b8b3 	b.w	8009b30 <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	2000054c 	.word	0x2000054c

080099d0 <__sfp_lock_release>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__sfp_lock_release+0x8>)
 80099d2:	f000 b8ae 	b.w	8009b32 <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	2000054c 	.word	0x2000054c

080099dc <__sinit_lock_acquire>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__sinit_lock_acquire+0x8>)
 80099de:	f000 b8a7 	b.w	8009b30 <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	20000547 	.word	0x20000547

080099e8 <__sinit_lock_release>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sinit_lock_release+0x8>)
 80099ea:	f000 b8a2 	b.w	8009b32 <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	20000547 	.word	0x20000547

080099f4 <__sinit>:
 80099f4:	b510      	push	{r4, lr}
 80099f6:	4604      	mov	r4, r0
 80099f8:	f7ff fff0 	bl	80099dc <__sinit_lock_acquire>
 80099fc:	69a3      	ldr	r3, [r4, #24]
 80099fe:	b11b      	cbz	r3, 8009a08 <__sinit+0x14>
 8009a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a04:	f7ff bff0 	b.w	80099e8 <__sinit_lock_release>
 8009a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <__sinit+0x68>)
 8009a10:	4a13      	ldr	r2, [pc, #76]	; (8009a60 <__sinit+0x6c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a16:	42a3      	cmp	r3, r4
 8009a18:	bf08      	it	eq
 8009a1a:	2301      	moveq	r3, #1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	bf08      	it	eq
 8009a20:	61a3      	streq	r3, [r4, #24]
 8009a22:	f000 f81f 	bl	8009a64 <__sfp>
 8009a26:	6060      	str	r0, [r4, #4]
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 f81b 	bl	8009a64 <__sfp>
 8009a2e:	60a0      	str	r0, [r4, #8]
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 f817 	bl	8009a64 <__sfp>
 8009a36:	2200      	movs	r2, #0
 8009a38:	2104      	movs	r1, #4
 8009a3a:	60e0      	str	r0, [r4, #12]
 8009a3c:	6860      	ldr	r0, [r4, #4]
 8009a3e:	f7ff ff81 	bl	8009944 <std>
 8009a42:	2201      	movs	r2, #1
 8009a44:	2109      	movs	r1, #9
 8009a46:	68a0      	ldr	r0, [r4, #8]
 8009a48:	f7ff ff7c 	bl	8009944 <std>
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	2112      	movs	r1, #18
 8009a50:	68e0      	ldr	r0, [r4, #12]
 8009a52:	f7ff ff77 	bl	8009944 <std>
 8009a56:	2301      	movs	r3, #1
 8009a58:	61a3      	str	r3, [r4, #24]
 8009a5a:	e7d1      	b.n	8009a00 <__sinit+0xc>
 8009a5c:	08009efc 	.word	0x08009efc
 8009a60:	0800998d 	.word	0x0800998d

08009a64 <__sfp>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	4607      	mov	r7, r0
 8009a68:	f7ff ffac 	bl	80099c4 <__sfp_lock_acquire>
 8009a6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <__sfp+0x84>)
 8009a6e:	681e      	ldr	r6, [r3, #0]
 8009a70:	69b3      	ldr	r3, [r6, #24]
 8009a72:	b913      	cbnz	r3, 8009a7a <__sfp+0x16>
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7ff ffbd 	bl	80099f4 <__sinit>
 8009a7a:	3648      	adds	r6, #72	; 0x48
 8009a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	d503      	bpl.n	8009a8c <__sfp+0x28>
 8009a84:	6833      	ldr	r3, [r6, #0]
 8009a86:	b30b      	cbz	r3, 8009acc <__sfp+0x68>
 8009a88:	6836      	ldr	r6, [r6, #0]
 8009a8a:	e7f7      	b.n	8009a7c <__sfp+0x18>
 8009a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a90:	b9d5      	cbnz	r5, 8009ac8 <__sfp+0x64>
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <__sfp+0x88>)
 8009a94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a98:	60e3      	str	r3, [r4, #12]
 8009a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8009a9c:	f000 f847 	bl	8009b2e <__retarget_lock_init_recursive>
 8009aa0:	f7ff ff96 	bl	80099d0 <__sfp_lock_release>
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ab0:	6025      	str	r5, [r4, #0]
 8009ab2:	61a5      	str	r5, [r4, #24]
 8009ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ab8:	f7fd faf8 	bl	80070ac <memset>
 8009abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac8:	3468      	adds	r4, #104	; 0x68
 8009aca:	e7d9      	b.n	8009a80 <__sfp+0x1c>
 8009acc:	2104      	movs	r1, #4
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f7ff ff62 	bl	8009998 <__sfmoreglue>
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	6030      	str	r0, [r6, #0]
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d1d5      	bne.n	8009a88 <__sfp+0x24>
 8009adc:	f7ff ff78 	bl	80099d0 <__sfp_lock_release>
 8009ae0:	230c      	movs	r3, #12
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	e7ee      	b.n	8009ac4 <__sfp+0x60>
 8009ae6:	bf00      	nop
 8009ae8:	08009efc 	.word	0x08009efc
 8009aec:	ffff0001 	.word	0xffff0001

08009af0 <_fwalk_reent>:
 8009af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af4:	4606      	mov	r6, r0
 8009af6:	4688      	mov	r8, r1
 8009af8:	2700      	movs	r7, #0
 8009afa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b02:	f1b9 0901 	subs.w	r9, r9, #1
 8009b06:	d505      	bpl.n	8009b14 <_fwalk_reent+0x24>
 8009b08:	6824      	ldr	r4, [r4, #0]
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	d1f7      	bne.n	8009afe <_fwalk_reent+0xe>
 8009b0e:	4638      	mov	r0, r7
 8009b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b14:	89ab      	ldrh	r3, [r5, #12]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d907      	bls.n	8009b2a <_fwalk_reent+0x3a>
 8009b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	d003      	beq.n	8009b2a <_fwalk_reent+0x3a>
 8009b22:	4629      	mov	r1, r5
 8009b24:	4630      	mov	r0, r6
 8009b26:	47c0      	blx	r8
 8009b28:	4307      	orrs	r7, r0
 8009b2a:	3568      	adds	r5, #104	; 0x68
 8009b2c:	e7e9      	b.n	8009b02 <_fwalk_reent+0x12>

08009b2e <__retarget_lock_init_recursive>:
 8009b2e:	4770      	bx	lr

08009b30 <__retarget_lock_acquire_recursive>:
 8009b30:	4770      	bx	lr

08009b32 <__retarget_lock_release_recursive>:
 8009b32:	4770      	bx	lr

08009b34 <__swhatbuf_r>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	460e      	mov	r6, r1
 8009b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	461d      	mov	r5, r3
 8009b42:	b096      	sub	sp, #88	; 0x58
 8009b44:	da07      	bge.n	8009b56 <__swhatbuf_r+0x22>
 8009b46:	2300      	movs	r3, #0
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	89b3      	ldrh	r3, [r6, #12]
 8009b4c:	061a      	lsls	r2, r3, #24
 8009b4e:	d410      	bmi.n	8009b72 <__swhatbuf_r+0x3e>
 8009b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b54:	e00e      	b.n	8009b74 <__swhatbuf_r+0x40>
 8009b56:	466a      	mov	r2, sp
 8009b58:	f000 f902 	bl	8009d60 <_fstat_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dbf2      	blt.n	8009b46 <__swhatbuf_r+0x12>
 8009b60:	9a01      	ldr	r2, [sp, #4]
 8009b62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b6a:	425a      	negs	r2, r3
 8009b6c:	415a      	adcs	r2, r3
 8009b6e:	602a      	str	r2, [r5, #0]
 8009b70:	e7ee      	b.n	8009b50 <__swhatbuf_r+0x1c>
 8009b72:	2340      	movs	r3, #64	; 0x40
 8009b74:	2000      	movs	r0, #0
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	b016      	add	sp, #88	; 0x58
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <__smakebuf_r>:
 8009b7c:	898b      	ldrh	r3, [r1, #12]
 8009b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b80:	079d      	lsls	r5, r3, #30
 8009b82:	4606      	mov	r6, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	d507      	bpl.n	8009b98 <__smakebuf_r+0x1c>
 8009b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	6123      	str	r3, [r4, #16]
 8009b90:	2301      	movs	r3, #1
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	b002      	add	sp, #8
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	466a      	mov	r2, sp
 8009b9a:	ab01      	add	r3, sp, #4
 8009b9c:	f7ff ffca 	bl	8009b34 <__swhatbuf_r>
 8009ba0:	9900      	ldr	r1, [sp, #0]
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff f989 	bl	8008ebc <_malloc_r>
 8009baa:	b948      	cbnz	r0, 8009bc0 <__smakebuf_r+0x44>
 8009bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb0:	059a      	lsls	r2, r3, #22
 8009bb2:	d4ef      	bmi.n	8009b94 <__smakebuf_r+0x18>
 8009bb4:	f023 0303 	bic.w	r3, r3, #3
 8009bb8:	f043 0302 	orr.w	r3, r3, #2
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	e7e3      	b.n	8009b88 <__smakebuf_r+0xc>
 8009bc0:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <__smakebuf_r+0x7c>)
 8009bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	6020      	str	r0, [r4, #0]
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	9b00      	ldr	r3, [sp, #0]
 8009bd0:	6120      	str	r0, [r4, #16]
 8009bd2:	6163      	str	r3, [r4, #20]
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	b15b      	cbz	r3, 8009bf0 <__smakebuf_r+0x74>
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bde:	f000 f8d1 	bl	8009d84 <_isatty_r>
 8009be2:	b128      	cbz	r0, 8009bf0 <__smakebuf_r+0x74>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f023 0303 	bic.w	r3, r3, #3
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	89a0      	ldrh	r0, [r4, #12]
 8009bf2:	4305      	orrs	r5, r0
 8009bf4:	81a5      	strh	r5, [r4, #12]
 8009bf6:	e7cd      	b.n	8009b94 <__smakebuf_r+0x18>
 8009bf8:	0800998d 	.word	0x0800998d

08009bfc <_malloc_usable_size_r>:
 8009bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c00:	1f18      	subs	r0, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bfbc      	itt	lt
 8009c06:	580b      	ldrlt	r3, [r1, r0]
 8009c08:	18c0      	addlt	r0, r0, r3
 8009c0a:	4770      	bx	lr

08009c0c <_raise_r>:
 8009c0c:	291f      	cmp	r1, #31
 8009c0e:	b538      	push	{r3, r4, r5, lr}
 8009c10:	4604      	mov	r4, r0
 8009c12:	460d      	mov	r5, r1
 8009c14:	d904      	bls.n	8009c20 <_raise_r+0x14>
 8009c16:	2316      	movs	r3, #22
 8009c18:	6003      	str	r3, [r0, #0]
 8009c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c22:	b112      	cbz	r2, 8009c2a <_raise_r+0x1e>
 8009c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c28:	b94b      	cbnz	r3, 8009c3e <_raise_r+0x32>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f830 	bl	8009c90 <_getpid_r>
 8009c30:	462a      	mov	r2, r5
 8009c32:	4601      	mov	r1, r0
 8009c34:	4620      	mov	r0, r4
 8009c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c3a:	f000 b817 	b.w	8009c6c <_kill_r>
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d00a      	beq.n	8009c58 <_raise_r+0x4c>
 8009c42:	1c59      	adds	r1, r3, #1
 8009c44:	d103      	bne.n	8009c4e <_raise_r+0x42>
 8009c46:	2316      	movs	r3, #22
 8009c48:	6003      	str	r3, [r0, #0]
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	e7e7      	b.n	8009c1e <_raise_r+0x12>
 8009c4e:	2400      	movs	r4, #0
 8009c50:	4628      	mov	r0, r5
 8009c52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c56:	4798      	blx	r3
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e7e0      	b.n	8009c1e <_raise_r+0x12>

08009c5c <raise>:
 8009c5c:	4b02      	ldr	r3, [pc, #8]	; (8009c68 <raise+0xc>)
 8009c5e:	4601      	mov	r1, r0
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	f7ff bfd3 	b.w	8009c0c <_raise_r>
 8009c66:	bf00      	nop
 8009c68:	2000004c 	.word	0x2000004c

08009c6c <_kill_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_kill_r+0x20>)
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	4611      	mov	r1, r2
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	f7f9 f998 	bl	8002fae <_kill>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d102      	bne.n	8009c88 <_kill_r+0x1c>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	b103      	cbz	r3, 8009c88 <_kill_r+0x1c>
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	bd38      	pop	{r3, r4, r5, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000540 	.word	0x20000540

08009c90 <_getpid_r>:
 8009c90:	f7f9 b986 	b.w	8002fa0 <_getpid>

08009c94 <__sread>:
 8009c94:	b510      	push	{r4, lr}
 8009c96:	460c      	mov	r4, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	f000 f894 	bl	8009dc8 <_read_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	bfab      	itete	ge
 8009ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca8:	181b      	addge	r3, r3, r0
 8009caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cae:	bfac      	ite	ge
 8009cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb2:	81a3      	strhlt	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__swrite>:
 8009cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cba:	461f      	mov	r7, r3
 8009cbc:	898b      	ldrh	r3, [r1, #12]
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	05db      	lsls	r3, r3, #23
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	d505      	bpl.n	8009cd4 <__swrite+0x1e>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	f000 f868 	bl	8009da4 <_lseek_r>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	4628      	mov	r0, r5
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	f000 b817 	b.w	8009d1c <_write_r>

08009cee <__sseek>:
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf6:	f000 f855 	bl	8009da4 <_lseek_r>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	bf15      	itete	ne
 8009d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strheq	r3, [r4, #12]
 8009d0c:	bf18      	it	ne
 8009d0e:	81a3      	strhne	r3, [r4, #12]
 8009d10:	bd10      	pop	{r4, pc}

08009d12 <__sclose>:
 8009d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d16:	f000 b813 	b.w	8009d40 <_close_r>
	...

08009d1c <_write_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	4611      	mov	r1, r2
 8009d24:	2200      	movs	r2, #0
 8009d26:	4d05      	ldr	r5, [pc, #20]	; (8009d3c <_write_r+0x20>)
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f7f9 f976 	bl	800301c <_write>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_write_r+0x1e>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_write_r+0x1e>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	20000540 	.word	0x20000540

08009d40 <_close_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	2300      	movs	r3, #0
 8009d44:	4d05      	ldr	r5, [pc, #20]	; (8009d5c <_close_r+0x1c>)
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f9 f982 	bl	8003054 <_close>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_close_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_close_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	20000540 	.word	0x20000540

08009d60 <_fstat_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	2300      	movs	r3, #0
 8009d64:	4d06      	ldr	r5, [pc, #24]	; (8009d80 <_fstat_r+0x20>)
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7f9 f97c 	bl	800306a <_fstat>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d102      	bne.n	8009d7c <_fstat_r+0x1c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b103      	cbz	r3, 8009d7c <_fstat_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000540 	.word	0x20000540

08009d84 <_isatty_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	2300      	movs	r3, #0
 8009d88:	4d05      	ldr	r5, [pc, #20]	; (8009da0 <_isatty_r+0x1c>)
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7f9 f97a 	bl	8003088 <_isatty>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_isatty_r+0x1a>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_isatty_r+0x1a>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20000540 	.word	0x20000540

08009da4 <_lseek_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	2200      	movs	r2, #0
 8009dae:	4d05      	ldr	r5, [pc, #20]	; (8009dc4 <_lseek_r+0x20>)
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f9 f972 	bl	800309c <_lseek>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_lseek_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_lseek_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000540 	.word	0x20000540

08009dc8 <_read_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4d05      	ldr	r5, [pc, #20]	; (8009de8 <_read_r+0x20>)
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f9 f903 	bl	8002fe2 <_read>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_read_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_read_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20000540 	.word	0x20000540

08009dec <_init>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	bf00      	nop
 8009df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df2:	bc08      	pop	{r3}
 8009df4:	469e      	mov	lr, r3
 8009df6:	4770      	bx	lr

08009df8 <_fini>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	bf00      	nop
 8009dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfe:	bc08      	pop	{r3}
 8009e00:	469e      	mov	lr, r3
 8009e02:	4770      	bx	lr
