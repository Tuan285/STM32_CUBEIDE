
RIFD_CB_VATCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e38  08003e38  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003e38  08003e38  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e38  08003e38  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000090  08003ed0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003ed0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f72e  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f02  00000000  00000000  0002f7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018481  00000000  00000000  00033298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f014  00000000  00000000  0004b719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d324  00000000  00000000  0005a72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  000e7aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dac 	.word	0x08003dac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08003dac 	.word	0x08003dac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <servo_in_ON>:
uint8_t MyID3[5] = { 0x26, 0xaa, 0x16, 0xad, 0xe2 };
uint8_t MyID4[5] = { 0x26, 0xb4, 0x1, 0x96, 0xe0 };
uint8_t bufferTx[20];
uint8_t the1, the2, the3, the4;
uint8_t the[4];
void servo_in_ON() {
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 750);  // duty cycle is 2ms
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <servo_in_ON+0x18>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000168:	641a      	str	r2, [r3, #64]	; 0x40
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	200001e4 	.word	0x200001e4

08000178 <servo_in_OFF>:
void servo_in_OFF() {
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 250);  // duty cycle is 1 ms
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <servo_in_OFF+0x14>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	22fa      	movs	r2, #250	; 0xfa
 8000182:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	200001e4 	.word	0x200001e4

08000190 <servo_out_ON>:
void servo_out_ON() {
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 750);  // duty cycle is 2ms
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <servo_out_ON+0x18>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f240 22ee 	movw	r2, #750	; 0x2ee
 800019c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	200001e4 	.word	0x200001e4

080001ac <servo_out_OFF>:
void servo_out_OFF() {
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);  // duty cycle is 1 ms
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <servo_out_OFF+0x14>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	22fa      	movs	r2, #250	; 0xfa
 80001b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	200001e4 	.word	0x200001e4

080001c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001cc:	f000 fffa 	bl	80011c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d0:	f000 fa14 	bl	80005fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d4:	f000 fb84 	bl	80008e0 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001d8:	f000 fa54 	bl	8000684 <MX_SPI1_Init>
	MX_TIM2_Init();
 80001dc:	f000 fa88 	bl	80006f0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80001e0:	f000 fb54 	bl	800088c <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80001e4:	f000 fb04 	bl	80007f0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	TM_MFRC522_Init();
 80001e8:	f000 fc22 	bl	8000a30 <TM_MFRC522_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001ec:	2104      	movs	r1, #4
 80001ee:	48a9      	ldr	r0, [pc, #676]	; (8000494 <main+0x2d0>)
 80001f0:	f002 fa72 	bl	80026d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80001f4:	210c      	movs	r1, #12
 80001f6:	48a7      	ldr	r0, [pc, #668]	; (8000494 <main+0x2d0>)
 80001f8:	f002 fa6e 	bl	80026d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	48a5      	ldr	r0, [pc, #660]	; (8000498 <main+0x2d4>)
 8000204:	f001 fabf 	bl	8001786 <HAL_GPIO_WritePin>
	t_prev = HAL_GetTick();
 8000208:	f001 f834 	bl	8001274 <HAL_GetTick>
 800020c:	4603      	mov	r3, r0
 800020e:	461a      	mov	r2, r3
 8000210:	f04f 0300 	mov.w	r3, #0
 8000214:	49a1      	ldr	r1, [pc, #644]	; (800049c <main+0x2d8>)
 8000216:	e9c1 2300 	strd	r2, r3, [r1]
	t_prev2 = HAL_GetTick();
 800021a:	f001 f82b 	bl	8001274 <HAL_GetTick>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	f04f 0300 	mov.w	r3, #0
 8000226:	499e      	ldr	r1, [pc, #632]	; (80004a0 <main+0x2dc>)
 8000228:	e9c1 2300 	strd	r2, r3, [r1]
	t_prev3 = HAL_GetTick();
 800022c:	f001 f822 	bl	8001274 <HAL_GetTick>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	499a      	ldr	r1, [pc, #616]	; (80004a4 <main+0x2e0>)
 800023a:	e9c1 2300 	strd	r2, r3, [r1]
//		HAL_Delay(1000);
//		servo_in_ON();
//		servo_out_ON();
//		HAL_Delay(1000);
		// xe dap 2000 xe may 5000 oto 7000
		cb1 = HAL_GPIO_ReadPin(CB1_GPIO_Port, CB1_Pin);
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	4899      	ldr	r0, [pc, #612]	; (80004a8 <main+0x2e4>)
 8000242:	f001 fa89 	bl	8001758 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	4b98      	ldr	r3, [pc, #608]	; (80004ac <main+0x2e8>)
 800024c:	701a      	strb	r2, [r3, #0]
		cb2 = HAL_GPIO_ReadPin(CB2_GPIO_Port, CB2_Pin);
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4895      	ldr	r0, [pc, #596]	; (80004a8 <main+0x2e4>)
 8000252:	f001 fa81 	bl	8001758 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	4b95      	ldr	r3, [pc, #596]	; (80004b0 <main+0x2ec>)
 800025c:	701a      	strb	r2, [r3, #0]
		cb3 = HAL_GPIO_ReadPin(CB3_GPIO_Port, CB3_Pin);
 800025e:	2120      	movs	r1, #32
 8000260:	4891      	ldr	r0, [pc, #580]	; (80004a8 <main+0x2e4>)
 8000262:	f001 fa79 	bl	8001758 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4b92      	ldr	r3, [pc, #584]	; (80004b4 <main+0x2f0>)
 800026c:	701a      	strb	r2, [r3, #0]
		cb4 = HAL_GPIO_ReadPin(CB4_GPIO_Port, CB4_Pin);
 800026e:	2110      	movs	r1, #16
 8000270:	488d      	ldr	r0, [pc, #564]	; (80004a8 <main+0x2e4>)
 8000272:	f001 fa71 	bl	8001758 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	461a      	mov	r2, r3
 800027a:	4b8f      	ldr	r3, [pc, #572]	; (80004b8 <main+0x2f4>)
 800027c:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - t_prev3 >= 200) {
 800027e:	f000 fff9 	bl	8001274 <HAL_GetTick>
 8000282:	4603      	mov	r3, r0
 8000284:	4618      	mov	r0, r3
 8000286:	f04f 0100 	mov.w	r1, #0
 800028a:	4b86      	ldr	r3, [pc, #536]	; (80004a4 <main+0x2e0>)
 800028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0503 	sbc.w	r5, r1, r3
 8000296:	2d00      	cmp	r5, #0
 8000298:	bf08      	it	eq
 800029a:	2cc8      	cmpeq	r4, #200	; 0xc8
 800029c:	d335      	bcc.n	800030a <main+0x146>
			chotrong = cb1 + cb2 + cb3 + cb4;
 800029e:	4b83      	ldr	r3, [pc, #524]	; (80004ac <main+0x2e8>)
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	4b83      	ldr	r3, [pc, #524]	; (80004b0 <main+0x2ec>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	4413      	add	r3, r2
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b82      	ldr	r3, [pc, #520]	; (80004b4 <main+0x2f0>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b81      	ldr	r3, [pc, #516]	; (80004b8 <main+0x2f4>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	4413      	add	r3, r2
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b80      	ldr	r3, [pc, #512]	; (80004bc <main+0x2f8>)
 80002bc:	701a      	strb	r2, [r3, #0]
			sprintf((char*) bufferTx, "%d/%d/%d/%d/%d/%d\n", cb1, cb2, cb3, cb4,
 80002be:	4b7b      	ldr	r3, [pc, #492]	; (80004ac <main+0x2e8>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461e      	mov	r6, r3
 80002c4:	4b7a      	ldr	r3, [pc, #488]	; (80004b0 <main+0x2ec>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	469c      	mov	ip, r3
 80002ca:	4b7a      	ldr	r3, [pc, #488]	; (80004b4 <main+0x2f0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b79      	ldr	r3, [pc, #484]	; (80004b8 <main+0x2f4>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	4619      	mov	r1, r3
 80002d6:	4b7a      	ldr	r3, [pc, #488]	; (80004c0 <main+0x2fc>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	4618      	mov	r0, r3
 80002dc:	4b77      	ldr	r3, [pc, #476]	; (80004bc <main+0x2f8>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	9303      	str	r3, [sp, #12]
 80002e2:	9002      	str	r0, [sp, #8]
 80002e4:	9101      	str	r1, [sp, #4]
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	4663      	mov	r3, ip
 80002ea:	4632      	mov	r2, r6
 80002ec:	4975      	ldr	r1, [pc, #468]	; (80004c4 <main+0x300>)
 80002ee:	4876      	ldr	r0, [pc, #472]	; (80004c8 <main+0x304>)
 80002f0:	f003 f922 	bl	8003538 <siprintf>
					giatien, chotrong);
			HAL_UART_Transmit(&huart1, bufferTx, strlen((char*) bufferTx),
 80002f4:	4874      	ldr	r0, [pc, #464]	; (80004c8 <main+0x304>)
 80002f6:	f7ff ff29 	bl	800014c <strlen>
 80002fa:	4603      	mov	r3, r0
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000302:	4971      	ldr	r1, [pc, #452]	; (80004c8 <main+0x304>)
 8000304:	4871      	ldr	r0, [pc, #452]	; (80004cc <main+0x308>)
 8000306:	f002 ff65 	bl	80031d4 <HAL_UART_Transmit>
					1000);
		}
		if (status == 0) {
 800030a:	4b71      	ldr	r3, [pc, #452]	; (80004d0 <main+0x30c>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8124 	bne.w	800055c <main+0x398>
			if (HAL_GetTick() - t_prev >= 200) {
 8000314:	f000 ffae 	bl	8001274 <HAL_GetTick>
 8000318:	4603      	mov	r3, r0
 800031a:	4618      	mov	r0, r3
 800031c:	f04f 0100 	mov.w	r1, #0
 8000320:	4b5e      	ldr	r3, [pc, #376]	; (800049c <main+0x2d8>)
 8000322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000326:	ebb0 0802 	subs.w	r8, r0, r2
 800032a:	eb61 0903 	sbc.w	r9, r1, r3
 800032e:	f1b9 0f00 	cmp.w	r9, #0
 8000332:	bf08      	it	eq
 8000334:	f1b8 0fc8 	cmpeq.w	r8, #200	; 0xc8
 8000338:	f0c0 8110 	bcc.w	800055c <main+0x398>
				if (!TM_MFRC522_Request(PICC_REQIDL, CardID)) {
 800033c:	4965      	ldr	r1, [pc, #404]	; (80004d4 <main+0x310>)
 800033e:	2026      	movs	r0, #38	; 0x26
 8000340:	f000 fc5d 	bl	8000bfe <TM_MFRC522_Request>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 80ff 	bne.w	800054a <main+0x386>
					if (!TM_MFRC522_Anticoll(CardID)) {
 800034c:	4861      	ldr	r0, [pc, #388]	; (80004d4 <main+0x310>)
 800034e:	f000 fd4a 	bl	8000de6 <TM_MFRC522_Anticoll>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 80f8 	bne.w	800054a <main+0x386>
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	484d      	ldr	r0, [pc, #308]	; (8000498 <main+0x2d4>)
 8000362:	f001 fa10 	bl	8001786 <HAL_GPIO_WritePin>
						if (TM_MFRC522_Compare(CardID, MyID1) == MI_OK) {
 8000366:	495c      	ldr	r1, [pc, #368]	; (80004d8 <main+0x314>)
 8000368:	485a      	ldr	r0, [pc, #360]	; (80004d4 <main+0x310>)
 800036a:	f000 fb85 	bl	8000a78 <TM_MFRC522_Compare>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d127      	bne.n	80003c4 <main+0x200>
							if (TM_MFRC522_Compare(CardID, MyID1) == MI_OK) {
 8000374:	4958      	ldr	r1, [pc, #352]	; (80004d8 <main+0x314>)
 8000376:	4857      	ldr	r0, [pc, #348]	; (80004d4 <main+0x310>)
 8000378:	f000 fb7e 	bl	8000a78 <TM_MFRC522_Compare>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d120      	bne.n	80003c4 <main+0x200>
								the1++;
 8000382:	4b56      	ldr	r3, [pc, #344]	; (80004dc <main+0x318>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b54      	ldr	r3, [pc, #336]	; (80004dc <main+0x318>)
 800038c:	701a      	strb	r2, [r3, #0]
								if (the1 == 1) {
 800038e:	4b53      	ldr	r3, [pc, #332]	; (80004dc <main+0x318>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d105      	bne.n	80003a2 <main+0x1de>
									status = 1;
 8000396:	4b4e      	ldr	r3, [pc, #312]	; (80004d0 <main+0x30c>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
									servo_in_ON();
 800039c:	f7ff fede 	bl	800015c <servo_in_ON>
 80003a0:	e00a      	b.n	80003b8 <main+0x1f4>
								} else {
									giatien = 2;
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <main+0x2fc>)
 80003a4:	2202      	movs	r2, #2
 80003a6:	701a      	strb	r2, [r3, #0]
									status1 = 1;
 80003a8:	4b4d      	ldr	r3, [pc, #308]	; (80004e0 <main+0x31c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
									servo_out_ON();
 80003ae:	f7ff feef 	bl	8000190 <servo_out_ON>
									the1 = 0;
 80003b2:	4b4a      	ldr	r3, [pc, #296]	; (80004dc <main+0x318>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
								}
								tt = 1;
 80003b8:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <main+0x320>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
								num = 1;
 80003be:	4b4a      	ldr	r3, [pc, #296]	; (80004e8 <main+0x324>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
							}
						}
						if (TM_MFRC522_Compare(CardID, MyID2) == MI_OK) {
 80003c4:	4949      	ldr	r1, [pc, #292]	; (80004ec <main+0x328>)
 80003c6:	4843      	ldr	r0, [pc, #268]	; (80004d4 <main+0x310>)
 80003c8:	f000 fb56 	bl	8000a78 <TM_MFRC522_Compare>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d120      	bne.n	8000414 <main+0x250>
							the2++;
 80003d2:	4b47      	ldr	r3, [pc, #284]	; (80004f0 <main+0x32c>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b45      	ldr	r3, [pc, #276]	; (80004f0 <main+0x32c>)
 80003dc:	701a      	strb	r2, [r3, #0]
							if (the2 == 1) {
 80003de:	4b44      	ldr	r3, [pc, #272]	; (80004f0 <main+0x32c>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d105      	bne.n	80003f2 <main+0x22e>
								status = 1;
 80003e6:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <main+0x30c>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
								servo_in_ON();
 80003ec:	f7ff feb6 	bl	800015c <servo_in_ON>
 80003f0:	e00a      	b.n	8000408 <main+0x244>
							} else {
								giatien = 5;
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <main+0x2fc>)
 80003f4:	2205      	movs	r2, #5
 80003f6:	701a      	strb	r2, [r3, #0]
								status1 = 1;
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <main+0x31c>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
								the2 = 0;
 80003fe:	4b3c      	ldr	r3, [pc, #240]	; (80004f0 <main+0x32c>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
								servo_out_ON();
 8000404:	f7ff fec4 	bl	8000190 <servo_out_ON>
							}
							tt = 1;
 8000408:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <main+0x320>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
							num = 2;
 800040e:	4b36      	ldr	r3, [pc, #216]	; (80004e8 <main+0x324>)
 8000410:	2202      	movs	r2, #2
 8000412:	701a      	strb	r2, [r3, #0]
						}
						if (TM_MFRC522_Compare(CardID, MyID3) == MI_OK) {
 8000414:	4937      	ldr	r1, [pc, #220]	; (80004f4 <main+0x330>)
 8000416:	482f      	ldr	r0, [pc, #188]	; (80004d4 <main+0x310>)
 8000418:	f000 fb2e 	bl	8000a78 <TM_MFRC522_Compare>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d120      	bne.n	8000464 <main+0x2a0>

							the3++;
 8000422:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <main+0x334>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <main+0x334>)
 800042c:	701a      	strb	r2, [r3, #0]
							if (the3 == 1) {
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <main+0x334>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d105      	bne.n	8000442 <main+0x27e>
								status = 1;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <main+0x30c>)
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]
								servo_in_ON();
 800043c:	f7ff fe8e 	bl	800015c <servo_in_ON>
 8000440:	e00a      	b.n	8000458 <main+0x294>
							} else {
								giatien = 7;
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <main+0x2fc>)
 8000444:	2207      	movs	r2, #7
 8000446:	701a      	strb	r2, [r3, #0]
								status1 = 1;
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <main+0x31c>)
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
								the3 = 0;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <main+0x334>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
								servo_out_ON();
 8000454:	f7ff fe9c 	bl	8000190 <servo_out_ON>
							}
							tt = 1;
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <main+0x320>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
							num = 3;
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <main+0x324>)
 8000460:	2203      	movs	r2, #3
 8000462:	701a      	strb	r2, [r3, #0]
						}
						if (TM_MFRC522_Compare(CardID, MyID4) == MI_OK) {
 8000464:	4925      	ldr	r1, [pc, #148]	; (80004fc <main+0x338>)
 8000466:	481b      	ldr	r0, [pc, #108]	; (80004d4 <main+0x310>)
 8000468:	f000 fb06 	bl	8000a78 <TM_MFRC522_Compare>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d159      	bne.n	8000526 <main+0x362>
							the4++;
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <main+0x33c>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <main+0x33c>)
 800047c:	701a      	strb	r2, [r3, #0]
							if (the4 == 1) {
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <main+0x33c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d13e      	bne.n	8000504 <main+0x340>
								status = 1;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <main+0x30c>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
								servo_in_ON();
 800048c:	f7ff fe66 	bl	800015c <servo_in_ON>
 8000490:	e043      	b.n	800051a <main+0x356>
 8000492:	bf00      	nop
 8000494:	200001e4 	.word	0x200001e4
 8000498:	40011000 	.word	0x40011000
 800049c:	20000128 	.word	0x20000128
 80004a0:	20000118 	.word	0x20000118
 80004a4:	20000108 	.word	0x20000108
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	20000131 	.word	0x20000131
 80004b0:	20000184 	.word	0x20000184
 80004b4:	20000111 	.word	0x20000111
 80004b8:	20000125 	.word	0x20000125
 80004bc:	2000017f 	.word	0x2000017f
 80004c0:	2000017c 	.word	0x2000017c
 80004c4:	08003dc4 	.word	0x08003dc4
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000134 	.word	0x20000134
 80004d0:	2000024c 	.word	0x2000024c
 80004d4:	20000230 	.word	0x20000230
 80004d8:	20000000 	.word	0x20000000
 80004dc:	200000b8 	.word	0x200000b8
 80004e0:	20000130 	.word	0x20000130
 80004e4:	2000017d 	.word	0x2000017d
 80004e8:	2000017e 	.word	0x2000017e
 80004ec:	20000008 	.word	0x20000008
 80004f0:	20000110 	.word	0x20000110
 80004f4:	20000010 	.word	0x20000010
 80004f8:	2000022c 	.word	0x2000022c
 80004fc:	20000018 	.word	0x20000018
 8000500:	200001e0 	.word	0x200001e0
							} else {
								giatien = 2;
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <main+0x410>)
 8000506:	2202      	movs	r2, #2
 8000508:	701a      	strb	r2, [r3, #0]
								status1 = 1;
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <main+0x414>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
								the4 = 0;
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <main+0x418>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
								servo_out_ON();
 8000516:	f7ff fe3b 	bl	8000190 <servo_out_ON>
							}
							tt = 1;
 800051a:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <main+0x41c>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
							num = 4;
 8000520:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <main+0x420>)
 8000522:	2204      	movs	r2, #4
 8000524:	701a      	strb	r2, [r3, #0]
						}
						memset(CardID, 0, strlen((char*) CardID));
 8000526:	4830      	ldr	r0, [pc, #192]	; (80005e8 <main+0x424>)
 8000528:	f7ff fe10 	bl	800014c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	482d      	ldr	r0, [pc, #180]	; (80005e8 <main+0x424>)
 8000534:	f002 fff8 	bl	8003528 <memset>
						t_prev2 = HAL_GetTick();
 8000538:	f000 fe9c 	bl	8001274 <HAL_GetTick>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	4929      	ldr	r1, [pc, #164]	; (80005ec <main+0x428>)
 8000546:	e9c1 2300 	strd	r2, r3, [r1]
					}
				}
				t_prev = HAL_GetTick();
 800054a:	f000 fe93 	bl	8001274 <HAL_GetTick>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	f04f 0300 	mov.w	r3, #0
 8000556:	4926      	ldr	r1, [pc, #152]	; (80005f0 <main+0x42c>)
 8000558:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		//servo_off:
		if (tt == 1) {
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <main+0x41c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	f47f ae6c 	bne.w	800023e <main+0x7a>
			if (HAL_GetTick() - t_prev2 >= 3000) {
 8000566:	f000 fe85 	bl	8001274 <HAL_GetTick>
 800056a:	4603      	mov	r3, r0
 800056c:	4618      	mov	r0, r3
 800056e:	f04f 0100 	mov.w	r1, #0
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <main+0x428>)
 8000574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000578:	ebb0 0a02 	subs.w	sl, r0, r2
 800057c:	eb61 0b03 	sbc.w	fp, r1, r3
 8000580:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	455b      	cmp	r3, fp
 800058a:	bf08      	it	eq
 800058c:	4552      	cmpeq	r2, sl
 800058e:	f4bf ae56 	bcs.w	800023e <main+0x7a>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4816      	ldr	r0, [pc, #88]	; (80005f4 <main+0x430>)
 800059a:	f001 f8f4 	bl	8001786 <HAL_GPIO_WritePin>
				if (status == 1) {
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x434>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d105      	bne.n	80005b2 <main+0x3ee>
					servo_in_OFF();
 80005a6:	f7ff fde7 	bl	8000178 <servo_in_OFF>
					status = 0;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <main+0x434>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e00b      	b.n	80005ca <main+0x406>
				} else if (status1 == 1) {
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <main+0x414>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d107      	bne.n	80005ca <main+0x406>
					giatien = 0;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <main+0x410>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
					servo_out_OFF();
 80005c0:	f7ff fdf4 	bl	80001ac <servo_out_OFF>
					status1 = 0;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <main+0x414>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				}
				tt = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x41c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		cb1 = HAL_GPIO_ReadPin(CB1_GPIO_Port, CB1_Pin);
 80005d0:	e635      	b.n	800023e <main+0x7a>
 80005d2:	bf00      	nop
 80005d4:	2000017c 	.word	0x2000017c
 80005d8:	20000130 	.word	0x20000130
 80005dc:	200001e0 	.word	0x200001e0
 80005e0:	2000017d 	.word	0x2000017d
 80005e4:	2000017e 	.word	0x2000017e
 80005e8:	20000230 	.word	0x20000230
 80005ec:	20000118 	.word	0x20000118
 80005f0:	20000128 	.word	0x20000128
 80005f4:	40011000 	.word	0x40011000
 80005f8:	2000024c 	.word	0x2000024c

080005fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 ff8c 	bl	8003528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f8b8 	bl	80017b8 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x56>
		Error_Handler();
 800064e:	f000 f9c1 	bl	80009d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fb23 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x80>
		Error_Handler();
 8000678:	f000 f9ac 	bl	80009d4 <Error_Handler>
	}
}
 800067c:	bf00      	nop
 800067e:	3740      	adds	r7, #64	; 0x40
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_SPI1_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_SPI1_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000694:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d0:	220a      	movs	r2, #10
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d6:	f001 fc7d 	bl	8001fd4 <HAL_SPI_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80006e0:	f000 f978 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000188 	.word	0x20000188
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000720:	4b32      	ldr	r3, [pc, #200]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000726:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16 - 1;
 8000728:	4b30      	ldr	r3, [pc, #192]	; (80007ec <MX_TIM2_Init+0xfc>)
 800072a:	220f      	movs	r2, #15
 800072c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000736:	f242 720f 	movw	r2, #9999	; 0x270f
 800073a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_TIM2_Init+0xfc>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <MX_TIM2_Init+0xfc>)
 800074a:	f001 ff1d 	bl	8002588 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000754:	f000 f93e 	bl	80009d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800075e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000762:	4619      	mov	r1, r3
 8000764:	4821      	ldr	r0, [pc, #132]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000766:	f002 f91b 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000770:	f000 f930 	bl	80009d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000776:	f001 ff56 	bl	8002626 <HAL_TIM_PWM_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000780:	f000 f928 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4619      	mov	r1, r3
 8000792:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_TIM2_Init+0xfc>)
 8000794:	f002 fc70 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800079e:	f000 f919 	bl	80009d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a2:	2360      	movs	r3, #96	; 0x60
 80007a4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2204      	movs	r2, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_TIM2_Init+0xfc>)
 80007ba:	f002 f82f 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80007c4:	f000 f906 	bl	80009d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	220c      	movs	r2, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <MX_TIM2_Init+0xfc>)
 80007d0:	f002 f824 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80007da:	f000 f8fb 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <MX_TIM2_Init+0xfc>)
 80007e0:	f000 fbea 	bl	8000fb8 <HAL_TIM_MspPostInit>

}
 80007e4:	bf00      	nop
 80007e6:	3738      	adds	r7, #56	; 0x38
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200001e4 	.word	0x200001e4

080007f0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM4_Init+0x94>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_TIM4_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM4_Init+0x94>)
 8000814:	220f      	movs	r2, #15
 8000816:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM4_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000 - 1;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM4_Init+0x94>)
 8000820:	f242 720f 	movw	r2, #9999	; 0x270f
 8000824:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM4_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <MX_TIM4_Init+0x94>)
 8000834:	f001 fea8 	bl	8002588 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM4_Init+0x52>
		Error_Handler();
 800083e:	f000 f8c9 	bl	80009d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM4_Init+0x94>)
 8000850:	f002 f8a6 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM4_Init+0x6e>
		Error_Handler();
 800085a:	f000 f8bb 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM4_Init+0x94>)
 800086c:	f002 fc04 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000876:	f000 f8ad 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000bc 	.word	0x200000bc
 8000888:	40000800 	.word	0x40000800

0800088c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800089c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f002 fc36 	bl	8003134 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80008ce:	f000 f881 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000134 	.word	0x20000134
 80008dc:	40013800 	.word	0x40013800

080008e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0xe4>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <MX_GPIO_Init+0xe4>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000912:	f043 0320 	orr.w	r3, r3, #32
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0320 	and.w	r3, r3, #32
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800095c:	f000 ff13 	bl	8001786 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <MX_GPIO_Init+0xec>)
 8000966:	f000 ff0e 	bl	8001786 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000984:	f000 fd64 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_Pin */
	GPIO_InitStruct.Pin = SS_Pin;
 8000988:	2310      	movs	r3, #16
 800098a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xec>)
 80009a0:	f000 fd56 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pins : CB4_Pin CB3_Pin CB2_Pin CB1_Pin */
	GPIO_InitStruct.Pin = CB4_Pin | CB3_Pin | CB2_Pin | CB1_Pin;
 80009a4:	23f0      	movs	r3, #240	; 0xf0
 80009a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_GPIO_Init+0xf0>)
 80009b8:	f000 fd4a 	bl	8001450 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40010800 	.word	0x40010800
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m; 
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 80009ee:	bf00      	nop
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <TM_SPI_Send+0x4c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d1f8      	bne.n	80009f0 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	f107 010c 	add.w	r1, r7, #12
 8000a06:	230a      	movs	r3, #10
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <TM_SPI_Send+0x4c>)
 8000a0e:	f001 fb65 	bl	80020dc <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8000a12:	bf00      	nop
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <TM_SPI_Send+0x4c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	2b80      	cmp	r3, #128	; 0x80
 8000a20:	d0f8      	beq.n	8000a14 <TM_SPI_Send+0x34>
	return data_re[0];
 8000a22:	7a3b      	ldrb	r3, [r7, #8]
	
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000188 	.word	0x20000188

08000a30 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8000a34:	f000 f8db 	bl	8000bee <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000a38:	218d      	movs	r1, #141	; 0x8d
 8000a3a:	202a      	movs	r0, #42	; 0x2a
 8000a3c:	f000 f83c 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000a40:	213e      	movs	r1, #62	; 0x3e
 8000a42:	202b      	movs	r0, #43	; 0x2b
 8000a44:	f000 f838 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000a48:	211e      	movs	r1, #30
 8000a4a:	202d      	movs	r0, #45	; 0x2d
 8000a4c:	f000 f834 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	202c      	movs	r0, #44	; 0x2c
 8000a54:	f000 f830 	bl	8000ab8 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8000a58:	2170      	movs	r1, #112	; 0x70
 8000a5a:	2026      	movs	r0, #38	; 0x26
 8000a5c:	f000 f82c 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2015      	movs	r0, #21
 8000a64:	f000 f828 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000a68:	213d      	movs	r1, #61	; 0x3d
 8000a6a:	2011      	movs	r0, #17
 8000a6c:	f000 f824 	bl	8000ab8 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8000a70:	f000 f8a8 	bl	8000bc4 <TM_MFRC522_AntennaOn>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <TM_MFRC522_Compare>:
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
	return status;
}

TM_MFRC522_Status_t TM_MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 1; i < 5; i++) {
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e00e      	b.n	8000aa6 <TM_MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) {
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	440b      	add	r3, r1
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d001      	beq.n	8000aa0 <TM_MFRC522_Compare+0x28>
			return MI_ERR;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e006      	b.n	8000aae <TM_MFRC522_Compare+0x36>
	for (i = 1; i < 5; i++) {
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d9ed      	bls.n	8000a88 <TM_MFRC522_Compare+0x10>
		}
	}
	return MI_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <TM_MFRC522_WriteRegister>:


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <TM_MFRC522_WriteRegister+0x48>)
 8000ace:	f000 fe5a 	bl	8001786 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff7e 	bl	80009e0 <TM_SPI_Send>
	//Send data	
	TM_SPI_Send(val);
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff7a 	bl	80009e0 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <TM_MFRC522_WriteRegister+0x48>)
 8000af2:	f000 fe48 	bl	8001786 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010800 	.word	0x40010800

08000b04 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2110      	movs	r1, #16
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <TM_MFRC522_ReadRegister+0x4c>)
 8000b14:	f000 fe37 	bl	8001786 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);	
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff57 	bl	80009e0 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff54 	bl	80009e0 <TM_SPI_Send>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <TM_MFRC522_ReadRegister+0x4c>)
 8000b42:	f000 fe20 	bl	8001786 <HAL_GPIO_WritePin>

	return val;	
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800

08000b54 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffcc 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff9c 	bl	8000ab8 <TM_MFRC522_WriteRegister>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffb2 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b25a      	sxtb	r2, r3
 8000ba4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff7e 	bl	8000ab8 <TM_MFRC522_WriteRegister>
} 
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000bca:	2014      	movs	r0, #20
 8000bcc:	f7ff ff9a 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000bde:	2103      	movs	r1, #3
 8000be0:	2014      	movs	r0, #20
 8000be2:	f7ff ffb7 	bl	8000b54 <TM_MFRC522_SetBitMask>
	}
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff ff5f 	bl	8000ab8 <TM_MFRC522_WriteRegister>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af02      	add	r7, sp, #8
 8000c04:	4603      	mov	r3, r0
 8000c06:	6039      	str	r1, [r7, #0]
 8000c08:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000c0a:	2107      	movs	r1, #7
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f7ff ff53 	bl	8000ab8 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2201      	movs	r2, #1
 8000c22:	6839      	ldr	r1, [r7, #0]
 8000c24:	200c      	movs	r0, #12
 8000c26:	f000 f80f 	bl	8000c48 <TM_MFRC522_ToCard>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {    
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <TM_MFRC522_Request+0x3c>
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d001      	beq.n	8000c3e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	4613      	mov	r3, r2
 8000c58:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	d006      	beq.n	8000c7a <TM_MFRC522_ToCard+0x32>
 8000c6c:	2b0e      	cmp	r3, #14
 8000c6e:	d109      	bne.n	8000c84 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000c70:	2312      	movs	r3, #18
 8000c72:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000c74:	2310      	movs	r3, #16
 8000c76:	757b      	strb	r3, [r7, #21]
			break;
 8000c78:	e005      	b.n	8000c86 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000c7a:	2377      	movs	r3, #119	; 0x77
 8000c7c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000c7e:	2330      	movs	r3, #48	; 0x30
 8000c80:	757b      	strb	r3, [r7, #21]
			break;
 8000c82:	e000      	b.n	8000c86 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000c84:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000c86:	7dbb      	ldrb	r3, [r7, #22]
 8000c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff ff11 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f7ff ff75 	bl	8000b88 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f7ff ff57 	bl	8000b54 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff ff05 	bl	8000ab8 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8000cae:	2300      	movs	r3, #0
 8000cb0:	827b      	strh	r3, [r7, #18]
 8000cb2:	e00a      	b.n	8000cca <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000cb4:	8a7b      	ldrh	r3, [r7, #18]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2009      	movs	r0, #9
 8000cc0:	f7ff fefa 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000cc4:	8a7b      	ldrh	r3, [r7, #18]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	827b      	strh	r3, [r7, #18]
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3ef      	bcc.n	8000cb4 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff feed 	bl	8000ab8 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b0c      	cmp	r3, #12
 8000ce2:	d103      	bne.n	8000cec <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	200d      	movs	r0, #13
 8000ce8:	f7ff ff34 	bl	8000b54 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000cec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cf0:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f7ff ff06 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	753b      	strb	r3, [r7, #20]
		i--;
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000d02:	8a7b      	ldrh	r3, [r7, #18]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <TM_MFRC522_ToCard+0xd6>
 8000d08:	7d3b      	ldrb	r3, [r7, #20]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <TM_MFRC522_ToCard+0xd6>
 8000d12:	7d3a      	ldrb	r2, [r7, #20]
 8000d14:	7d7b      	ldrb	r3, [r7, #21]
 8000d16:	4013      	ands	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0e9      	beq.n	8000cf2 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	200d      	movs	r0, #13
 8000d22:	f7ff ff31 	bl	8000b88 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000d26:	8a7b      	ldrh	r3, [r7, #18]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d057      	beq.n	8000ddc <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000d2c:	2006      	movs	r0, #6
 8000d2e:	f7ff fee9 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f003 031b 	and.w	r3, r3, #27
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14d      	bne.n	8000dd8 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000d40:	7d3a      	ldrb	r2, [r7, #20]
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	4013      	ands	r3, r2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000d50:	2301      	movs	r3, #1
 8000d52:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	d140      	bne.n	8000ddc <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f7ff fed2 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000d60:	4603      	mov	r3, r0
 8000d62:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000d64:	200c      	movs	r0, #12
 8000d66:	f7ff fecd 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000d72:	7c7b      	ldrb	r3, [r7, #17]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00b      	beq.n	8000d90 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000d78:	7d3b      	ldrb	r3, [r7, #20]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	7c7b      	ldrb	r3, [r7, #17]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	801a      	strh	r2, [r3, #0]
 8000d8e:	e005      	b.n	8000d9c <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000d9c:	7d3b      	ldrb	r3, [r7, #20]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000da2:	2301      	movs	r3, #1
 8000da4:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000da6:	7d3b      	ldrb	r3, [r7, #20]
 8000da8:	2b10      	cmp	r3, #16
 8000daa:	d901      	bls.n	8000db0 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000dac:	2310      	movs	r3, #16
 8000dae:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000db0:	2300      	movs	r3, #0
 8000db2:	827b      	strh	r3, [r7, #18]
 8000db4:	e00a      	b.n	8000dcc <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000db6:	8a7b      	ldrh	r3, [r7, #18]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	18d4      	adds	r4, r2, r3
 8000dbc:	2009      	movs	r0, #9
 8000dbe:	f7ff fea1 	bl	8000b04 <TM_MFRC522_ReadRegister>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000dc6:	8a7b      	ldrh	r3, [r7, #18]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	827b      	strh	r3, [r7, #18]
 8000dcc:	7d3b      	ldrb	r3, [r7, #20]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	8a7a      	ldrh	r2, [r7, #18]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3ef      	bcc.n	8000db6 <TM_MFRC522_ToCard+0x16e>
 8000dd6:	e001      	b.n	8000ddc <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000dd8:	2302      	movs	r3, #2
 8000dda:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}

08000de6 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000df2:	2100      	movs	r1, #0
 8000df4:	200d      	movs	r0, #13
 8000df6:	f7ff fe5f 	bl	8000ab8 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2293      	movs	r2, #147	; 0x93
 8000dfe:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	2220      	movs	r2, #32
 8000e06:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000e08:	f107 030a 	add.w	r3, r7, #10
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2202      	movs	r2, #2
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	200c      	movs	r0, #12
 8000e16:	f7ff ff17 	bl	8000c48 <TM_MFRC522_ToCard>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d118      	bne.n	8000e56 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8000e24:	2300      	movs	r3, #0
 8000e26:	73bb      	strb	r3, [r7, #14]
 8000e28:	e009      	b.n	8000e3e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	4053      	eors	r3, r2
 8000e36:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73bb      	strb	r3, [r7, #14]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d9f2      	bls.n	8000e2a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	7b7a      	ldrb	r2, [r7, #13]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d001      	beq.n	8000e56 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8000e52:	2302      	movs	r3, #2
 8000e54:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <HAL_SPI_MspInit+0x88>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d12f      	bne.n	8000f44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000f28:	f000 fa92 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f2c:	2340      	movs	r3, #64	; 0x40
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000f40:	f000 fa86 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d10c      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f82:	e010      	b.n	8000fa6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_TIM_Base_MspInit+0x58>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd6:	d117      	bne.n	8001008 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_MspPostInit+0x58>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <HAL_TIM_MspPostInit+0x58>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_MspPostInit+0x58>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <HAL_TIM_MspPostInit+0x5c>)
 8001004:	f000 fa24 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	40010800 	.word	0x40010800

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_UART_MspInit+0x8c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d131      	bne.n	800109c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0x90>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_UART_MspInit+0x90>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0x90>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x90>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_UART_MspInit+0x90>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_UART_MspInit+0x90>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <HAL_UART_MspInit+0x94>)
 800107e:	f000 f9e7 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_MspInit+0x94>)
 8001098:	f000 f9da 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010800 	.word	0x40010800

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 f8ab 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f002 f9d0 	bl	80034d4 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20005000 	.word	0x20005000
 8001160:	00000400 	.word	0x00000400
 8001164:	200000ac 	.word	0x200000ac
 8001168:	20000268 	.word	0x20000268

0800116c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff fff8 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001194:	4c09      	ldr	r4, [pc, #36]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f002 f99d 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff f80d 	bl	80001c4 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011b4:	08003e40 	.word	0x08003e40
  ldr r2, =_sbss
 80011b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011bc:	20000264 	.word	0x20000264

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f907 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe3e 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f911 	bl	8001436 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f8e7 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000020 	.word	0x20000020
 8001248:	20000028 	.word	0x20000028
 800124c:	20000024 	.word	0x20000024

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000028 	.word	0x20000028
 8001270:	20000250 	.word	0x20000250

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000250 	.word	0x20000250

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff90 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff49 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff5e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffb0 	bl	80013a4 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e169      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8158 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_GPIO_Init+0x2b4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80b1 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2bc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a40      	ldr	r2, [pc, #256]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e0>
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001630:	2304      	movs	r3, #4
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 800163c:	2300      	movs	r3, #0
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164e:	492f      	ldr	r1, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2bc>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	492c      	ldr	r1, [pc, #176]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4928      	ldr	r1, [pc, #160]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d021      	beq.n	8001724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x2e2>
 80016ee:	bf00      	nop
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10310000 	.word	0x10310000
 80016f8:	10220000 	.word	0x10220000
 80016fc:	10210000 	.word	0x10210000
 8001700:	10120000 	.word	0x10120000
 8001704:	10110000 	.word	0x10110000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_GPIO_Init+0x304>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <HAL_GPIO_Init+0x304>)
 800172e:	4013      	ands	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae8e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	372c      	adds	r7, #44	; 0x2c
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]
 8001792:	4613      	mov	r3, r2
 8001794:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001796:	787b      	ldrb	r3, [r7, #1]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179c:	887a      	ldrh	r2, [r7, #2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e26c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8087 	beq.w	80018e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d8:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d00c      	beq.n	80017fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e4:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d112      	bne.n	8001816 <HAL_RCC_OscConfig+0x5e>
 80017f0:	4b8c      	ldr	r3, [pc, #560]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d10b      	bne.n	8001816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fe:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d06c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x12c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d168      	bne.n	80018e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e246      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x76>
 8001820:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7f      	ldr	r2, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e02e      	b.n	800188c <HAL_RCC_OscConfig+0xd4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7a      	ldr	r2, [pc, #488]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a77      	ldr	r2, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e01d      	b.n	800188c <HAL_RCC_OscConfig+0xd4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0xbc>
 800185a:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a71      	ldr	r2, [pc, #452]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0xd4>
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a67      	ldr	r2, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fcee 	bl	8001274 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fcea 	bl	8001274 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1fa      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0xe4>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fcda 	bl	8001274 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fcd6 	bl	8001274 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1e6      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x10c>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018fe:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b08      	cmp	r3, #8
 8001908:	d11c      	bne.n	8001944 <HAL_RCC_OscConfig+0x18c>
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x176>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1ba      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4939      	ldr	r1, [pc, #228]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	e03a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <HAL_RCC_OscConfig+0x270>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fc8f 	bl	8001274 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fc8b 	bl	8001274 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e19b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4927      	ldr	r1, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_RCC_OscConfig+0x270>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fc6e 	bl	8001274 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fc6a 	bl	8001274 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e17a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03a      	beq.n	8001a3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d019      	beq.n	8001a02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff fc4e 	bl	8001274 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc4a 	bl	8001274 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e15a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f000 facc 	bl	8001f98 <RCC_Delay>
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fc34 	bl	8001274 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0e:	e00f      	b.n	8001a30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc30 	bl	8001274 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d908      	bls.n	8001a30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e140      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	42420000 	.word	0x42420000
 8001a2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	4b9e      	ldr	r3, [pc, #632]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e9      	bne.n	8001a10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80a6 	beq.w	8001b96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b97      	ldr	r3, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10d      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b94      	ldr	r3, [pc, #592]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a93      	ldr	r2, [pc, #588]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b91      	ldr	r3, [pc, #580]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a8a      	ldr	r2, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fbf1 	bl	8001274 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fbed 	bl	8001274 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0fd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <HAL_RCC_OscConfig+0x4f8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x312>
 8001abc:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e02d      	b.n	8001b26 <HAL_RCC_OscConfig+0x36e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x334>
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a75      	ldr	r2, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a72      	ldr	r2, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	e01c      	b.n	8001b26 <HAL_RCC_OscConfig+0x36e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x356>
 8001af4:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6c      	ldr	r2, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a69      	ldr	r2, [pc, #420]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0x36e>
 8001b0e:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a63      	ldr	r2, [pc, #396]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d015      	beq.n	8001b5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fba1 	bl	8001274 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fb9d 	bl	8001274 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0ab      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ee      	beq.n	8001b36 <HAL_RCC_OscConfig+0x37e>
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fb8b 	bl	8001274 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fb87 	bl	8001274 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e095      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ee      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8081 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d061      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d146      	bne.n	8001c42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_RCC_OscConfig+0x4fc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fb5b 	bl	8001274 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff fb57 	bl	8001274 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e067      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bea:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	492d      	ldr	r1, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a19      	ldr	r1, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	4927      	ldr	r1, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x4fc>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fb2b 	bl	8001274 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff fb27 	bl	8001274 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e037      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x46a>
 8001c40:	e02f      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_RCC_OscConfig+0x4fc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fb14 	bl	8001274 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff fb10 	bl	8001274 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e020      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x498>
 8001c6e:	e018      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e013      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42420060 	.word	0x42420060

08001cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d0      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4965      	ldr	r1, [pc, #404]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	494d      	ldr	r1, [pc, #308]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d040      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e073      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06b      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4936      	ldr	r1, [pc, #216]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff fa64 	bl	8001274 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff fa60 	bl	8001274 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e053      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d210      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e032      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490e      	ldr	r1, [pc, #56]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e46:	f000 f821 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490a      	ldr	r1, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1cc>)
 8001e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1d0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f9c2 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08003dd8 	.word	0x08003dd8
 8001e84:	20000020 	.word	0x20000020
 8001e88:	20000024 	.word	0x20000024

08001e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x30>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eba:	e027      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	613b      	str	r3, [r7, #16]
      break;
 8001ec0:	e027      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0c5b      	lsrs	r3, r3, #17
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eee:	fb02 f203 	mul.w	r2, r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e004      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	613b      	str	r3, [r7, #16]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	693b      	ldr	r3, [r7, #16]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	007a1200 	.word	0x007a1200
 8001f28:	08003df0 	.word	0x08003df0
 8001f2c:	08003e00 	.word	0x08003e00
 8001f30:	003d0900 	.word	0x003d0900

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000020 	.word	0x20000020

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff2 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08003de8 	.word	0x08003de8

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08003de8 	.word	0x08003de8

08001f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <RCC_Delay+0x34>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <RCC_Delay+0x38>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fb4:	bf00      	nop
  }
  while (Delay --);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <RCC_Delay+0x1c>
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000020 	.word	0x20000020
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e076      	b.n	80020d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ff6:	d009      	beq.n	800200c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
 8001ffe:	e005      	b.n	800200c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe ff4c 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	ea42 0103 	orr.w	r1, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	0c1a      	lsrs	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f002 0204 	and.w	r2, r2, #4
 80020b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020ea:	2301      	movs	r3, #1
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_SPI_TransmitReceive+0x26>
 80020fe:	2302      	movs	r3, #2
 8002100:	e198      	b.n	8002434 <HAL_SPI_TransmitReceive+0x358>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800210a:	f7ff f8b3 	bl	8001274 <HAL_GetTick>
 800210e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002128:	2b01      	cmp	r3, #1
 800212a:	d00f      	beq.n	800214c <HAL_SPI_TransmitReceive+0x70>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002132:	d107      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x68>
 800213c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002140:	2b04      	cmp	r3, #4
 8002142:	d003      	beq.n	800214c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002144:	2302      	movs	r3, #2
 8002146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800214a:	e16d      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_SPI_TransmitReceive+0x82>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_TransmitReceive+0x82>
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002164:	e160      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b04      	cmp	r3, #4
 8002170:	d003      	beq.n	800217a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d007      	beq.n	80021ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d17c      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x10a>
 80021e0:	8b7b      	ldrh	r3, [r7, #26]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d16a      	bne.n	80022bc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	1c9a      	adds	r2, r3, #2
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800220a:	e057      	b.n	80022bc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b02      	cmp	r3, #2
 8002218:	d11b      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x176>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d016      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x176>
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d113      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	1c9a      	adds	r2, r3, #2
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d119      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x1b8>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	b292      	uxth	r2, r2
 8002276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	1c9a      	adds	r2, r3, #2
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002290:	2301      	movs	r3, #1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002294:	f7fe ffee 	bl	8001274 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d80b      	bhi.n	80022bc <HAL_SPI_TransmitReceive+0x1e0>
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d007      	beq.n	80022bc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80022ba:	e0b5      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1a2      	bne.n	800220c <HAL_SPI_TransmitReceive+0x130>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d19d      	bne.n	800220c <HAL_SPI_TransmitReceive+0x130>
 80022d0:	e080      	b.n	80023d4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x204>
 80022da:	8b7b      	ldrh	r3, [r7, #26]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d16f      	bne.n	80023c0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002306:	e05b      	b.n	80023c0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11c      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x274>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x274>
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d114      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d119      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x2b6>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800238e:	2301      	movs	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002392:	f7fe ff6f 	bl	8001274 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800239e:	429a      	cmp	r2, r3
 80023a0:	d803      	bhi.n	80023aa <HAL_SPI_TransmitReceive+0x2ce>
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d102      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x2d4>
 80023aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80023be:	e033      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d19e      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x22c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d199      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f8b7 	bl	800254c <SPI_EndRxTxTransaction>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023f0:	e01a      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10a      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800241e:	e003      	b.n	8002428 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002434:	4618      	mov	r0, r3
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800244c:	f7fe ff12 	bl	8001274 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800245c:	f7fe ff0a 	bl	8001274 <HAL_GetTick>
 8002460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	0d1b      	lsrs	r3, r3, #20
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002472:	e054      	b.n	800251e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d050      	beq.n	800251e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800247c:	f7fe fefa 	bl	8001274 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	d902      	bls.n	8002492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d13d      	bne.n	800250e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024aa:	d111      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b4:	d004      	beq.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024be:	d107      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d8:	d10f      	bne.n	80024fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e017      	b.n	800253e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4013      	ands	r3, r2
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	429a      	cmp	r2, r3
 800253a:	d19b      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000020 	.word	0x20000020

0800254c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7ff ff6a 	bl	800243c <SPI_WaitFlagStateUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e000      	b.n	8002580 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e041      	b.n	800261e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fcd2 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fab2 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e041      	b.n	80026bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f839 	bl	80026c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f000 fa63 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_TIM_PWM_Start+0x24>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e022      	b.n	8002742 <HAL_TIM_PWM_Start+0x6a>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d109      	bne.n	8002716 <HAL_TIM_PWM_Start+0x3e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	e015      	b.n	8002742 <HAL_TIM_PWM_Start+0x6a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d109      	bne.n	8002730 <HAL_TIM_PWM_Start+0x58>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e008      	b.n	8002742 <HAL_TIM_PWM_Start+0x6a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e05e      	b.n	8002808 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_TIM_PWM_Start+0x82>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002758:	e013      	b.n	8002782 <HAL_TIM_PWM_Start+0xaa>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0x92>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002768:	e00b      	b.n	8002782 <HAL_TIM_PWM_Start+0xaa>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0xa2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002778:	e003      	b.n	8002782 <HAL_TIM_PWM_Start+0xaa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fc50 	bl	8003030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_TIM_PWM_Start+0x138>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d107      	bne.n	80027aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_PWM_Start+0x138>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00e      	beq.n	80027d2 <HAL_TIM_PWM_Start+0xfa>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027bc:	d009      	beq.n	80027d2 <HAL_TIM_PWM_Start+0xfa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIM_PWM_Start+0x13c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_TIM_PWM_Start+0xfa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_TIM_PWM_Start+0x140>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d010      	beq.n	8002806 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	e007      	b.n	8002806 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800

0800281c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002836:	2302      	movs	r3, #2
 8002838:	e0ae      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	f200 809f 	bhi.w	8002988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002885 	.word	0x08002885
 8002854:	08002989 	.word	0x08002989
 8002858:	08002989 	.word	0x08002989
 800285c:	08002989 	.word	0x08002989
 8002860:	080028c5 	.word	0x080028c5
 8002864:	08002989 	.word	0x08002989
 8002868:	08002989 	.word	0x08002989
 800286c:	08002989 	.word	0x08002989
 8002870:	08002907 	.word	0x08002907
 8002874:	08002989 	.word	0x08002989
 8002878:	08002989 	.word	0x08002989
 800287c:	08002989 	.word	0x08002989
 8002880:	08002947 	.word	0x08002947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f9b2 	bl	8002bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0208 	orr.w	r2, r2, #8
 800289e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6999      	ldr	r1, [r3, #24]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	619a      	str	r2, [r3, #24]
      break;
 80028c2:	e064      	b.n	800298e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f9f8 	bl	8002cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	021a      	lsls	r2, r3, #8
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	619a      	str	r2, [r3, #24]
      break;
 8002904:	e043      	b.n	800298e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fa41 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0208 	orr.w	r2, r2, #8
 8002920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0204 	bic.w	r2, r2, #4
 8002930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69d9      	ldr	r1, [r3, #28]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	61da      	str	r2, [r3, #28]
      break;
 8002944:	e023      	b.n	800298e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fa8b 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69d9      	ldr	r1, [r3, #28]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	021a      	lsls	r2, r3, #8
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	61da      	str	r2, [r3, #28]
      break;
 8002986:	e002      	b.n	800298e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	75fb      	strb	r3, [r7, #23]
      break;
 800298c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002996:	7dfb      	ldrb	r3, [r7, #23]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIM_ConfigClockSource+0x1c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0b4      	b.n	8002b26 <HAL_TIM_ConfigClockSource+0x186>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f4:	d03e      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xd4>
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	f200 8087 	bhi.w	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	f000 8086 	beq.w	8002b12 <HAL_TIM_ConfigClockSource+0x172>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d87f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b70      	cmp	r3, #112	; 0x70
 8002a0e:	d01a      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xa6>
 8002a10:	2b70      	cmp	r3, #112	; 0x70
 8002a12:	d87b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	d050      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x11a>
 8002a18:	2b60      	cmp	r3, #96	; 0x60
 8002a1a:	d877      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b50      	cmp	r3, #80	; 0x50
 8002a1e:	d03c      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xfa>
 8002a20:	2b50      	cmp	r3, #80	; 0x50
 8002a22:	d873      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d058      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x13a>
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d86f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b30      	cmp	r3, #48	; 0x30
 8002a2e:	d064      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a30:	2b30      	cmp	r3, #48	; 0x30
 8002a32:	d86b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d060      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d867      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d05a      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a44:	e062      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f000 facc 	bl	8002ff2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	609a      	str	r2, [r3, #8]
      break;
 8002a72:	e04f      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 fab5 	bl	8002ff2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a96:	609a      	str	r2, [r3, #8]
      break;
 8002a98:	e03c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fa2c 	bl	8002f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2150      	movs	r1, #80	; 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa83 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e02c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 fa4a 	bl	8002f60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2160      	movs	r1, #96	; 0x60
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa73 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e01c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 fa0c 	bl	8002f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fa63 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 fa5a 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002b0a:	e003      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <TIM_Base_SetConfig+0xb8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <TIM_Base_SetConfig+0x30>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d007      	beq.n	8002b60 <TIM_Base_SetConfig+0x30>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a26      	ldr	r2, [pc, #152]	; (8002bec <TIM_Base_SetConfig+0xbc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0x30>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <TIM_Base_SetConfig+0xc0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d108      	bne.n	8002b72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <TIM_Base_SetConfig+0xb8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_Base_SetConfig+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0x62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <TIM_Base_SetConfig+0xbc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0x62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <TIM_Base_SetConfig+0xc0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d108      	bne.n	8002ba4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <TIM_Base_SetConfig+0xb8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800

08002bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f023 0201 	bic.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <TIM_OC1_SetConfig+0xc8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0308 	bic.w	r3, r3, #8
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <TIM_OC1_SetConfig+0xc8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d111      	bne.n	8002c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 0210 	bic.w	r2, r3, #16
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0320 	bic.w	r3, r3, #32
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <TIM_OC2_SetConfig+0xd0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10d      	bne.n	8002d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <TIM_OC2_SetConfig+0xd0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d113      	bne.n	8002d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <TIM_OC4_SetConfig+0x98>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00

08002f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f023 0201 	bic.w	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f023 030a 	bic.w	r3, r3, #10
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0210 	bic.w	r2, r3, #16
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	031b      	lsls	r3, r3, #12
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f043 0307 	orr.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b087      	sub	sp, #28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800300c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2201      	movs	r2, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	43db      	mvns	r3, r3
 8003052:	401a      	ands	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e046      	b.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d009      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800

08003134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e042      	b.n	80031cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd ff5c 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f91d 	bl	80033b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d16d      	bne.n	80032d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Transmit+0x2c>
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e066      	b.n	80032d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2221      	movs	r2, #33	; 0x21
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003212:	f7fe f82f 	bl	8001274 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x6c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003248:	e02a      	b.n	80032a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f840 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e007      	b.n	8003292 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	3301      	adds	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1cf      	bne.n	800324a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f810 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b090      	sub	sp, #64	; 0x40
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ea:	e050      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d04c      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <UART_WaitOnFlagUntilTimeout+0x30>
 80032fa:	f7fd ffbb 	bl	8001274 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003306:	429a      	cmp	r2, r3
 8003308:	d241      	bcs.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800332a:	637a      	str	r2, [r7, #52]	; 0x34
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1e5      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	613b      	str	r3, [r7, #16]
   return(result);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3314      	adds	r3, #20
 800335c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335e:	623a      	str	r2, [r7, #32]
 8003360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	69f9      	ldr	r1, [r7, #28]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	61bb      	str	r3, [r7, #24]
   return(result);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1e5      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e00f      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d09f      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3740      	adds	r7, #64	; 0x40
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033f2:	f023 030c 	bic.w	r3, r3, #12
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <UART_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fda6 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	e002      	b.n	800342e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7fe fd8e 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 800342c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <UART_SetConfig+0x118>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	0119      	lsls	r1, r3, #4
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009a      	lsls	r2, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fbb2 f2f3 	udiv	r2, r2, r3
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <UART_SetConfig+0x118>)
 8003466:	fba3 0302 	umull	r0, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2064      	movs	r0, #100	; 0x64
 800346e:	fb00 f303 	mul.w	r3, r0, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	3332      	adds	r3, #50	; 0x32
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <UART_SetConfig+0x118>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003484:	4419      	add	r1, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <UART_SetConfig+0x118>)
 800349e:	fba3 0302 	umull	r0, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2064      	movs	r0, #100	; 0x64
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	440a      	add	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013800 	.word	0x40013800
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <__errno>:
 80034d4:	4b01      	ldr	r3, [pc, #4]	; (80034dc <__errno+0x8>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	2000002c 	.word	0x2000002c

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	2600      	movs	r6, #0
 80034e4:	4d0c      	ldr	r5, [pc, #48]	; (8003518 <__libc_init_array+0x38>)
 80034e6:	4c0d      	ldr	r4, [pc, #52]	; (800351c <__libc_init_array+0x3c>)
 80034e8:	1b64      	subs	r4, r4, r5
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	f000 fc5c 	bl	8003dac <_init>
 80034f4:	2600      	movs	r6, #0
 80034f6:	4d0a      	ldr	r5, [pc, #40]	; (8003520 <__libc_init_array+0x40>)
 80034f8:	4c0a      	ldr	r4, [pc, #40]	; (8003524 <__libc_init_array+0x44>)
 80034fa:	1b64      	subs	r4, r4, r5
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	08003e38 	.word	0x08003e38
 800351c:	08003e38 	.word	0x08003e38
 8003520:	08003e38 	.word	0x08003e38
 8003524:	08003e3c 	.word	0x08003e3c

08003528 <memset>:
 8003528:	4603      	mov	r3, r0
 800352a:	4402      	add	r2, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	d100      	bne.n	8003532 <memset+0xa>
 8003530:	4770      	bx	lr
 8003532:	f803 1b01 	strb.w	r1, [r3], #1
 8003536:	e7f9      	b.n	800352c <memset+0x4>

08003538 <siprintf>:
 8003538:	b40e      	push	{r1, r2, r3}
 800353a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800353e:	b500      	push	{lr}
 8003540:	b09c      	sub	sp, #112	; 0x70
 8003542:	ab1d      	add	r3, sp, #116	; 0x74
 8003544:	9002      	str	r0, [sp, #8]
 8003546:	9006      	str	r0, [sp, #24]
 8003548:	9107      	str	r1, [sp, #28]
 800354a:	9104      	str	r1, [sp, #16]
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <siprintf+0x38>)
 800354e:	4909      	ldr	r1, [pc, #36]	; (8003574 <siprintf+0x3c>)
 8003550:	f853 2b04 	ldr.w	r2, [r3], #4
 8003554:	9105      	str	r1, [sp, #20]
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	a902      	add	r1, sp, #8
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f000 f868 	bl	8003630 <_svfiprintf_r>
 8003560:	2200      	movs	r2, #0
 8003562:	9b02      	ldr	r3, [sp, #8]
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	b01c      	add	sp, #112	; 0x70
 8003568:	f85d eb04 	ldr.w	lr, [sp], #4
 800356c:	b003      	add	sp, #12
 800356e:	4770      	bx	lr
 8003570:	2000002c 	.word	0x2000002c
 8003574:	ffff0208 	.word	0xffff0208

08003578 <__ssputs_r>:
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	688e      	ldr	r6, [r1, #8]
 800357e:	4682      	mov	sl, r0
 8003580:	429e      	cmp	r6, r3
 8003582:	460c      	mov	r4, r1
 8003584:	4690      	mov	r8, r2
 8003586:	461f      	mov	r7, r3
 8003588:	d838      	bhi.n	80035fc <__ssputs_r+0x84>
 800358a:	898a      	ldrh	r2, [r1, #12]
 800358c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003590:	d032      	beq.n	80035f8 <__ssputs_r+0x80>
 8003592:	6825      	ldr	r5, [r4, #0]
 8003594:	6909      	ldr	r1, [r1, #16]
 8003596:	3301      	adds	r3, #1
 8003598:	eba5 0901 	sub.w	r9, r5, r1
 800359c:	6965      	ldr	r5, [r4, #20]
 800359e:	444b      	add	r3, r9
 80035a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035a8:	106d      	asrs	r5, r5, #1
 80035aa:	429d      	cmp	r5, r3
 80035ac:	bf38      	it	cc
 80035ae:	461d      	movcc	r5, r3
 80035b0:	0553      	lsls	r3, r2, #21
 80035b2:	d531      	bpl.n	8003618 <__ssputs_r+0xa0>
 80035b4:	4629      	mov	r1, r5
 80035b6:	f000 fb53 	bl	8003c60 <_malloc_r>
 80035ba:	4606      	mov	r6, r0
 80035bc:	b950      	cbnz	r0, 80035d4 <__ssputs_r+0x5c>
 80035be:	230c      	movs	r3, #12
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f8ca 3000 	str.w	r3, [sl]
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	464a      	mov	r2, r9
 80035d6:	6921      	ldr	r1, [r4, #16]
 80035d8:	f000 face 	bl	8003b78 <memcpy>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	6126      	str	r6, [r4, #16]
 80035ea:	444e      	add	r6, r9
 80035ec:	6026      	str	r6, [r4, #0]
 80035ee:	463e      	mov	r6, r7
 80035f0:	6165      	str	r5, [r4, #20]
 80035f2:	eba5 0509 	sub.w	r5, r5, r9
 80035f6:	60a5      	str	r5, [r4, #8]
 80035f8:	42be      	cmp	r6, r7
 80035fa:	d900      	bls.n	80035fe <__ssputs_r+0x86>
 80035fc:	463e      	mov	r6, r7
 80035fe:	4632      	mov	r2, r6
 8003600:	4641      	mov	r1, r8
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	f000 fac6 	bl	8003b94 <memmove>
 8003608:	68a3      	ldr	r3, [r4, #8]
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	1b9b      	subs	r3, r3, r6
 800360e:	4432      	add	r2, r6
 8003610:	2000      	movs	r0, #0
 8003612:	60a3      	str	r3, [r4, #8]
 8003614:	6022      	str	r2, [r4, #0]
 8003616:	e7db      	b.n	80035d0 <__ssputs_r+0x58>
 8003618:	462a      	mov	r2, r5
 800361a:	f000 fb7b 	bl	8003d14 <_realloc_r>
 800361e:	4606      	mov	r6, r0
 8003620:	2800      	cmp	r0, #0
 8003622:	d1e1      	bne.n	80035e8 <__ssputs_r+0x70>
 8003624:	4650      	mov	r0, sl
 8003626:	6921      	ldr	r1, [r4, #16]
 8003628:	f000 face 	bl	8003bc8 <_free_r>
 800362c:	e7c7      	b.n	80035be <__ssputs_r+0x46>
	...

08003630 <_svfiprintf_r>:
 8003630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003634:	4698      	mov	r8, r3
 8003636:	898b      	ldrh	r3, [r1, #12]
 8003638:	4607      	mov	r7, r0
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	460d      	mov	r5, r1
 800363e:	4614      	mov	r4, r2
 8003640:	b09d      	sub	sp, #116	; 0x74
 8003642:	d50e      	bpl.n	8003662 <_svfiprintf_r+0x32>
 8003644:	690b      	ldr	r3, [r1, #16]
 8003646:	b963      	cbnz	r3, 8003662 <_svfiprintf_r+0x32>
 8003648:	2140      	movs	r1, #64	; 0x40
 800364a:	f000 fb09 	bl	8003c60 <_malloc_r>
 800364e:	6028      	str	r0, [r5, #0]
 8003650:	6128      	str	r0, [r5, #16]
 8003652:	b920      	cbnz	r0, 800365e <_svfiprintf_r+0x2e>
 8003654:	230c      	movs	r3, #12
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	e0d1      	b.n	8003802 <_svfiprintf_r+0x1d2>
 800365e:	2340      	movs	r3, #64	; 0x40
 8003660:	616b      	str	r3, [r5, #20]
 8003662:	2300      	movs	r3, #0
 8003664:	9309      	str	r3, [sp, #36]	; 0x24
 8003666:	2320      	movs	r3, #32
 8003668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800366c:	2330      	movs	r3, #48	; 0x30
 800366e:	f04f 0901 	mov.w	r9, #1
 8003672:	f8cd 800c 	str.w	r8, [sp, #12]
 8003676:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800381c <_svfiprintf_r+0x1ec>
 800367a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800367e:	4623      	mov	r3, r4
 8003680:	469a      	mov	sl, r3
 8003682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003686:	b10a      	cbz	r2, 800368c <_svfiprintf_r+0x5c>
 8003688:	2a25      	cmp	r2, #37	; 0x25
 800368a:	d1f9      	bne.n	8003680 <_svfiprintf_r+0x50>
 800368c:	ebba 0b04 	subs.w	fp, sl, r4
 8003690:	d00b      	beq.n	80036aa <_svfiprintf_r+0x7a>
 8003692:	465b      	mov	r3, fp
 8003694:	4622      	mov	r2, r4
 8003696:	4629      	mov	r1, r5
 8003698:	4638      	mov	r0, r7
 800369a:	f7ff ff6d 	bl	8003578 <__ssputs_r>
 800369e:	3001      	adds	r0, #1
 80036a0:	f000 80aa 	beq.w	80037f8 <_svfiprintf_r+0x1c8>
 80036a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a6:	445a      	add	r2, fp
 80036a8:	9209      	str	r2, [sp, #36]	; 0x24
 80036aa:	f89a 3000 	ldrb.w	r3, [sl]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80a2 	beq.w	80037f8 <_svfiprintf_r+0x1c8>
 80036b4:	2300      	movs	r3, #0
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036be:	f10a 0a01 	add.w	sl, sl, #1
 80036c2:	9304      	str	r3, [sp, #16]
 80036c4:	9307      	str	r3, [sp, #28]
 80036c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ca:	931a      	str	r3, [sp, #104]	; 0x68
 80036cc:	4654      	mov	r4, sl
 80036ce:	2205      	movs	r2, #5
 80036d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d4:	4851      	ldr	r0, [pc, #324]	; (800381c <_svfiprintf_r+0x1ec>)
 80036d6:	f000 fa41 	bl	8003b5c <memchr>
 80036da:	9a04      	ldr	r2, [sp, #16]
 80036dc:	b9d8      	cbnz	r0, 8003716 <_svfiprintf_r+0xe6>
 80036de:	06d0      	lsls	r0, r2, #27
 80036e0:	bf44      	itt	mi
 80036e2:	2320      	movmi	r3, #32
 80036e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e8:	0711      	lsls	r1, r2, #28
 80036ea:	bf44      	itt	mi
 80036ec:	232b      	movmi	r3, #43	; 0x2b
 80036ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f2:	f89a 3000 	ldrb.w	r3, [sl]
 80036f6:	2b2a      	cmp	r3, #42	; 0x2a
 80036f8:	d015      	beq.n	8003726 <_svfiprintf_r+0xf6>
 80036fa:	4654      	mov	r4, sl
 80036fc:	2000      	movs	r0, #0
 80036fe:	f04f 0c0a 	mov.w	ip, #10
 8003702:	9a07      	ldr	r2, [sp, #28]
 8003704:	4621      	mov	r1, r4
 8003706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800370a:	3b30      	subs	r3, #48	; 0x30
 800370c:	2b09      	cmp	r3, #9
 800370e:	d94e      	bls.n	80037ae <_svfiprintf_r+0x17e>
 8003710:	b1b0      	cbz	r0, 8003740 <_svfiprintf_r+0x110>
 8003712:	9207      	str	r2, [sp, #28]
 8003714:	e014      	b.n	8003740 <_svfiprintf_r+0x110>
 8003716:	eba0 0308 	sub.w	r3, r0, r8
 800371a:	fa09 f303 	lsl.w	r3, r9, r3
 800371e:	4313      	orrs	r3, r2
 8003720:	46a2      	mov	sl, r4
 8003722:	9304      	str	r3, [sp, #16]
 8003724:	e7d2      	b.n	80036cc <_svfiprintf_r+0x9c>
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	1d19      	adds	r1, r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	9103      	str	r1, [sp, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfbb      	ittet	lt
 8003732:	425b      	neglt	r3, r3
 8003734:	f042 0202 	orrlt.w	r2, r2, #2
 8003738:	9307      	strge	r3, [sp, #28]
 800373a:	9307      	strlt	r3, [sp, #28]
 800373c:	bfb8      	it	lt
 800373e:	9204      	strlt	r2, [sp, #16]
 8003740:	7823      	ldrb	r3, [r4, #0]
 8003742:	2b2e      	cmp	r3, #46	; 0x2e
 8003744:	d10c      	bne.n	8003760 <_svfiprintf_r+0x130>
 8003746:	7863      	ldrb	r3, [r4, #1]
 8003748:	2b2a      	cmp	r3, #42	; 0x2a
 800374a:	d135      	bne.n	80037b8 <_svfiprintf_r+0x188>
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	3402      	adds	r4, #2
 8003750:	1d1a      	adds	r2, r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	9203      	str	r2, [sp, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfb8      	it	lt
 800375a:	f04f 33ff 	movlt.w	r3, #4294967295
 800375e:	9305      	str	r3, [sp, #20]
 8003760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800382c <_svfiprintf_r+0x1fc>
 8003764:	2203      	movs	r2, #3
 8003766:	4650      	mov	r0, sl
 8003768:	7821      	ldrb	r1, [r4, #0]
 800376a:	f000 f9f7 	bl	8003b5c <memchr>
 800376e:	b140      	cbz	r0, 8003782 <_svfiprintf_r+0x152>
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	eba0 000a 	sub.w	r0, r0, sl
 8003776:	fa03 f000 	lsl.w	r0, r3, r0
 800377a:	9b04      	ldr	r3, [sp, #16]
 800377c:	3401      	adds	r4, #1
 800377e:	4303      	orrs	r3, r0
 8003780:	9304      	str	r3, [sp, #16]
 8003782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003786:	2206      	movs	r2, #6
 8003788:	4825      	ldr	r0, [pc, #148]	; (8003820 <_svfiprintf_r+0x1f0>)
 800378a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800378e:	f000 f9e5 	bl	8003b5c <memchr>
 8003792:	2800      	cmp	r0, #0
 8003794:	d038      	beq.n	8003808 <_svfiprintf_r+0x1d8>
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <_svfiprintf_r+0x1f4>)
 8003798:	bb1b      	cbnz	r3, 80037e2 <_svfiprintf_r+0x1b2>
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	3307      	adds	r3, #7
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	3308      	adds	r3, #8
 80037a4:	9303      	str	r3, [sp, #12]
 80037a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a8:	4433      	add	r3, r6
 80037aa:	9309      	str	r3, [sp, #36]	; 0x24
 80037ac:	e767      	b.n	800367e <_svfiprintf_r+0x4e>
 80037ae:	460c      	mov	r4, r1
 80037b0:	2001      	movs	r0, #1
 80037b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b6:	e7a5      	b.n	8003704 <_svfiprintf_r+0xd4>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f04f 0c0a 	mov.w	ip, #10
 80037be:	4619      	mov	r1, r3
 80037c0:	3401      	adds	r4, #1
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	4620      	mov	r0, r4
 80037c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ca:	3a30      	subs	r2, #48	; 0x30
 80037cc:	2a09      	cmp	r2, #9
 80037ce:	d903      	bls.n	80037d8 <_svfiprintf_r+0x1a8>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0c5      	beq.n	8003760 <_svfiprintf_r+0x130>
 80037d4:	9105      	str	r1, [sp, #20]
 80037d6:	e7c3      	b.n	8003760 <_svfiprintf_r+0x130>
 80037d8:	4604      	mov	r4, r0
 80037da:	2301      	movs	r3, #1
 80037dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e0:	e7f0      	b.n	80037c4 <_svfiprintf_r+0x194>
 80037e2:	ab03      	add	r3, sp, #12
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	462a      	mov	r2, r5
 80037e8:	4638      	mov	r0, r7
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <_svfiprintf_r+0x1f8>)
 80037ec:	a904      	add	r1, sp, #16
 80037ee:	f3af 8000 	nop.w
 80037f2:	1c42      	adds	r2, r0, #1
 80037f4:	4606      	mov	r6, r0
 80037f6:	d1d6      	bne.n	80037a6 <_svfiprintf_r+0x176>
 80037f8:	89ab      	ldrh	r3, [r5, #12]
 80037fa:	065b      	lsls	r3, r3, #25
 80037fc:	f53f af2c 	bmi.w	8003658 <_svfiprintf_r+0x28>
 8003800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003802:	b01d      	add	sp, #116	; 0x74
 8003804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003808:	ab03      	add	r3, sp, #12
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	462a      	mov	r2, r5
 800380e:	4638      	mov	r0, r7
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <_svfiprintf_r+0x1f8>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	f000 f87c 	bl	8003910 <_printf_i>
 8003818:	e7eb      	b.n	80037f2 <_svfiprintf_r+0x1c2>
 800381a:	bf00      	nop
 800381c:	08003e02 	.word	0x08003e02
 8003820:	08003e0c 	.word	0x08003e0c
 8003824:	00000000 	.word	0x00000000
 8003828:	08003579 	.word	0x08003579
 800382c:	08003e08 	.word	0x08003e08

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4616      	mov	r6, r2
 8003836:	4699      	mov	r9, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	4607      	mov	r7, r0
 800383e:	4293      	cmp	r3, r2
 8003840:	bfb8      	it	lt
 8003842:	4613      	movlt	r3, r2
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800384a:	460c      	mov	r4, r1
 800384c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003850:	b10a      	cbz	r2, 8003856 <_printf_common+0x26>
 8003852:	3301      	adds	r3, #1
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0699      	lsls	r1, r3, #26
 800385a:	bf42      	ittt	mi
 800385c:	6833      	ldrmi	r3, [r6, #0]
 800385e:	3302      	addmi	r3, #2
 8003860:	6033      	strmi	r3, [r6, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f015 0506 	ands.w	r5, r5, #6
 8003868:	d106      	bne.n	8003878 <_printf_common+0x48>
 800386a:	f104 0a19 	add.w	sl, r4, #25
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	42ab      	cmp	r3, r5
 8003876:	dc28      	bgt.n	80038ca <_printf_common+0x9a>
 8003878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800387c:	1e13      	subs	r3, r2, #0
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	bf18      	it	ne
 8003882:	2301      	movne	r3, #1
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d42d      	bmi.n	80038e4 <_printf_common+0xb4>
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003890:	47c0      	blx	r8
 8003892:	3001      	adds	r0, #1
 8003894:	d020      	beq.n	80038d8 <_printf_common+0xa8>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	68e5      	ldr	r5, [r4, #12]
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf18      	it	ne
 80038a2:	2500      	movne	r5, #0
 80038a4:	6832      	ldr	r2, [r6, #0]
 80038a6:	f04f 0600 	mov.w	r6, #0
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	bf08      	it	eq
 80038ae:	1aad      	subeq	r5, r5, r2
 80038b0:	6922      	ldr	r2, [r4, #16]
 80038b2:	bf08      	it	eq
 80038b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bfc4      	itt	gt
 80038bc:	1a9b      	subgt	r3, r3, r2
 80038be:	18ed      	addgt	r5, r5, r3
 80038c0:	341a      	adds	r4, #26
 80038c2:	42b5      	cmp	r5, r6
 80038c4:	d11a      	bne.n	80038fc <_printf_common+0xcc>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e008      	b.n	80038dc <_printf_common+0xac>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4652      	mov	r2, sl
 80038ce:	4649      	mov	r1, r9
 80038d0:	4638      	mov	r0, r7
 80038d2:	47c0      	blx	r8
 80038d4:	3001      	adds	r0, #1
 80038d6:	d103      	bne.n	80038e0 <_printf_common+0xb0>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7c4      	b.n	800386e <_printf_common+0x3e>
 80038e4:	2030      	movs	r0, #48	; 0x30
 80038e6:	18e1      	adds	r1, r4, r3
 80038e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038f2:	4422      	add	r2, r4
 80038f4:	3302      	adds	r3, #2
 80038f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038fa:	e7c5      	b.n	8003888 <_printf_common+0x58>
 80038fc:	2301      	movs	r3, #1
 80038fe:	4622      	mov	r2, r4
 8003900:	4649      	mov	r1, r9
 8003902:	4638      	mov	r0, r7
 8003904:	47c0      	blx	r8
 8003906:	3001      	adds	r0, #1
 8003908:	d0e6      	beq.n	80038d8 <_printf_common+0xa8>
 800390a:	3601      	adds	r6, #1
 800390c:	e7d9      	b.n	80038c2 <_printf_common+0x92>
	...

08003910 <_printf_i>:
 8003910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	460c      	mov	r4, r1
 8003916:	7e27      	ldrb	r7, [r4, #24]
 8003918:	4691      	mov	r9, r2
 800391a:	2f78      	cmp	r7, #120	; 0x78
 800391c:	4680      	mov	r8, r0
 800391e:	469a      	mov	sl, r3
 8003920:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003926:	d807      	bhi.n	8003938 <_printf_i+0x28>
 8003928:	2f62      	cmp	r7, #98	; 0x62
 800392a:	d80a      	bhi.n	8003942 <_printf_i+0x32>
 800392c:	2f00      	cmp	r7, #0
 800392e:	f000 80d9 	beq.w	8003ae4 <_printf_i+0x1d4>
 8003932:	2f58      	cmp	r7, #88	; 0x58
 8003934:	f000 80a4 	beq.w	8003a80 <_printf_i+0x170>
 8003938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800393c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003940:	e03a      	b.n	80039b8 <_printf_i+0xa8>
 8003942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003946:	2b15      	cmp	r3, #21
 8003948:	d8f6      	bhi.n	8003938 <_printf_i+0x28>
 800394a:	a001      	add	r0, pc, #4	; (adr r0, 8003950 <_printf_i+0x40>)
 800394c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039bd 	.word	0x080039bd
 8003958:	08003939 	.word	0x08003939
 800395c:	08003939 	.word	0x08003939
 8003960:	08003939 	.word	0x08003939
 8003964:	08003939 	.word	0x08003939
 8003968:	080039bd 	.word	0x080039bd
 800396c:	08003939 	.word	0x08003939
 8003970:	08003939 	.word	0x08003939
 8003974:	08003939 	.word	0x08003939
 8003978:	08003939 	.word	0x08003939
 800397c:	08003acb 	.word	0x08003acb
 8003980:	080039ed 	.word	0x080039ed
 8003984:	08003aad 	.word	0x08003aad
 8003988:	08003939 	.word	0x08003939
 800398c:	08003939 	.word	0x08003939
 8003990:	08003aed 	.word	0x08003aed
 8003994:	08003939 	.word	0x08003939
 8003998:	080039ed 	.word	0x080039ed
 800399c:	08003939 	.word	0x08003939
 80039a0:	08003939 	.word	0x08003939
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	600a      	str	r2, [r1, #0]
 80039b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0a4      	b.n	8003b06 <_printf_i+0x1f6>
 80039bc:	6825      	ldr	r5, [r4, #0]
 80039be:	6808      	ldr	r0, [r1, #0]
 80039c0:	062e      	lsls	r6, r5, #24
 80039c2:	f100 0304 	add.w	r3, r0, #4
 80039c6:	d50a      	bpl.n	80039de <_printf_i+0xce>
 80039c8:	6805      	ldr	r5, [r0, #0]
 80039ca:	600b      	str	r3, [r1, #0]
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	da03      	bge.n	80039d8 <_printf_i+0xc8>
 80039d0:	232d      	movs	r3, #45	; 0x2d
 80039d2:	426d      	negs	r5, r5
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	230a      	movs	r3, #10
 80039da:	485e      	ldr	r0, [pc, #376]	; (8003b54 <_printf_i+0x244>)
 80039dc:	e019      	b.n	8003a12 <_printf_i+0x102>
 80039de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039e2:	6805      	ldr	r5, [r0, #0]
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	bf18      	it	ne
 80039e8:	b22d      	sxthne	r5, r5
 80039ea:	e7ef      	b.n	80039cc <_printf_i+0xbc>
 80039ec:	680b      	ldr	r3, [r1, #0]
 80039ee:	6825      	ldr	r5, [r4, #0]
 80039f0:	1d18      	adds	r0, r3, #4
 80039f2:	6008      	str	r0, [r1, #0]
 80039f4:	0628      	lsls	r0, r5, #24
 80039f6:	d501      	bpl.n	80039fc <_printf_i+0xec>
 80039f8:	681d      	ldr	r5, [r3, #0]
 80039fa:	e002      	b.n	8003a02 <_printf_i+0xf2>
 80039fc:	0669      	lsls	r1, r5, #25
 80039fe:	d5fb      	bpl.n	80039f8 <_printf_i+0xe8>
 8003a00:	881d      	ldrh	r5, [r3, #0]
 8003a02:	2f6f      	cmp	r7, #111	; 0x6f
 8003a04:	bf0c      	ite	eq
 8003a06:	2308      	moveq	r3, #8
 8003a08:	230a      	movne	r3, #10
 8003a0a:	4852      	ldr	r0, [pc, #328]	; (8003b54 <_printf_i+0x244>)
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a12:	6866      	ldr	r6, [r4, #4]
 8003a14:	2e00      	cmp	r6, #0
 8003a16:	bfa8      	it	ge
 8003a18:	6821      	ldrge	r1, [r4, #0]
 8003a1a:	60a6      	str	r6, [r4, #8]
 8003a1c:	bfa4      	itt	ge
 8003a1e:	f021 0104 	bicge.w	r1, r1, #4
 8003a22:	6021      	strge	r1, [r4, #0]
 8003a24:	b90d      	cbnz	r5, 8003a2a <_printf_i+0x11a>
 8003a26:	2e00      	cmp	r6, #0
 8003a28:	d04d      	beq.n	8003ac6 <_printf_i+0x1b6>
 8003a2a:	4616      	mov	r6, r2
 8003a2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a30:	fb03 5711 	mls	r7, r3, r1, r5
 8003a34:	5dc7      	ldrb	r7, [r0, r7]
 8003a36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a3a:	462f      	mov	r7, r5
 8003a3c:	42bb      	cmp	r3, r7
 8003a3e:	460d      	mov	r5, r1
 8003a40:	d9f4      	bls.n	8003a2c <_printf_i+0x11c>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d10b      	bne.n	8003a5e <_printf_i+0x14e>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	07df      	lsls	r7, r3, #31
 8003a4a:	d508      	bpl.n	8003a5e <_printf_i+0x14e>
 8003a4c:	6923      	ldr	r3, [r4, #16]
 8003a4e:	6861      	ldr	r1, [r4, #4]
 8003a50:	4299      	cmp	r1, r3
 8003a52:	bfde      	ittt	le
 8003a54:	2330      	movle	r3, #48	; 0x30
 8003a56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a5e:	1b92      	subs	r2, r2, r6
 8003a60:	6122      	str	r2, [r4, #16]
 8003a62:	464b      	mov	r3, r9
 8003a64:	4621      	mov	r1, r4
 8003a66:	4640      	mov	r0, r8
 8003a68:	f8cd a000 	str.w	sl, [sp]
 8003a6c:	aa03      	add	r2, sp, #12
 8003a6e:	f7ff fedf 	bl	8003830 <_printf_common>
 8003a72:	3001      	adds	r0, #1
 8003a74:	d14c      	bne.n	8003b10 <_printf_i+0x200>
 8003a76:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7a:	b004      	add	sp, #16
 8003a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a80:	4834      	ldr	r0, [pc, #208]	; (8003b54 <_printf_i+0x244>)
 8003a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a86:	680e      	ldr	r6, [r1, #0]
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a8e:	061f      	lsls	r7, r3, #24
 8003a90:	600e      	str	r6, [r1, #0]
 8003a92:	d514      	bpl.n	8003abe <_printf_i+0x1ae>
 8003a94:	07d9      	lsls	r1, r3, #31
 8003a96:	bf44      	itt	mi
 8003a98:	f043 0320 	orrmi.w	r3, r3, #32
 8003a9c:	6023      	strmi	r3, [r4, #0]
 8003a9e:	b91d      	cbnz	r5, 8003aa8 <_printf_i+0x198>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	f023 0320 	bic.w	r3, r3, #32
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	e7af      	b.n	8003a0c <_printf_i+0xfc>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f043 0320 	orr.w	r3, r3, #32
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	2378      	movs	r3, #120	; 0x78
 8003ab6:	4828      	ldr	r0, [pc, #160]	; (8003b58 <_printf_i+0x248>)
 8003ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003abc:	e7e3      	b.n	8003a86 <_printf_i+0x176>
 8003abe:	065e      	lsls	r6, r3, #25
 8003ac0:	bf48      	it	mi
 8003ac2:	b2ad      	uxthmi	r5, r5
 8003ac4:	e7e6      	b.n	8003a94 <_printf_i+0x184>
 8003ac6:	4616      	mov	r6, r2
 8003ac8:	e7bb      	b.n	8003a42 <_printf_i+0x132>
 8003aca:	680b      	ldr	r3, [r1, #0]
 8003acc:	6826      	ldr	r6, [r4, #0]
 8003ace:	1d1d      	adds	r5, r3, #4
 8003ad0:	6960      	ldr	r0, [r4, #20]
 8003ad2:	600d      	str	r5, [r1, #0]
 8003ad4:	0635      	lsls	r5, r6, #24
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	d501      	bpl.n	8003ade <_printf_i+0x1ce>
 8003ada:	6018      	str	r0, [r3, #0]
 8003adc:	e002      	b.n	8003ae4 <_printf_i+0x1d4>
 8003ade:	0671      	lsls	r1, r6, #25
 8003ae0:	d5fb      	bpl.n	8003ada <_printf_i+0x1ca>
 8003ae2:	8018      	strh	r0, [r3, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4616      	mov	r6, r2
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	e7ba      	b.n	8003a62 <_printf_i+0x152>
 8003aec:	680b      	ldr	r3, [r1, #0]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	600a      	str	r2, [r1, #0]
 8003af2:	681e      	ldr	r6, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4630      	mov	r0, r6
 8003af8:	6862      	ldr	r2, [r4, #4]
 8003afa:	f000 f82f 	bl	8003b5c <memchr>
 8003afe:	b108      	cbz	r0, 8003b04 <_printf_i+0x1f4>
 8003b00:	1b80      	subs	r0, r0, r6
 8003b02:	6060      	str	r0, [r4, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b0e:	e7a8      	b.n	8003a62 <_printf_i+0x152>
 8003b10:	4632      	mov	r2, r6
 8003b12:	4649      	mov	r1, r9
 8003b14:	4640      	mov	r0, r8
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	47d0      	blx	sl
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d0ab      	beq.n	8003a76 <_printf_i+0x166>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	079b      	lsls	r3, r3, #30
 8003b22:	d413      	bmi.n	8003b4c <_printf_i+0x23c>
 8003b24:	68e0      	ldr	r0, [r4, #12]
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	4298      	cmp	r0, r3
 8003b2a:	bfb8      	it	lt
 8003b2c:	4618      	movlt	r0, r3
 8003b2e:	e7a4      	b.n	8003a7a <_printf_i+0x16a>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4632      	mov	r2, r6
 8003b34:	4649      	mov	r1, r9
 8003b36:	4640      	mov	r0, r8
 8003b38:	47d0      	blx	sl
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d09b      	beq.n	8003a76 <_printf_i+0x166>
 8003b3e:	3501      	adds	r5, #1
 8003b40:	68e3      	ldr	r3, [r4, #12]
 8003b42:	9903      	ldr	r1, [sp, #12]
 8003b44:	1a5b      	subs	r3, r3, r1
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	dcf2      	bgt.n	8003b30 <_printf_i+0x220>
 8003b4a:	e7eb      	b.n	8003b24 <_printf_i+0x214>
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	f104 0619 	add.w	r6, r4, #25
 8003b52:	e7f5      	b.n	8003b40 <_printf_i+0x230>
 8003b54:	08003e13 	.word	0x08003e13
 8003b58:	08003e24 	.word	0x08003e24

08003b5c <memchr>:
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	b2c9      	uxtb	r1, r1
 8003b62:	4402      	add	r2, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	d101      	bne.n	8003b6e <memchr+0x12>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e003      	b.n	8003b76 <memchr+0x1a>
 8003b6e:	7804      	ldrb	r4, [r0, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	428c      	cmp	r4, r1
 8003b74:	d1f6      	bne.n	8003b64 <memchr+0x8>
 8003b76:	bd10      	pop	{r4, pc}

08003b78 <memcpy>:
 8003b78:	440a      	add	r2, r1
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b80:	d100      	bne.n	8003b84 <memcpy+0xc>
 8003b82:	4770      	bx	lr
 8003b84:	b510      	push	{r4, lr}
 8003b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8a:	4291      	cmp	r1, r2
 8003b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b90:	d1f9      	bne.n	8003b86 <memcpy+0xe>
 8003b92:	bd10      	pop	{r4, pc}

08003b94 <memmove>:
 8003b94:	4288      	cmp	r0, r1
 8003b96:	b510      	push	{r4, lr}
 8003b98:	eb01 0402 	add.w	r4, r1, r2
 8003b9c:	d902      	bls.n	8003ba4 <memmove+0x10>
 8003b9e:	4284      	cmp	r4, r0
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	d807      	bhi.n	8003bb4 <memmove+0x20>
 8003ba4:	1e43      	subs	r3, r0, #1
 8003ba6:	42a1      	cmp	r1, r4
 8003ba8:	d008      	beq.n	8003bbc <memmove+0x28>
 8003baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bb2:	e7f8      	b.n	8003ba6 <memmove+0x12>
 8003bb4:	4601      	mov	r1, r0
 8003bb6:	4402      	add	r2, r0
 8003bb8:	428a      	cmp	r2, r1
 8003bba:	d100      	bne.n	8003bbe <memmove+0x2a>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bc6:	e7f7      	b.n	8003bb8 <memmove+0x24>

08003bc8 <_free_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4605      	mov	r5, r0
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d043      	beq.n	8003c58 <_free_r+0x90>
 8003bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd4:	1f0c      	subs	r4, r1, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfb8      	it	lt
 8003bda:	18e4      	addlt	r4, r4, r3
 8003bdc:	f000 f8d0 	bl	8003d80 <__malloc_lock>
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <_free_r+0x94>)
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	4610      	mov	r0, r2
 8003be6:	b933      	cbnz	r3, 8003bf6 <_free_r+0x2e>
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	6014      	str	r4, [r2, #0]
 8003bec:	4628      	mov	r0, r5
 8003bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf2:	f000 b8cb 	b.w	8003d8c <__malloc_unlock>
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	d90a      	bls.n	8003c10 <_free_r+0x48>
 8003bfa:	6821      	ldr	r1, [r4, #0]
 8003bfc:	1862      	adds	r2, r4, r1
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bf01      	itttt	eq
 8003c02:	681a      	ldreq	r2, [r3, #0]
 8003c04:	685b      	ldreq	r3, [r3, #4]
 8003c06:	1852      	addeq	r2, r2, r1
 8003c08:	6022      	streq	r2, [r4, #0]
 8003c0a:	6063      	str	r3, [r4, #4]
 8003c0c:	6004      	str	r4, [r0, #0]
 8003c0e:	e7ed      	b.n	8003bec <_free_r+0x24>
 8003c10:	461a      	mov	r2, r3
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	b10b      	cbz	r3, 8003c1a <_free_r+0x52>
 8003c16:	42a3      	cmp	r3, r4
 8003c18:	d9fa      	bls.n	8003c10 <_free_r+0x48>
 8003c1a:	6811      	ldr	r1, [r2, #0]
 8003c1c:	1850      	adds	r0, r2, r1
 8003c1e:	42a0      	cmp	r0, r4
 8003c20:	d10b      	bne.n	8003c3a <_free_r+0x72>
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	4401      	add	r1, r0
 8003c26:	1850      	adds	r0, r2, r1
 8003c28:	4283      	cmp	r3, r0
 8003c2a:	6011      	str	r1, [r2, #0]
 8003c2c:	d1de      	bne.n	8003bec <_free_r+0x24>
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4401      	add	r1, r0
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	6053      	str	r3, [r2, #4]
 8003c38:	e7d8      	b.n	8003bec <_free_r+0x24>
 8003c3a:	d902      	bls.n	8003c42 <_free_r+0x7a>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	e7d4      	b.n	8003bec <_free_r+0x24>
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	1821      	adds	r1, r4, r0
 8003c46:	428b      	cmp	r3, r1
 8003c48:	bf01      	itttt	eq
 8003c4a:	6819      	ldreq	r1, [r3, #0]
 8003c4c:	685b      	ldreq	r3, [r3, #4]
 8003c4e:	1809      	addeq	r1, r1, r0
 8003c50:	6021      	streq	r1, [r4, #0]
 8003c52:	6063      	str	r3, [r4, #4]
 8003c54:	6054      	str	r4, [r2, #4]
 8003c56:	e7c9      	b.n	8003bec <_free_r+0x24>
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200000b0 	.word	0x200000b0

08003c60 <_malloc_r>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	1ccd      	adds	r5, r1, #3
 8003c64:	f025 0503 	bic.w	r5, r5, #3
 8003c68:	3508      	adds	r5, #8
 8003c6a:	2d0c      	cmp	r5, #12
 8003c6c:	bf38      	it	cc
 8003c6e:	250c      	movcc	r5, #12
 8003c70:	2d00      	cmp	r5, #0
 8003c72:	4606      	mov	r6, r0
 8003c74:	db01      	blt.n	8003c7a <_malloc_r+0x1a>
 8003c76:	42a9      	cmp	r1, r5
 8003c78:	d903      	bls.n	8003c82 <_malloc_r+0x22>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6033      	str	r3, [r6, #0]
 8003c7e:	2000      	movs	r0, #0
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c82:	f000 f87d 	bl	8003d80 <__malloc_lock>
 8003c86:	4921      	ldr	r1, [pc, #132]	; (8003d0c <_malloc_r+0xac>)
 8003c88:	680a      	ldr	r2, [r1, #0]
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	b99c      	cbnz	r4, 8003cb6 <_malloc_r+0x56>
 8003c8e:	4f20      	ldr	r7, [pc, #128]	; (8003d10 <_malloc_r+0xb0>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b923      	cbnz	r3, 8003c9e <_malloc_r+0x3e>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4630      	mov	r0, r6
 8003c98:	f000 f862 	bl	8003d60 <_sbrk_r>
 8003c9c:	6038      	str	r0, [r7, #0]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f85d 	bl	8003d60 <_sbrk_r>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d123      	bne.n	8003cf2 <_malloc_r+0x92>
 8003caa:	230c      	movs	r3, #12
 8003cac:	4630      	mov	r0, r6
 8003cae:	6033      	str	r3, [r6, #0]
 8003cb0:	f000 f86c 	bl	8003d8c <__malloc_unlock>
 8003cb4:	e7e3      	b.n	8003c7e <_malloc_r+0x1e>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	1b5b      	subs	r3, r3, r5
 8003cba:	d417      	bmi.n	8003cec <_malloc_r+0x8c>
 8003cbc:	2b0b      	cmp	r3, #11
 8003cbe:	d903      	bls.n	8003cc8 <_malloc_r+0x68>
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	441c      	add	r4, r3
 8003cc4:	6025      	str	r5, [r4, #0]
 8003cc6:	e004      	b.n	8003cd2 <_malloc_r+0x72>
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	42a2      	cmp	r2, r4
 8003ccc:	bf0c      	ite	eq
 8003cce:	600b      	streq	r3, [r1, #0]
 8003cd0:	6053      	strne	r3, [r2, #4]
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 f85a 	bl	8003d8c <__malloc_unlock>
 8003cd8:	f104 000b 	add.w	r0, r4, #11
 8003cdc:	1d23      	adds	r3, r4, #4
 8003cde:	f020 0007 	bic.w	r0, r0, #7
 8003ce2:	1ac2      	subs	r2, r0, r3
 8003ce4:	d0cc      	beq.n	8003c80 <_malloc_r+0x20>
 8003ce6:	1a1b      	subs	r3, r3, r0
 8003ce8:	50a3      	str	r3, [r4, r2]
 8003cea:	e7c9      	b.n	8003c80 <_malloc_r+0x20>
 8003cec:	4622      	mov	r2, r4
 8003cee:	6864      	ldr	r4, [r4, #4]
 8003cf0:	e7cc      	b.n	8003c8c <_malloc_r+0x2c>
 8003cf2:	1cc4      	adds	r4, r0, #3
 8003cf4:	f024 0403 	bic.w	r4, r4, #3
 8003cf8:	42a0      	cmp	r0, r4
 8003cfa:	d0e3      	beq.n	8003cc4 <_malloc_r+0x64>
 8003cfc:	1a21      	subs	r1, r4, r0
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f000 f82e 	bl	8003d60 <_sbrk_r>
 8003d04:	3001      	adds	r0, #1
 8003d06:	d1dd      	bne.n	8003cc4 <_malloc_r+0x64>
 8003d08:	e7cf      	b.n	8003caa <_malloc_r+0x4a>
 8003d0a:	bf00      	nop
 8003d0c:	200000b0 	.word	0x200000b0
 8003d10:	200000b4 	.word	0x200000b4

08003d14 <_realloc_r>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	4607      	mov	r7, r0
 8003d18:	4614      	mov	r4, r2
 8003d1a:	460e      	mov	r6, r1
 8003d1c:	b921      	cbnz	r1, 8003d28 <_realloc_r+0x14>
 8003d1e:	4611      	mov	r1, r2
 8003d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d24:	f7ff bf9c 	b.w	8003c60 <_malloc_r>
 8003d28:	b922      	cbnz	r2, 8003d34 <_realloc_r+0x20>
 8003d2a:	f7ff ff4d 	bl	8003bc8 <_free_r>
 8003d2e:	4625      	mov	r5, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	f000 f830 	bl	8003d98 <_malloc_usable_size_r>
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d20f      	bcs.n	8003d5c <_realloc_r+0x48>
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f7ff ff8e 	bl	8003c60 <_malloc_r>
 8003d44:	4605      	mov	r5, r0
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0f2      	beq.n	8003d30 <_realloc_r+0x1c>
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	f7ff ff13 	bl	8003b78 <memcpy>
 8003d52:	4631      	mov	r1, r6
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff37 	bl	8003bc8 <_free_r>
 8003d5a:	e7e9      	b.n	8003d30 <_realloc_r+0x1c>
 8003d5c:	4635      	mov	r5, r6
 8003d5e:	e7e7      	b.n	8003d30 <_realloc_r+0x1c>

08003d60 <_sbrk_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d05      	ldr	r5, [pc, #20]	; (8003d7c <_sbrk_r+0x1c>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fd f9c8 	bl	8001100 <_sbrk>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_sbrk_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_sbrk_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000254 	.word	0x20000254

08003d80 <__malloc_lock>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__malloc_lock+0x8>)
 8003d82:	f000 b811 	b.w	8003da8 <__retarget_lock_acquire_recursive>
 8003d86:	bf00      	nop
 8003d88:	2000025c 	.word	0x2000025c

08003d8c <__malloc_unlock>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__malloc_unlock+0x8>)
 8003d8e:	f000 b80c 	b.w	8003daa <__retarget_lock_release_recursive>
 8003d92:	bf00      	nop
 8003d94:	2000025c 	.word	0x2000025c

08003d98 <_malloc_usable_size_r>:
 8003d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9c:	1f18      	subs	r0, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfbc      	itt	lt
 8003da2:	580b      	ldrlt	r3, [r1, r0]
 8003da4:	18c0      	addlt	r0, r0, r3
 8003da6:	4770      	bx	lr

08003da8 <__retarget_lock_acquire_recursive>:
 8003da8:	4770      	bx	lr

08003daa <__retarget_lock_release_recursive>:
 8003daa:	4770      	bx	lr

08003dac <_init>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr

08003db8 <_fini>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr
