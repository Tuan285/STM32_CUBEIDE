
TEST_MOTOR_STEP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003428  08003428  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003428  08003428  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003428  08003428  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  0800343c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800343c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bf6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c8  00000000  00000000  00030c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c87  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d6  00000000  00000000  0004c87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfe4  00000000  00000000  0005ec55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecc39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000ecc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033e4 	.word	0x080033e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080033e4 	.word	0x080033e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc44 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9cc 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9ac 	bl	80004b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f864 	bl	800022c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8b2 	bl	80002cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f97c 	bl	8000464 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800016c:	f000 f8dc 	bl	8000328 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000170:	f000 f92a 	bl	80003c8 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	e7fe      	b.n	8000174 <main+0x28>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b094      	sub	sp, #80	; 0x50
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f003 f925 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2302      	movs	r3, #2
 80001ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 fc7b 	bl	8001ac8 <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d8:	f000 fa1c 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2102      	movs	r1, #2
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fee5 	bl	8001fc8 <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000204:	f000 fa06 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000208:	2302      	movs	r3, #2
 800020a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000210:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f002 f865 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000220:	f000 f9f8 	bl	8000614 <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	; 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <MX_ADC1_Init+0x98>)
 800023e:	4a22      	ldr	r2, [pc, #136]	; (80002c8 <MX_ADC1_Init+0x9c>)
 8000240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <MX_ADC1_Init+0x98>)
 8000244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024a:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <MX_ADC1_Init+0x98>)
 800024c:	2200      	movs	r2, #0
 800024e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000250:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <MX_ADC1_Init+0x98>)
 8000252:	2200      	movs	r2, #0
 8000254:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000256:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <MX_ADC1_Init+0x98>)
 8000258:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <MX_ADC1_Init+0x98>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_ADC1_Init+0x98>)
 8000266:	2202      	movs	r2, #2
 8000268:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026a:	4816      	ldr	r0, [pc, #88]	; (80002c4 <MX_ADC1_Init+0x98>)
 800026c:	f000 fc18 	bl	8000aa0 <HAL_ADC_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000276:	f000 f9cd 	bl	8000614 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800027a:	2309      	movs	r3, #9
 800027c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027e:	2301      	movs	r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000282:	2303      	movs	r3, #3
 8000284:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	480e      	ldr	r0, [pc, #56]	; (80002c4 <MX_ADC1_Init+0x98>)
 800028c:	f000 fce0 	bl	8000c50 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000296:	f000 f9bd 	bl	8000614 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029a:	2303      	movs	r3, #3
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800029e:	2302      	movs	r3, #2
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80002a2:	2305      	movs	r3, #5
 80002a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <MX_ADC1_Init+0x98>)
 80002ac:	f000 fcd0 	bl	8000c50 <HAL_ADC_ConfigChannel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80002b6:	f000 f9ad 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	200000c4 	.word	0x200000c4
 80002c8:	40012400 	.word	0x40012400

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_I2C1_Init+0x50>)
 800030a:	f001 fa99 	bl	8001840 <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f97e 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000070 	.word	0x20000070
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000344:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000346:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <MX_TIM1_Init+0x9c>)
 8000348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_TIM1_Init+0x98>)
 800034c:	2247      	movs	r2, #71	; 0x47
 800034e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800035c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_TIM1_Init+0x98>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_TIM1_Init+0x98>)
 8000372:	f002 f86d 	bl	8002450 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800037c:	f000 f94a 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM1_Init+0x98>)
 800038e:	f002 f8ae 	bl	80024ee <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000398:	f000 f93c 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_TIM1_Init+0x98>)
 80003aa:	f002 fa5f 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003b4:	f000 f92e 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000180 	.word	0x20000180
 80003c4:	40012c00 	.word	0x40012c00

080003c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0x94>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM4_Init+0x98>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0x94>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM4_Init+0x94>)
 80003f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM4_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM4_Init+0x94>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM4_Init+0x94>)
 800040c:	f002 f820 	bl	8002450 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f8fd 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM4_Init+0x94>)
 8000428:	f002 f861 	bl	80024ee <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f8ef 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM4_Init+0x94>)
 8000444:	f002 fa12 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 f8e1 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000028 	.word	0x20000028
 8000460:	40000800 	.word	0x40000800

08000464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_USART1_UART_Init+0x50>)
 800046c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 8000470:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_USART1_UART_Init+0x4c>)
 800049c:	f002 fa44 	bl	8002928 <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004a6:	f000 f8b5 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000f4 	.word	0x200000f4
 80004b4:	40013800 	.word	0x40013800

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200b      	movs	r0, #11
 80004dc:	f000 fdc9 	bl	8001072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004e0:	200b      	movs	r0, #11
 80004e2:	f000 fde2 	bl	80010aa <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000508:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <MX_GPIO_Init+0x114>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a3e      	ldr	r2, [pc, #248]	; (8000608 <MX_GPIO_Init+0x114>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <MX_GPIO_Init+0x114>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b39      	ldr	r3, [pc, #228]	; (8000608 <MX_GPIO_Init+0x114>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a38      	ldr	r2, [pc, #224]	; (8000608 <MX_GPIO_Init+0x114>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b36      	ldr	r3, [pc, #216]	; (8000608 <MX_GPIO_Init+0x114>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b33      	ldr	r3, [pc, #204]	; (8000608 <MX_GPIO_Init+0x114>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a32      	ldr	r2, [pc, #200]	; (8000608 <MX_GPIO_Init+0x114>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b30      	ldr	r3, [pc, #192]	; (8000608 <MX_GPIO_Init+0x114>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|IN3_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	21e0      	movs	r1, #224	; 0xe0
 8000554:	482d      	ldr	r0, [pc, #180]	; (800060c <MX_GPIO_Init+0x118>)
 8000556:	f001 f95b 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, QUAT_Pin|BOM_Pin|DEN_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2138      	movs	r1, #56	; 0x38
 800055e:	482c      	ldr	r0, [pc, #176]	; (8000610 <MX_GPIO_Init+0x11c>)
 8000560:	f001 f956 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4825      	ldr	r0, [pc, #148]	; (800060c <MX_GPIO_Init+0x118>)
 8000578:	f000 ffc6 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUA_Pin */
  GPIO_InitStruct.Pin = MUA_Pin;
 800057c:	2310      	movs	r3, #16
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUA_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	481f      	ldr	r0, [pc, #124]	; (800060c <MX_GPIO_Init+0x118>)
 8000590:	f000 ffba 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin;
 8000594:	23e0      	movs	r3, #224	; 0xe0
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <MX_GPIO_Init+0x118>)
 80005ac:	f000 ffac 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <MX_GPIO_Init+0x11c>)
 80005c4:	f000 ffa0 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT3_Pin BT1_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT3_Pin|BT1_Pin|BT4_Pin;
 80005c8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_GPIO_Init+0x11c>)
 80005de:	f000 ff93 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUAT_Pin BOM_Pin DEN_Pin */
  GPIO_InitStruct.Pin = QUAT_Pin|BOM_Pin|DEN_Pin;
 80005e2:	2338      	movs	r3, #56	; 0x38
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_GPIO_Init+0x11c>)
 80005fa:	f000 ff85 	bl	8001508 <HAL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40010c00 	.word	0x40010c00

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a33      	ldr	r2, [pc, #204]	; (800076c <HAL_ADC_MspInit+0xe8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d15f      	bne.n	8000764 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a31      	ldr	r2, [pc, #196]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <HAL_ADC_MspInit+0xec>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4619      	mov	r1, r3
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <HAL_ADC_MspInit+0xf0>)
 80006fc:	f000 ff04 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000700:	2302      	movs	r3, #2
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000704:	2303      	movs	r3, #3
 8000706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4619      	mov	r1, r3
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 8000710:	f000 fefa 	bl	8001508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000718:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_ADC_MspInit+0xf8>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_ADC_MspInit+0xf8>)
 800072e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000732:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_ADC_MspInit+0xf8>)
 800073e:	2220      	movs	r2, #32
 8000740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <HAL_ADC_MspInit+0xf8>)
 800074a:	f000 fcc9 	bl	80010e0 <HAL_DMA_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000754:	f7ff ff5e 	bl	8000614 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_ADC_MspInit+0xf8>)
 800075c:	621a      	str	r2, [r3, #32]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0xf8>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40012400 	.word	0x40012400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010800 	.word	0x40010800
 8000778:	40010c00 	.word	0x40010c00
 800077c:	2000013c 	.word	0x2000013c
 8000780:	40020008 	.word	0x40020008

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <HAL_I2C_MspInit+0x70>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d123      	bne.n	80007ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_I2C_MspInit+0x78>)
 80007d0:	f000 fe9a 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007de:	61d3      	str	r3, [r2, #28]
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_I2C_MspInit+0x74>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40005400 	.word	0x40005400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010c00 	.word	0x40010c00

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_TIM_Base_MspInit+0x58>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10c      	bne.n	800082c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800082a:	e010      	b.n	800084e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_TIM_Base_MspInit+0x60>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40021000 	.word	0x40021000
 8000860:	40000800 	.word	0x40000800

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <HAL_UART_MspInit+0x9c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d139      	bne.n	80008f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <HAL_UART_MspInit+0xa0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_UART_MspInit+0xa0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_UART_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_UART_MspInit+0xa0>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_UART_MspInit+0xa0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <HAL_UART_MspInit+0xa4>)
 80008ca:	f000 fe1d 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_UART_MspInit+0xa4>)
 80008e4:	f000 fe10 	bl	8001508 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2025      	movs	r0, #37	; 0x25
 80008ee:	f000 fbc0 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f2:	2025      	movs	r0, #37	; 0x25
 80008f4:	f000 fbd9 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013800 	.word	0x40013800
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f889 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA1_Channel1_IRQHandler+0x10>)
 8000962:	f000 fccb 	bl	80012fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000013c 	.word	0x2000013c

08000970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART1_IRQHandler+0x10>)
 8000976:	f002 f827 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000f4 	.word	0x200000f4

08000984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000990:	f7ff fff8 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ac:	4c09      	ldr	r4, [pc, #36]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f002 fce7 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fbc5 	bl	800014c <main>
  bx lr
 80009c2:	4770      	bx	lr
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	08003430 	.word	0x08003430
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	200001cc 	.word	0x200001cc

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x28>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 fb35 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f808 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff fe12 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x54>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fb4d 	bl	80010c6 <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d80a      	bhi.n	8000a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 fb15 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_IncTick+0x20>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000008 	.word	0x20000008
 8000a88:	200001c8 	.word	0x200001c8

08000a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	200001c8 	.word	0x200001c8

08000aa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e0be      	b.n	8000c40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d109      	bne.n	8000ae4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fdd0 	bl	8000684 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f9ab 	bl	8000e40 <ADC_ConversionStop_Disable>
 8000aea:	4603      	mov	r3, r0
 8000aec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8099 	bne.w	8000c2e <HAL_ADC_Init+0x18e>
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8095 	bne.w	8000c2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b0c:	f023 0302 	bic.w	r3, r3, #2
 8000b10:	f043 0202 	orr.w	r2, r3, #2
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
 8000b26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b38:	d003      	beq.n	8000b42 <HAL_ADC_Init+0xa2>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d102      	bne.n	8000b48 <HAL_ADC_Init+0xa8>
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	e000      	b.n	8000b4a <HAL_ADC_Init+0xaa>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7d1b      	ldrb	r3, [r3, #20]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d119      	bne.n	8000b8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7b1b      	ldrb	r3, [r3, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d109      	bne.n	8000b74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	035a      	lsls	r2, r3, #13
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	e00b      	b.n	8000b8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f043 0220 	orr.w	r2, r3, #32
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f043 0201 	orr.w	r2, r3, #1
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <HAL_ADC_Init+0x1a8>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_Init+0x126>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d104      	bne.n	8000bd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_ADC_Init+0x1ac>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d10b      	bne.n	8000c0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f023 0303 	bic.w	r3, r3, #3
 8000c02:	f043 0201 	orr.w	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c0a:	e018      	b.n	8000c3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	f023 0312 	bic.w	r3, r3, #18
 8000c14:	f043 0210 	orr.w	r2, r3, #16
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	f043 0201 	orr.w	r2, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c2c:	e007      	b.n	8000c3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	f043 0210 	orr.w	r2, r3, #16
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	ffe1f7fd 	.word	0xffe1f7fd
 8000c4c:	ff1f0efe 	.word	0xff1f0efe

08000c50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d101      	bne.n	8000c70 <HAL_ADC_ConfigChannel+0x20>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e0dc      	b.n	8000e2a <HAL_ADC_ConfigChannel+0x1da>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b06      	cmp	r3, #6
 8000c7e:	d81c      	bhi.n	8000cba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	3b05      	subs	r3, #5
 8000c92:	221f      	movs	r2, #31
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4019      	ands	r1, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	3b05      	subs	r3, #5
 8000cac:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb8:	e03c      	b.n	8000d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	d81c      	bhi.n	8000cfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3b23      	subs	r3, #35	; 0x23
 8000cd4:	221f      	movs	r2, #31
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4019      	ands	r1, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	3b23      	subs	r3, #35	; 0x23
 8000cee:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cfa:	e01b      	b.n	8000d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3b41      	subs	r3, #65	; 0x41
 8000d0e:	221f      	movs	r2, #31
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4019      	ands	r1, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	3b41      	subs	r3, #65	; 0x41
 8000d28:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b09      	cmp	r3, #9
 8000d3a:	d91c      	bls.n	8000d76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68d9      	ldr	r1, [r3, #12]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3b1e      	subs	r3, #30
 8000d4e:	2207      	movs	r2, #7
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4019      	ands	r1, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6898      	ldr	r0, [r3, #8]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	3b1e      	subs	r3, #30
 8000d68:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	e019      	b.n	8000daa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6919      	ldr	r1, [r3, #16]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	2207      	movs	r2, #7
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4019      	ands	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6898      	ldr	r0, [r3, #8]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d003      	beq.n	8000dba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000db6:	2b11      	cmp	r3, #17
 8000db8:	d132      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d125      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d126      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000de0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d11a      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_ADC_ConfigChannel+0x1ec>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	0c9a      	lsrs	r2, r3, #18
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e00:	e002      	b.n	8000e08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f9      	bne.n	8000e02 <HAL_ADC_ConfigChannel+0x1b2>
 8000e0e:	e007      	b.n	8000e20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f043 0220 	orr.w	r2, r3, #32
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40012400 	.word	0x40012400
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	431bde83 	.word	0x431bde83

08000e40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d12e      	bne.n	8000eb8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6a:	f7ff fe0f 	bl	8000a8c <HAL_GetTick>
 8000e6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e70:	e01b      	b.n	8000eaa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e72:	f7ff fe0b 	bl	8000a8c <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d914      	bls.n	8000eaa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10d      	bne.n	8000eaa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f043 0210 	orr.w	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e007      	b.n	8000eba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d0dc      	beq.n	8000e72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4906      	ldr	r1, [pc, #24]	; (8000f5c <__NVIC_EnableIRQ+0x34>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff90 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff2d 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff42 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff35 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e043      	b.n	800117e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_DMA_Init+0xa8>)
 80010fe:	4413      	add	r3, r2
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <HAL_DMA_Init+0xac>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	009a      	lsls	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_DMA_Init+0xb0>)
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800112a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800112e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	bffdfff8 	.word	0xbffdfff8
 800118c:	cccccccd 	.word	0xcccccccd
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2204      	movs	r2, #4
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e020      	b.n	8001200 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 020e 	bic.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d005      	beq.n	8001230 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2204      	movs	r2, #4
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e051      	b.n	80012d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 020e 	bic.w	r2, r2, #14
 800123e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <HAL_DMA_Abort_IT+0xd4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d029      	beq.n	80012ae <HAL_DMA_Abort_IT+0xa2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_DMA_Abort_IT+0xd8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d022      	beq.n	80012aa <HAL_DMA_Abort_IT+0x9e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_DMA_Abort_IT+0xdc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01a      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x98>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_DMA_Abort_IT+0xe0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d012      	beq.n	800129e <HAL_DMA_Abort_IT+0x92>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <HAL_DMA_Abort_IT+0xe4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00a      	beq.n	8001298 <HAL_DMA_Abort_IT+0x8c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_DMA_Abort_IT+0xe8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d102      	bne.n	8001292 <HAL_DMA_Abort_IT+0x86>
 800128c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001290:	e00e      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 8001292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001296:	e00b      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	e008      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	e005      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	e002      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 80012aa:	2310      	movs	r3, #16
 80012ac:	e000      	b.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
 80012ae:	2301      	movs	r3, #1
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_DMA_Abort_IT+0xec>)
 80012b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
    } 
  }
  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020008 	.word	0x40020008
 80012e4:	4002001c 	.word	0x4002001c
 80012e8:	40020030 	.word	0x40020030
 80012ec:	40020044 	.word	0x40020044
 80012f0:	40020058 	.word	0x40020058
 80012f4:	4002006c 	.word	0x4002006c
 80012f8:	40020000 	.word	0x40020000

080012fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	2204      	movs	r2, #4
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d04f      	beq.n	80013c4 <HAL_DMA_IRQHandler+0xc8>
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d04a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a66      	ldr	r2, [pc, #408]	; (80014ec <HAL_DMA_IRQHandler+0x1f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d029      	beq.n	80013aa <HAL_DMA_IRQHandler+0xae>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a65      	ldr	r2, [pc, #404]	; (80014f0 <HAL_DMA_IRQHandler+0x1f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d022      	beq.n	80013a6 <HAL_DMA_IRQHandler+0xaa>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0xa4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a62      	ldr	r2, [pc, #392]	; (80014f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d012      	beq.n	800139a <HAL_DMA_IRQHandler+0x9e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a60      	ldr	r2, [pc, #384]	; (80014fc <HAL_DMA_IRQHandler+0x200>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00a      	beq.n	8001394 <HAL_DMA_IRQHandler+0x98>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_DMA_IRQHandler+0x204>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d102      	bne.n	800138e <HAL_DMA_IRQHandler+0x92>
 8001388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138c:	e00e      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 800138e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001392:	e00b      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 8001394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001398:	e008      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 800139a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139e:	e005      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	e002      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	e000      	b.n	80013ac <HAL_DMA_IRQHandler+0xb0>
 80013aa:	2304      	movs	r3, #4
 80013ac:	4a55      	ldr	r2, [pc, #340]	; (8001504 <HAL_DMA_IRQHandler+0x208>)
 80013ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8094 	beq.w	80014e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013c2:	e08e      	b.n	80014e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	2202      	movs	r2, #2
 80013ca:	409a      	lsls	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d056      	beq.n	8001482 <HAL_DMA_IRQHandler+0x186>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d051      	beq.n	8001482 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020a 	bic.w	r2, r2, #10
 80013fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a38      	ldr	r2, [pc, #224]	; (80014ec <HAL_DMA_IRQHandler+0x1f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d029      	beq.n	8001462 <HAL_DMA_IRQHandler+0x166>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a37      	ldr	r2, [pc, #220]	; (80014f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d022      	beq.n	800145e <HAL_DMA_IRQHandler+0x162>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <HAL_DMA_IRQHandler+0x1f8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01a      	beq.n	8001458 <HAL_DMA_IRQHandler+0x15c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a34      	ldr	r2, [pc, #208]	; (80014f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d012      	beq.n	8001452 <HAL_DMA_IRQHandler+0x156>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_DMA_IRQHandler+0x200>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00a      	beq.n	800144c <HAL_DMA_IRQHandler+0x150>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_DMA_IRQHandler+0x204>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <HAL_DMA_IRQHandler+0x14a>
 8001440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001444:	e00e      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 8001446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800144a:	e00b      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 800144c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001450:	e008      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	e005      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 8001458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145c:	e002      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 800145e:	2320      	movs	r3, #32
 8001460:	e000      	b.n	8001464 <HAL_DMA_IRQHandler+0x168>
 8001462:	2302      	movs	r3, #2
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_DMA_IRQHandler+0x208>)
 8001466:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d034      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001480:	e02f      	b.n	80014e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2208      	movs	r2, #8
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d028      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x1e8>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d023      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 020e 	bic.w	r2, r2, #14
 80014aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
    }
  }
  return;
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
}
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020008 	.word	0x40020008
 80014f0:	4002001c 	.word	0x4002001c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	40020044 	.word	0x40020044
 80014fc:	40020058 	.word	0x40020058
 8001500:	4002006c 	.word	0x4002006c
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e169      	b.n	80017f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8158 	bne.w	80017ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a9a      	ldr	r2, [pc, #616]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001544:	4a98      	ldr	r2, [pc, #608]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d875      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800154a:	4a98      	ldr	r2, [pc, #608]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d058      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001550:	4a96      	ldr	r2, [pc, #600]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d86f      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001556:	4a96      	ldr	r2, [pc, #600]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d052      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 800155c:	4a94      	ldr	r2, [pc, #592]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d869      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001562:	4a94      	ldr	r2, [pc, #592]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04c      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001568:	4a92      	ldr	r2, [pc, #584]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d863      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800156e:	4a92      	ldr	r2, [pc, #584]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d046      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001574:	4a90      	ldr	r2, [pc, #576]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d85d      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d82a      	bhi.n	80015d4 <HAL_GPIO_Init+0xcc>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d859      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_GPIO_Init+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001603 	.word	0x08001603
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015ef 	.word	0x080015ef
 8001594:	08001631 	.word	0x08001631
 8001598:	08001637 	.word	0x08001637
 800159c:	08001637 	.word	0x08001637
 80015a0:	08001637 	.word	0x08001637
 80015a4:	08001637 	.word	0x08001637
 80015a8:	08001637 	.word	0x08001637
 80015ac:	08001637 	.word	0x08001637
 80015b0:	08001637 	.word	0x08001637
 80015b4:	08001637 	.word	0x08001637
 80015b8:	08001637 	.word	0x08001637
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001637 	.word	0x08001637
 80015c4:	08001637 	.word	0x08001637
 80015c8:	08001637 	.word	0x08001637
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	4a79      	ldr	r2, [pc, #484]	; (80017bc <HAL_GPIO_Init+0x2b4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e029      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e024      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01f      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e01a      	b.n	8001638 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x130>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x13a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x13e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x14c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x152>
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80b1 	beq.w	80017ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x1ec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <HAL_GPIO_Init+0x2c4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00d      	beq.n	80016f0 <HAL_GPIO_Init+0x1e8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <HAL_GPIO_Init+0x2c8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x1e4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_GPIO_Init+0x2cc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_GPIO_Init+0x1e0>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001706:	492f      	ldr	r1, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	492c      	ldr	r1, [pc, #176]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4928      	ldr	r1, [pc, #160]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	491e      	ldr	r1, [pc, #120]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4918      	ldr	r1, [pc, #96]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4914      	ldr	r1, [pc, #80]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d021      	beq.n	80017dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	490e      	ldr	r1, [pc, #56]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e021      	b.n	80017ea <HAL_GPIO_Init+0x2e2>
 80017a6:	bf00      	nop
 80017a8:	10320000 	.word	0x10320000
 80017ac:	10310000 	.word	0x10310000
 80017b0:	10220000 	.word	0x10220000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10120000 	.word	0x10120000
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40011400 	.word	0x40011400
 80017d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_GPIO_Init+0x304>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	4909      	ldr	r1, [pc, #36]	; (800180c <HAL_GPIO_Init+0x304>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f47f ae8e 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	372c      	adds	r7, #44	; 0x2c
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e12b      	b.n	8001aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe ff8c 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018a4:	f000 fcd8 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80018a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a81      	ldr	r2, [pc, #516]	; (8001ab4 <HAL_I2C_Init+0x274>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d807      	bhi.n	80018c4 <HAL_I2C_Init+0x84>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4a80      	ldr	r2, [pc, #512]	; (8001ab8 <HAL_I2C_Init+0x278>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	bf94      	ite	ls
 80018bc:	2301      	movls	r3, #1
 80018be:	2300      	movhi	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	e006      	b.n	80018d2 <HAL_I2C_Init+0x92>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a7d      	ldr	r2, [pc, #500]	; (8001abc <HAL_I2C_Init+0x27c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	bf94      	ite	ls
 80018cc:	2301      	movls	r3, #1
 80018ce:	2300      	movhi	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0e7      	b.n	8001aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a78      	ldr	r2, [pc, #480]	; (8001ac0 <HAL_I2C_Init+0x280>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9b      	lsrs	r3, r3, #18
 80018e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a6a      	ldr	r2, [pc, #424]	; (8001ab4 <HAL_I2C_Init+0x274>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d802      	bhi.n	8001914 <HAL_I2C_Init+0xd4>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3301      	adds	r3, #1
 8001912:	e009      	b.n	8001928 <HAL_I2C_Init+0xe8>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <HAL_I2C_Init+0x284>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	3301      	adds	r3, #1
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	430b      	orrs	r3, r1
 800192e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800193a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	495c      	ldr	r1, [pc, #368]	; (8001ab4 <HAL_I2C_Init+0x274>)
 8001944:	428b      	cmp	r3, r1
 8001946:	d819      	bhi.n	800197c <HAL_I2C_Init+0x13c>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e59      	subs	r1, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fbb1 f3f3 	udiv	r3, r1, r3
 8001956:	1c59      	adds	r1, r3, #1
 8001958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800195c:	400b      	ands	r3, r1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_I2C_Init+0x138>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e59      	subs	r1, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001976:	e051      	b.n	8001a1c <HAL_I2C_Init+0x1dc>
 8001978:	2304      	movs	r3, #4
 800197a:	e04f      	b.n	8001a1c <HAL_I2C_Init+0x1dc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d111      	bne.n	80019a8 <HAL_I2C_Init+0x168>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	440b      	add	r3, r1
 8001992:	fbb0 f3f3 	udiv	r3, r0, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e012      	b.n	80019ce <HAL_I2C_Init+0x18e>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	0099      	lsls	r1, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Init+0x196>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e022      	b.n	8001a1c <HAL_I2C_Init+0x1dc>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10e      	bne.n	80019fc <HAL_I2C_Init+0x1bc>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e58      	subs	r0, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6859      	ldr	r1, [r3, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	440b      	add	r3, r1
 80019ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	e00f      	b.n	8001a1c <HAL_I2C_Init+0x1dc>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	0099      	lsls	r1, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	6809      	ldr	r1, [r1, #0]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6911      	ldr	r1, [r2, #16]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68d2      	ldr	r2, [r2, #12]
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	000186a0 	.word	0x000186a0
 8001ab8:	001e847f 	.word	0x001e847f
 8001abc:	003d08ff 	.word	0x003d08ff
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e26c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e246      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff72 	bl	8000a8c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7fe ff6e 	bl	8000a8c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1fa      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ff5e 	bl	8000a8c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7fe ff5a 	bl	8000a8c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1e6      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe ff13 	bl	8000a8c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7fe ff0f 	bl	8000a8c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e19b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fef2 	bl	8000a8c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7fe feee 	bl	8000a8c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e17a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fed2 	bl	8000a8c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe fece 	bl	8000a8c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e15a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 facc 	bl	80022a8 <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7fe feb8 	bl	8000a8c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7fe feb4 	bl	8000a8c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e140      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a93      	ldr	r2, [pc, #588]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe fe75 	bl	8000a8c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe fe71 	bl	8000a8c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0fd      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a66      	ldr	r2, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fe25 	bl	8000a8c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe fe21 	bl	8000a8c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0ab      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fe0f 	bl	8000a8c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fe0b 	bl	8000a8c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e095      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8081 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fddf 	bl	8000a8c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fddb 	bl	8000a8c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e067      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fdaf 	bl	8000a8c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe fdab 	bl	8000a8c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e037      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e02f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd98 	bl	8000a8c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fd94 	bl	8000a8c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42420060 	.word	0x42420060

08001fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0d0      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4965      	ldr	r1, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d040      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e073      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06b      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4936      	ldr	r1, [pc, #216]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fce8 	bl	8000a8c <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fce4 	bl	8000a8c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e053      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d210      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1cc>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1d0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fc46 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	080033fc 	.word	0x080033fc
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x30>
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ca:	e027      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ce:	613b      	str	r3, [r7, #16]
      break;
 80021d0:	e027      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d010      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0x94>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0c5b      	lsrs	r3, r3, #17
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fe:	fb02 f203 	mul.w	r2, r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e004      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	613b      	str	r3, [r7, #16]
      break;
 800221a:	e002      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	613b      	str	r3, [r7, #16]
      break;
 8002220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002222:	693b      	ldr	r3, [r7, #16]
}
 8002224:	4618      	mov	r0, r3
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	007a1200 	.word	0x007a1200
 8002238:	08003414 	.word	0x08003414
 800223c:	08003424 	.word	0x08003424
 8002240:	003d0900 	.word	0x003d0900

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_RCC_GetHCLKFreq+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff2 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	0800340c 	.word	0x0800340c

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffde 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0adb      	lsrs	r3, r3, #11
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	0800340c 	.word	0x0800340c

080022a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <RCC_Delay+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <RCC_Delay+0x38>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c4:	bf00      	nop
  }
  while (Delay --);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	60fa      	str	r2, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <RCC_Delay+0x1c>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000000 	.word	0x20000000
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d07d      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d118      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a42      	ldr	r2, [pc, #264]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002344:	f7fe fba2 	bl	8000a8c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	e008      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fb9e 	bl	8000a8c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e06d      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d02e      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d027      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d014      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fb6d 	bl	8000a8c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7fe fb69 	bl	8000a8c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e036      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ee      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4917      	ldr	r1, [pc, #92]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	490b      	ldr	r1, [pc, #44]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
 800244c:	42420440 	.word	0x42420440

08002450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe f9c2 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 f8f4 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_TIM_ConfigClockSource+0x1c>
 8002506:	2302      	movs	r3, #2
 8002508:	e0b4      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x186>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002528:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002530:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002542:	d03e      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xd4>
 8002544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002548:	f200 8087 	bhi.w	800265a <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	f000 8086 	beq.w	8002660 <HAL_TIM_ConfigClockSource+0x172>
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d87f      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 800255a:	2b70      	cmp	r3, #112	; 0x70
 800255c:	d01a      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0xa6>
 800255e:	2b70      	cmp	r3, #112	; 0x70
 8002560:	d87b      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 8002562:	2b60      	cmp	r3, #96	; 0x60
 8002564:	d050      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0x11a>
 8002566:	2b60      	cmp	r3, #96	; 0x60
 8002568:	d877      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 800256a:	2b50      	cmp	r3, #80	; 0x50
 800256c:	d03c      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xfa>
 800256e:	2b50      	cmp	r3, #80	; 0x50
 8002570:	d873      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d058      	beq.n	8002628 <HAL_TIM_ConfigClockSource+0x13a>
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d86f      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 800257a:	2b30      	cmp	r3, #48	; 0x30
 800257c:	d064      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x15a>
 800257e:	2b30      	cmp	r3, #48	; 0x30
 8002580:	d86b      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 8002582:	2b20      	cmp	r3, #32
 8002584:	d060      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x15a>
 8002586:	2b20      	cmp	r3, #32
 8002588:	d867      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d05c      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x15a>
 800258e:	2b10      	cmp	r3, #16
 8002590:	d05a      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x15a>
 8002592:	e062      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 f943 	bl	800282e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e04f      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f000 f92c 	bl	800282e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e03c      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f000 f8a3 	bl	8002740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2150      	movs	r1, #80	; 0x50
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f8fa 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 8002606:	e02c      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	461a      	mov	r2, r3
 8002616:	f000 f8c1 	bl	800279c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2160      	movs	r1, #96	; 0x60
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f8ea 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 8002626:	e01c      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	461a      	mov	r2, r3
 8002636:	f000 f883 	bl	8002740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f8da 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 8002646:	e00c      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 f8d1 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 8002658:	e003      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      break;
 800265e:	e000      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002660:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <TIM_Base_SetConfig+0xb8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00b      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d007      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a26      	ldr	r2, [pc, #152]	; (8002738 <TIM_Base_SetConfig+0xbc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <TIM_Base_SetConfig+0xc0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <TIM_Base_SetConfig+0xb8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00b      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d007      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <TIM_Base_SetConfig+0xbc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <TIM_Base_SetConfig+0xc0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d108      	bne.n	80026f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <TIM_Base_SetConfig+0xb8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f023 0210 	bic.w	r2, r3, #16
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	621a      	str	r2, [r3, #32]
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	f043 0307 	orr.w	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	431a      	orrs	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e046      	b.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d009      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10c      	bne.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e042      	b.n	80029c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd ff88 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fc7f 	bl	8003270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	; 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
 8002a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fb63 	bl	80030f2 <UART_Receive_IT>
      return;
 8002a2c:	e25b      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80de 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
 8002a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d1 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 81f2 	beq.w	8002edc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 faee 	bl	80030f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_UART_IRQHandler+0x17a>
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04f      	beq.n	8002be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f9f8 	bl	8002f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d041      	beq.n	8002bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1d9      	bne.n	8002b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d013      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	4a7e      	ldr	r2, [pc, #504]	; (8002da8 <HAL_UART_IRQHandler+0x3e0>)
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fb28 	bl	800120c <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00e      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f99c 	bl	8002f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f998 	bl	8002f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e006      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f994 	bl	8002f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002bee:	e175      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	bf00      	nop
    return;
 8002bf2:	e173      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 814f 	bne.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8148 	beq.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8141 	beq.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80b6 	beq.w	8002dac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8145 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f080 813e 	bcs.w	8002ee0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f000 8088 	beq.w	8002d88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ca4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1d9      	bne.n	8002c78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ce8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e1      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3314      	adds	r3, #20
 8002d06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e3      	bne.n	8002d00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	f023 0310 	bic.w	r3, r3, #16
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e3      	bne.n	8002d46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fa06 	bl	8001194 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8bf 	bl	8002f22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da4:	e09c      	b.n	8002ee0 <HAL_UART_IRQHandler+0x518>
 8002da6:	bf00      	nop
 8002da8:	08002ffd 	.word	0x08002ffd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 808e 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8089 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002df6:	647a      	str	r2, [r7, #68]	; 0x44
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e3      	bne.n	8002e0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e74:	61fa      	str	r2, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	617b      	str	r3, [r7, #20]
   return(result);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e3      	bne.n	8002e50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f844 	bl	8002f22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9a:	e023      	b.n	8002ee4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_UART_IRQHandler+0x4f4>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8b5 	bl	8003024 <UART_Transmit_IT>
    return;
 8002eba:	e014      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8f4 	bl	80030c2 <UART_EndTransmit_IT>
    return;
 8002eda:	e004      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee4:	bf00      	nop
  }
}
 8002ee6:	37e8      	adds	r7, #232	; 0xe8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b095      	sub	sp, #84	; 0x54
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f60:	643a      	str	r2, [r7, #64]	; 0x40
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e5      	bne.n	8002f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e5      	bne.n	8002f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d119      	bne.n	8002fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0310 	bic.w	r3, r3, #16
 8002fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd0:	61ba      	str	r2, [r7, #24]
 8002fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ff2:	bf00      	nop
 8002ff4:	3754      	adds	r7, #84	; 0x54
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff ff7a 	bl	8002f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b21      	cmp	r3, #33	; 0x21
 8003036:	d13e      	bne.n	80030b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d114      	bne.n	800306c <UART_Transmit_IT+0x48>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d110      	bne.n	800306c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	1c9a      	adds	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]
 800306a:	e008      	b.n	800307e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	1c59      	adds	r1, r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6211      	str	r1, [r2, #32]
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29b      	uxth	r3, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4619      	mov	r1, r3
 800308c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff02 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08c      	sub	sp, #48	; 0x30
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b22      	cmp	r3, #34	; 0x22
 8003104:	f040 80ae 	bne.w	8003264 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d117      	bne.n	8003142 <UART_Receive_IT+0x50>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d113      	bne.n	8003142 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	b29a      	uxth	r2, r3
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
 8003140:	e026      	b.n	8003190 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d007      	beq.n	8003166 <UART_Receive_IT+0x74>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <UART_Receive_IT+0x82>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e008      	b.n	8003186 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003180:	b2da      	uxtb	r2, r3
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4619      	mov	r1, r3
 800319e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d15d      	bne.n	8003260 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0220 	bic.w	r2, r2, #32
 80031b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d135      	bne.n	8003256 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f023 0310 	bic.w	r3, r3, #16
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	623a      	str	r2, [r7, #32]
 8003212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	69f9      	ldr	r1, [r7, #28]
 8003216:	6a3a      	ldr	r2, [r7, #32]
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	61bb      	str	r3, [r7, #24]
   return(result);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d10a      	bne.n	8003248 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fe67 	bl	8002f22 <HAL_UARTEx_RxEventCallback>
 8003254:	e002      	b.n	800325c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fe51 	bl	8002efe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e002      	b.n	8003266 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032aa:	f023 030c 	bic.w	r3, r3, #12
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <UART_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7fe ffd2 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	e002      	b.n	80032e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe ffba 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <UART_SetConfig+0x118>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	0119      	lsls	r1, r3, #4
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <UART_SetConfig+0x118>)
 800331e:	fba3 0302 	umull	r0, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <UART_SetConfig+0x118>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	4419      	add	r1, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <UART_SetConfig+0x118>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	440a      	add	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40013800 	.word	0x40013800
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	f000 f822 	bl	80033e4 <_init>
 80033a0:	2600      	movs	r6, #0
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	08003428 	.word	0x08003428
 80033c8:	08003428 	.word	0x08003428
 80033cc:	08003428 	.word	0x08003428
 80033d0:	0800342c 	.word	0x0800342c

080033d4 <memset>:
 80033d4:	4603      	mov	r3, r0
 80033d6:	4402      	add	r2, r0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	f803 1b01 	strb.w	r1, [r3], #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <_init>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr

080033f0 <_fini>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr
