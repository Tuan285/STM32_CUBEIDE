
RFID_2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c50  08003c50  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c50  08003c50  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200000a4  08003cfc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003cfc  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f733  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2b  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00031730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00032550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018463  00000000  00000000  000332b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eefc  00000000  00000000  0004b71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2ad  00000000  00000000  0005a617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e78c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  000e7918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bd0 	.word	0x08003bd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08003bd0 	.word	0x08003bd0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <servo_out_ON>:
uint8_t Status5 = 0;

uint32_t t_prev = 0;
uint32_t t_prev2 = 0;
uint32_t t_prev3 = 0;
void servo_out_ON() {
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 750);  // duty cycle is 2ms
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <servo_out_ON+0x18>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000168:	639a      	str	r2, [r3, #56]	; 0x38
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	200001b8 	.word	0x200001b8

08000178 <servo_out_OFF>:
void servo_out_OFF() {
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);  // duty cycle is 1 ms
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <servo_out_OFF+0x14>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	22fa      	movs	r2, #250	; 0xfa
 8000182:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	200001b8 	.word	0x200001b8

08000190 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000194:	f000 feaa 	bl	8000eec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000198:	f000 f930 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800019c:	f000 fa40 	bl	8000620 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001a0:	f000 f968 	bl	8000474 <MX_SPI1_Init>
	MX_TIM2_Init();
 80001a4:	f000 f99c 	bl	80004e0 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80001a8:	f000 fa10 	bl	80005cc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001ac:	2104      	movs	r1, #4
 80001ae:	4880      	ldr	r0, [pc, #512]	; (80003b0 <main+0x220>)
 80001b0:	f002 f90e 	bl	80023d0 <HAL_TIM_PWM_Start>
	TM_MFRC522_Init();
 80001b4:	f000 fae4 	bl	8000780 <TM_MFRC522_Init>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	487d      	ldr	r0, [pc, #500]	; (80003b4 <main+0x224>)
 80001c0:	f001 f95e 	bl	8001480 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2180      	movs	r1, #128	; 0x80
 80001c8:	487b      	ldr	r0, [pc, #492]	; (80003b8 <main+0x228>)
 80001ca:	f001 f959 	bl	8001480 <HAL_GPIO_WritePin>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, DataRx, sizeof(DataRx));
 80001ce:	2214      	movs	r2, #20
 80001d0:	497a      	ldr	r1, [pc, #488]	; (80003bc <main+0x22c>)
 80001d2:	487b      	ldr	r0, [pc, #492]	; (80003c0 <main+0x230>)
 80001d4:	f002 fefd 	bl	8002fd2 <HAL_UARTEx_ReceiveToIdle_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//tt_loa = HAL_GPIO_ReadPin(AMTHANH_GPIO_Port, AMTHANH_Pin);
		if (HAL_GetTick() - t_prev >= 100) {
 80001d8:	f000 fee0 	bl	8000f9c <HAL_GetTick>
 80001dc:	4602      	mov	r2, r0
 80001de:	4b79      	ldr	r3, [pc, #484]	; (80003c4 <main+0x234>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	1ad3      	subs	r3, r2, r3
 80001e4:	2b63      	cmp	r3, #99	; 0x63
 80001e6:	f240 809e 	bls.w	8000326 <main+0x196>
			if (!TM_MFRC522_Request(PICC_REQIDL, CardID)) {
 80001ea:	4977      	ldr	r1, [pc, #476]	; (80003c8 <main+0x238>)
 80001ec:	2026      	movs	r0, #38	; 0x26
 80001ee:	f000 fbae 	bl	800094e <TM_MFRC522_Request>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	f040 8091 	bne.w	800031c <main+0x18c>
				if (!TM_MFRC522_Anticoll(CardID)) {
 80001fa:	4873      	ldr	r0, [pc, #460]	; (80003c8 <main+0x238>)
 80001fc:	f000 fc9b 	bl	8000b36 <TM_MFRC522_Anticoll>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 808a 	bne.w	800031c <main+0x18c>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	4869      	ldr	r0, [pc, #420]	; (80003b4 <main+0x224>)
 8000210:	f001 f936 	bl	8001480 <HAL_GPIO_WritePin>
					if (TM_MFRC522_Compare(CardID, MyID1) == MI_OK) {
 8000214:	496d      	ldr	r1, [pc, #436]	; (80003cc <main+0x23c>)
 8000216:	486c      	ldr	r0, [pc, #432]	; (80003c8 <main+0x238>)
 8000218:	f000 fad6 	bl	80007c8 <TM_MFRC522_Compare>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10d      	bne.n	800023e <main+0xae>
						servo_out_ON();
 8000222:	f7ff ff9b 	bl	800015c <servo_out_ON>
						num = 1;
 8000226:	4b6a      	ldr	r3, [pc, #424]	; (80003d0 <main+0x240>)
 8000228:	2201      	movs	r2, #1
 800022a:	701a      	strb	r2, [r3, #0]
						Status1 = 1;
 800022c:	4b69      	ldr	r3, [pc, #420]	; (80003d4 <main+0x244>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 8000232:	2201      	movs	r2, #1
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	4860      	ldr	r0, [pc, #384]	; (80003b8 <main+0x228>)
 8000238:	f001 f922 	bl	8001480 <HAL_GPIO_WritePin>
 800023c:	e052      	b.n	80002e4 <main+0x154>
					} else if (TM_MFRC522_Compare(CardID, MyID2) == MI_OK) {
 800023e:	4966      	ldr	r1, [pc, #408]	; (80003d8 <main+0x248>)
 8000240:	4861      	ldr	r0, [pc, #388]	; (80003c8 <main+0x238>)
 8000242:	f000 fac1 	bl	80007c8 <TM_MFRC522_Compare>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d10d      	bne.n	8000268 <main+0xd8>
						servo_out_ON();
 800024c:	f7ff ff86 	bl	800015c <servo_out_ON>
						num = 2;
 8000250:	4b5f      	ldr	r3, [pc, #380]	; (80003d0 <main+0x240>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]
						Status1 = 1;
 8000256:	4b5f      	ldr	r3, [pc, #380]	; (80003d4 <main+0x244>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	4855      	ldr	r0, [pc, #340]	; (80003b8 <main+0x228>)
 8000262:	f001 f90d 	bl	8001480 <HAL_GPIO_WritePin>
 8000266:	e03d      	b.n	80002e4 <main+0x154>
					} else if (TM_MFRC522_Compare(CardID, MyID3) == MI_OK) {
 8000268:	495c      	ldr	r1, [pc, #368]	; (80003dc <main+0x24c>)
 800026a:	4857      	ldr	r0, [pc, #348]	; (80003c8 <main+0x238>)
 800026c:	f000 faac 	bl	80007c8 <TM_MFRC522_Compare>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d10d      	bne.n	8000292 <main+0x102>
						servo_out_ON();
 8000276:	f7ff ff71 	bl	800015c <servo_out_ON>
						num = 3;
 800027a:	4b55      	ldr	r3, [pc, #340]	; (80003d0 <main+0x240>)
 800027c:	2203      	movs	r2, #3
 800027e:	701a      	strb	r2, [r3, #0]
						Status1 = 1;
 8000280:	4b54      	ldr	r3, [pc, #336]	; (80003d4 <main+0x244>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	484b      	ldr	r0, [pc, #300]	; (80003b8 <main+0x228>)
 800028c:	f001 f8f8 	bl	8001480 <HAL_GPIO_WritePin>
 8000290:	e028      	b.n	80002e4 <main+0x154>
					} else if (TM_MFRC522_Compare(CardID, MyID4) == MI_OK) {
 8000292:	4953      	ldr	r1, [pc, #332]	; (80003e0 <main+0x250>)
 8000294:	484c      	ldr	r0, [pc, #304]	; (80003c8 <main+0x238>)
 8000296:	f000 fa97 	bl	80007c8 <TM_MFRC522_Compare>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d10d      	bne.n	80002bc <main+0x12c>
						servo_out_ON();
 80002a0:	f7ff ff5c 	bl	800015c <servo_out_ON>
						num = 4;
 80002a4:	4b4a      	ldr	r3, [pc, #296]	; (80003d0 <main+0x240>)
 80002a6:	2204      	movs	r2, #4
 80002a8:	701a      	strb	r2, [r3, #0]
						Status1 = 1;
 80002aa:	4b4a      	ldr	r3, [pc, #296]	; (80003d4 <main+0x244>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4840      	ldr	r0, [pc, #256]	; (80003b8 <main+0x228>)
 80002b6:	f001 f8e3 	bl	8001480 <HAL_GPIO_WritePin>
 80002ba:	e013      	b.n	80002e4 <main+0x154>
					} else if (TM_MFRC522_Compare(CardID, MyID5) == MI_OK) {
 80002bc:	4949      	ldr	r1, [pc, #292]	; (80003e4 <main+0x254>)
 80002be:	4842      	ldr	r0, [pc, #264]	; (80003c8 <main+0x238>)
 80002c0:	f000 fa82 	bl	80007c8 <TM_MFRC522_Compare>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d10c      	bne.n	80002e4 <main+0x154>
						servo_out_ON();
 80002ca:	f7ff ff47 	bl	800015c <servo_out_ON>
						num = 4;
 80002ce:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <main+0x240>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	701a      	strb	r2, [r3, #0]
						Status1 = 1;
 80002d4:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <main+0x244>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	4836      	ldr	r0, [pc, #216]	; (80003b8 <main+0x228>)
 80002e0:	f001 f8ce 	bl	8001480 <HAL_GPIO_WritePin>
					}
					sprintf((char*) buffer, "%d\r\n", num);
 80002e4:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <main+0x240>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	493f      	ldr	r1, [pc, #252]	; (80003e8 <main+0x258>)
 80002ec:	483f      	ldr	r0, [pc, #252]	; (80003ec <main+0x25c>)
 80002ee:	f003 f835 	bl	800335c <siprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer,
							strlen((char*) buffer), 1000);
 80002f2:	483e      	ldr	r0, [pc, #248]	; (80003ec <main+0x25c>)
 80002f4:	f7ff ff2a 	bl	800014c <strlen>
 80002f8:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer,
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	493a      	ldr	r1, [pc, #232]	; (80003ec <main+0x25c>)
 8000302:	482f      	ldr	r0, [pc, #188]	; (80003c0 <main+0x230>)
 8000304:	f002 fde2 	bl	8002ecc <HAL_UART_Transmit>
					t_prev2 = HAL_GetTick();
 8000308:	f000 fe48 	bl	8000f9c <HAL_GetTick>
 800030c:	4603      	mov	r3, r0
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <main+0x260>)
 8000310:	6013      	str	r3, [r2, #0]
					t_prev3 = HAL_GetTick();
 8000312:	f000 fe43 	bl	8000f9c <HAL_GetTick>
 8000316:	4603      	mov	r3, r0
 8000318:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <main+0x264>)
 800031a:	6013      	str	r3, [r2, #0]
				}
			}
			t_prev = HAL_GetTick();
 800031c:	f000 fe3e 	bl	8000f9c <HAL_GetTick>
 8000320:	4603      	mov	r3, r0
 8000322:	4a28      	ldr	r2, [pc, #160]	; (80003c4 <main+0x234>)
 8000324:	6013      	str	r3, [r2, #0]
		}
		if (Status1 == 1) {
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <main+0x244>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	f47f af54 	bne.w	80001d8 <main+0x48>
			if (HAL_GetTick() - t_prev3 >= 1000) {
 8000330:	f000 fe34 	bl	8000f9c <HAL_GetTick>
 8000334:	4602      	mov	r2, r0
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <main+0x264>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1ad3      	subs	r3, r2, r3
 800033c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000340:	d309      	bcc.n	8000356 <main+0x1c6>
				HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	481c      	ldr	r0, [pc, #112]	; (80003b8 <main+0x228>)
 8000348:	f001 f89a 	bl	8001480 <HAL_GPIO_WritePin>
				t_prev3 = HAL_GetTick();
 800034c:	f000 fe26 	bl	8000f9c <HAL_GetTick>
 8000350:	4603      	mov	r3, r0
 8000352:	4a28      	ldr	r2, [pc, #160]	; (80003f4 <main+0x264>)
 8000354:	6013      	str	r3, [r2, #0]
			}
			if (HAL_GetTick() - t_prev2 >= 5000) {
 8000356:	f000 fe21 	bl	8000f9c <HAL_GetTick>
 800035a:	4602      	mov	r2, r0
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <main+0x260>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	f241 3287 	movw	r2, #4999	; 0x1387
 8000366:	4293      	cmp	r3, r2
 8000368:	f67f af36 	bls.w	80001d8 <main+0x48>
				HAL_UART_Transmit(&huart3, data, sizeof(data), 1000);
 800036c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000370:	220a      	movs	r2, #10
 8000372:	4921      	ldr	r1, [pc, #132]	; (80003f8 <main+0x268>)
 8000374:	4812      	ldr	r0, [pc, #72]	; (80003c0 <main+0x230>)
 8000376:	f002 fda9 	bl	8002ecc <HAL_UART_Transmit>
				servo_out_OFF();
 800037a:	f7ff fefd 	bl	8000178 <servo_out_OFF>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <main+0x224>)
 8000386:	f001 f87b 	bl	8001480 <HAL_GPIO_WritePin>
				t_prev2 = HAL_GetTick();
 800038a:	f000 fe07 	bl	8000f9c <HAL_GetTick>
 800038e:	4603      	mov	r3, r0
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <main+0x260>)
 8000392:	6013      	str	r3, [r2, #0]
				memset(CardID, 0, strlen((char*) CardID));
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <main+0x238>)
 8000396:	f7ff fed9 	bl	800014c <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <main+0x238>)
 80003a2:	f002 ffd3 	bl	800334c <memset>
				Status1 = 0;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <main+0x244>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - t_prev >= 100) {
 80003ac:	e714      	b.n	80001d8 <main+0x48>
 80003ae:	bf00      	nop
 80003b0:	200001b8 	.word	0x200001b8
 80003b4:	40011000 	.word	0x40011000
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	20000148 	.word	0x20000148
 80003c0:	200000dc 	.word	0x200000dc
 80003c4:	200000c4 	.word	0x200000c4
 80003c8:	20000200 	.word	0x20000200
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000144 	.word	0x20000144
 80003d4:	200000c0 	.word	0x200000c0
 80003d8:	20000008 	.word	0x20000008
 80003dc:	20000010 	.word	0x20000010
 80003e0:	20000018 	.word	0x20000018
 80003e4:	20000020 	.word	0x20000020
 80003e8:	08003be8 	.word	0x08003be8
 80003ec:	20000130 	.word	0x20000130
 80003f0:	200000c8 	.word	0x200000c8
 80003f4:	200000cc 	.word	0x200000cc
 80003f8:	20000028 	.word	0x20000028

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f002 ff9e 	bl	800334c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2310      	movs	r3, #16
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	4618      	mov	r0, r3
 8000434:	f001 f83c 	bl	80014b0 <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x46>
		Error_Handler();
 800043e:	f000 f971 	bl	8000724 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 faa8 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x6e>
		Error_Handler();
 8000466:	f000 f95d 	bl	8000724 <Error_Handler>
	}
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	; 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_SPI1_Init+0x64>)
 800047a:	4a18      	ldr	r2, [pc, #96]	; (80004dc <MX_SPI1_Init+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000484:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_SPI1_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004c0:	220a      	movs	r2, #10
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004c6:	f001 fc01 	bl	8001ccc <HAL_SPI_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80004d0:	f000 f928 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000160 	.word	0x20000160
 80004dc:	40013000 	.word	0x40013000

080004e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08e      	sub	sp, #56	; 0x38
 80004e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004f4:	f107 0320 	add.w	r3, r7, #32
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]
 800050e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000516:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16 - 1;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_TIM2_Init+0xe8>)
 800051a:	220f      	movs	r2, #15
 800051c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000526:	f242 720f 	movw	r2, #9999	; 0x270f
 800052a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_TIM2_Init+0xe8>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000538:	4823      	ldr	r0, [pc, #140]	; (80005c8 <MX_TIM2_Init+0xe8>)
 800053a:	f001 fea1 	bl	8002280 <HAL_TIM_Base_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000544:	f000 f8ee 	bl	8000724 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	4619      	mov	r1, r3
 8000554:	481c      	ldr	r0, [pc, #112]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000556:	f002 f89f 	bl	8002698 <HAL_TIM_ConfigClockSource>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000560:	f000 f8e0 	bl	8000724 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000564:	4818      	ldr	r0, [pc, #96]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000566:	f001 feda 	bl	800231e <HAL_TIM_PWM_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000570:	f000 f8d8 	bl	8000724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4619      	mov	r1, r3
 8000582:	4811      	ldr	r0, [pc, #68]	; (80005c8 <MX_TIM2_Init+0xe8>)
 8000584:	f002 fbf4 	bl	8002d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800058e:	f000 f8c9 	bl	8000724 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000592:	2360      	movs	r3, #96	; 0x60
 8000594:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2204      	movs	r2, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <MX_TIM2_Init+0xe8>)
 80005aa:	f001 ffb3 	bl	8002514 <HAL_TIM_PWM_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80005b4:	f000 f8b6 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_TIM2_Init+0xe8>)
 80005ba:	f000 fb91 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80005be:	bf00      	nop
 80005c0:	3738      	adds	r7, #56	; 0x38
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200001b8 	.word	0x200001b8

080005cc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART3_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005dc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART3_UART_Init+0x4c>)
 8000604:	f002 fc12 	bl	8002e2c <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800060e:	f000 f889 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000dc 	.word	0x200000dc
 800061c:	40004800 	.word	0x40004800

08000620 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0xf4>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_GPIO_Init+0xf4>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a30      	ldr	r2, [pc, #192]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_GPIO_Init+0xf4>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xf4>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xf4>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xf4>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <MX_GPIO_Init+0xf8>)
 800069c:	f000 fef0 	bl	8001480 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <MX_GPIO_Init+0xfc>)
 80006a6:	f000 feeb 	bl	8001480 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AMTHANH_GPIO_Port, AMTHANH_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	481c      	ldr	r0, [pc, #112]	; (8000720 <MX_GPIO_Init+0x100>)
 80006b0:	f000 fee6 	bl	8001480 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0xf8>)
 80006ce:	f000 fd53 	bl	8001178 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_Pin */
	GPIO_InitStruct.Pin = SS_Pin;
 80006d2:	2310      	movs	r3, #16
 80006d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2302      	movs	r3, #2
 80006e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xfc>)
 80006ea:	f000 fd45 	bl	8001178 <HAL_GPIO_Init>

	/*Configure GPIO pin : AMTHANH_Pin */
	GPIO_InitStruct.Pin = AMTHANH_Pin;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(AMTHANH_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_GPIO_Init+0x100>)
 8000706:	f000 fd37 	bl	8001178 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	40011000 	.word	0x40011000
 800071c:	40010800 	.word	0x40010800
 8000720:	40010c00 	.word	0x40010c00

08000724 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m; 
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 800073e:	bf00      	nop
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <TM_SPI_Send+0x4c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	2b02      	cmp	r3, #2
 800074c:	d1f8      	bne.n	8000740 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 800074e:	f107 0208 	add.w	r2, r7, #8
 8000752:	f107 010c 	add.w	r1, r7, #12
 8000756:	230a      	movs	r3, #10
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <TM_SPI_Send+0x4c>)
 800075e:	f001 fb39 	bl	8001dd4 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8000762:	bf00      	nop
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <TM_SPI_Send+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	2b80      	cmp	r3, #128	; 0x80
 8000770:	d0f8      	beq.n	8000764 <TM_SPI_Send+0x34>
	return data_re[0];
 8000772:	7a3b      	ldrb	r3, [r7, #8]
	
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000160 	.word	0x20000160

08000780 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8000784:	f000 f8db 	bl	800093e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000788:	218d      	movs	r1, #141	; 0x8d
 800078a:	202a      	movs	r0, #42	; 0x2a
 800078c:	f000 f83c 	bl	8000808 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000790:	213e      	movs	r1, #62	; 0x3e
 8000792:	202b      	movs	r0, #43	; 0x2b
 8000794:	f000 f838 	bl	8000808 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000798:	211e      	movs	r1, #30
 800079a:	202d      	movs	r0, #45	; 0x2d
 800079c:	f000 f834 	bl	8000808 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80007a0:	2100      	movs	r1, #0
 80007a2:	202c      	movs	r0, #44	; 0x2c
 80007a4:	f000 f830 	bl	8000808 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80007a8:	2170      	movs	r1, #112	; 0x70
 80007aa:	2026      	movs	r0, #38	; 0x26
 80007ac:	f000 f82c 	bl	8000808 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	2015      	movs	r0, #21
 80007b4:	f000 f828 	bl	8000808 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80007b8:	213d      	movs	r1, #61	; 0x3d
 80007ba:	2011      	movs	r0, #17
 80007bc:	f000 f824 	bl	8000808 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80007c0:	f000 f8a8 	bl	8000914 <TM_MFRC522_AntennaOn>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <TM_MFRC522_Compare>:
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
	return status;
}

TM_MFRC522_Status_t TM_MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 1; i < 5; i++) {
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e00e      	b.n	80007f6 <TM_MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) {
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	6839      	ldr	r1, [r7, #0]
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d001      	beq.n	80007f0 <TM_MFRC522_Compare+0x28>
			return MI_ERR;
 80007ec:	2302      	movs	r3, #2
 80007ee:	e006      	b.n	80007fe <TM_MFRC522_Compare+0x36>
	for (i = 1; i < 5; i++) {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	3301      	adds	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d9ed      	bls.n	80007d8 <TM_MFRC522_Compare+0x10>
		}
	}
	return MI_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <TM_MFRC522_WriteRegister>:


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <TM_MFRC522_WriteRegister+0x48>)
 800081e:	f000 fe2f 	bl	8001480 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff7e 	bl	8000730 <TM_SPI_Send>
	//Send data	
	TM_SPI_Send(val);
 8000834:	79bb      	ldrb	r3, [r7, #6]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff7a 	bl	8000730 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <TM_MFRC522_WriteRegister+0x48>)
 8000842:	f000 fe1d 	bl	8001480 <HAL_GPIO_WritePin>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010800 	.word	0x40010800

08000854 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <TM_MFRC522_ReadRegister+0x4c>)
 8000864:	f000 fe0c 	bl	8001480 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);	
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	b25b      	sxtb	r3, r3
 800086e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000872:	b25b      	sxtb	r3, r3
 8000874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000878:	b25b      	sxtb	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff57 	bl	8000730 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff ff54 	bl	8000730 <TM_SPI_Send>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <TM_MFRC522_ReadRegister+0x4c>)
 8000892:	f000 fdf5 	bl	8001480 <HAL_GPIO_WritePin>

	return val;	
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40010800 	.word	0x40010800

080008a4 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffcc 	bl	8000854 <TM_MFRC522_ReadRegister>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff9c 	bl	8000808 <TM_MFRC522_WriteRegister>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffb2 	bl	8000854 <TM_MFRC522_ReadRegister>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4013      	ands	r3, r2
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	b2da      	uxtb	r2, r3
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff7e 	bl	8000808 <TM_MFRC522_WriteRegister>
} 
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800091a:	2014      	movs	r0, #20
 800091c:	f7ff ff9a 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d103      	bne.n	8000936 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800092e:	2103      	movs	r1, #3
 8000930:	2014      	movs	r0, #20
 8000932:	f7ff ffb7 	bl	80008a4 <TM_MFRC522_SetBitMask>
	}
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000942:	210f      	movs	r1, #15
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff ff5f 	bl	8000808 <TM_MFRC522_WriteRegister>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af02      	add	r7, sp, #8
 8000954:	4603      	mov	r3, r0
 8000956:	6039      	str	r1, [r7, #0]
 8000958:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800095a:	2107      	movs	r1, #7
 800095c:	200d      	movs	r0, #13
 800095e:	f7ff ff53 	bl	8000808 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2201      	movs	r2, #1
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	200c      	movs	r0, #12
 8000976:	f000 f80f 	bl	8000998 <TM_MFRC522_ToCard>
 800097a:	4603      	mov	r3, r0
 800097c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {    
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <TM_MFRC522_Request+0x3c>
 8000984:	89bb      	ldrh	r3, [r7, #12]
 8000986:	2b10      	cmp	r3, #16
 8000988:	d001      	beq.n	800098e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 800098a:	2302      	movs	r3, #2
 800098c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	4613      	mov	r3, r2
 80009a8:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80009aa:	2302      	movs	r3, #2
 80009ac:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80009b2:	2300      	movs	r3, #0
 80009b4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b0c      	cmp	r3, #12
 80009ba:	d006      	beq.n	80009ca <TM_MFRC522_ToCard+0x32>
 80009bc:	2b0e      	cmp	r3, #14
 80009be:	d109      	bne.n	80009d4 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80009c0:	2312      	movs	r3, #18
 80009c2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80009c4:	2310      	movs	r3, #16
 80009c6:	757b      	strb	r3, [r7, #21]
			break;
 80009c8:	e005      	b.n	80009d6 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80009ca:	2377      	movs	r3, #119	; 0x77
 80009cc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80009ce:	2330      	movs	r3, #48	; 0x30
 80009d0:	757b      	strb	r3, [r7, #21]
			break;
 80009d2:	e000      	b.n	80009d6 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80009d4:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80009d6:	7dbb      	ldrb	r3, [r7, #22]
 80009d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4619      	mov	r1, r3
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff ff11 	bl	8000808 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	2004      	movs	r0, #4
 80009ea:	f7ff ff75 	bl	80008d8 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	200a      	movs	r0, #10
 80009f2:	f7ff ff57 	bl	80008a4 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff ff05 	bl	8000808 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 80009fe:	2300      	movs	r3, #0
 8000a00:	827b      	strh	r3, [r7, #18]
 8000a02:	e00a      	b.n	8000a1a <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000a04:	8a7b      	ldrh	r3, [r7, #18]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2009      	movs	r0, #9
 8000a10:	f7ff fefa 	bl	8000808 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000a14:	8a7b      	ldrh	r3, [r7, #18]
 8000a16:	3301      	adds	r3, #1
 8000a18:	827b      	strh	r3, [r7, #18]
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	8a7a      	ldrh	r2, [r7, #18]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3ef      	bcc.n	8000a04 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff feed 	bl	8000808 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	2b0c      	cmp	r3, #12
 8000a32:	d103      	bne.n	8000a3c <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	200d      	movs	r0, #13
 8000a38:	f7ff ff34 	bl	80008a4 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000a3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a40:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff ff06 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	753b      	strb	r3, [r7, #20]
		i--;
 8000a4c:	8a7b      	ldrh	r3, [r7, #18]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000a52:	8a7b      	ldrh	r3, [r7, #18]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00a      	beq.n	8000a6e <TM_MFRC522_ToCard+0xd6>
 8000a58:	7d3b      	ldrb	r3, [r7, #20]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d105      	bne.n	8000a6e <TM_MFRC522_ToCard+0xd6>
 8000a62:	7d3a      	ldrb	r2, [r7, #20]
 8000a64:	7d7b      	ldrb	r3, [r7, #21]
 8000a66:	4013      	ands	r3, r2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0e9      	beq.n	8000a42 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	200d      	movs	r0, #13
 8000a72:	f7ff ff31 	bl	80008d8 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000a76:	8a7b      	ldrh	r3, [r7, #18]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d057      	beq.n	8000b2c <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f7ff fee9 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f003 031b 	and.w	r3, r3, #27
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14d      	bne.n	8000b28 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000a90:	7d3a      	ldrb	r2, [r7, #20]
 8000a92:	7dbb      	ldrb	r3, [r7, #22]
 8000a94:	4013      	ands	r3, r2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b0c      	cmp	r3, #12
 8000aa8:	d140      	bne.n	8000b2c <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f7ff fed2 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000ab4:	200c      	movs	r0, #12
 8000ab6:	f7ff fecd 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000ac2:	7c7b      	ldrb	r3, [r7, #17]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00b      	beq.n	8000ae0 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000ac8:	7d3b      	ldrb	r3, [r7, #20]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	7c7b      	ldrb	r3, [r7, #17]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	801a      	strh	r2, [r3, #0]
 8000ade:	e005      	b.n	8000aec <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000ae0:	7d3b      	ldrb	r3, [r7, #20]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aea:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000af2:	2301      	movs	r3, #1
 8000af4:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000af6:	7d3b      	ldrb	r3, [r7, #20]
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	d901      	bls.n	8000b00 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000afc:	2310      	movs	r3, #16
 8000afe:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000b00:	2300      	movs	r3, #0
 8000b02:	827b      	strh	r3, [r7, #18]
 8000b04:	e00a      	b.n	8000b1c <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000b06:	8a7b      	ldrh	r3, [r7, #18]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	18d4      	adds	r4, r2, r3
 8000b0c:	2009      	movs	r0, #9
 8000b0e:	f7ff fea1 	bl	8000854 <TM_MFRC522_ReadRegister>
 8000b12:	4603      	mov	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000b16:	8a7b      	ldrh	r3, [r7, #18]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	827b      	strh	r3, [r7, #18]
 8000b1c:	7d3b      	ldrb	r3, [r7, #20]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	8a7a      	ldrh	r2, [r7, #18]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ef      	bcc.n	8000b06 <TM_MFRC522_ToCard+0x16e>
 8000b26:	e001      	b.n	8000b2c <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000b28:	2302      	movs	r3, #2
 8000b2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}

08000b36 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af02      	add	r7, sp, #8
 8000b3c:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000b42:	2100      	movs	r1, #0
 8000b44:	200d      	movs	r0, #13
 8000b46:	f7ff fe5f 	bl	8000808 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2293      	movs	r2, #147	; 0x93
 8000b4e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3301      	adds	r3, #1
 8000b54:	2220      	movs	r2, #32
 8000b56:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000b58:	f107 030a 	add.w	r3, r7, #10
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2202      	movs	r2, #2
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	200c      	movs	r0, #12
 8000b66:	f7ff ff17 	bl	8000998 <TM_MFRC522_ToCard>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d118      	bne.n	8000ba6 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
 8000b78:	e009      	b.n	8000b8e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	4053      	eors	r3, r2
 8000b86:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9f2      	bls.n	8000b7a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	7b7a      	ldrb	r2, [r7, #13]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d001      	beq.n	8000ba6 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d12f      	bne.n	8000c94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_SPI_MspInit+0x90>)
 8000c78:	f000 fa7e 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x90>)
 8000c90:	f000 fa72 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfe:	d117      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <HAL_TIM_MspPostInit+0x5c>)
 8000d2c:	f000 fa24 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d131      	bne.n	8000dc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_UART_MspInit+0x94>)
 8000da6:	f000 f9e7 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0x94>)
 8000dc0:	f000 f9da 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f8ab 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 fa4e 	bl	80032f8 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20005000 	.word	0x20005000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200000d0 	.word	0x200000d0
 8000e90:	20000240 	.word	0x20000240

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff fff8 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ea6:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ebc:	4c09      	ldr	r4, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fa1b 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff f95f 	bl	8000190 <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000edc:	08003c58 	.word	0x08003c58
  ldr r2, =_sbss
 8000ee0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000ee4:	2000023c 	.word	0x2000023c

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f907 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fe52 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f911 	bl	800115e <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f8e7 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	2000003c 	.word	0x2000003c
 8000f74:	20000038 	.word	0x20000038

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	2000003c 	.word	0x2000003c
 8000f98:	20000228 	.word	0x20000228

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000228 	.word	0x20000228

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff49 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff5e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffb0 	bl	80010cc <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e169      	b.n	8001460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800118c:	2201      	movs	r2, #1
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8158 	bne.w	800145a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a9a      	ldr	r2, [pc, #616]	; (8001418 <HAL_GPIO_Init+0x2a0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d05e      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011b4:	4a98      	ldr	r2, [pc, #608]	; (8001418 <HAL_GPIO_Init+0x2a0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d875      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011ba:	4a98      	ldr	r2, [pc, #608]	; (800141c <HAL_GPIO_Init+0x2a4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d058      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011c0:	4a96      	ldr	r2, [pc, #600]	; (800141c <HAL_GPIO_Init+0x2a4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d86f      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <HAL_GPIO_Init+0x2a8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d052      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011cc:	4a94      	ldr	r2, [pc, #592]	; (8001420 <HAL_GPIO_Init+0x2a8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d869      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011d2:	4a94      	ldr	r2, [pc, #592]	; (8001424 <HAL_GPIO_Init+0x2ac>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d04c      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011d8:	4a92      	ldr	r2, [pc, #584]	; (8001424 <HAL_GPIO_Init+0x2ac>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d863      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011de:	4a92      	ldr	r2, [pc, #584]	; (8001428 <HAL_GPIO_Init+0x2b0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d046      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011e4:	4a90      	ldr	r2, [pc, #576]	; (8001428 <HAL_GPIO_Init+0x2b0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d85d      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d82a      	bhi.n	8001244 <HAL_GPIO_Init+0xcc>
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d859      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011f2:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <HAL_GPIO_Init+0x80>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	08001273 	.word	0x08001273
 80011fc:	0800124d 	.word	0x0800124d
 8001200:	0800125f 	.word	0x0800125f
 8001204:	080012a1 	.word	0x080012a1
 8001208:	080012a7 	.word	0x080012a7
 800120c:	080012a7 	.word	0x080012a7
 8001210:	080012a7 	.word	0x080012a7
 8001214:	080012a7 	.word	0x080012a7
 8001218:	080012a7 	.word	0x080012a7
 800121c:	080012a7 	.word	0x080012a7
 8001220:	080012a7 	.word	0x080012a7
 8001224:	080012a7 	.word	0x080012a7
 8001228:	080012a7 	.word	0x080012a7
 800122c:	080012a7 	.word	0x080012a7
 8001230:	080012a7 	.word	0x080012a7
 8001234:	080012a7 	.word	0x080012a7
 8001238:	080012a7 	.word	0x080012a7
 800123c:	08001255 	.word	0x08001255
 8001240:	08001269 	.word	0x08001269
 8001244:	4a79      	ldr	r2, [pc, #484]	; (800142c <HAL_GPIO_Init+0x2b4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800124a:	e02c      	b.n	80012a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e029      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	3304      	adds	r3, #4
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e024      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	3308      	adds	r3, #8
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e01f      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	330c      	adds	r3, #12
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e01a      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127a:	2304      	movs	r3, #4
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e013      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	611a      	str	r2, [r3, #16]
          break;
 8001292:	e009      	b.n	80012a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	615a      	str	r2, [r3, #20]
          break;
 800129e:	e003      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          break;
 80012a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2bff      	cmp	r3, #255	; 0xff
 80012ac:	d801      	bhi.n	80012b2 <HAL_GPIO_Init+0x13a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_Init+0x13e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d802      	bhi.n	80012c4 <HAL_GPIO_Init+0x14c>
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x152>
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	3b08      	subs	r3, #8
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	210f      	movs	r1, #15
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80b1 	beq.w	800145a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001310:	4a48      	ldr	r2, [pc, #288]	; (8001434 <HAL_GPIO_Init+0x2bc>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_GPIO_Init+0x2c0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1ec>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3f      	ldr	r2, [pc, #252]	; (800143c <HAL_GPIO_Init+0x2c4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1e8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_GPIO_Init+0x2c8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1e4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1e0>
 8001354:	2303      	movs	r3, #3
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001358:	2304      	movs	r3, #4
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 800135c:	2302      	movs	r3, #2
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001364:	2300      	movs	r3, #0
 8001366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001376:	492f      	ldr	r1, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x2bc>)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	492c      	ldr	r1, [pc, #176]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4928      	ldr	r1, [pc, #160]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4922      	ldr	r1, [pc, #136]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	491e      	ldr	r1, [pc, #120]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4918      	ldr	r1, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4914      	ldr	r1, [pc, #80]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d021      	beq.n	800144c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	490e      	ldr	r1, [pc, #56]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e021      	b.n	800145a <HAL_GPIO_Init+0x2e2>
 8001416:	bf00      	nop
 8001418:	10320000 	.word	0x10320000
 800141c:	10310000 	.word	0x10310000
 8001420:	10220000 	.word	0x10220000
 8001424:	10210000 	.word	0x10210000
 8001428:	10120000 	.word	0x10120000
 800142c:	10110000 	.word	0x10110000
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40011000 	.word	0x40011000
 8001444:	40011400 	.word	0x40011400
 8001448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_GPIO_Init+0x304>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	43db      	mvns	r3, r3
 8001454:	4909      	ldr	r1, [pc, #36]	; (800147c <HAL_GPIO_Init+0x304>)
 8001456:	4013      	ands	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	3301      	adds	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	f47f ae8e 	bne.w	800118c <HAL_GPIO_Init+0x14>
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	372c      	adds	r7, #44	; 0x2c
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e26c      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
 80014e8:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x12c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e246      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x76>
 8001518:	4b80      	ldr	r3, [pc, #512]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7f      	ldr	r2, [pc, #508]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a77      	ldr	r2, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xbc>
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a71      	ldr	r2, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 800156c:	4b6b      	ldr	r3, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a67      	ldr	r2, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fd06 	bl	8000f9c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fd02 	bl	8000f9c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1fa      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe4>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcf2 	bl	8000f9c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcee 	bl	8000f9c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1e6      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x10c>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1ba      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fca7 	bl	8000f9c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fca3 	bl	8000f9c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e19b      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc86 	bl	8000f9c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc82 	bl	8000f9c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e17a      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03a      	beq.n	8001734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fc66 	bl	8000f9c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc62 	bl	8000f9c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e15a      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 facc 	bl	8001c90 <RCC_Delay>
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fc4c 	bl	8000f9c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc48 	bl	8000f9c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d908      	bls.n	8001728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e140      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	42420000 	.word	0x42420000
 8001724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e9      	bne.n	8001708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a6 	beq.w	800188e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a93      	ldr	r2, [pc, #588]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a8a      	ldr	r2, [pc, #552]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fc09 	bl	8000f9c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fc05 	bl	8000f9c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	; 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0fd      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x312>
 80017b4:	4b7b      	ldr	r3, [pc, #492]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a7a      	ldr	r2, [pc, #488]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e02d      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x334>
 80017ca:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a72      	ldr	r2, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x356>
 80017ec:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a69      	ldr	r2, [pc, #420]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a63      	ldr	r2, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbb9 	bl	8000f9c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fbb5 	bl	8000f9c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0ab      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ee      	beq.n	800182e <HAL_RCC_OscConfig+0x37e>
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fba3 	bl	8000f9c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fb9f 	bl	8000f9c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e095      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8081 	beq.w	800199a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d061      	beq.n	8001968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d146      	bne.n	800193a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb73 	bl	8000f9c <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fb6f 	bl	8000f9c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e067      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	492d      	ldr	r1, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a19      	ldr	r1, [r3, #32]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	430b      	orrs	r3, r1
 8001906:	4927      	ldr	r1, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fb43 	bl	8000f9c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff fb3f 	bl	8000f9c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e037      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x46a>
 8001938:	e02f      	b.n	800199a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fb2c 	bl	8000f9c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fb28 	bl	8000f9c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e020      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x498>
 8001966:	e018      	b.n	800199a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e013      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42420060 	.word	0x42420060

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fa7c 	bl	8000f9c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fa78 	bl	8000f9c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9da 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003bf0 	.word	0x08003bf0
 8001b7c:	20000034 	.word	0x20000034
 8001b80:	20000038 	.word	0x20000038

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x36>
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c5b      	lsrs	r3, r3, #17
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	fb02 f203 	mul.w	r2, r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08003c08 	.word	0x08003c08
 8001c24:	08003c18 	.word	0x08003c18
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000034 	.word	0x20000034

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff2 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003c00 	.word	0x08003c00

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003c00 	.word	0x08003c00

08001c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <RCC_Delay+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <RCC_Delay+0x38>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0a5b      	lsrs	r3, r3, #9
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cac:	bf00      	nop
  }
  while (Delay --);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	60fa      	str	r2, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <RCC_Delay+0x1c>
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000034 	.word	0x20000034
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e076      	b.n	8001dcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cee:	d009      	beq.n	8001d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
 8001cf6:	e005      	b.n	8001d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe ff78 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	ea42 0103 	orr.w	r1, r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	0c1a      	lsrs	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f002 0204 	and.w	r2, r2, #4
 8001daa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001de2:	2301      	movs	r3, #1
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_SPI_TransmitReceive+0x26>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e198      	b.n	800212c <HAL_SPI_TransmitReceive+0x358>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e02:	f7ff f8cb 	bl	8000f9c <HAL_GetTick>
 8001e06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d00f      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0x70>
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e2a:	d107      	bne.n	8001e3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d103      	bne.n	8001e3c <HAL_SPI_TransmitReceive+0x68>
 8001e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d003      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e42:	e16d      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x82>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x82>
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e5c:	e160      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d003      	beq.n	8001e72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	887a      	ldrh	r2, [r7, #2]
 8001e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d007      	beq.n	8001ec6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ece:	d17c      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x10a>
 8001ed8:	8b7b      	ldrh	r3, [r7, #26]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d16a      	bne.n	8001fb4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	1c9a      	adds	r2, r3, #2
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f02:	e057      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d11b      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x176>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d016      	beq.n	8001f4a <HAL_SPI_TransmitReceive+0x176>
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d113      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	1c9a      	adds	r2, r3, #2
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d119      	bne.n	8001f8c <HAL_SPI_TransmitReceive+0x1b8>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d014      	beq.n	8001f8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	1c9a      	adds	r2, r3, #2
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f8c:	f7ff f806 	bl	8000f9c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d80b      	bhi.n	8001fb4 <HAL_SPI_TransmitReceive+0x1e0>
 8001f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d007      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001fb2:	e0b5      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1a2      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x130>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d19d      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x130>
 8001fc8:	e080      	b.n	80020cc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_SPI_TransmitReceive+0x204>
 8001fd2:	8b7b      	ldrh	r3, [r7, #26]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d16f      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ffe:	e05b      	b.n	80020b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d11c      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x274>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d017      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x274>
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d114      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d119      	bne.n	800208a <HAL_SPI_TransmitReceive+0x2b6>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002086:	2301      	movs	r3, #1
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800208a:	f7fe ff87 	bl	8000f9c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002096:	429a      	cmp	r2, r3
 8002098:	d803      	bhi.n	80020a2 <HAL_SPI_TransmitReceive+0x2ce>
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d102      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x2d4>
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80020b6:	e033      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d19e      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x22c>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d199      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f8b7 	bl	8002244 <SPI_EndRxTxTransaction>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020e8:	e01a      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002116:	e003      	b.n	8002120 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800212c:	4618      	mov	r0, r3
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002144:	f7fe ff2a 	bl	8000f9c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4413      	add	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002154:	f7fe ff22 	bl	8000f9c <HAL_GetTick>
 8002158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	0d1b      	lsrs	r3, r3, #20
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800216a:	e054      	b.n	8002216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002172:	d050      	beq.n	8002216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002174:	f7fe ff12 	bl	8000f9c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	d902      	bls.n	800218a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d13d      	bne.n	8002206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a2:	d111      	bne.n	80021c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ac:	d004      	beq.n	80021b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d107      	bne.n	80021c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d0:	d10f      	bne.n	80021f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e017      	b.n	8002236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3b01      	subs	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	429a      	cmp	r2, r3
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	429a      	cmp	r2, r3
 8002232:	d19b      	bne.n	800216c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000034 	.word	0x20000034

08002244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff ff6a 	bl	8002134 <SPI_WaitFlagStateUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e000      	b.n	8002278 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fcfe 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 fab2 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e041      	b.n	80023b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f839 	bl	80023bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 fa63 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_PWM_Start+0x24>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e022      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d109      	bne.n	800240e <HAL_TIM_PWM_Start+0x3e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e015      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d109      	bne.n	8002428 <HAL_TIM_PWM_Start+0x58>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <HAL_TIM_PWM_Start+0x6a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e05e      	b.n	8002500 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0x82>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	e013      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0x92>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	e00b      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_PWM_Start+0xa2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002470:	e003      	b.n	800247a <HAL_TIM_PWM_Start+0xaa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fc50 	bl	8002d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_TIM_PWM_Start+0x138>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d107      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_TIM_PWM_Start+0x138>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00e      	beq.n	80024ca <HAL_TIM_PWM_Start+0xfa>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b4:	d009      	beq.n	80024ca <HAL_TIM_PWM_Start+0xfa>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <HAL_TIM_PWM_Start+0x13c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d004      	beq.n	80024ca <HAL_TIM_PWM_Start+0xfa>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_TIM_PWM_Start+0x140>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d010      	beq.n	80024fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	e007      	b.n	80024fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800

08002514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800252e:	2302      	movs	r3, #2
 8002530:	e0ae      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	f200 809f 	bhi.w	8002680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	0800257d 	.word	0x0800257d
 800254c:	08002681 	.word	0x08002681
 8002550:	08002681 	.word	0x08002681
 8002554:	08002681 	.word	0x08002681
 8002558:	080025bd 	.word	0x080025bd
 800255c:	08002681 	.word	0x08002681
 8002560:	08002681 	.word	0x08002681
 8002564:	08002681 	.word	0x08002681
 8002568:	080025ff 	.word	0x080025ff
 800256c:	08002681 	.word	0x08002681
 8002570:	08002681 	.word	0x08002681
 8002574:	08002681 	.word	0x08002681
 8002578:	0800263f 	.word	0x0800263f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f9b2 	bl	80028ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0208 	orr.w	r2, r2, #8
 8002596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0204 	bic.w	r2, r2, #4
 80025a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6999      	ldr	r1, [r3, #24]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	619a      	str	r2, [r3, #24]
      break;
 80025ba:	e064      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f9f8 	bl	80029b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6999      	ldr	r1, [r3, #24]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]
      break;
 80025fc:	e043      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa41 	bl	8002a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0208 	orr.w	r2, r2, #8
 8002618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0204 	bic.w	r2, r2, #4
 8002628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
      break;
 800263c:	e023      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fa8b 	bl	8002b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69d9      	ldr	r1, [r3, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	61da      	str	r2, [r3, #28]
      break;
 800267e:	e002      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
      break;
 8002684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b4      	b.n	800281e <HAL_TIM_ConfigClockSource+0x186>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	d03e      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xd4>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	f200 8087 	bhi.w	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	f000 8086 	beq.w	800280a <HAL_TIM_ConfigClockSource+0x172>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d87f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d01a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xa6>
 8002708:	2b70      	cmp	r3, #112	; 0x70
 800270a:	d87b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b60      	cmp	r3, #96	; 0x60
 800270e:	d050      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002710:	2b60      	cmp	r3, #96	; 0x60
 8002712:	d877      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b50      	cmp	r3, #80	; 0x50
 8002716:	d03c      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xfa>
 8002718:	2b50      	cmp	r3, #80	; 0x50
 800271a:	d873      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d058      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d86f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d064      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b30      	cmp	r3, #48	; 0x30
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b20      	cmp	r3, #32
 8002732:	d867      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05c      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d05a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	e062      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f000 facc 	bl	8002cea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
      break;
 800276a:	e04f      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f000 fab5 	bl	8002cea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fa2c 	bl	8002bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	; 0x50
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fa83 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 fa4a 	bl	8002c58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	; 0x60
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa73 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 fa0c 	bl	8002bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa63 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 fa5a 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002802:	e003      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e000      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800280a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <TIM_Base_SetConfig+0xb8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <TIM_Base_SetConfig+0xbc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <TIM_Base_SetConfig+0xc0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <TIM_Base_SetConfig+0xb8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0x62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0x62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_Base_SetConfig+0xbc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0x62>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <TIM_Base_SetConfig+0xc0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <TIM_Base_SetConfig+0xb8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d103      	bne.n	80028d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	615a      	str	r2, [r3, #20]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800

080028ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 0201 	bic.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f023 0302 	bic.w	r3, r3, #2
 8002934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <TIM_OC1_SetConfig+0xc8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10c      	bne.n	8002962 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0308 	bic.w	r3, r3, #8
 800294e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <TIM_OC1_SetConfig+0xc8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	621a      	str	r2, [r3, #32]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40012c00 	.word	0x40012c00

080029b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f023 0210 	bic.w	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0320 	bic.w	r3, r3, #32
 8002a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <TIM_OC2_SetConfig+0xd0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10d      	bne.n	8002a34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <TIM_OC2_SetConfig+0xd0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d113      	bne.n	8002a64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00

08002a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <TIM_OC3_SetConfig+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10d      	bne.n	8002b06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <TIM_OC3_SetConfig+0xd0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d113      	bne.n	8002b36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	621a      	str	r2, [r3, #32]
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40012c00 	.word	0x40012c00

08002b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <TIM_OC4_SetConfig+0x98>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 030a 	bic.w	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0210 	bic.w	r2, r3, #16
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	031b      	lsls	r3, r3, #12
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f043 0307 	orr.w	r3, r3, #7
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	609a      	str	r2, [r3, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e046      	b.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d009      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10c      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e042      	b.n	8002ec4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd ff74 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f9b3 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d16d      	bne.n	8002fc8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_Transmit+0x2c>
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e066      	b.n	8002fca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe f847 	bl	8000f9c <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e02a      	b.n	8002f98 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f89d 	bl	800308c <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e036      	b.n	8002fca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1cf      	bne.n	8002f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f86d 	bl	800308c <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08c      	sub	sp, #48	; 0x30
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d14a      	bne.n	8003082 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e043      	b.n	8003084 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	461a      	mov	r2, r3
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8aa 	bl	8003168 <UART_Start_Receive_IT>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800301a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12c      	bne.n	800307c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2b01      	cmp	r3, #1
 8003028:	d125      	bne.n	8003076 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	617b      	str	r3, [r7, #20]
   return(result);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f043 0310 	orr.w	r3, r3, #16
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003060:	627a      	str	r2, [r7, #36]	; 0x24
 8003062:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	61fb      	str	r3, [r7, #28]
   return(result);
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003074:	e002      	b.n	800307c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800307c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003080:	e000      	b.n	8003084 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309c:	e050      	b.n	8003140 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d04c      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x30>
 80030ac:	f7fd ff76 	bl	8000f9c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d241      	bcs.n	8003140 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030dc:	637a      	str	r2, [r7, #52]	; 0x34
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003110:	623a      	str	r2, [r7, #32]
 8003112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	69f9      	ldr	r1, [r7, #28]
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	61bb      	str	r3, [r7, #24]
   return(result);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e00f      	b.n	8003160 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	429a      	cmp	r2, r3
 800315c:	d09f      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3740      	adds	r7, #64	; 0x40
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
	...

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe fd10 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	e002      	b.n	8003252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fcf8 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8003250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <UART_SetConfig+0x118>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	0119      	lsls	r1, r3, #4
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <UART_SetConfig+0x118>)
 800328a:	fba3 0302 	umull	r0, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <UART_SetConfig+0x118>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	4419      	add	r1, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	440a      	add	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013800 	.word	0x40013800
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000040 	.word	0x20000040

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2600      	movs	r6, #0
 8003308:	4d0c      	ldr	r5, [pc, #48]	; (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 fc5c 	bl	8003bd0 <_init>
 8003318:	2600      	movs	r6, #0
 800331a:	4d0a      	ldr	r5, [pc, #40]	; (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <__libc_init_array+0x44>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003c50 	.word	0x08003c50
 8003340:	08003c50 	.word	0x08003c50
 8003344:	08003c50 	.word	0x08003c50
 8003348:	08003c54 	.word	0x08003c54

0800334c <memset>:
 800334c:	4603      	mov	r3, r0
 800334e:	4402      	add	r2, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <siprintf>:
 800335c:	b40e      	push	{r1, r2, r3}
 800335e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003362:	b500      	push	{lr}
 8003364:	b09c      	sub	sp, #112	; 0x70
 8003366:	ab1d      	add	r3, sp, #116	; 0x74
 8003368:	9002      	str	r0, [sp, #8]
 800336a:	9006      	str	r0, [sp, #24]
 800336c:	9107      	str	r1, [sp, #28]
 800336e:	9104      	str	r1, [sp, #16]
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <siprintf+0x38>)
 8003372:	4909      	ldr	r1, [pc, #36]	; (8003398 <siprintf+0x3c>)
 8003374:	f853 2b04 	ldr.w	r2, [r3], #4
 8003378:	9105      	str	r1, [sp, #20]
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	a902      	add	r1, sp, #8
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	f000 f868 	bl	8003454 <_svfiprintf_r>
 8003384:	2200      	movs	r2, #0
 8003386:	9b02      	ldr	r3, [sp, #8]
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	b01c      	add	sp, #112	; 0x70
 800338c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003390:	b003      	add	sp, #12
 8003392:	4770      	bx	lr
 8003394:	20000040 	.word	0x20000040
 8003398:	ffff0208 	.word	0xffff0208

0800339c <__ssputs_r>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	4682      	mov	sl, r0
 80033a4:	429e      	cmp	r6, r3
 80033a6:	460c      	mov	r4, r1
 80033a8:	4690      	mov	r8, r2
 80033aa:	461f      	mov	r7, r3
 80033ac:	d838      	bhi.n	8003420 <__ssputs_r+0x84>
 80033ae:	898a      	ldrh	r2, [r1, #12]
 80033b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b4:	d032      	beq.n	800341c <__ssputs_r+0x80>
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	6909      	ldr	r1, [r1, #16]
 80033ba:	3301      	adds	r3, #1
 80033bc:	eba5 0901 	sub.w	r9, r5, r1
 80033c0:	6965      	ldr	r5, [r4, #20]
 80033c2:	444b      	add	r3, r9
 80033c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033cc:	106d      	asrs	r5, r5, #1
 80033ce:	429d      	cmp	r5, r3
 80033d0:	bf38      	it	cc
 80033d2:	461d      	movcc	r5, r3
 80033d4:	0553      	lsls	r3, r2, #21
 80033d6:	d531      	bpl.n	800343c <__ssputs_r+0xa0>
 80033d8:	4629      	mov	r1, r5
 80033da:	f000 fb53 	bl	8003a84 <_malloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	b950      	cbnz	r0, 80033f8 <__ssputs_r+0x5c>
 80033e2:	230c      	movs	r3, #12
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f8ca 3000 	str.w	r3, [sl]
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	464a      	mov	r2, r9
 80033fa:	6921      	ldr	r1, [r4, #16]
 80033fc:	f000 face 	bl	800399c <memcpy>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	6126      	str	r6, [r4, #16]
 800340e:	444e      	add	r6, r9
 8003410:	6026      	str	r6, [r4, #0]
 8003412:	463e      	mov	r6, r7
 8003414:	6165      	str	r5, [r4, #20]
 8003416:	eba5 0509 	sub.w	r5, r5, r9
 800341a:	60a5      	str	r5, [r4, #8]
 800341c:	42be      	cmp	r6, r7
 800341e:	d900      	bls.n	8003422 <__ssputs_r+0x86>
 8003420:	463e      	mov	r6, r7
 8003422:	4632      	mov	r2, r6
 8003424:	4641      	mov	r1, r8
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f000 fac6 	bl	80039b8 <memmove>
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	1b9b      	subs	r3, r3, r6
 8003432:	4432      	add	r2, r6
 8003434:	2000      	movs	r0, #0
 8003436:	60a3      	str	r3, [r4, #8]
 8003438:	6022      	str	r2, [r4, #0]
 800343a:	e7db      	b.n	80033f4 <__ssputs_r+0x58>
 800343c:	462a      	mov	r2, r5
 800343e:	f000 fb7b 	bl	8003b38 <_realloc_r>
 8003442:	4606      	mov	r6, r0
 8003444:	2800      	cmp	r0, #0
 8003446:	d1e1      	bne.n	800340c <__ssputs_r+0x70>
 8003448:	4650      	mov	r0, sl
 800344a:	6921      	ldr	r1, [r4, #16]
 800344c:	f000 face 	bl	80039ec <_free_r>
 8003450:	e7c7      	b.n	80033e2 <__ssputs_r+0x46>
	...

08003454 <_svfiprintf_r>:
 8003454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	4698      	mov	r8, r3
 800345a:	898b      	ldrh	r3, [r1, #12]
 800345c:	4607      	mov	r7, r0
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	460d      	mov	r5, r1
 8003462:	4614      	mov	r4, r2
 8003464:	b09d      	sub	sp, #116	; 0x74
 8003466:	d50e      	bpl.n	8003486 <_svfiprintf_r+0x32>
 8003468:	690b      	ldr	r3, [r1, #16]
 800346a:	b963      	cbnz	r3, 8003486 <_svfiprintf_r+0x32>
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	f000 fb09 	bl	8003a84 <_malloc_r>
 8003472:	6028      	str	r0, [r5, #0]
 8003474:	6128      	str	r0, [r5, #16]
 8003476:	b920      	cbnz	r0, 8003482 <_svfiprintf_r+0x2e>
 8003478:	230c      	movs	r3, #12
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e0d1      	b.n	8003626 <_svfiprintf_r+0x1d2>
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	616b      	str	r3, [r5, #20]
 8003486:	2300      	movs	r3, #0
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	2320      	movs	r3, #32
 800348c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003490:	2330      	movs	r3, #48	; 0x30
 8003492:	f04f 0901 	mov.w	r9, #1
 8003496:	f8cd 800c 	str.w	r8, [sp, #12]
 800349a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003640 <_svfiprintf_r+0x1ec>
 800349e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a2:	4623      	mov	r3, r4
 80034a4:	469a      	mov	sl, r3
 80034a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034aa:	b10a      	cbz	r2, 80034b0 <_svfiprintf_r+0x5c>
 80034ac:	2a25      	cmp	r2, #37	; 0x25
 80034ae:	d1f9      	bne.n	80034a4 <_svfiprintf_r+0x50>
 80034b0:	ebba 0b04 	subs.w	fp, sl, r4
 80034b4:	d00b      	beq.n	80034ce <_svfiprintf_r+0x7a>
 80034b6:	465b      	mov	r3, fp
 80034b8:	4622      	mov	r2, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	f7ff ff6d 	bl	800339c <__ssputs_r>
 80034c2:	3001      	adds	r0, #1
 80034c4:	f000 80aa 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ca:	445a      	add	r2, fp
 80034cc:	9209      	str	r2, [sp, #36]	; 0x24
 80034ce:	f89a 3000 	ldrb.w	r3, [sl]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a2 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e2:	f10a 0a01 	add.w	sl, sl, #1
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	9307      	str	r3, [sp, #28]
 80034ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ee:	931a      	str	r3, [sp, #104]	; 0x68
 80034f0:	4654      	mov	r4, sl
 80034f2:	2205      	movs	r2, #5
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	4851      	ldr	r0, [pc, #324]	; (8003640 <_svfiprintf_r+0x1ec>)
 80034fa:	f000 fa41 	bl	8003980 <memchr>
 80034fe:	9a04      	ldr	r2, [sp, #16]
 8003500:	b9d8      	cbnz	r0, 800353a <_svfiprintf_r+0xe6>
 8003502:	06d0      	lsls	r0, r2, #27
 8003504:	bf44      	itt	mi
 8003506:	2320      	movmi	r3, #32
 8003508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800350c:	0711      	lsls	r1, r2, #28
 800350e:	bf44      	itt	mi
 8003510:	232b      	movmi	r3, #43	; 0x2b
 8003512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003516:	f89a 3000 	ldrb.w	r3, [sl]
 800351a:	2b2a      	cmp	r3, #42	; 0x2a
 800351c:	d015      	beq.n	800354a <_svfiprintf_r+0xf6>
 800351e:	4654      	mov	r4, sl
 8003520:	2000      	movs	r0, #0
 8003522:	f04f 0c0a 	mov.w	ip, #10
 8003526:	9a07      	ldr	r2, [sp, #28]
 8003528:	4621      	mov	r1, r4
 800352a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352e:	3b30      	subs	r3, #48	; 0x30
 8003530:	2b09      	cmp	r3, #9
 8003532:	d94e      	bls.n	80035d2 <_svfiprintf_r+0x17e>
 8003534:	b1b0      	cbz	r0, 8003564 <_svfiprintf_r+0x110>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e014      	b.n	8003564 <_svfiprintf_r+0x110>
 800353a:	eba0 0308 	sub.w	r3, r0, r8
 800353e:	fa09 f303 	lsl.w	r3, r9, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	46a2      	mov	sl, r4
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	e7d2      	b.n	80034f0 <_svfiprintf_r+0x9c>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	9103      	str	r1, [sp, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbb      	ittet	lt
 8003556:	425b      	neglt	r3, r3
 8003558:	f042 0202 	orrlt.w	r2, r2, #2
 800355c:	9307      	strge	r3, [sp, #28]
 800355e:	9307      	strlt	r3, [sp, #28]
 8003560:	bfb8      	it	lt
 8003562:	9204      	strlt	r2, [sp, #16]
 8003564:	7823      	ldrb	r3, [r4, #0]
 8003566:	2b2e      	cmp	r3, #46	; 0x2e
 8003568:	d10c      	bne.n	8003584 <_svfiprintf_r+0x130>
 800356a:	7863      	ldrb	r3, [r4, #1]
 800356c:	2b2a      	cmp	r3, #42	; 0x2a
 800356e:	d135      	bne.n	80035dc <_svfiprintf_r+0x188>
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	3402      	adds	r4, #2
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	9203      	str	r2, [sp, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfb8      	it	lt
 800357e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003582:	9305      	str	r3, [sp, #20]
 8003584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003650 <_svfiprintf_r+0x1fc>
 8003588:	2203      	movs	r2, #3
 800358a:	4650      	mov	r0, sl
 800358c:	7821      	ldrb	r1, [r4, #0]
 800358e:	f000 f9f7 	bl	8003980 <memchr>
 8003592:	b140      	cbz	r0, 80035a6 <_svfiprintf_r+0x152>
 8003594:	2340      	movs	r3, #64	; 0x40
 8003596:	eba0 000a 	sub.w	r0, r0, sl
 800359a:	fa03 f000 	lsl.w	r0, r3, r0
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	3401      	adds	r4, #1
 80035a2:	4303      	orrs	r3, r0
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035aa:	2206      	movs	r2, #6
 80035ac:	4825      	ldr	r0, [pc, #148]	; (8003644 <_svfiprintf_r+0x1f0>)
 80035ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b2:	f000 f9e5 	bl	8003980 <memchr>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d038      	beq.n	800362c <_svfiprintf_r+0x1d8>
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <_svfiprintf_r+0x1f4>)
 80035bc:	bb1b      	cbnz	r3, 8003606 <_svfiprintf_r+0x1b2>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	3307      	adds	r3, #7
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	3308      	adds	r3, #8
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035cc:	4433      	add	r3, r6
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	e767      	b.n	80034a2 <_svfiprintf_r+0x4e>
 80035d2:	460c      	mov	r4, r1
 80035d4:	2001      	movs	r0, #1
 80035d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035da:	e7a5      	b.n	8003528 <_svfiprintf_r+0xd4>
 80035dc:	2300      	movs	r3, #0
 80035de:	f04f 0c0a 	mov.w	ip, #10
 80035e2:	4619      	mov	r1, r3
 80035e4:	3401      	adds	r4, #1
 80035e6:	9305      	str	r3, [sp, #20]
 80035e8:	4620      	mov	r0, r4
 80035ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ee:	3a30      	subs	r2, #48	; 0x30
 80035f0:	2a09      	cmp	r2, #9
 80035f2:	d903      	bls.n	80035fc <_svfiprintf_r+0x1a8>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0c5      	beq.n	8003584 <_svfiprintf_r+0x130>
 80035f8:	9105      	str	r1, [sp, #20]
 80035fa:	e7c3      	b.n	8003584 <_svfiprintf_r+0x130>
 80035fc:	4604      	mov	r4, r0
 80035fe:	2301      	movs	r3, #1
 8003600:	fb0c 2101 	mla	r1, ip, r1, r2
 8003604:	e7f0      	b.n	80035e8 <_svfiprintf_r+0x194>
 8003606:	ab03      	add	r3, sp, #12
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	462a      	mov	r2, r5
 800360c:	4638      	mov	r0, r7
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <_svfiprintf_r+0x1f8>)
 8003610:	a904      	add	r1, sp, #16
 8003612:	f3af 8000 	nop.w
 8003616:	1c42      	adds	r2, r0, #1
 8003618:	4606      	mov	r6, r0
 800361a:	d1d6      	bne.n	80035ca <_svfiprintf_r+0x176>
 800361c:	89ab      	ldrh	r3, [r5, #12]
 800361e:	065b      	lsls	r3, r3, #25
 8003620:	f53f af2c 	bmi.w	800347c <_svfiprintf_r+0x28>
 8003624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003626:	b01d      	add	sp, #116	; 0x74
 8003628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362c:	ab03      	add	r3, sp, #12
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	462a      	mov	r2, r5
 8003632:	4638      	mov	r0, r7
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <_svfiprintf_r+0x1f8>)
 8003636:	a904      	add	r1, sp, #16
 8003638:	f000 f87c 	bl	8003734 <_printf_i>
 800363c:	e7eb      	b.n	8003616 <_svfiprintf_r+0x1c2>
 800363e:	bf00      	nop
 8003640:	08003c1a 	.word	0x08003c1a
 8003644:	08003c24 	.word	0x08003c24
 8003648:	00000000 	.word	0x00000000
 800364c:	0800339d 	.word	0x0800339d
 8003650:	08003c20 	.word	0x08003c20

08003654 <_printf_common>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	4616      	mov	r6, r2
 800365a:	4699      	mov	r9, r3
 800365c:	688a      	ldr	r2, [r1, #8]
 800365e:	690b      	ldr	r3, [r1, #16]
 8003660:	4607      	mov	r7, r0
 8003662:	4293      	cmp	r3, r2
 8003664:	bfb8      	it	lt
 8003666:	4613      	movlt	r3, r2
 8003668:	6033      	str	r3, [r6, #0]
 800366a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800366e:	460c      	mov	r4, r1
 8003670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003674:	b10a      	cbz	r2, 800367a <_printf_common+0x26>
 8003676:	3301      	adds	r3, #1
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	0699      	lsls	r1, r3, #26
 800367e:	bf42      	ittt	mi
 8003680:	6833      	ldrmi	r3, [r6, #0]
 8003682:	3302      	addmi	r3, #2
 8003684:	6033      	strmi	r3, [r6, #0]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f015 0506 	ands.w	r5, r5, #6
 800368c:	d106      	bne.n	800369c <_printf_common+0x48>
 800368e:	f104 0a19 	add.w	sl, r4, #25
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	42ab      	cmp	r3, r5
 800369a:	dc28      	bgt.n	80036ee <_printf_common+0x9a>
 800369c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a0:	1e13      	subs	r3, r2, #0
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	bf18      	it	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	0692      	lsls	r2, r2, #26
 80036aa:	d42d      	bmi.n	8003708 <_printf_common+0xb4>
 80036ac:	4649      	mov	r1, r9
 80036ae:	4638      	mov	r0, r7
 80036b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d020      	beq.n	80036fc <_printf_common+0xa8>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	68e5      	ldr	r5, [r4, #12]
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf18      	it	ne
 80036c6:	2500      	movne	r5, #0
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	f04f 0600 	mov.w	r6, #0
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	bf08      	it	eq
 80036d2:	1aad      	subeq	r5, r5, r2
 80036d4:	6922      	ldr	r2, [r4, #16]
 80036d6:	bf08      	it	eq
 80036d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036dc:	4293      	cmp	r3, r2
 80036de:	bfc4      	itt	gt
 80036e0:	1a9b      	subgt	r3, r3, r2
 80036e2:	18ed      	addgt	r5, r5, r3
 80036e4:	341a      	adds	r4, #26
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d11a      	bne.n	8003720 <_printf_common+0xcc>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e008      	b.n	8003700 <_printf_common+0xac>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4652      	mov	r2, sl
 80036f2:	4649      	mov	r1, r9
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c0      	blx	r8
 80036f8:	3001      	adds	r0, #1
 80036fa:	d103      	bne.n	8003704 <_printf_common+0xb0>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	3501      	adds	r5, #1
 8003706:	e7c4      	b.n	8003692 <_printf_common+0x3e>
 8003708:	2030      	movs	r0, #48	; 0x30
 800370a:	18e1      	adds	r1, r4, r3
 800370c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003716:	4422      	add	r2, r4
 8003718:	3302      	adds	r3, #2
 800371a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371e:	e7c5      	b.n	80036ac <_printf_common+0x58>
 8003720:	2301      	movs	r3, #1
 8003722:	4622      	mov	r2, r4
 8003724:	4649      	mov	r1, r9
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa8>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d9      	b.n	80036e6 <_printf_common+0x92>
	...

08003734 <_printf_i>:
 8003734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	460c      	mov	r4, r1
 800373a:	7e27      	ldrb	r7, [r4, #24]
 800373c:	4691      	mov	r9, r2
 800373e:	2f78      	cmp	r7, #120	; 0x78
 8003740:	4680      	mov	r8, r0
 8003742:	469a      	mov	sl, r3
 8003744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800374a:	d807      	bhi.n	800375c <_printf_i+0x28>
 800374c:	2f62      	cmp	r7, #98	; 0x62
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x32>
 8003750:	2f00      	cmp	r7, #0
 8003752:	f000 80d9 	beq.w	8003908 <_printf_i+0x1d4>
 8003756:	2f58      	cmp	r7, #88	; 0x58
 8003758:	f000 80a4 	beq.w	80038a4 <_printf_i+0x170>
 800375c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003764:	e03a      	b.n	80037dc <_printf_i+0xa8>
 8003766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800376a:	2b15      	cmp	r3, #21
 800376c:	d8f6      	bhi.n	800375c <_printf_i+0x28>
 800376e:	a001      	add	r0, pc, #4	; (adr r0, 8003774 <_printf_i+0x40>)
 8003770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037e1 	.word	0x080037e1
 800377c:	0800375d 	.word	0x0800375d
 8003780:	0800375d 	.word	0x0800375d
 8003784:	0800375d 	.word	0x0800375d
 8003788:	0800375d 	.word	0x0800375d
 800378c:	080037e1 	.word	0x080037e1
 8003790:	0800375d 	.word	0x0800375d
 8003794:	0800375d 	.word	0x0800375d
 8003798:	0800375d 	.word	0x0800375d
 800379c:	0800375d 	.word	0x0800375d
 80037a0:	080038ef 	.word	0x080038ef
 80037a4:	08003811 	.word	0x08003811
 80037a8:	080038d1 	.word	0x080038d1
 80037ac:	0800375d 	.word	0x0800375d
 80037b0:	0800375d 	.word	0x0800375d
 80037b4:	08003911 	.word	0x08003911
 80037b8:	0800375d 	.word	0x0800375d
 80037bc:	08003811 	.word	0x08003811
 80037c0:	0800375d 	.word	0x0800375d
 80037c4:	0800375d 	.word	0x0800375d
 80037c8:	080038d9 	.word	0x080038d9
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037d2:	1d1a      	adds	r2, r3, #4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	600a      	str	r2, [r1, #0]
 80037d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037dc:	2301      	movs	r3, #1
 80037de:	e0a4      	b.n	800392a <_printf_i+0x1f6>
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	6808      	ldr	r0, [r1, #0]
 80037e4:	062e      	lsls	r6, r5, #24
 80037e6:	f100 0304 	add.w	r3, r0, #4
 80037ea:	d50a      	bpl.n	8003802 <_printf_i+0xce>
 80037ec:	6805      	ldr	r5, [r0, #0]
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	da03      	bge.n	80037fc <_printf_i+0xc8>
 80037f4:	232d      	movs	r3, #45	; 0x2d
 80037f6:	426d      	negs	r5, r5
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	230a      	movs	r3, #10
 80037fe:	485e      	ldr	r0, [pc, #376]	; (8003978 <_printf_i+0x244>)
 8003800:	e019      	b.n	8003836 <_printf_i+0x102>
 8003802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003806:	6805      	ldr	r5, [r0, #0]
 8003808:	600b      	str	r3, [r1, #0]
 800380a:	bf18      	it	ne
 800380c:	b22d      	sxthne	r5, r5
 800380e:	e7ef      	b.n	80037f0 <_printf_i+0xbc>
 8003810:	680b      	ldr	r3, [r1, #0]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	1d18      	adds	r0, r3, #4
 8003816:	6008      	str	r0, [r1, #0]
 8003818:	0628      	lsls	r0, r5, #24
 800381a:	d501      	bpl.n	8003820 <_printf_i+0xec>
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	e002      	b.n	8003826 <_printf_i+0xf2>
 8003820:	0669      	lsls	r1, r5, #25
 8003822:	d5fb      	bpl.n	800381c <_printf_i+0xe8>
 8003824:	881d      	ldrh	r5, [r3, #0]
 8003826:	2f6f      	cmp	r7, #111	; 0x6f
 8003828:	bf0c      	ite	eq
 800382a:	2308      	moveq	r3, #8
 800382c:	230a      	movne	r3, #10
 800382e:	4852      	ldr	r0, [pc, #328]	; (8003978 <_printf_i+0x244>)
 8003830:	2100      	movs	r1, #0
 8003832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003836:	6866      	ldr	r6, [r4, #4]
 8003838:	2e00      	cmp	r6, #0
 800383a:	bfa8      	it	ge
 800383c:	6821      	ldrge	r1, [r4, #0]
 800383e:	60a6      	str	r6, [r4, #8]
 8003840:	bfa4      	itt	ge
 8003842:	f021 0104 	bicge.w	r1, r1, #4
 8003846:	6021      	strge	r1, [r4, #0]
 8003848:	b90d      	cbnz	r5, 800384e <_printf_i+0x11a>
 800384a:	2e00      	cmp	r6, #0
 800384c:	d04d      	beq.n	80038ea <_printf_i+0x1b6>
 800384e:	4616      	mov	r6, r2
 8003850:	fbb5 f1f3 	udiv	r1, r5, r3
 8003854:	fb03 5711 	mls	r7, r3, r1, r5
 8003858:	5dc7      	ldrb	r7, [r0, r7]
 800385a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800385e:	462f      	mov	r7, r5
 8003860:	42bb      	cmp	r3, r7
 8003862:	460d      	mov	r5, r1
 8003864:	d9f4      	bls.n	8003850 <_printf_i+0x11c>
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10b      	bne.n	8003882 <_printf_i+0x14e>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	07df      	lsls	r7, r3, #31
 800386e:	d508      	bpl.n	8003882 <_printf_i+0x14e>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6861      	ldr	r1, [r4, #4]
 8003874:	4299      	cmp	r1, r3
 8003876:	bfde      	ittt	le
 8003878:	2330      	movle	r3, #48	; 0x30
 800387a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800387e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003882:	1b92      	subs	r2, r2, r6
 8003884:	6122      	str	r2, [r4, #16]
 8003886:	464b      	mov	r3, r9
 8003888:	4621      	mov	r1, r4
 800388a:	4640      	mov	r0, r8
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	aa03      	add	r2, sp, #12
 8003892:	f7ff fedf 	bl	8003654 <_printf_common>
 8003896:	3001      	adds	r0, #1
 8003898:	d14c      	bne.n	8003934 <_printf_i+0x200>
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	b004      	add	sp, #16
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	4834      	ldr	r0, [pc, #208]	; (8003978 <_printf_i+0x244>)
 80038a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038aa:	680e      	ldr	r6, [r1, #0]
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80038b2:	061f      	lsls	r7, r3, #24
 80038b4:	600e      	str	r6, [r1, #0]
 80038b6:	d514      	bpl.n	80038e2 <_printf_i+0x1ae>
 80038b8:	07d9      	lsls	r1, r3, #31
 80038ba:	bf44      	itt	mi
 80038bc:	f043 0320 	orrmi.w	r3, r3, #32
 80038c0:	6023      	strmi	r3, [r4, #0]
 80038c2:	b91d      	cbnz	r5, 80038cc <_printf_i+0x198>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2310      	movs	r3, #16
 80038ce:	e7af      	b.n	8003830 <_printf_i+0xfc>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2378      	movs	r3, #120	; 0x78
 80038da:	4828      	ldr	r0, [pc, #160]	; (800397c <_printf_i+0x248>)
 80038dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038e0:	e7e3      	b.n	80038aa <_printf_i+0x176>
 80038e2:	065e      	lsls	r6, r3, #25
 80038e4:	bf48      	it	mi
 80038e6:	b2ad      	uxthmi	r5, r5
 80038e8:	e7e6      	b.n	80038b8 <_printf_i+0x184>
 80038ea:	4616      	mov	r6, r2
 80038ec:	e7bb      	b.n	8003866 <_printf_i+0x132>
 80038ee:	680b      	ldr	r3, [r1, #0]
 80038f0:	6826      	ldr	r6, [r4, #0]
 80038f2:	1d1d      	adds	r5, r3, #4
 80038f4:	6960      	ldr	r0, [r4, #20]
 80038f6:	600d      	str	r5, [r1, #0]
 80038f8:	0635      	lsls	r5, r6, #24
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	d501      	bpl.n	8003902 <_printf_i+0x1ce>
 80038fe:	6018      	str	r0, [r3, #0]
 8003900:	e002      	b.n	8003908 <_printf_i+0x1d4>
 8003902:	0671      	lsls	r1, r6, #25
 8003904:	d5fb      	bpl.n	80038fe <_printf_i+0x1ca>
 8003906:	8018      	strh	r0, [r3, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	4616      	mov	r6, r2
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	e7ba      	b.n	8003886 <_printf_i+0x152>
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	600a      	str	r2, [r1, #0]
 8003916:	681e      	ldr	r6, [r3, #0]
 8003918:	2100      	movs	r1, #0
 800391a:	4630      	mov	r0, r6
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	f000 f82f 	bl	8003980 <memchr>
 8003922:	b108      	cbz	r0, 8003928 <_printf_i+0x1f4>
 8003924:	1b80      	subs	r0, r0, r6
 8003926:	6060      	str	r0, [r4, #4]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	2300      	movs	r3, #0
 800392e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003932:	e7a8      	b.n	8003886 <_printf_i+0x152>
 8003934:	4632      	mov	r2, r6
 8003936:	4649      	mov	r1, r9
 8003938:	4640      	mov	r0, r8
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	47d0      	blx	sl
 800393e:	3001      	adds	r0, #1
 8003940:	d0ab      	beq.n	800389a <_printf_i+0x166>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	079b      	lsls	r3, r3, #30
 8003946:	d413      	bmi.n	8003970 <_printf_i+0x23c>
 8003948:	68e0      	ldr	r0, [r4, #12]
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	4298      	cmp	r0, r3
 800394e:	bfb8      	it	lt
 8003950:	4618      	movlt	r0, r3
 8003952:	e7a4      	b.n	800389e <_printf_i+0x16a>
 8003954:	2301      	movs	r3, #1
 8003956:	4632      	mov	r2, r6
 8003958:	4649      	mov	r1, r9
 800395a:	4640      	mov	r0, r8
 800395c:	47d0      	blx	sl
 800395e:	3001      	adds	r0, #1
 8003960:	d09b      	beq.n	800389a <_printf_i+0x166>
 8003962:	3501      	adds	r5, #1
 8003964:	68e3      	ldr	r3, [r4, #12]
 8003966:	9903      	ldr	r1, [sp, #12]
 8003968:	1a5b      	subs	r3, r3, r1
 800396a:	42ab      	cmp	r3, r5
 800396c:	dcf2      	bgt.n	8003954 <_printf_i+0x220>
 800396e:	e7eb      	b.n	8003948 <_printf_i+0x214>
 8003970:	2500      	movs	r5, #0
 8003972:	f104 0619 	add.w	r6, r4, #25
 8003976:	e7f5      	b.n	8003964 <_printf_i+0x230>
 8003978:	08003c2b 	.word	0x08003c2b
 800397c:	08003c3c 	.word	0x08003c3c

08003980 <memchr>:
 8003980:	4603      	mov	r3, r0
 8003982:	b510      	push	{r4, lr}
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	4402      	add	r2, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	d101      	bne.n	8003992 <memchr+0x12>
 800398e:	2000      	movs	r0, #0
 8003990:	e003      	b.n	800399a <memchr+0x1a>
 8003992:	7804      	ldrb	r4, [r0, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	428c      	cmp	r4, r1
 8003998:	d1f6      	bne.n	8003988 <memchr+0x8>
 800399a:	bd10      	pop	{r4, pc}

0800399c <memcpy>:
 800399c:	440a      	add	r2, r1
 800399e:	4291      	cmp	r1, r2
 80039a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a4:	d100      	bne.n	80039a8 <memcpy+0xc>
 80039a6:	4770      	bx	lr
 80039a8:	b510      	push	{r4, lr}
 80039aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039b4:	d1f9      	bne.n	80039aa <memcpy+0xe>
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <memmove>:
 80039b8:	4288      	cmp	r0, r1
 80039ba:	b510      	push	{r4, lr}
 80039bc:	eb01 0402 	add.w	r4, r1, r2
 80039c0:	d902      	bls.n	80039c8 <memmove+0x10>
 80039c2:	4284      	cmp	r4, r0
 80039c4:	4623      	mov	r3, r4
 80039c6:	d807      	bhi.n	80039d8 <memmove+0x20>
 80039c8:	1e43      	subs	r3, r0, #1
 80039ca:	42a1      	cmp	r1, r4
 80039cc:	d008      	beq.n	80039e0 <memmove+0x28>
 80039ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039d6:	e7f8      	b.n	80039ca <memmove+0x12>
 80039d8:	4601      	mov	r1, r0
 80039da:	4402      	add	r2, r0
 80039dc:	428a      	cmp	r2, r1
 80039de:	d100      	bne.n	80039e2 <memmove+0x2a>
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ea:	e7f7      	b.n	80039dc <memmove+0x24>

080039ec <_free_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4605      	mov	r5, r0
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d043      	beq.n	8003a7c <_free_r+0x90>
 80039f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f8:	1f0c      	subs	r4, r1, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bfb8      	it	lt
 80039fe:	18e4      	addlt	r4, r4, r3
 8003a00:	f000 f8d0 	bl	8003ba4 <__malloc_lock>
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <_free_r+0x94>)
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	4610      	mov	r0, r2
 8003a0a:	b933      	cbnz	r3, 8003a1a <_free_r+0x2e>
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6014      	str	r4, [r2, #0]
 8003a10:	4628      	mov	r0, r5
 8003a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a16:	f000 b8cb 	b.w	8003bb0 <__malloc_unlock>
 8003a1a:	42a3      	cmp	r3, r4
 8003a1c:	d90a      	bls.n	8003a34 <_free_r+0x48>
 8003a1e:	6821      	ldr	r1, [r4, #0]
 8003a20:	1862      	adds	r2, r4, r1
 8003a22:	4293      	cmp	r3, r2
 8003a24:	bf01      	itttt	eq
 8003a26:	681a      	ldreq	r2, [r3, #0]
 8003a28:	685b      	ldreq	r3, [r3, #4]
 8003a2a:	1852      	addeq	r2, r2, r1
 8003a2c:	6022      	streq	r2, [r4, #0]
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	6004      	str	r4, [r0, #0]
 8003a32:	e7ed      	b.n	8003a10 <_free_r+0x24>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	b10b      	cbz	r3, 8003a3e <_free_r+0x52>
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d9fa      	bls.n	8003a34 <_free_r+0x48>
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	1850      	adds	r0, r2, r1
 8003a42:	42a0      	cmp	r0, r4
 8003a44:	d10b      	bne.n	8003a5e <_free_r+0x72>
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	4401      	add	r1, r0
 8003a4a:	1850      	adds	r0, r2, r1
 8003a4c:	4283      	cmp	r3, r0
 8003a4e:	6011      	str	r1, [r2, #0]
 8003a50:	d1de      	bne.n	8003a10 <_free_r+0x24>
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4401      	add	r1, r0
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	6053      	str	r3, [r2, #4]
 8003a5c:	e7d8      	b.n	8003a10 <_free_r+0x24>
 8003a5e:	d902      	bls.n	8003a66 <_free_r+0x7a>
 8003a60:	230c      	movs	r3, #12
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	e7d4      	b.n	8003a10 <_free_r+0x24>
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	1821      	adds	r1, r4, r0
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	bf01      	itttt	eq
 8003a6e:	6819      	ldreq	r1, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	1809      	addeq	r1, r1, r0
 8003a74:	6021      	streq	r1, [r4, #0]
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6054      	str	r4, [r2, #4]
 8003a7a:	e7c9      	b.n	8003a10 <_free_r+0x24>
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	bf00      	nop
 8003a80:	200000d4 	.word	0x200000d4

08003a84 <_malloc_r>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	1ccd      	adds	r5, r1, #3
 8003a88:	f025 0503 	bic.w	r5, r5, #3
 8003a8c:	3508      	adds	r5, #8
 8003a8e:	2d0c      	cmp	r5, #12
 8003a90:	bf38      	it	cc
 8003a92:	250c      	movcc	r5, #12
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	4606      	mov	r6, r0
 8003a98:	db01      	blt.n	8003a9e <_malloc_r+0x1a>
 8003a9a:	42a9      	cmp	r1, r5
 8003a9c:	d903      	bls.n	8003aa6 <_malloc_r+0x22>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa6:	f000 f87d 	bl	8003ba4 <__malloc_lock>
 8003aaa:	4921      	ldr	r1, [pc, #132]	; (8003b30 <_malloc_r+0xac>)
 8003aac:	680a      	ldr	r2, [r1, #0]
 8003aae:	4614      	mov	r4, r2
 8003ab0:	b99c      	cbnz	r4, 8003ada <_malloc_r+0x56>
 8003ab2:	4f20      	ldr	r7, [pc, #128]	; (8003b34 <_malloc_r+0xb0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	b923      	cbnz	r3, 8003ac2 <_malloc_r+0x3e>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f862 	bl	8003b84 <_sbrk_r>
 8003ac0:	6038      	str	r0, [r7, #0]
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f85d 	bl	8003b84 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d123      	bne.n	8003b16 <_malloc_r+0x92>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	6033      	str	r3, [r6, #0]
 8003ad4:	f000 f86c 	bl	8003bb0 <__malloc_unlock>
 8003ad8:	e7e3      	b.n	8003aa2 <_malloc_r+0x1e>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	1b5b      	subs	r3, r3, r5
 8003ade:	d417      	bmi.n	8003b10 <_malloc_r+0x8c>
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d903      	bls.n	8003aec <_malloc_r+0x68>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	441c      	add	r4, r3
 8003ae8:	6025      	str	r5, [r4, #0]
 8003aea:	e004      	b.n	8003af6 <_malloc_r+0x72>
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	bf0c      	ite	eq
 8003af2:	600b      	streq	r3, [r1, #0]
 8003af4:	6053      	strne	r3, [r2, #4]
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f85a 	bl	8003bb0 <__malloc_unlock>
 8003afc:	f104 000b 	add.w	r0, r4, #11
 8003b00:	1d23      	adds	r3, r4, #4
 8003b02:	f020 0007 	bic.w	r0, r0, #7
 8003b06:	1ac2      	subs	r2, r0, r3
 8003b08:	d0cc      	beq.n	8003aa4 <_malloc_r+0x20>
 8003b0a:	1a1b      	subs	r3, r3, r0
 8003b0c:	50a3      	str	r3, [r4, r2]
 8003b0e:	e7c9      	b.n	8003aa4 <_malloc_r+0x20>
 8003b10:	4622      	mov	r2, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7cc      	b.n	8003ab0 <_malloc_r+0x2c>
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d0e3      	beq.n	8003ae8 <_malloc_r+0x64>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f82e 	bl	8003b84 <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d1dd      	bne.n	8003ae8 <_malloc_r+0x64>
 8003b2c:	e7cf      	b.n	8003ace <_malloc_r+0x4a>
 8003b2e:	bf00      	nop
 8003b30:	200000d4 	.word	0x200000d4
 8003b34:	200000d8 	.word	0x200000d8

08003b38 <_realloc_r>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	460e      	mov	r6, r1
 8003b40:	b921      	cbnz	r1, 8003b4c <_realloc_r+0x14>
 8003b42:	4611      	mov	r1, r2
 8003b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b48:	f7ff bf9c 	b.w	8003a84 <_malloc_r>
 8003b4c:	b922      	cbnz	r2, 8003b58 <_realloc_r+0x20>
 8003b4e:	f7ff ff4d 	bl	80039ec <_free_r>
 8003b52:	4625      	mov	r5, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b58:	f000 f830 	bl	8003bbc <_malloc_usable_size_r>
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d20f      	bcs.n	8003b80 <_realloc_r+0x48>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4638      	mov	r0, r7
 8003b64:	f7ff ff8e 	bl	8003a84 <_malloc_r>
 8003b68:	4605      	mov	r5, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0f2      	beq.n	8003b54 <_realloc_r+0x1c>
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4622      	mov	r2, r4
 8003b72:	f7ff ff13 	bl	800399c <memcpy>
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff ff37 	bl	80039ec <_free_r>
 8003b7e:	e7e9      	b.n	8003b54 <_realloc_r+0x1c>
 8003b80:	4635      	mov	r5, r6
 8003b82:	e7e7      	b.n	8003b54 <_realloc_r+0x1c>

08003b84 <_sbrk_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	2300      	movs	r3, #0
 8003b88:	4d05      	ldr	r5, [pc, #20]	; (8003ba0 <_sbrk_r+0x1c>)
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd f94a 	bl	8000e28 <_sbrk>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_sbrk_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_sbrk_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	2000022c 	.word	0x2000022c

08003ba4 <__malloc_lock>:
 8003ba4:	4801      	ldr	r0, [pc, #4]	; (8003bac <__malloc_lock+0x8>)
 8003ba6:	f000 b811 	b.w	8003bcc <__retarget_lock_acquire_recursive>
 8003baa:	bf00      	nop
 8003bac:	20000234 	.word	0x20000234

08003bb0 <__malloc_unlock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_unlock+0x8>)
 8003bb2:	f000 b80c 	b.w	8003bce <__retarget_lock_release_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	20000234 	.word	0x20000234

08003bbc <_malloc_usable_size_r>:
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f18      	subs	r0, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfbc      	itt	lt
 8003bc6:	580b      	ldrlt	r3, [r1, r0]
 8003bc8:	18c0      	addlt	r0, r0, r3
 8003bca:	4770      	bx	lr

08003bcc <__retarget_lock_acquire_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_release_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
