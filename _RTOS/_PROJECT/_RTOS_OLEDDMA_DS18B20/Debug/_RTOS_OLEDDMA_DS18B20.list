
_RTOS_OLEDDMA_DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800c6f8  0800c6f8  0001c6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc9c  0800cc9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc9c  0800cc9c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc9c  0800cc9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc9c  0800cc9c  0001cc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  200001e4  0800ce88  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a8  0800ce88  000213a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b240  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9f  00000000  00000000  0003b44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0003eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00040730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b235  00000000  00000000  00041d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a203  00000000  00000000  0005cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a05  00000000  00000000  00077148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010eb4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007738  00000000  00000000  0010eba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c6dc 	.word	0x0800c6dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c6dc 	.word	0x0800c6dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <DS18B20_DelayInit>:
 ******************************************************************************************************************/
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name *DS18B20) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f995 	bl	8000f14 <DELAY_TIM_Init>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name *DS18B20, uint16_t Time) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f98f 	bl	8000f2a <DELAY_TIM_Us>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name *DS18B20, uint16_t Time) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f995 	bl	8000f58 <DELAY_TIM_Ms>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name *DS18B20) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	889b      	ldrh	r3, [r3, #4]
 8000c50:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2302      	movs	r3, #2
 8000c58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f107 0208 	add.w	r2, r7, #8
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fa43 	bl	80020f0 <HAL_GPIO_Init>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name *DS18B20) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f107 0208 	add.w	r2, r7, #8
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fa25 	bl	80020f0 <HAL_GPIO_Init>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name *DS18B20, uint8_t Value) {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6898      	ldr	r0, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	889b      	ldrh	r3, [r3, #4]
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f001 fbae 	bl	8002426 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name *DS18B20) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	889b      	ldrh	r3, [r3, #4]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	f001 fb87 	bl	80023f8 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name *DS18B20) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff98 	bl	8000c36 <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ffd0 	bl	8000cae <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 8000d0e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff6d 	bl	8000bf2 <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ffaa 	bl	8000c72 <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 8000d1e:	2150      	movs	r1, #80	; 0x50
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff66 	bl	8000bf2 <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20)))
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffd3 	bl	8000cd2 <DS18B20_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <DS18B20_Start+0x44>
		Response = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <DS18B20_Start+0x48>
	else
		Response = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8000d3c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff56 	bl	8000bf2 <DS18B20_DelayUs>

	return Response;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name *DS18B20, uint8_t Data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff6a 	bl	8000c36 <DS18B20_SetPinOut>
	for (int i = 0; i < 8; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e02b      	b.n	8000dc0 <DS18B20_Write+0x70>
		if ((Data & (1 << i)) != 0) {
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	fa42 f303 	asr.w	r3, r2, r3
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d012      	beq.n	8000d9e <DS18B20_Write+0x4e>
			DS18B20_SetPinOut(DS18B20);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff5c 	bl	8000c36 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff94 	bl	8000cae <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8000d86:	2101      	movs	r1, #1
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff32 	bl	8000bf2 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff6f 	bl	8000c72 <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8000d94:	2132      	movs	r1, #50	; 0x32
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff2b 	bl	8000bf2 <DS18B20_DelayUs>
 8000d9c:	e00d      	b.n	8000dba <DS18B20_Write+0x6a>
		} else {
			DS18B20_SetPinOut(DS18B20);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff49 	bl	8000c36 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000da4:	2100      	movs	r1, #0
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff81 	bl	8000cae <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8000dac:	2132      	movs	r1, #50	; 0x32
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff1f 	bl	8000bf2 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff5c 	bl	8000c72 <DS18B20_SetPinIn>
	for (int i = 0; i < 8; i++) {
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	ddd0      	ble.n	8000d68 <DS18B20_Write+0x18>
		}
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name *DS18B20) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff48 	bl	8000c72 <DS18B20_SetPinIn>
	for (int i = 0; i < 8; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e024      	b.n	8000e32 <DS18B20_Read+0x62>
		DS18B20_SetPinOut(DS18B20);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff24 	bl	8000c36 <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff5c 	bl	8000cae <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 8000df6:	2101      	movs	r1, #1
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fefa 	bl	8000bf2 <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff37 	bl	8000c72 <DS18B20_SetPinIn>
		if (DS18B20_ReadPin(DS18B20)) {
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff64 	bl	8000cd2 <DS18B20_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <DS18B20_Read+0x54>
			Value |= 1 << i;
 8000e10:	2201      	movs	r2, #1
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8000e24:	2132      	movs	r1, #50	; 0x32
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fee3 	bl	8000bf2 <DS18B20_DelayUs>
	for (int i = 0; i < 8; i++) {
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	ddd7      	ble.n	8000de8 <DS18B20_Read+0x18>
	}
	return Value;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name *DS18B20, TIM_HandleTypeDef *Timer,
		GPIO_TypeDef *DS_PORT, uint16_t DS_Pin) {
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	887a      	ldrh	r2, [r7, #2]
 8000e5a:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff feb8 	bl	8000bd8 <DS18B20_DelayInit>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name *DS18B20) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff3b 	bl	8000cf4 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fec7 	bl	8000c14 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000e86:	21cc      	movs	r1, #204	; 0xcc
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff61 	bl	8000d50 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8000e8e:	2144      	movs	r1, #68	; 0x44
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff5d 	bl	8000d50 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8000e96:	21c8      	movs	r1, #200	; 0xc8
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff febb 	bl	8000c14 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff28 	bl	8000cf4 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff feb4 	bl	8000c14 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000eac:	21cc      	movs	r1, #204	; 0xcc
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4e 	bl	8000d50 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8000eb4:	21be      	movs	r1, #190	; 0xbe
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4a 	bl	8000d50 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff87 	bl	8000dd0 <DS18B20_Read>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff82 	bl	8000dd0 <DS18B20_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2 << 8) | Temp1;
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float) (Temp / 16.0);
 8000ee0:	89bb      	ldrh	r3, [r7, #12]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fa8e 	bl	8000404 <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <DS18B20_ReadTemp+0xa0>)
 8000eee:	f7ff fc1d 	bl	800072c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fde5 	bl	8000ac8 <__aeabi_d2f>
 8000efe:	4602      	mov	r2, r0
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40300000 	.word	0x40300000

08000f14 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f003 fc55 	bl	80047cc <HAL_TIM_Base_Start>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000f3e:	bf00      	nop
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3f9      	bcc.n	8000f40 <DELAY_TIM_Us+0x16>
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 8000f6c:	e006      	b.n	8000f7c <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 8000f6e:	bf00      	nop
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7a:	d3f9      	bcc.n	8000f70 <DELAY_TIM_Ms+0x18>
	while(Time--)
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	807a      	strh	r2, [r7, #2]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f3      	bne.n	8000f6e <DELAY_TIM_Ms+0x16>
	}
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x28>)
 8000fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000200 	.word	0x20000200
 8000fc0:	200002b4 	.word	0x200002b4

08000fc4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <_write+0x28>)
 8000fdc:	f004 f83e 	bl	800505c <HAL_UART_Transmit>
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000594 	.word	0x20000594

08000ff0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ff6:	f000 fd47 	bl	8001a88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ffa:	f000 f863 	bl	80010c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ffe:	f000 f96b 	bl	80012d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001002:	f000 f94b 	bl	800129c <MX_DMA_Init>
	MX_I2C1_Init();
 8001006:	f000 f8a3 	bl	8001150 <MX_I2C1_Init>
	MX_TIM3_Init();
 800100a:	f000 f8cf 	bl	80011ac <MX_TIM3_Init>
	MX_USART1_UART_Init();
 800100e:	f000 f91b 	bl	8001248 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	DS18B20_Init(&ds, &htim3, DS18B20_GPIO_Port, DS18B20_Pin);
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <main+0xa4>)
 8001018:	491f      	ldr	r1, [pc, #124]	; (8001098 <main+0xa8>)
 800101a:	4820      	ldr	r0, [pc, #128]	; (800109c <main+0xac>)
 800101c:	f7ff ff11 	bl	8000e42 <DS18B20_Init>
	printf("xin chao");
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <main+0xb0>)
 8001022:	f007 fe31 	bl	8008c88 <iprintf>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of Queue01 */
	osMessageQDef(Queue01, 16, uint32_t);
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <main+0xb4>)
 8001028:	f107 0420 	add.w	r4, r7, #32
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Queue01Handle = osMessageCreate(osMessageQ(Queue01), NULL);
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fe61 	bl	8005d00 <osMessageCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <main+0xb8>)
 8001042:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	Queue02Handle = xQueueCreate(20, 20);
 8001044:	2200      	movs	r2, #0
 8001046:	2114      	movs	r1, #20
 8001048:	2014      	movs	r0, #20
 800104a:	f005 f810 	bl	800606e <xQueueGenericCreate>
 800104e:	4603      	mov	r3, r0
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <main+0xbc>)
 8001052:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <main+0xc0>)
 8001056:	1d3c      	adds	r4, r7, #4
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fde8 	bl	8005c40 <osThreadCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <main+0xc4>)
 8001074:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(Task02, "Task02", 256, NULL, osPriorityAboveNormal + 3,
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <main+0xc8>)
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	2304      	movs	r3, #4
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <main+0xcc>)
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <main+0xd0>)
 8001088:	f005 fb98 	bl	80067bc <xTaskCreate>
			&Task02Handle);
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800108c:	f004 fdd1 	bl	8005c32 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001090:	e7fe      	b.n	8001090 <main+0xa0>
 8001092:	bf00      	nop
 8001094:	40010800 	.word	0x40010800
 8001098:	2000054c 	.word	0x2000054c
 800109c:	200005ec 	.word	0x200005ec
 80010a0:	0800c704 	.word	0x0800c704
 80010a4:	0800c718 	.word	0x0800c718
 80010a8:	200005e0 	.word	0x200005e0
 80010ac:	200005e4 	.word	0x200005e4
 80010b0:	0800c728 	.word	0x0800c728
 80010b4:	200005dc 	.word	0x200005dc
 80010b8:	200005e8 	.word	0x200005e8
 80010bc:	0800c710 	.word	0x0800c710
 80010c0:	080013b5 	.word	0x080013b5

080010c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 fecd 	bl	8007e72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001102:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fecd 	bl	8003eac <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x58>
		Error_Handler();
 8001118:	f000 fa02 	bl	8001520 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2102      	movs	r1, #2
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f93a 	bl	80043b0 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x82>
		Error_Handler();
 8001142:	f000 f9ed 	bl	8001520 <Error_Handler>
	}
}
 8001146:	bf00      	nop
 8001148:	3740      	adds	r7, #64	; 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f001 f97b 	bl	8002488 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001198:	f000 f9c2 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200004b4 	.word	0x200004b4
 80011a4:	40005400 	.word	0x40005400
 80011a8:	00061a80 	.word	0x00061a80

080011ac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_TIM3_Init+0x94>)
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_TIM3_Init+0x98>)
 80011cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_TIM3_Init+0x94>)
 80011d0:	2247      	movs	r2, #71	; 0x47
 80011d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_TIM3_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_TIM3_Init+0x94>)
 80011dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011e0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_TIM3_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_TIM3_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80011ee:	4814      	ldr	r0, [pc, #80]	; (8001240 <MX_TIM3_Init+0x94>)
 80011f0:	f003 fa9c 	bl	800472c <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x52>
		Error_Handler();
 80011fa:	f000 f991 	bl	8001520 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_TIM3_Init+0x94>)
 800120c:	f003 fc82 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001216:	f000 f983 	bl	8001520 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_TIM3_Init+0x94>)
 8001228:	f003 fe58 	bl	8004edc <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001232:	f000 f975 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000054c 	.word	0x2000054c
 8001244:	40000400 	.word	0x40000400

08001248 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001258:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f003 fe9c 	bl	8004fbc <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800128a:	f000 f949 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000594 	.word	0x20000594
 8001298:	40013800 	.word	0x40013800

0800129c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_DMA_Init+0x38>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <MX_DMA_Init+0x38>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_DMA_Init+0x38>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2105      	movs	r1, #5
 80012be:	2010      	movs	r0, #16
 80012c0:	f000 fcc9 	bl	8001c56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012c4:	2010      	movs	r0, #16
 80012c6:	f000 fce2 	bl	8001c8e <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0xd0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <MX_GPIO_Init+0xd0>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_GPIO_Init+0xd0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4816      	ldr	r0, [pc, #88]	; (80013ac <MX_GPIO_Init+0xd4>)
 8001354:	f001 f867 	bl	8002426 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | DS18B20_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f248 0101 	movw	r1, #32769	; 0x8001
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001360:	f001 f861 	bl	8002426 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <MX_GPIO_Init+0xd4>)
 800137e:	f000 feb7 	bl	80020f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 DS18B20_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | DS18B20_Pin;
 8001382:	f248 0301 	movw	r3, #32769	; 0x8001
 8001386:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2302      	movs	r3, #2
 8001392:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_GPIO_Init+0xd8>)
 800139c:	f000 fea8 	bl	80020f0 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40010800 	.word	0x40010800

080013b4 <Task02>:

/* USER CODE BEGIN 4 */
void Task02(void *parameter) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b090      	sub	sp, #64	; 0x40
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	uint8_t str2[20];
	uint8_t str3[20];
	double value;
	char *ptr;
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <Task02+0x9c>)
 80013c2:	f001 f848 	bl	8002456 <HAL_GPIO_TogglePin>
		printf("Task 02 running\n");
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <Task02+0xa0>)
 80013c8:	f007 fce4 	bl	8008d94 <puts>
		printf("Converting Data !\n");
 80013cc:	4822      	ldr	r0, [pc, #136]	; (8001458 <Task02+0xa4>)
 80013ce:	f007 fce1 	bl	8008d94 <puts>
		xQueueReceive(Queue02Handle, &str2, 1000);
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <Task02+0xa8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 ffa0 	bl	8006324 <xQueueReceive>
		HAL_UART_Transmit(&huart1, str2, strlen((char*) str2), 1000);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe feb1 	bl	8000150 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	4819      	ldr	r0, [pc, #100]	; (8001460 <Task02+0xac>)
 80013fc:	f003 fe2e 	bl	800505c <HAL_UART_Transmit>

		value = strtod((char*) str2, &ptr);
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f008 fbba 	bl	8009b84 <strtod>
 8001410:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
		sprintf((char*) str3, "%.2f\n", value);
 8001414:	f107 0010 	add.w	r0, r7, #16
 8001418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800141c:	4911      	ldr	r1, [pc, #68]	; (8001464 <Task02+0xb0>)
 800141e:	f007 fd3f 	bl	8008ea0 <siprintf>
		HAL_UART_Transmit(&huart1, str3, strlen((char*) str3), 1000);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fe92 	bl	8000150 <strlen>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	f107 0110 	add.w	r1, r7, #16
 8001434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <Task02+0xac>)
 800143a:	f003 fe0f 	bl	800505c <HAL_UART_Transmit>

		printf("Data 2 !!!!!!\n\n");
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <Task02+0xb4>)
 8001440:	f007 fca8 	bl	8008d94 <puts>
		//printf("Recieve : %s\n", str2);
		osDelay(2000);
 8001444:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001448:	f004 fc46 	bl	8005cd8 <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800144c:	e7b6      	b.n	80013bc <Task02+0x8>
 800144e:	bf00      	nop
 8001450:	40011000 	.word	0x40011000
 8001454:	0800c744 	.word	0x0800c744
 8001458:	0800c754 	.word	0x0800c754
 800145c:	200005e4 	.word	0x200005e4
 8001460:	20000594 	.word	0x20000594
 8001464:	0800c768 	.word	0x0800c768
 8001468:	0800c770 	.word	0x0800c770

0800146c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t str[20];
	float temp = 0;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
	/* Infinite loop */
	for (;;) {
		printf("Task 01 running\n");
 800147a:	4819      	ldr	r0, [pc, #100]	; (80014e0 <StartDefaultTask+0x74>)
 800147c:	f007 fc8a 	bl	8008d94 <puts>
		temp = DS18B20_ReadTemp(&ds);
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <StartDefaultTask+0x78>)
 8001482:	f7ff fcf5 	bl	8000e70 <DS18B20_ReadTemp>
 8001486:	61f8      	str	r0, [r7, #28]
		sprintf((char*) str, "%.2f : Temp\n", temp);
 8001488:	69f8      	ldr	r0, [r7, #28]
 800148a:	f7fe ffcd 	bl	8000428 <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f107 0008 	add.w	r0, r7, #8
 8001496:	4914      	ldr	r1, [pc, #80]	; (80014e8 <StartDefaultTask+0x7c>)
 8001498:	f007 fd02 	bl	8008ea0 <siprintf>
		HAL_UART_Transmit(&huart1, str, strlen((char*) str), 1000);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fe55 	bl	8000150 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	f107 0108 	add.w	r1, r7, #8
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <StartDefaultTask+0x80>)
 80014b4:	f003 fdd2 	bl	800505c <HAL_UART_Transmit>
		printf("Queue Send !\n");
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <StartDefaultTask+0x84>)
 80014ba:	f007 fc6b 	bl	8008d94 <puts>
		xQueueSend(Queue02Handle, &str, 1000);
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <StartDefaultTask+0x88>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f107 0108 	add.w	r1, r7, #8
 80014c6:	2300      	movs	r3, #0
 80014c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014cc:	f004 fe2c 	bl	8006128 <xQueueGenericSend>
		printf("Queue was Send !\n\n");
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <StartDefaultTask+0x8c>)
 80014d2:	f007 fc5f 	bl	8008d94 <puts>
		osDelay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f004 fbfd 	bl	8005cd8 <osDelay>
		printf("Task 01 running\n");
 80014de:	e7cc      	b.n	800147a <StartDefaultTask+0xe>
 80014e0:	0800c780 	.word	0x0800c780
 80014e4:	200005ec 	.word	0x200005ec
 80014e8:	0800c790 	.word	0x0800c790
 80014ec:	20000594 	.word	0x20000594
 80014f0:	0800c7a0 	.word	0x0800c7a0
 80014f4:	200005e4 	.word	0x200005e4
 80014f8:	0800c7b0 	.word	0x0800c7b0

080014fc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800150e:	f000 fad1 	bl	8001ab4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40000800 	.word	0x40000800

08001520 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>

0800152a <HAL_I2C_MemTxCpltCallback>:
#endif
}

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_MspInit+0x68>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_MspInit+0x68>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_MspInit+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_MspInit+0x68>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_MspInit+0x68>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x68>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	f06f 0001 	mvn.w	r0, #1
 800157a:	f000 fb6c 	bl	8001c56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_MspInit+0x6c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_MspInit+0x6c>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_I2C_MspInit+0xcc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d151      	bne.n	8001670 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_I2C_MspInit+0xd0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_I2C_MspInit+0xd0>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_I2C_MspInit+0xd0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e4:	23c0      	movs	r3, #192	; 0xc0
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4822      	ldr	r0, [pc, #136]	; (8001680 <HAL_I2C_MspInit+0xd4>)
 80015f8:	f000 fd7a 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_I2C_MspInit+0xd0>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_I2C_MspInit+0xd0>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	61d3      	str	r3, [r2, #28]
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_I2C_MspInit+0xd0>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 800161c:	2210      	movs	r2, #16
 800161e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001644:	480f      	ldr	r0, [pc, #60]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001646:	f000 fb31 	bl	8001cac <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001650:	f7ff ff66 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2105      	movs	r1, #5
 8001664:	201f      	movs	r0, #31
 8001666:	f000 faf6 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166a:	201f      	movs	r0, #31
 800166c:	f000 fb0f 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40005400 	.word	0x40005400
 800167c:	40021000 	.word	0x40021000
 8001680:	40010c00 	.word	0x40010c00
 8001684:	20000508 	.word	0x20000508
 8001688:	4002006c 	.word	0x4002006c

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x34>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10b      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <HAL_UART_MspInit+0x9c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d139      	bne.n	800175c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_UART_MspInit+0xa0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_UART_MspInit+0xa0>)
 80016ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_UART_MspInit+0xa0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_UART_MspInit+0xa0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_UART_MspInit+0xa0>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_UART_MspInit+0xa0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_UART_MspInit+0xa4>)
 800172e:	f000 fcdf 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_UART_MspInit+0xa4>)
 8001748:	f000 fcd2 	bl	80020f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2105      	movs	r1, #5
 8001750:	2025      	movs	r0, #37	; 0x25
 8001752:	f000 fa80 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001756:	2025      	movs	r0, #37	; 0x25
 8001758:	f000 fa99 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40013800 	.word	0x40013800
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800

08001770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_InitTick+0xe8>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_InitTick+0xe8>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_InitTick+0xe8>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800179e:	f107 0210 	add.w	r2, r7, #16
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 ff71 	bl	8004690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b8:	f002 ff42 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80017bc:	6378      	str	r0, [r7, #52]	; 0x34
 80017be:	e004      	b.n	80017ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c0:	f002 ff3e 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_InitTick+0xec>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	3b01      	subs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_InitTick+0xf0>)
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <HAL_InitTick+0xf4>)
 80017dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_InitTick+0xf0>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_InitTick+0xf0>)
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_InitTick+0xf0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_InitTick+0xf0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_InitTick+0xf0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <HAL_InitTick+0xf0>)
 8001800:	f002 ff94 	bl	800472c <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800180a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11b      	bne.n	800184a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001812:	4813      	ldr	r0, [pc, #76]	; (8001860 <HAL_InitTick+0xf0>)
 8001814:	f003 f824 	bl	8004860 <HAL_TIM_Base_Start_IT>
 8001818:	4603      	mov	r3, r0
 800181a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800181e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001822:	2b00      	cmp	r3, #0
 8001824:	d111      	bne.n	800184a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001826:	201e      	movs	r0, #30
 8001828:	f000 fa31 	bl	8001c8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	d808      	bhi.n	8001844 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001832:	2200      	movs	r2, #0
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	201e      	movs	r0, #30
 8001838:	f000 fa0d 	bl	8001c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_InitTick+0xf8>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e002      	b.n	800184a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800184a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800184e:	4618      	mov	r0, r3
 8001850:	3738      	adds	r7, #56	; 0x38
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	431bde83 	.word	0x431bde83
 8001860:	200005fc 	.word	0x200005fc
 8001864:	40000800 	.word	0x40000800
 8001868:	20000004 	.word	0x20000004

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Channel6_IRQHandler+0x10>)
 800189e:	f000 fb13 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000508 	.word	0x20000508

080018ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM4_IRQHandler+0x10>)
 80018b2:	f003 f827 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200005fc 	.word	0x200005fc

080018c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <I2C1_EV_IRQHandler+0x10>)
 80018c6:	f000 ff37 	bl	8002738 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200004b4 	.word	0x200004b4

080018d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART1_IRQHandler+0x10>)
 80018da:	f003 fc43 	bl	8005164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000594 	.word	0x20000594

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <_kill>:

int _kill(int pid, int sig)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001900:	f006 f986 	bl	8007c10 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	2216      	movs	r2, #22
 8001908:	601a      	str	r2, [r3, #0]
	return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_exit>:

void _exit (int status)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191e:	f04f 31ff 	mov.w	r1, #4294967295
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffe7 	bl	80018f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001928:	e7fe      	b.n	8001928 <_exit+0x12>

0800192a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e00a      	b.n	8001952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193c:	f3af 8000 	nop.w
 8001940:	4601      	mov	r1, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbf0      	blt.n	800193c <_read+0x12>
	}

return len;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <_isatty>:

int _isatty(int file)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f006 f90c 	bl	8007c10 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20005000 	.word	0x20005000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	20000644 	.word	0x20000644
 8001a2c:	200013a8 	.word	0x200013a8

08001a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff fff8 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a42:	490c      	ldr	r1, [pc, #48]	; (8001a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a58:	4c09      	ldr	r4, [pc, #36]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f006 f9cf 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fac1 	bl	8000ff0 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a78:	0800cca4 	.word	0x0800cca4
  ldr r2, =_sbss
 8001a7c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a80:	200013a8 	.word	0x200013a8

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f8d1 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f7ff fe66 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fd4a 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000648 	.word	0x20000648

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000648 	.word	0x20000648

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <__NVIC_EnableIRQ+0x34>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff4f 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff64 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ffb2 	bl	8001bdc <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff81 	bl	8001b88 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff57 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e043      	b.n	8001d4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_DMA_Init+0xa8>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_DMA_Init+0xac>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	009a      	lsls	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_DMA_Init+0xb0>)
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	bffdfff8 	.word	0xbffdfff8
 8001d58:	cccccccd 	.word	0xcccccccd
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d008      	beq.n	8001d8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e020      	b.n	8001dcc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020e 	bic.w	r2, r2, #14
 8001d98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d005      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2204      	movs	r2, #4
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e051      	b.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020e 	bic.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_DMA_Abort_IT+0xd4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d029      	beq.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_DMA_Abort_IT+0xd8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x9e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_DMA_Abort_IT+0xdc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01a      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x98>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_DMA_Abort_IT+0xe0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x92>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_DMA_Abort_IT+0xe4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00a      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x8c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_DMA_Abort_IT+0xe8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_DMA_Abort_IT+0x86>
 8001e58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e5c:	e00e      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e62:	e00b      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e68:	e008      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	e005      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e74:	e002      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e76:	2310      	movs	r3, #16
 8001e78:	e000      	b.n	8001e7c <HAL_DMA_Abort_IT+0xa4>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_DMA_Abort_IT+0xec>)
 8001e7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40020008 	.word	0x40020008
 8001eb0:	4002001c 	.word	0x4002001c
 8001eb4:	40020030 	.word	0x40020030
 8001eb8:	40020044 	.word	0x40020044
 8001ebc:	40020058 	.word	0x40020058
 8001ec0:	4002006c 	.word	0x4002006c
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d04f      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xc8>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d029      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xae>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a65      	ldr	r2, [pc, #404]	; (80020bc <HAL_DMA_IRQHandler+0x1f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xaa>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01a      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xa4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a62      	ldr	r2, [pc, #392]	; (80020c4 <HAL_DMA_IRQHandler+0x1fc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d012      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x9e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_DMA_IRQHandler+0x200>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x98>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <HAL_DMA_IRQHandler+0x204>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d102      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x92>
 8001f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f58:	e00e      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f5e:	e00b      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f64:	e008      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6a:	e005      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	e002      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	e000      	b.n	8001f78 <HAL_DMA_IRQHandler+0xb0>
 8001f76:	2304      	movs	r3, #4
 8001f78:	4a55      	ldr	r2, [pc, #340]	; (80020d0 <HAL_DMA_IRQHandler+0x208>)
 8001f7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8094 	beq.w	80020ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f8e:	e08e      	b.n	80020ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2202      	movs	r2, #2
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d056      	beq.n	800204e <HAL_DMA_IRQHandler+0x186>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d051      	beq.n	800204e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020a 	bic.w	r2, r2, #10
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_DMA_IRQHandler+0x1f0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d029      	beq.n	800202e <HAL_DMA_IRQHandler+0x166>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_DMA_IRQHandler+0x1f4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <HAL_DMA_IRQHandler+0x162>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a35      	ldr	r2, [pc, #212]	; (80020c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x15c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_DMA_IRQHandler+0x1fc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d012      	beq.n	800201e <HAL_DMA_IRQHandler+0x156>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_DMA_IRQHandler+0x200>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x150>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a31      	ldr	r2, [pc, #196]	; (80020cc <HAL_DMA_IRQHandler+0x204>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d102      	bne.n	8002012 <HAL_DMA_IRQHandler+0x14a>
 800200c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002010:	e00e      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 8002012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002016:	e00b      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 8002018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201c:	e008      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 800201e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002022:	e005      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 8002024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002028:	e002      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 800202a:	2320      	movs	r3, #32
 800202c:	e000      	b.n	8002030 <HAL_DMA_IRQHandler+0x168>
 800202e:	2302      	movs	r3, #2
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_DMA_IRQHandler+0x208>)
 8002032:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d034      	beq.n	80020ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800204c:	e02f      	b.n	80020ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2208      	movs	r2, #8
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d028      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x1e8>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020e 	bic.w	r2, r2, #14
 8002076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
    }
  }
  return;
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
}
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40020008 	.word	0x40020008
 80020bc:	4002001c 	.word	0x4002001c
 80020c0:	40020030 	.word	0x40020030
 80020c4:	40020044 	.word	0x40020044
 80020c8:	40020058 	.word	0x40020058
 80020cc:	4002006c 	.word	0x4002006c
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020e2:	b2db      	uxtb	r3, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b08b      	sub	sp, #44	; 0x2c
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e169      	b.n	80023d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002104:	2201      	movs	r2, #1
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	429a      	cmp	r2, r3
 800211e:	f040 8158 	bne.w	80023d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a9a      	ldr	r2, [pc, #616]	; (8002390 <HAL_GPIO_Init+0x2a0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d05e      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 800212c:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_GPIO_Init+0x2a0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d875      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002132:	4a98      	ldr	r2, [pc, #608]	; (8002394 <HAL_GPIO_Init+0x2a4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d058      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002138:	4a96      	ldr	r2, [pc, #600]	; (8002394 <HAL_GPIO_Init+0x2a4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d86f      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800213e:	4a96      	ldr	r2, [pc, #600]	; (8002398 <HAL_GPIO_Init+0x2a8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d052      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002144:	4a94      	ldr	r2, [pc, #592]	; (8002398 <HAL_GPIO_Init+0x2a8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d869      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800214a:	4a94      	ldr	r2, [pc, #592]	; (800239c <HAL_GPIO_Init+0x2ac>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04c      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002150:	4a92      	ldr	r2, [pc, #584]	; (800239c <HAL_GPIO_Init+0x2ac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d863      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002156:	4a92      	ldr	r2, [pc, #584]	; (80023a0 <HAL_GPIO_Init+0x2b0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d046      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 800215c:	4a90      	ldr	r2, [pc, #576]	; (80023a0 <HAL_GPIO_Init+0x2b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d85d      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d82a      	bhi.n	80021bc <HAL_GPIO_Init+0xcc>
 8002166:	2b12      	cmp	r3, #18
 8002168:	d859      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <HAL_GPIO_Init+0x80>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	080021eb 	.word	0x080021eb
 8002174:	080021c5 	.word	0x080021c5
 8002178:	080021d7 	.word	0x080021d7
 800217c:	08002219 	.word	0x08002219
 8002180:	0800221f 	.word	0x0800221f
 8002184:	0800221f 	.word	0x0800221f
 8002188:	0800221f 	.word	0x0800221f
 800218c:	0800221f 	.word	0x0800221f
 8002190:	0800221f 	.word	0x0800221f
 8002194:	0800221f 	.word	0x0800221f
 8002198:	0800221f 	.word	0x0800221f
 800219c:	0800221f 	.word	0x0800221f
 80021a0:	0800221f 	.word	0x0800221f
 80021a4:	0800221f 	.word	0x0800221f
 80021a8:	0800221f 	.word	0x0800221f
 80021ac:	0800221f 	.word	0x0800221f
 80021b0:	0800221f 	.word	0x0800221f
 80021b4:	080021cd 	.word	0x080021cd
 80021b8:	080021e1 	.word	0x080021e1
 80021bc:	4a79      	ldr	r2, [pc, #484]	; (80023a4 <HAL_GPIO_Init+0x2b4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021c2:	e02c      	b.n	800221e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	623b      	str	r3, [r7, #32]
          break;
 80021ca:	e029      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	3304      	adds	r3, #4
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e024      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	3308      	adds	r3, #8
 80021dc:	623b      	str	r3, [r7, #32]
          break;
 80021de:	e01f      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	330c      	adds	r3, #12
 80021e6:	623b      	str	r3, [r7, #32]
          break;
 80021e8:	e01a      	b.n	8002220 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021f2:	2304      	movs	r3, #4
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e013      	b.n	8002220 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002200:	2308      	movs	r3, #8
 8002202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	611a      	str	r2, [r3, #16]
          break;
 800220a:	e009      	b.n	8002220 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800220c:	2308      	movs	r3, #8
 800220e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	615a      	str	r2, [r3, #20]
          break;
 8002216:	e003      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x130>
          break;
 800221e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2bff      	cmp	r3, #255	; 0xff
 8002224:	d801      	bhi.n	800222a <HAL_GPIO_Init+0x13a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	e001      	b.n	800222e <HAL_GPIO_Init+0x13e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2bff      	cmp	r3, #255	; 0xff
 8002234:	d802      	bhi.n	800223c <HAL_GPIO_Init+0x14c>
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x152>
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	3b08      	subs	r3, #8
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	210f      	movs	r1, #15
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	6a39      	ldr	r1, [r7, #32]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	431a      	orrs	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80b1 	beq.w	80023d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_GPIO_Init+0x2b8>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002288:	4a48      	ldr	r2, [pc, #288]	; (80023ac <HAL_GPIO_Init+0x2bc>)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <HAL_GPIO_Init+0x2c0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3f      	ldr	r2, [pc, #252]	; (80023b4 <HAL_GPIO_Init+0x2c4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1e8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <HAL_GPIO_Init+0x2c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1e4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <HAL_GPIO_Init+0x2cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1e0>
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e004      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022dc:	2300      	movs	r3, #0
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	f002 0203 	and.w	r2, r2, #3
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	4093      	lsls	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ee:	492f      	ldr	r1, [pc, #188]	; (80023ac <HAL_GPIO_Init+0x2bc>)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	492c      	ldr	r1, [pc, #176]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	43db      	mvns	r3, r3
 800231e:	4928      	ldr	r1, [pc, #160]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002320:	4013      	ands	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4922      	ldr	r1, [pc, #136]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	43db      	mvns	r3, r3
 8002346:	491e      	ldr	r1, [pc, #120]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4918      	ldr	r1, [pc, #96]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	4914      	ldr	r1, [pc, #80]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002370:	4013      	ands	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d021      	beq.n	80023c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e021      	b.n	80023d2 <HAL_GPIO_Init+0x2e2>
 800238e:	bf00      	nop
 8002390:	10320000 	.word	0x10320000
 8002394:	10310000 	.word	0x10310000
 8002398:	10220000 	.word	0x10220000
 800239c:	10210000 	.word	0x10210000
 80023a0:	10120000 	.word	0x10120000
 80023a4:	10110000 	.word	0x10110000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40010800 	.word	0x40010800
 80023b4:	40010c00 	.word	0x40010c00
 80023b8:	40011000 	.word	0x40011000
 80023bc:	40011400 	.word	0x40011400
 80023c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_GPIO_Init+0x304>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	4909      	ldr	r1, [pc, #36]	; (80023f4 <HAL_GPIO_Init+0x304>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f ae8e 	bne.w	8002104 <HAL_GPIO_Init+0x14>
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	372c      	adds	r7, #44	; 0x2c
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40010400 	.word	0x40010400

080023f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e001      	b.n	800241a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]
 8002432:	4613      	mov	r3, r2
 8002434:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002436:	787b      	ldrb	r3, [r7, #1]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002442:	e003      	b.n	800244c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	041a      	lsls	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	611a      	str	r2, [r3, #16]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002468:	887a      	ldrh	r2, [r7, #2]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	041a      	lsls	r2, r3, #16
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43d9      	mvns	r1, r3
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	400b      	ands	r3, r1
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	611a      	str	r2, [r3, #16]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e12b      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff f87c 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ec:	f002 f8a8 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a81      	ldr	r2, [pc, #516]	; (80026fc <HAL_I2C_Init+0x274>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d807      	bhi.n	800250c <HAL_I2C_Init+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_I2C_Init+0x278>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e006      	b.n	800251a <HAL_I2C_Init+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7d      	ldr	r2, [pc, #500]	; (8002704 <HAL_I2C_Init+0x27c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0e7      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a78      	ldr	r2, [pc, #480]	; (8002708 <HAL_I2C_Init+0x280>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a6a      	ldr	r2, [pc, #424]	; (80026fc <HAL_I2C_Init+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d802      	bhi.n	800255c <HAL_I2C_Init+0xd4>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3301      	adds	r3, #1
 800255a:	e009      	b.n	8002570 <HAL_I2C_Init+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_I2C_Init+0x284>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	495c      	ldr	r1, [pc, #368]	; (80026fc <HAL_I2C_Init+0x274>)
 800258c:	428b      	cmp	r3, r1
 800258e:	d819      	bhi.n	80025c4 <HAL_I2C_Init+0x13c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e59      	subs	r1, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb1 f3f3 	udiv	r3, r1, r3
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025a4:	400b      	ands	r3, r1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_I2C_Init+0x138>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e59      	subs	r1, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	e051      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e04f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <HAL_I2C_Init+0x168>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e012      	b.n	8002616 <HAL_I2C_Init+0x18e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x196>
 800261a:	2301      	movs	r3, #1
 800261c:	e022      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_I2C_Init+0x1bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e58      	subs	r0, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	fbb0 f3f3 	udiv	r3, r0, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6809      	ldr	r1, [r1, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6911      	ldr	r1, [r2, #16]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	000186a0 	.word	0x000186a0
 8002700:	001e847f 	.word	0x001e847f
 8002704:	003d08ff 	.word	0x003d08ff
 8002708:	431bde83 	.word	0x431bde83
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	d103      	bne.n	800272e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002758:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b10      	cmp	r3, #16
 8002766:	d003      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x38>
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	f040 80c1 	bne.w	80028f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002790:	d003      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x62>
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002798:	d101      	bne.n	800279e <HAL_I2C_EV_IRQHandler+0x66>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x68>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f000 8132 	beq.w	8002a0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x92>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	0a5b      	lsrs	r3, r3, #9
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fb5b 	bl	8003e78 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fccd 	bl	8003162 <I2C_Master_SB>
 80027c8:	e092      	b.n	80028f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_I2C_EV_IRQHandler+0xb2>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	0a5b      	lsrs	r3, r3, #9
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fd42 	bl	800326c <I2C_Master_ADD10>
 80027e8:	e082      	b.n	80028f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_I2C_EV_IRQHandler+0xd2>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	0a5b      	lsrs	r3, r3, #9
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fd5b 	bl	80032be <I2C_Master_ADDR>
 8002808:	e072      	b.n	80028f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03b      	beq.n	800288e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002824:	f000 80f3 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	09db      	lsrs	r3, r3, #7
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00f      	beq.n	8002854 <HAL_I2C_EV_IRQHandler+0x11c>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	0a9b      	lsrs	r3, r3, #10
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_I2C_EV_IRQHandler+0x11c>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f939 	bl	8002ac4 <I2C_MasterTransmit_TXE>
 8002852:	e04d      	b.n	80028f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80d6 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	0a5b      	lsrs	r3, r3, #9
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80cf 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b21      	cmp	r3, #33	; 0x21
 8002874:	d103      	bne.n	800287e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9c0 	bl	8002bfc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800287c:	e0c7      	b.n	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	f040 80c4 	bne.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa2e 	bl	8002ce8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288c:	e0bf      	b.n	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289c:	f000 80b7 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <HAL_I2C_EV_IRQHandler+0x194>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <HAL_I2C_EV_IRQHandler+0x194>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 faa7 	bl	8002e18 <I2C_MasterReceive_RXNE>
 80028ca:	e011      	b.n	80028f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 809a 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	0a5b      	lsrs	r3, r3, #9
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8093 	beq.w	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fb50 	bl	8002f8e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ee:	e08e      	b.n	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80028f0:	e08d      	b.n	8002a0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e007      	b.n	8002914 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0x20e>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 ff14 	bl	800376c <I2C_Slave_ADDR>
 8002944:	e066      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0x22e>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	0a5b      	lsrs	r3, r3, #9
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 ff4e 	bl	8003800 <I2C_Slave_STOPF>
 8002964:	e056      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002966:	7bbb      	ldrb	r3, [r7, #14]
 8002968:	2b21      	cmp	r3, #33	; 0x21
 800296a:	d002      	beq.n	8002972 <HAL_I2C_EV_IRQHandler+0x23a>
 800296c:	7bbb      	ldrb	r3, [r7, #14]
 800296e:	2b29      	cmp	r3, #41	; 0x29
 8002970:	d125      	bne.n	80029be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	09db      	lsrs	r3, r3, #7
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00f      	beq.n	800299e <HAL_I2C_EV_IRQHandler+0x266>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	0a9b      	lsrs	r3, r3, #10
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_I2C_EV_IRQHandler+0x266>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fe2c 	bl	80035f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800299c:	e039      	b.n	8002a12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d033      	beq.n	8002a12 <HAL_I2C_EV_IRQHandler+0x2da>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	0a5b      	lsrs	r3, r3, #9
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02d      	beq.n	8002a12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fe59 	bl	800366e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029bc:	e029      	b.n	8002a12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00f      	beq.n	80029ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	0a9b      	lsrs	r3, r3, #10
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fe63 	bl	80036ae <I2C_SlaveReceive_RXNE>
 80029e8:	e014      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	0a5b      	lsrs	r3, r3, #9
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fe91 	bl	800372a <I2C_SlaveReceive_BTF>
 8002a08:	e004      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ada:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d150      	bne.n	8002b8c <I2C_MasterTransmit_TXE+0xc8>
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b21      	cmp	r3, #33	; 0x21
 8002aee:	d14d      	bne.n	8002b8c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d01d      	beq.n	8002b32 <I2C_MasterTransmit_TXE+0x6e>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d01a      	beq.n	8002b32 <I2C_MasterTransmit_TXE+0x6e>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b02:	d016      	beq.n	8002b32 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b12:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2211      	movs	r2, #17
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff75 	bl	8002a1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b30:	e060      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b40:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d107      	bne.n	8002b7c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fe fcd8 	bl	800152a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b7a:	e03b      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff48 	bl	8002a1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b8a:	e033      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b21      	cmp	r3, #33	; 0x21
 8002b90:	d005      	beq.n	8002b9e <I2C_MasterTransmit_TXE+0xda>
 8002b92:	7bbb      	ldrb	r3, [r7, #14]
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d12d      	bne.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b22      	cmp	r3, #34	; 0x22
 8002b9c:	d12a      	bne.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d108      	bne.n	8002bba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002bb8:	e01c      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d103      	bne.n	8002bce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f88e 	bl	8002ce8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002bcc:	e012      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bf2:	e7ff      	b.n	8002bf4 <I2C_MasterTransmit_TXE+0x130>
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b21      	cmp	r3, #33	; 0x21
 8002c14:	d164      	bne.n	8002ce0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002c44:	e04c      	b.n	8002ce0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d01d      	beq.n	8002c88 <I2C_MasterTransmit_BTF+0x8c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d01a      	beq.n	8002c88 <I2C_MasterTransmit_BTF+0x8c>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c58:	d016      	beq.n	8002c88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2211      	movs	r2, #17
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff feca 	bl	8002a1a <HAL_I2C_MasterTxCpltCallback>
}
 8002c86:	e02b      	b.n	8002ce0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d107      	bne.n	8002cd2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fc2d 	bl	800152a <HAL_I2C_MemTxCpltCallback>
}
 8002cd0:	e006      	b.n	8002ce0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fe9d 	bl	8002a1a <HAL_I2C_MasterTxCpltCallback>
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11d      	bne.n	8002d3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10b      	bne.n	8002d20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002d1e:	e077      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	121b      	asrs	r3, r3, #8
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d3a:	e069      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10b      	bne.n	8002d5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d5a:	e059      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d152      	bne.n	8002e0a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	d10d      	bne.n	8002d86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d84:	e044      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b21      	cmp	r3, #33	; 0x21
 8002d94:	d112      	bne.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dba:	e029      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d124      	bne.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b21      	cmp	r3, #33	; 0x21
 8002dca:	d121      	bne.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fb91 	bl	800152a <HAL_I2C_MemTxCpltCallback>
}
 8002e08:	e002      	b.n	8002e10 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fc80 	bl	8002710 <I2C_Flush_DR>
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b22      	cmp	r3, #34	; 0x22
 8002e2a:	f040 80ac 	bne.w	8002f86 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d921      	bls.n	8002e80 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	f040 808c 	bne.w	8002f86 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002e7e:	e082      	b.n	8002f86 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d075      	beq.n	8002f74 <I2C_MasterReceive_RXNE+0x15c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d002      	beq.n	8002e94 <I2C_MasterReceive_RXNE+0x7c>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d16f      	bne.n	8002f74 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 ffbd 	bl	8003e14 <I2C_WaitOnSTOPRequestThroughIT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d142      	bne.n	8002f26 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ebe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d10a      	bne.n	8002f10 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fdc0 	bl	8002a8e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f0e:	e03a      	b.n	8002f86 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2212      	movs	r2, #18
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fd84 	bl	8002a2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f24:	e02f      	b.n	8002f86 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fd97 	bl	8002aa0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f72:	e008      	b.n	8002f86 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	605a      	str	r2, [r3, #4]
}
 8002f84:	e7ff      	b.n	8002f86 <I2C_MasterReceive_RXNE+0x16e>
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d11b      	bne.n	8002fde <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002fdc:	e0bd      	b.n	800315a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d129      	bne.n	800303c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d00a      	beq.n	8003014 <I2C_MasterReceive_BTF+0x86>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d007      	beq.n	8003014 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800303a:	e08e      	b.n	800315a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d176      	bne.n	8003134 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d002      	beq.n	8003052 <I2C_MasterReceive_BTF+0xc4>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d108      	bne.n	8003064 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e019      	b.n	8003098 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d002      	beq.n	8003070 <I2C_MasterReceive_BTF+0xe2>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d108      	bne.n	8003082 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e00a      	b.n	8003098 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b10      	cmp	r3, #16
 8003086:	d007      	beq.n	8003098 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d10a      	bne.n	800311e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fcb9 	bl	8002a8e <HAL_I2C_MemRxCpltCallback>
}
 800311c:	e01d      	b.n	800315a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2212      	movs	r2, #18
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fc7d 	bl	8002a2c <HAL_I2C_MasterRxCpltCallback>
}
 8003132:	e012      	b.n	800315a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d117      	bne.n	80031a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800318e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003190:	e067      	b.n	8003262 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]
}
 80031a4:	e05d      	b.n	8003262 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ae:	d133      	bne.n	8003218 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b21      	cmp	r3, #33	; 0x21
 80031ba:	d109      	bne.n	80031d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031cc:	611a      	str	r2, [r3, #16]
 80031ce:	e008      	b.n	80031e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <I2C_Master_SB+0x92>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d032      	beq.n	8003262 <I2C_Master_SB+0x100>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02d      	beq.n	8003262 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003214:	605a      	str	r2, [r3, #4]
}
 8003216:	e024      	b.n	8003262 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10e      	bne.n	800323e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	b29b      	uxth	r3, r3
 8003226:	11db      	asrs	r3, r3, #7
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0306 	and.w	r3, r3, #6
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f063 030f 	orn	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]
}
 800323c:	e011      	b.n	8003262 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10d      	bne.n	8003262 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	b29b      	uxth	r3, r3
 800324c:	11db      	asrs	r3, r3, #7
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 0306 	and.w	r3, r3, #6
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f063 030e 	orn	r3, r3, #14
 800325a:	b2da      	uxtb	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	b2da      	uxtb	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <I2C_Master_ADD10+0x26>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <I2C_Master_ADD10+0x48>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80032be:	b480      	push	{r7}
 80032c0:	b091      	sub	sp, #68	; 0x44
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b22      	cmp	r3, #34	; 0x22
 80032e6:	f040 8174 	bne.w	80035d2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <I2C_Master_ADDR+0x54>
 80032f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d10b      	bne.n	8003312 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	e16b      	b.n	80035ea <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <I2C_Master_ADDR+0x98>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003322:	d118      	bne.n	8003356 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003348:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	651a      	str	r2, [r3, #80]	; 0x50
 8003354:	e149      	b.n	80035ea <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d113      	bne.n	8003388 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e120      	b.n	80035ca <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 808a 	bne.w	80034a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800339a:	d137      	bne.n	800340c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ba:	d113      	bne.n	80033e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	e0f2      	b.n	80035ca <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e0de      	b.n	80035ca <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	2b08      	cmp	r3, #8
 8003410:	d02e      	beq.n	8003470 <I2C_Master_ADDR+0x1b2>
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	2b20      	cmp	r3, #32
 8003416:	d02b      	beq.n	8003470 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	2b12      	cmp	r3, #18
 800341c:	d102      	bne.n	8003424 <I2C_Master_ADDR+0x166>
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	2b01      	cmp	r3, #1
 8003422:	d125      	bne.n	8003470 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00e      	beq.n	8003448 <I2C_Master_ADDR+0x18a>
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b02      	cmp	r3, #2
 800342e:	d00b      	beq.n	8003448 <I2C_Master_ADDR+0x18a>
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	2b10      	cmp	r3, #16
 8003434:	d008      	beq.n	8003448 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e007      	b.n	8003458 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003456:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	e0ac      	b.n	80035ca <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e090      	b.n	80035ca <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d158      	bne.n	8003564 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d021      	beq.n	80034fc <I2C_Master_ADDR+0x23e>
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d01e      	beq.n	80034fc <I2C_Master_ADDR+0x23e>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d01b      	beq.n	80034fc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e012      	b.n	8003522 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800350a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d14b      	bne.n	80035ca <I2C_Master_ADDR+0x30c>
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003538:	d00b      	beq.n	8003552 <I2C_Master_ADDR+0x294>
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	2b01      	cmp	r3, #1
 800353e:	d008      	beq.n	8003552 <I2C_Master_ADDR+0x294>
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	2b08      	cmp	r3, #8
 8003544:	d005      	beq.n	8003552 <I2C_Master_ADDR+0x294>
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b10      	cmp	r3, #16
 800354a:	d002      	beq.n	8003552 <I2C_Master_ADDR+0x294>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b20      	cmp	r3, #32
 8003550:	d13b      	bne.n	80035ca <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e032      	b.n	80035ca <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003572:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003582:	d117      	bne.n	80035b4 <I2C_Master_ADDR+0x2f6>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800358a:	d00b      	beq.n	80035a4 <I2C_Master_ADDR+0x2e6>
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	2b01      	cmp	r3, #1
 8003590:	d008      	beq.n	80035a4 <I2C_Master_ADDR+0x2e6>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b08      	cmp	r3, #8
 8003596:	d005      	beq.n	80035a4 <I2C_Master_ADDR+0x2e6>
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	2b10      	cmp	r3, #16
 800359c:	d002      	beq.n	80035a4 <I2C_Master_ADDR+0x2e6>
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d107      	bne.n	80035b4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035d0:	e00b      	b.n	80035ea <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
}
 80035e8:	e7ff      	b.n	80035ea <I2C_Master_ADDR+0x32c>
 80035ea:	bf00      	nop
 80035ec:	3744      	adds	r7, #68	; 0x44
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02b      	beq.n	8003666 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d114      	bne.n	8003666 <I2C_SlaveTransmit_TXE+0x72>
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b29      	cmp	r3, #41	; 0x29
 8003640:	d111      	bne.n	8003666 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003650:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2221      	movs	r2, #33	; 0x21
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2228      	movs	r2, #40	; 0x28
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff f9ec 	bl	8002a3e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d011      	beq.n	80036a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02c      	beq.n	8003722 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d114      	bne.n	8003722 <I2C_SlaveReceive_RXNE+0x74>
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b2a      	cmp	r3, #42	; 0x2a
 80036fc:	d111      	bne.n	8003722 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2222      	movs	r2, #34	; 0x22
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2228      	movs	r2, #40	; 0x28
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f997 	bl	8002a50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003786:	2b28      	cmp	r3, #40	; 0x28
 8003788:	d127      	bne.n	80037da <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	09db      	lsrs	r3, r3, #7
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	81bb      	strh	r3, [r7, #12]
 80037bc:	e002      	b.n	80037c4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037cc:	89ba      	ldrh	r2, [r7, #12]
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff f945 	bl	8002a62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037d8:	e00e      	b.n	80037f8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385c:	d172      	bne.n	8003944 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b22      	cmp	r3, #34	; 0x22
 8003862:	d002      	beq.n	800386a <I2C_Slave_STOPF+0x6a>
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b2a      	cmp	r3, #42	; 0x2a
 8003868:	d135      	bne.n	80038d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fc16 	bl	80020d4 <HAL_DMA_GetState>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d049      	beq.n	8003942 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <I2C_Slave_STOPF+0x258>)
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fa8c 	bl	8001dd8 <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03d      	beq.n	8003942 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d0:	4610      	mov	r0, r2
 80038d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038d4:	e035      	b.n	8003942 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003908:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fbe0 	bl	80020d4 <HAL_DMA_GetState>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d014      	beq.n	8003944 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	4a4e      	ldr	r2, [pc, #312]	; (8003a58 <I2C_Slave_STOPF+0x258>)
 8003920:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fa56 	bl	8001dd8 <HAL_DMA_Abort_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
 8003940:	e000      	b.n	8003944 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003942:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d03e      	beq.n	80039cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d112      	bne.n	8003982 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d112      	bne.n	80039b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f843 	bl	8003a60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039da:	e039      	b.n	8003a50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d109      	bne.n	80039f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2228      	movs	r2, #40	; 0x28
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff f82d 	bl	8002a50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b28      	cmp	r3, #40	; 0x28
 8003a00:	d111      	bne.n	8003a26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <I2C_Slave_STOPF+0x25c>)
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff f82c 	bl	8002a7c <HAL_I2C_ListenCpltCallback>
}
 8003a24:	e014      	b.n	8003a50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	2b22      	cmp	r3, #34	; 0x22
 8003a2c:	d002      	beq.n	8003a34 <I2C_Slave_STOPF+0x234>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b22      	cmp	r3, #34	; 0x22
 8003a32:	d10d      	bne.n	8003a50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff f800 	bl	8002a50 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	08003cc5 	.word	0x08003cc5
 8003a5c:	ffff0000 	.word	0xffff0000

08003a60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d002      	beq.n	8003a84 <I2C_ITError+0x24>
 8003a7e:	7bbb      	ldrb	r3, [r7, #14]
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d10a      	bne.n	8003a9a <I2C_ITError+0x3a>
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b22      	cmp	r3, #34	; 0x22
 8003a88:	d107      	bne.n	8003a9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aa0:	2b28      	cmp	r3, #40	; 0x28
 8003aa2:	d107      	bne.n	8003ab4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2228      	movs	r2, #40	; 0x28
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ab2:	e015      	b.n	8003ae0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac2:	d00a      	beq.n	8003ada <I2C_ITError+0x7a>
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b60      	cmp	r3, #96	; 0x60
 8003ac8:	d007      	beq.n	8003ada <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d162      	bne.n	8003bb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d020      	beq.n	8003b50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <I2C_ITError+0x25c>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe f95c 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8089 	beq.w	8003c3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4798      	blx	r3
 8003b4e:	e074      	b.n	8003c3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	4a59      	ldr	r2, [pc, #356]	; (8003cbc <I2C_ITError+0x25c>)
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe f93b 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d068      	beq.n	8003c3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d10b      	bne.n	8003b8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
 8003bb4:	e041      	b.n	8003c3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b60      	cmp	r3, #96	; 0x60
 8003bc0:	d125      	bne.n	8003c0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d10b      	bne.n	8003bf6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe ff53 	bl	8002ab2 <HAL_I2C_AbortCpltCallback>
 8003c0c:	e015      	b.n	8003c3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d10b      	bne.n	8003c34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe ff33 	bl	8002aa0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d113      	bne.n	8003cb4 <I2C_ITError+0x254>
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b28      	cmp	r3, #40	; 0x28
 8003c90:	d110      	bne.n	8003cb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <I2C_ITError+0x260>)
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe fee4 	bl	8002a7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <I2C_DMAAbort+0x148>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	08db      	lsrs	r3, r3, #3
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <I2C_DMAAbort+0x14c>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a1a      	lsrs	r2, r3, #8
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d0a:	e00a      	b.n	8003d22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d20:	d0ea      	beq.n	8003cf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	2200      	movs	r2, #0
 8003d76:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b60      	cmp	r3, #96	; 0x60
 8003d92:	d10e      	bne.n	8003db2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7fe fe81 	bl	8002ab2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003db0:	e027      	b.n	8003e02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db8:	2b28      	cmp	r3, #40	; 0x28
 8003dba:	d117      	bne.n	8003dec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2228      	movs	r2, #40	; 0x28
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dea:	e007      	b.n	8003dfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003dfc:	6978      	ldr	r0, [r7, #20]
 8003dfe:	f7fe fe4f 	bl	8002aa0 <HAL_I2C_ErrorCallback>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	14f8b589 	.word	0x14f8b589

08003e14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	0a1a      	lsrs	r2, r3, #8
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e008      	b.n	8003e64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d0e9      	beq.n	8003e36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000
 8003e74:	14f8b589 	.word	0x14f8b589

08003e78 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e88:	d103      	bne.n	8003e92 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e90:	e007      	b.n	8003ea2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e9a:	d102      	bne.n	8003ea2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e272      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8087 	beq.w	8003fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ecc:	4b92      	ldr	r3, [pc, #584]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d112      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
 8003ee4:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef2:	4b89      	ldr	r3, [pc, #548]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d168      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e24c      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_OscConfig+0x76>
 8003f14:	4b80      	ldr	r3, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7f      	ldr	r2, [pc, #508]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e02e      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7a      	ldr	r2, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b78      	ldr	r3, [pc, #480]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0xbc>
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a71      	ldr	r2, [pc, #452]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f68:	4b6b      	ldr	r3, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6a      	ldr	r2, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a67      	ldr	r2, [pc, #412]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd fda6 	bl	8001ad8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fd fda2 	bl	8001ad8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e200      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe4>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fd92 	bl	8001ad8 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fd8e 	bl	8001ad8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1ec      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x10c>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe6:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ff2:	4b49      	ldr	r3, [pc, #292]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c0      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4939      	ldr	r1, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd fd47 	bl	8001ad8 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fd fd43 	bl	8001ad8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4927      	ldr	r1, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd fd26 	bl	8001ad8 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004090:	f7fd fd22 	bl	8001ad8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e180      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03a      	beq.n	8004130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d019      	beq.n	80040f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7fd fd06 	bl	8001ad8 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7fd fd02 	bl	8001ad8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e160      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 fafe 	bl	80046f0 <RCC_Delay>
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7fd fcec 	bl	8001ad8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7fd fce8 	bl	8001ad8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d908      	bls.n	8004124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e146      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	42420000 	.word	0x42420000
 8004120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e9      	bne.n	8004104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a6 	beq.w	800428a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a87      	ldr	r2, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b85      	ldr	r3, [pc, #532]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7e      	ldr	r2, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fd fca9 	bl	8001ad8 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fd fca5 	bl	8001ad8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b64      	cmp	r3, #100	; 0x64
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e103      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x312>
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6213      	str	r3, [r2, #32]
 80041bc:	e02d      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x334>
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a69      	ldr	r2, [pc, #420]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4a66      	ldr	r2, [pc, #408]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	e01c      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0x356>
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a60      	ldr	r2, [pc, #384]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a5d      	ldr	r2, [pc, #372]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	e00b      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 8004202:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a57      	ldr	r2, [pc, #348]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7fd fc59 	bl	8001ad8 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd fc55 	bl	8001ad8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0b1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCC_OscConfig+0x37e>
 800424c:	e014      	b.n	8004278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fd fc43 	bl	8001ad8 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fc3f 	bl	8001ad8 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e09b      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	4b40      	ldr	r3, [pc, #256]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8087 	beq.w	80043a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d061      	beq.n	8004364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d146      	bne.n	8004336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fd fc13 	bl	8001ad8 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fd fc0f 	bl	8001ad8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e06d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d108      	bne.n	80042f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4921      	ldr	r1, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a19      	ldr	r1, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	491b      	ldr	r1, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fd fbe3 	bl	8001ad8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fd fbdf 	bl	8001ad8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x46a>
 8004334:	e035      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd fbcc 	bl	8001ad8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fbc8 	bl	8001ad8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e026      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x498>
 8004362:	e01e      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e019      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004370:	40021000 	.word	0x40021000
 8004374:	40007000 	.word	0x40007000
 8004378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	429a      	cmp	r2, r3
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000

080043b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0d0      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4965      	ldr	r1, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800442e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d040      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e073      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06b      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4936      	ldr	r1, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7fd fb1a 	bl	8001ad8 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fd fb16 	bl	8001ad8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e053      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d210      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd f906 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000
 8004574:	40021000 	.word	0x40021000
 8004578:	0800c7cc 	.word	0x0800c7cc
 800457c:	20000000 	.word	0x20000000
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x30>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x36>
 80045b2:	e027      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045b6:	613b      	str	r3, [r7, #16]
      break;
 80045b8:	e027      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	0c5b      	lsrs	r3, r3, #17
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045e6:	fb03 f202 	mul.w	r2, r3, r2
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e004      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0c      	ldr	r2, [pc, #48]	; (8004628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	613b      	str	r3, [r7, #16]
      break;
 8004602:	e002      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 8004606:	613b      	str	r3, [r7, #16]
      break;
 8004608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460a:	693b      	ldr	r3, [r7, #16]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	007a1200 	.word	0x007a1200
 8004620:	0800c7e4 	.word	0x0800c7e4
 8004624:	0800c7f4 	.word	0x0800c7f4
 8004628:	003d0900 	.word	0x003d0900

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <HAL_RCC_GetHCLKFreq+0x10>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff2 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800c7dc 	.word	0x0800c7dc

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800466c:	f7ff ffde 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	0adb      	lsrs	r3, r3, #11
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	; (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	0800c7dc 	.word	0x0800c7dc

08004690 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	220f      	movs	r2, #15
 800469e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0203 	and.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0207 	and.w	r2, r3, #7
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40022000 	.word	0x40022000

080046f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <RCC_Delay+0x34>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <RCC_Delay+0x38>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0a5b      	lsrs	r3, r3, #9
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800470c:	bf00      	nop
  }
  while (Delay --);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f9      	bne.n	800470c <RCC_Delay+0x1c>
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	20000000 	.word	0x20000000
 8004728:	10624dd3 	.word	0x10624dd3

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc ff9a 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fabe 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_TIM_Base_Start+0x88>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_TIM_Base_Start+0x48>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d009      	beq.n	8004814 <HAL_TIM_Base_Start+0x48>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <HAL_TIM_Base_Start+0x8c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIM_Base_Start+0x48>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <HAL_TIM_Base_Start+0x90>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d111      	bne.n	8004838 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d010      	beq.n	8004848 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	e007      	b.n	8004848 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800

08004860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e03a      	b.n	80048ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIM_Base_Start_IT+0x98>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <HAL_TIM_Base_Start_IT+0x9c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <HAL_TIM_Base_Start_IT+0xa0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d010      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e007      	b.n	80048ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d122      	bne.n	8004960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0202 	mvn.w	r2, #2
 8004930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9b4 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9a7 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f9b6 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d122      	bne.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f98a 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f97d 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f98c 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d122      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d11b      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0208 	mvn.w	r2, #8
 80049d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2204      	movs	r2, #4
 80049de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f960 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80049f4:	e005      	b.n	8004a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f953 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f962 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d122      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d11b      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0210 	mvn.w	r2, #16
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2208      	movs	r2, #8
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f936 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f929 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f938 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0201 	mvn.w	r2, #1
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fd3a 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa7b 	bl	8004faa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8fc 	bl	8004cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0220 	mvn.w	r2, #32
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa46 	bl	8004f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_ConfigClockSource+0x1c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0b4      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x186>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d03e      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6e:	f200 8087 	bhi.w	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	f000 8086 	beq.w	8004c86 <HAL_TIM_ConfigClockSource+0x172>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d87f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d01a      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0xa6>
 8004b84:	2b70      	cmp	r3, #112	; 0x70
 8004b86:	d87b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d050      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x11a>
 8004b8c:	2b60      	cmp	r3, #96	; 0x60
 8004b8e:	d877      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d03c      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xfa>
 8004b94:	2b50      	cmp	r3, #80	; 0x50
 8004b96:	d873      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d058      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0x13a>
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d86f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d064      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d86b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d060      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d867      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d05a      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb8:	e062      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f000 f968 	bl	8004e9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
      break;
 8004be6:	e04f      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f000 f951 	bl	8004e9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0a:	609a      	str	r2, [r3, #8]
      break;
 8004c0c:	e03c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 f8c8 	bl	8004db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2150      	movs	r1, #80	; 0x50
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f91f 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e02c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f000 f8e6 	bl	8004e0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2160      	movs	r1, #96	; 0x60
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f90f 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004c4c:	e01c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 f8a8 	bl	8004db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2140      	movs	r1, #64	; 0x40
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f8ff 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e00c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 f8f6 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004c7e:	e003      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e000      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
	...

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <TIM_Base_SetConfig+0xbc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a25      	ldr	r2, [pc, #148]	; (8004dac <TIM_Base_SetConfig+0xc0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <TIM_Base_SetConfig+0xbc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <TIM_Base_SetConfig+0xc0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800

08004db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 030a 	bic.w	r3, r3, #10
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f043 0307 	orr.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	021a      	lsls	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	609a      	str	r2, [r3, #8]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e046      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800

08004f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e042      	b.n	8005054 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fb70 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fd71 	bl	8005ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d16d      	bne.n	8005158 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_UART_Transmit+0x2c>
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e066      	b.n	800515a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509a:	f7fc fd1d 	bl	8001ad8 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e02a      	b.n	8005128 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 faf9 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e036      	b.n	800515a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3302      	adds	r3, #2
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e007      	b.n	800511a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1cf      	bne.n	80050d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2200      	movs	r2, #0
 800513a:	2140      	movs	r1, #64	; 0x40
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fac9 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e006      	b.n	800515a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0ba      	sub	sp, #232	; 0xe8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_UART_IRQHandler+0x66>
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbd1 	bl	800596a <UART_Receive_IT>
      return;
 80051c8:	e25b      	b.n	8005682 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80de 	beq.w	8005390 <HAL_UART_IRQHandler+0x22c>
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80d1 	beq.w	8005390 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <HAL_UART_IRQHandler+0xae>
 80051fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_UART_IRQHandler+0xd2>
 800521e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	f043 0202 	orr.w	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
 8005242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 81f2 	beq.w	8005678 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_UART_IRQHandler+0x14e>
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fb5c 	bl	800596a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_UART_IRQHandler+0x17a>
 80052d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04f      	beq.n	800537e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa66 	bl	80057b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d041      	beq.n	8005376 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800531e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800532a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1d9      	bne.n	80052f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	4a7e      	ldr	r2, [pc, #504]	; (8005544 <HAL_UART_IRQHandler+0x3e0>)
 800534c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc fd40 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005368:	4610      	mov	r0, r2
 800536a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00e      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f99c 	bl	80056ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e00a      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f998 	bl	80056ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	e006      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f994 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800538a:	e175      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	bf00      	nop
    return;
 800538e:	e173      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 814f 	bne.w	8005638 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8148 	beq.w	8005638 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8141 	beq.w	8005638 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80b6 	beq.w	8005548 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8145 	beq.w	800567c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053fa:	429a      	cmp	r2, r3
 80053fc:	f080 813e 	bcs.w	800567c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005406:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b20      	cmp	r3, #32
 8005410:	f000 8088 	beq.w	8005524 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800542a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800542e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005440:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800544c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1d9      	bne.n	8005414 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005484:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005488:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800548c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e1      	bne.n	8005460 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e3      	bne.n	800549c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005506:	65ba      	str	r2, [r7, #88]	; 0x58
 8005508:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e3      	bne.n	80054e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	4618      	mov	r0, r3
 8005520:	f7fc fc1e 	bl	8001d60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005532:	b29b      	uxth	r3, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8bf 	bl	80056be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005540:	e09c      	b.n	800567c <HAL_UART_IRQHandler+0x518>
 8005542:	bf00      	nop
 8005544:	08005875 	.word	0x08005875
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005550:	b29b      	uxth	r3, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 808e 	beq.w	8005680 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8089 	beq.w	8005680 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005592:	647a      	str	r2, [r7, #68]	; 0x44
 8005594:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e3      	bne.n	800556e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	623b      	str	r3, [r7, #32]
   return(result);
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ca:	633a      	str	r2, [r7, #48]	; 0x30
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e3      	bne.n	80055a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	617b      	str	r3, [r7, #20]
   return(result);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e3      	bne.n	80055ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800562a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f844 	bl	80056be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005636:	e023      	b.n	8005680 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <HAL_UART_IRQHandler+0x4f4>
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f923 	bl	800589c <UART_Transmit_IT>
    return;
 8005656:	e014      	b.n	8005682 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_UART_IRQHandler+0x51e>
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f962 	bl	800593a <UART_EndTransmit_IT>
    return;
 8005676:	e004      	b.n	8005682 <HAL_UART_IRQHandler+0x51e>
    return;
 8005678:	bf00      	nop
 800567a:	e002      	b.n	8005682 <HAL_UART_IRQHandler+0x51e>
      return;
 800567c:	bf00      	nop
 800567e:	e000      	b.n	8005682 <HAL_UART_IRQHandler+0x51e>
      return;
 8005680:	bf00      	nop
  }
}
 8005682:	37e8      	adds	r7, #232	; 0xe8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b090      	sub	sp, #64	; 0x40
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	e050      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d04c      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f4:	f7fc f9f0 	bl	8001ad8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005700:	429a      	cmp	r2, r3
 8005702:	d241      	bcs.n	8005788 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005724:	637a      	str	r2, [r7, #52]	; 0x34
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005758:	623a      	str	r2, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	61bb      	str	r3, [r7, #24]
   return(result);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e00f      	b.n	80057a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d09f      	beq.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3740      	adds	r7, #64	; 0x40
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b095      	sub	sp, #84	; 0x54
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057d8:	643a      	str	r2, [r7, #64]	; 0x40
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	2b01      	cmp	r3, #1
 8005826:	d119      	bne.n	800585c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60bb      	str	r3, [r7, #8]
   return(result);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	647b      	str	r3, [r7, #68]	; 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005848:	61ba      	str	r2, [r7, #24]
 800584a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6979      	ldr	r1, [r7, #20]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
}
 800586a:	bf00      	nop
 800586c:	3754      	adds	r7, #84	; 0x54
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff ff0c 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b21      	cmp	r3, #33	; 0x21
 80058ae:	d13e      	bne.n	800592e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b8:	d114      	bne.n	80058e4 <UART_Transmit_IT+0x48>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d110      	bne.n	80058e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	621a      	str	r2, [r3, #32]
 80058e2:	e008      	b.n	80058f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6211      	str	r1, [r2, #32]
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29b      	uxth	r3, r3
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e000      	b.n	8005930 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fe94 	bl	8005688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b08c      	sub	sp, #48	; 0x30
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b22      	cmp	r3, #34	; 0x22
 800597c:	f040 80ae 	bne.w	8005adc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d117      	bne.n	80059ba <UART_Receive_IT+0x50>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d113      	bne.n	80059ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	1c9a      	adds	r2, r3, #2
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
 80059b8:	e026      	b.n	8005a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	d007      	beq.n	80059de <UART_Receive_IT+0x74>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <UART_Receive_IT+0x82>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e008      	b.n	80059fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4619      	mov	r1, r3
 8005a16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d15d      	bne.n	8005ad8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0220 	bic.w	r2, r2, #32
 8005a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d135      	bne.n	8005ace <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	623a      	str	r2, [r7, #32]
 8005a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d10a      	bne.n	8005ac0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fdf9 	bl	80056be <HAL_UARTEx_RxEventCallback>
 8005acc:	e002      	b.n	8005ad4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fde3 	bl	800569a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e002      	b.n	8005ade <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3730      	adds	r7, #48	; 0x30
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b22:	f023 030c 	bic.w	r3, r3, #12
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <UART_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fe fd8a 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	e002      	b.n	8005b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe fd72 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009a      	lsls	r2, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <UART_SetConfig+0x118>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	0119      	lsls	r1, r3, #4
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009a      	lsls	r2, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b94:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <UART_SetConfig+0x118>)
 8005b96:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2064      	movs	r0, #100	; 0x64
 8005b9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <UART_SetConfig+0x118>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	4419      	add	r1, r3
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009a      	lsls	r2, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <UART_SetConfig+0x118>)
 8005bce:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2064      	movs	r0, #100	; 0x64
 8005bd6:	fb00 f303 	mul.w	r3, r0, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <UART_SetConfig+0x118>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	51eb851f 	.word	0x51eb851f

08005c04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c16:	2b84      	cmp	r3, #132	; 0x84
 8005c18:	d005      	beq.n	8005c26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	3303      	adds	r3, #3
 8005c24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c26:	68fb      	ldr	r3, [r7, #12]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c36:	f000 ff3b 	bl	8006ab0 <vTaskStartScheduler>
  
  return osOK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af04      	add	r7, sp, #16
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d020      	beq.n	8005c94 <osThreadCreate+0x54>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01c      	beq.n	8005c94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685c      	ldr	r4, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681d      	ldr	r5, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691e      	ldr	r6, [r3, #16]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ffc9 	bl	8005c04 <makeFreeRtosPriority>
 8005c72:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c7c:	9202      	str	r2, [sp, #8]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	9100      	str	r1, [sp, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	4632      	mov	r2, r6
 8005c86:	4629      	mov	r1, r5
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fd3b 	bl	8006704 <xTaskCreateStatic>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e01c      	b.n	8005cce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685c      	ldr	r4, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca0:	b29e      	uxth	r6, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff ffab 	bl	8005c04 <makeFreeRtosPriority>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	9200      	str	r2, [sp, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4632      	mov	r2, r6
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 fd7c 	bl	80067bc <xTaskCreate>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d001      	beq.n	8005cce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <osDelay+0x16>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	e000      	b.n	8005cf0 <osDelay+0x18>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fea9 	bl	8006a48 <vTaskDelay>
  
  return osOK;
 8005cf6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d011      	beq.n	8005d36 <osMessageCreate+0x36>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	9400      	str	r4, [sp, #0]
 8005d2e:	f000 f927 	bl	8005f80 <xQueueGenericCreateStatic>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e008      	b.n	8005d48 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4619      	mov	r1, r3
 8005d42:	f000 f994 	bl	800606e <xQueueGenericCreate>
 8005d46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}

08005d50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f103 0208 	add.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 0208 	add.w	r2, r3, #8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr

08005d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr

08005dec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d103      	bne.n	8005e0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e00c      	b.n	8005e26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	e002      	b.n	8005e1a <vListInsert+0x2e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d2f6      	bcs.n	8005e14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6852      	ldr	r2, [r2, #4]
 8005e7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d103      	bne.n	8005e90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	1e5a      	subs	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
	...

08005eb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005eda:	f001 fbff 	bl	80076dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	441a      	add	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d114      	bne.n	8005f5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01a      	beq.n	8005f6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3310      	adds	r3, #16
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 f80f 	bl	8006f60 <xTaskRemoveFromEventList>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d012      	beq.n	8005f6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <xQueueGenericReset+0xcc>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	e009      	b.n	8005f6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fef6 	bl	8005d50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3324      	adds	r3, #36	; 0x24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fef1 	bl	8005d50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f6e:	f001 fbe5 	bl	800773c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f72:	2301      	movs	r3, #1
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <xQueueGenericCreateStatic+0x52>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <xQueueGenericCreateStatic+0x56>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <xQueueGenericCreateStatic+0x58>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <xQueueGenericCreateStatic+0x7e>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <xQueueGenericCreateStatic+0x82>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <xQueueGenericCreateStatic+0x84>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	61fb      	str	r3, [r7, #28]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800601e:	2348      	movs	r3, #72	; 0x48
 8006020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b48      	cmp	r3, #72	; 0x48
 8006026:	d00a      	beq.n	800603e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61bb      	str	r3, [r7, #24]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006050:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f843 	bl	80060ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006066:	4618      	mov	r0, r3
 8006068:	3730      	adds	r7, #48	; 0x30
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08a      	sub	sp, #40	; 0x28
 8006072:	af02      	add	r7, sp, #8
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	613b      	str	r3, [r7, #16]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e004      	b.n	80060ae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3348      	adds	r3, #72	; 0x48
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fbd4 	bl	8007860 <pvPortMalloc>
 80060b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00f      	beq.n	80060e0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	3348      	adds	r3, #72	; 0x48
 80060c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ce:	79fa      	ldrb	r2, [r7, #7]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f805 	bl	80060ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80060e0:	69bb      	ldr	r3, [r7, #24]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e002      	b.n	800610c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006118:	2101      	movs	r1, #1
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f7ff fec8 	bl	8005eb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	; 0x38
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006136:	2300      	movs	r3, #0
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xQueueGenericSend+0x32>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <xQueueGenericSend+0x40>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <xQueueGenericSend+0x44>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <xQueueGenericSend+0x46>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <xQueueGenericSend+0x60>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d103      	bne.n	8006196 <xQueueGenericSend+0x6e>
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <xQueueGenericSend+0x72>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <xQueueGenericSend+0x74>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	623b      	str	r3, [r7, #32]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b6:	f001 f897 	bl	80072e8 <xTaskGetSchedulerState>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <xQueueGenericSend+0x9e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <xQueueGenericSend+0xa2>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <xQueueGenericSend+0xa4>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61fb      	str	r3, [r7, #28]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e6:	f001 fa79 	bl	80076dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <xQueueGenericSend+0xd4>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d129      	bne.n	8006250 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006202:	f000 f96f 	bl	80064e4 <prvCopyDataToQueue>
 8006206:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d010      	beq.n	8006232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	3324      	adds	r3, #36	; 0x24
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fea3 	bl	8006f60 <xTaskRemoveFromEventList>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d013      	beq.n	8006248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006220:	4b3f      	ldr	r3, [pc, #252]	; (8006320 <xQueueGenericSend+0x1f8>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	e00a      	b.n	8006248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006238:	4b39      	ldr	r3, [pc, #228]	; (8006320 <xQueueGenericSend+0x1f8>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006248:	f001 fa78 	bl	800773c <vPortExitCritical>
				return pdPASS;
 800624c:	2301      	movs	r3, #1
 800624e:	e063      	b.n	8006318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006256:	f001 fa71 	bl	800773c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800625a:	2300      	movs	r3, #0
 800625c:	e05c      	b.n	8006318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fedb 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006272:	f001 fa63 	bl	800773c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006276:	f000 fc85 	bl	8006b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800627a:	f001 fa2f 	bl	80076dc <vPortEnterCritical>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006284:	b25b      	sxtb	r3, r3
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d103      	bne.n	8006294 <xQueueGenericSend+0x16c>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d103      	bne.n	80062aa <xQueueGenericSend+0x182>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062aa:	f001 fa47 	bl	800773c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ae:	1d3a      	adds	r2, r7, #4
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 feca 	bl	8007050 <xTaskCheckForTimeOut>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d124      	bne.n	800630c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c4:	f000 fa06 	bl	80066d4 <prvIsQueueFull>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d018      	beq.n	8006300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	3310      	adds	r3, #16
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4611      	mov	r1, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fe1e 	bl	8006f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062de:	f000 f991 	bl	8006604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062e2:	f000 fc5d 	bl	8006ba0 <xTaskResumeAll>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f47f af7c 	bne.w	80061e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <xQueueGenericSend+0x1f8>)
 80062f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	e772      	b.n	80061e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006302:	f000 f97f 	bl	8006604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006306:	f000 fc4b 	bl	8006ba0 <xTaskResumeAll>
 800630a:	e76c      	b.n	80061e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800630c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630e:	f000 f979 	bl	8006604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006312:	f000 fc45 	bl	8006ba0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006316:	2300      	movs	r3, #0
		}
	}
}
 8006318:	4618      	mov	r0, r3
 800631a:	3738      	adds	r7, #56	; 0x38
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08c      	sub	sp, #48	; 0x30
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006330:	2300      	movs	r3, #0
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xQueueReceive+0x30>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	623b      	str	r3, [r7, #32]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <xQueueReceive+0x3e>
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <xQueueReceive+0x42>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <xQueueReceive+0x44>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xQueueReceive+0x5e>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	61fb      	str	r3, [r7, #28]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006382:	f000 ffb1 	bl	80072e8 <xTaskGetSchedulerState>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xQueueReceive+0x6e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueReceive+0x72>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueReceive+0x74>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <xQueueReceive+0x8e>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61bb      	str	r3, [r7, #24]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b2:	f001 f993 	bl	80076dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01f      	beq.n	8006402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c6:	f000 f8f7 	bl	80065b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	1e5a      	subs	r2, r3, #1
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	3310      	adds	r3, #16
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fdbe 	bl	8006f60 <xTaskRemoveFromEventList>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ea:	4b3d      	ldr	r3, [pc, #244]	; (80064e0 <xQueueReceive+0x1bc>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063fa:	f001 f99f 	bl	800773c <vPortExitCritical>
				return pdPASS;
 80063fe:	2301      	movs	r3, #1
 8006400:	e069      	b.n	80064d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006408:	f001 f998 	bl	800773c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800640c:	2300      	movs	r3, #0
 800640e:	e062      	b.n	80064d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006416:	f107 0310 	add.w	r3, r7, #16
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fe02 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006424:	f001 f98a 	bl	800773c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006428:	f000 fbac 	bl	8006b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642c:	f001 f956 	bl	80076dc <vPortEnterCritical>
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006436:	b25b      	sxtb	r3, r3
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d103      	bne.n	8006446 <xQueueReceive+0x122>
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800644c:	b25b      	sxtb	r3, r3
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d103      	bne.n	800645c <xQueueReceive+0x138>
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	f001 f96e 	bl	800773c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006460:	1d3a      	adds	r2, r7, #4
 8006462:	f107 0310 	add.w	r3, r7, #16
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fdf1 	bl	8007050 <xTaskCheckForTimeOut>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d123      	bne.n	80064bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006476:	f000 f917 	bl	80066a8 <prvIsQueueEmpty>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d017      	beq.n	80064b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	3324      	adds	r3, #36	; 0x24
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fd45 	bl	8006f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800648e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006490:	f000 f8b8 	bl	8006604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006494:	f000 fb84 	bl	8006ba0 <xTaskResumeAll>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d189      	bne.n	80063b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xQueueReceive+0x1bc>)
 80064a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	e780      	b.n	80063b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b2:	f000 f8a7 	bl	8006604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064b6:	f000 fb73 	bl	8006ba0 <xTaskResumeAll>
 80064ba:	e77a      	b.n	80063b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064be:	f000 f8a1 	bl	8006604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c2:	f000 fb6d 	bl	8006ba0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c8:	f000 f8ee 	bl	80066a8 <prvIsQueueEmpty>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f43f af6f 	beq.w	80063b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3730      	adds	r7, #48	; 0x30
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d14d      	bne.n	80065a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 ff08 	bl	8007324 <xTaskPriorityDisinherit>
 8006514:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
 800651c:	e043      	b.n	80065a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d119      	bne.n	8006558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6898      	ldr	r0, [r3, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	461a      	mov	r2, r3
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	f001 fc91 	bl	8007e56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d32b      	bcc.n	80065a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	609a      	str	r2, [r3, #8]
 8006556:	e026      	b.n	80065a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68d8      	ldr	r0, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	461a      	mov	r2, r3
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	f001 fc77 	bl	8007e56 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	425b      	negs	r3, r3
 8006572:	441a      	add	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d207      	bcs.n	8006594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	425b      	negs	r3, r3
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d105      	bne.n	80065a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065ae:	697b      	ldr	r3, [r7, #20]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d018      	beq.n	80065fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	441a      	add	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d303      	bcc.n	80065ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68d9      	ldr	r1, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	461a      	mov	r2, r3
 80065f6:	6838      	ldr	r0, [r7, #0]
 80065f8:	f001 fc2d 	bl	8007e56 <memcpy>
	}
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800660c:	f001 f866 	bl	80076dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006618:	e011      	b.n	800663e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3324      	adds	r3, #36	; 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc9a 	bl	8006f60 <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006632:	f000 fd6f 	bl	8007114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3b01      	subs	r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	dce9      	bgt.n	800661a <prvUnlockQueue+0x16>
 8006646:	e000      	b.n	800664a <prvUnlockQueue+0x46>
					break;
 8006648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006652:	f001 f873 	bl	800773c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006656:	f001 f841 	bl	80076dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006662:	e011      	b.n	8006688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d012      	beq.n	8006692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3310      	adds	r3, #16
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fc75 	bl	8006f60 <xTaskRemoveFromEventList>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800667c:	f000 fd4a 	bl	8007114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	3b01      	subs	r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	dce9      	bgt.n	8006664 <prvUnlockQueue+0x60>
 8006690:	e000      	b.n	8006694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800669c:	f001 f84e 	bl	800773c <vPortExitCritical>
}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b0:	f001 f814 	bl	80076dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e001      	b.n	80066c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066c6:	f001 f839 	bl	800773c <vPortExitCritical>

	return xReturn;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066dc:	f000 fffe 	bl	80076dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e001      	b.n	80066f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 f821 	bl	800773c <vPortExitCritical>

	return xReturn;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08e      	sub	sp, #56	; 0x38
 8006708:	af04      	add	r7, sp, #16
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	623b      	str	r3, [r7, #32]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTaskCreateStatic+0x46>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	61fb      	str	r3, [r7, #28]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800674a:	23b4      	movs	r3, #180	; 0xb4
 800674c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2bb4      	cmp	r3, #180	; 0xb4
 8006752:	d00a      	beq.n	800676a <xTaskCreateStatic+0x66>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61bb      	str	r3, [r7, #24]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01e      	beq.n	80067ae <xTaskCreateStatic+0xaa>
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800677e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	2202      	movs	r2, #2
 8006784:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006788:	2300      	movs	r3, #0
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f851 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067a8:	f000 f8e4 	bl	8006974 <prvAddNewTaskToReadyList>
 80067ac:	e001      	b.n	80067b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067b2:	697b      	ldr	r3, [r7, #20]
	}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3728      	adds	r7, #40	; 0x28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	; 0x30
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f845 	bl	8007860 <pvPortMalloc>
 80067d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00e      	beq.n	80067fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067de:	20b4      	movs	r0, #180	; 0xb4
 80067e0:	f001 f83e 	bl	8007860 <pvPortMalloc>
 80067e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
 80067f2:	e005      	b.n	8006800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f001 f8f7 	bl	80079e8 <vPortFree>
 80067fa:	e001      	b.n	8006800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	2300      	movs	r3, #0
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f80f 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800682a:	69f8      	ldr	r0, [r7, #28]
 800682c:	f000 f8a2 	bl	8006974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006830:	2301      	movs	r3, #1
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	e002      	b.n	800683c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800683c:	69bb      	ldr	r3, [r7, #24]
	}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006860:	3b01      	subs	r3, #1
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f023 0307 	bic.w	r3, r3, #7
 800686e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <prvInitialiseNewTask+0x48>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	617b      	str	r3, [r7, #20]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e012      	b.n	80068bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	7819      	ldrb	r1, [r3, #0]
 800689e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	3334      	adds	r3, #52	; 0x34
 80068a6:	460a      	mov	r2, r1
 80068a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d9e9      	bls.n	8006896 <prvInitialiseNewTask+0x4e>
 80068c2:	e000      	b.n	80068c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80068c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d901      	bls.n	80068d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068d4:	2306      	movs	r3, #6
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2200      	movs	r2, #0
 80068e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	3304      	adds	r3, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fa4d 	bl	8005d8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	3318      	adds	r3, #24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fa48 	bl	8005d8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006902:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	f1c3 0207 	rsb	r2, r3, #7
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006912:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	2200      	movs	r2, #0
 8006920:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	334c      	adds	r3, #76	; 0x4c
 8006928:	2260      	movs	r2, #96	; 0x60
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f001 faa0 	bl	8007e72 <memset>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <prvInitialiseNewTask+0x120>)
 8006936:	651a      	str	r2, [r3, #80]	; 0x50
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	4a0c      	ldr	r2, [pc, #48]	; (800696c <prvInitialiseNewTask+0x124>)
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <prvInitialiseNewTask+0x128>)
 8006942:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	69b8      	ldr	r0, [r7, #24]
 800694a:	f000 fdd7 	bl	80074fc <pxPortInitialiseStack>
 800694e:	4602      	mov	r2, r0
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006960:	bf00      	nop
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	0800c818 	.word	0x0800c818
 800696c:	0800c838 	.word	0x0800c838
 8006970:	0800c7f8 	.word	0x0800c7f8

08006974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800697c:	f000 feae 	bl	80076dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006980:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <prvAddNewTaskToReadyList+0xb8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a29      	ldr	r2, [pc, #164]	; (8006a2c <prvAddNewTaskToReadyList+0xb8>)
 8006988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800698a:	4b29      	ldr	r3, [pc, #164]	; (8006a30 <prvAddNewTaskToReadyList+0xbc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006992:	4a27      	ldr	r2, [pc, #156]	; (8006a30 <prvAddNewTaskToReadyList+0xbc>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006998:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <prvAddNewTaskToReadyList+0xb8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d110      	bne.n	80069c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069a0:	f000 fbdc 	bl	800715c <prvInitialiseTaskLists>
 80069a4:	e00d      	b.n	80069c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <prvAddNewTaskToReadyList+0xc0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ae:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <prvAddNewTaskToReadyList+0xbc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d802      	bhi.n	80069c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069bc:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <prvAddNewTaskToReadyList+0xbc>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069c2:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <prvAddNewTaskToReadyList+0xc4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <prvAddNewTaskToReadyList+0xc4>)
 80069ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	2201      	movs	r2, #1
 80069d2:	409a      	lsls	r2, r3
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <prvAddNewTaskToReadyList+0xc8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4313      	orrs	r3, r2
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <prvAddNewTaskToReadyList+0xc8>)
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <prvAddNewTaskToReadyList+0xcc>)
 80069ec:	441a      	add	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7ff f9d6 	bl	8005da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069fa:	f000 fe9f 	bl	800773c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <prvAddNewTaskToReadyList+0xc0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <prvAddNewTaskToReadyList+0xbc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d207      	bcs.n	8006a24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <prvAddNewTaskToReadyList+0xd0>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	2000074c 	.word	0x2000074c
 8006a30:	2000064c 	.word	0x2000064c
 8006a34:	20000758 	.word	0x20000758
 8006a38:	20000768 	.word	0x20000768
 8006a3c:	20000754 	.word	0x20000754
 8006a40:	20000650 	.word	0x20000650
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d017      	beq.n	8006a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <vTaskDelay+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <vTaskDelay+0x30>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a78:	f000 f884 	bl	8006b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fcd6 	bl	8007430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a84:	f000 f88c 	bl	8006ba0 <xTaskResumeAll>
 8006a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <vTaskDelay+0x64>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000774 	.word	0x20000774
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006abe:	463a      	mov	r2, r7
 8006ac0:	1d39      	adds	r1, r7, #4
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fa fa64 	bl	8000f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	9202      	str	r2, [sp, #8]
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2300      	movs	r3, #0
 8006adc:	460a      	mov	r2, r1
 8006ade:	4921      	ldr	r1, [pc, #132]	; (8006b64 <vTaskStartScheduler+0xb4>)
 8006ae0:	4821      	ldr	r0, [pc, #132]	; (8006b68 <vTaskStartScheduler+0xb8>)
 8006ae2:	f7ff fe0f 	bl	8006704 <xTaskCreateStatic>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <vTaskStartScheduler+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <vTaskStartScheduler+0xbc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e001      	b.n	8006afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d11b      	bne.n	8006b3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b18:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <vTaskStartScheduler+0xc0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	334c      	adds	r3, #76	; 0x4c
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <vTaskStartScheduler+0xc4>)
 8006b20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <vTaskStartScheduler+0xc8>)
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295
 8006b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <vTaskStartScheduler+0xcc>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b30:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <vTaskStartScheduler+0xd0>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b36:	f000 fd5f 	bl	80075f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b3a:	e00e      	b.n	8006b5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d10a      	bne.n	8006b5a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <vTaskStartScheduler+0xa8>
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	0800c7c4 	.word	0x0800c7c4
 8006b68:	0800712d 	.word	0x0800712d
 8006b6c:	20000770 	.word	0x20000770
 8006b70:	2000064c 	.word	0x2000064c
 8006b74:	20000010 	.word	0x20000010
 8006b78:	2000076c 	.word	0x2000076c
 8006b7c:	20000758 	.word	0x20000758
 8006b80:	20000750 	.word	0x20000750

08006b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <vTaskSuspendAll+0x18>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	4a03      	ldr	r2, [pc, #12]	; (8006b9c <vTaskSuspendAll+0x18>)
 8006b90:	6013      	str	r3, [r2, #0]
}
 8006b92:	bf00      	nop
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000774 	.word	0x20000774

08006ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bae:	4b41      	ldr	r3, [pc, #260]	; (8006cb4 <xTaskResumeAll+0x114>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <xTaskResumeAll+0x2c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	603b      	str	r3, [r7, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bcc:	f000 fd86 	bl	80076dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bd0:	4b38      	ldr	r3, [pc, #224]	; (8006cb4 <xTaskResumeAll+0x114>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	4a37      	ldr	r2, [pc, #220]	; (8006cb4 <xTaskResumeAll+0x114>)
 8006bd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <xTaskResumeAll+0x114>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d161      	bne.n	8006ca6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006be2:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <xTaskResumeAll+0x118>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d05d      	beq.n	8006ca6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bea:	e02e      	b.n	8006c4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bec:	4b33      	ldr	r3, [pc, #204]	; (8006cbc <xTaskResumeAll+0x11c>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3318      	adds	r3, #24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff f92f 	bl	8005e5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f92a 	bl	8005e5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <xTaskResumeAll+0x120>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <xTaskResumeAll+0x120>)
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4a27      	ldr	r2, [pc, #156]	; (8006cc4 <xTaskResumeAll+0x124>)
 8006c28:	441a      	add	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f7ff f8b8 	bl	8005da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3a:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <xTaskResumeAll+0x128>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d302      	bcc.n	8006c4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <xTaskResumeAll+0x12c>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <xTaskResumeAll+0x11c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1cc      	bne.n	8006bec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c58:	f000 fb22 	bl	80072a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c5c:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <xTaskResumeAll+0x130>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c68:	f000 f836 	bl	8006cd8 <xTaskIncrementTick>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c72:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <xTaskResumeAll+0x12c>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f1      	bne.n	8006c68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006c84:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <xTaskResumeAll+0x130>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <xTaskResumeAll+0x12c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c92:	2301      	movs	r3, #1
 8006c94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c96:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <xTaskResumeAll+0x134>)
 8006c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca6:	f000 fd49 	bl	800773c <vPortExitCritical>

	return xAlreadyYielded;
 8006caa:	68bb      	ldr	r3, [r7, #8]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000774 	.word	0x20000774
 8006cb8:	2000074c 	.word	0x2000074c
 8006cbc:	2000070c 	.word	0x2000070c
 8006cc0:	20000754 	.word	0x20000754
 8006cc4:	20000650 	.word	0x20000650
 8006cc8:	2000064c 	.word	0x2000064c
 8006ccc:	20000760 	.word	0x20000760
 8006cd0:	2000075c 	.word	0x2000075c
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce2:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <xTaskIncrementTick+0x150>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 808d 	bne.w	8006e06 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cec:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <xTaskIncrementTick+0x154>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cf4:	4a4d      	ldr	r2, [pc, #308]	; (8006e2c <xTaskIncrementTick+0x154>)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d120      	bne.n	8006d42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d00:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <xTaskIncrementTick+0x158>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	603b      	str	r3, [r7, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xTaskIncrementTick+0x46>
 8006d20:	4b43      	ldr	r3, [pc, #268]	; (8006e30 <xTaskIncrementTick+0x158>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <xTaskIncrementTick+0x15c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a41      	ldr	r2, [pc, #260]	; (8006e30 <xTaskIncrementTick+0x158>)
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	4a41      	ldr	r2, [pc, #260]	; (8006e34 <xTaskIncrementTick+0x15c>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4b40      	ldr	r3, [pc, #256]	; (8006e38 <xTaskIncrementTick+0x160>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a3f      	ldr	r2, [pc, #252]	; (8006e38 <xTaskIncrementTick+0x160>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f000 faaf 	bl	80072a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d42:	4b3e      	ldr	r3, [pc, #248]	; (8006e3c <xTaskIncrementTick+0x164>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d34d      	bcc.n	8006de8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4c:	4b38      	ldr	r3, [pc, #224]	; (8006e30 <xTaskIncrementTick+0x158>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <xTaskIncrementTick+0x82>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xTaskIncrementTick+0x84>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <xTaskIncrementTick+0x164>)
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295
 8006d66:	601a      	str	r2, [r3, #0]
					break;
 8006d68:	e03e      	b.n	8006de8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d6a:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <xTaskIncrementTick+0x158>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d203      	bcs.n	8006d8a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d82:	4a2e      	ldr	r2, [pc, #184]	; (8006e3c <xTaskIncrementTick+0x164>)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6013      	str	r3, [r2, #0]
						break;
 8006d88:	e02e      	b.n	8006de8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff f864 	bl	8005e5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	3318      	adds	r3, #24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff f85b 	bl	8005e5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	2201      	movs	r2, #1
 8006dac:	409a      	lsls	r2, r3
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <xTaskIncrementTick+0x168>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	4a22      	ldr	r2, [pc, #136]	; (8006e40 <xTaskIncrementTick+0x168>)
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <xTaskIncrementTick+0x16c>)
 8006dc6:	441a      	add	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f7fe ffe9 	bl	8005da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <xTaskIncrementTick+0x170>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d3b4      	bcc.n	8006d4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de6:	e7b1      	b.n	8006d4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006de8:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <xTaskIncrementTick+0x170>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	4915      	ldr	r1, [pc, #84]	; (8006e44 <xTaskIncrementTick+0x16c>)
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d907      	bls.n	8006e10 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e004      	b.n	8006e10 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <xTaskIncrementTick+0x174>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a0f      	ldr	r2, [pc, #60]	; (8006e4c <xTaskIncrementTick+0x174>)
 8006e0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e10:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <xTaskIncrementTick+0x178>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e1c:	697b      	ldr	r3, [r7, #20]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000774 	.word	0x20000774
 8006e2c:	20000750 	.word	0x20000750
 8006e30:	20000704 	.word	0x20000704
 8006e34:	20000708 	.word	0x20000708
 8006e38:	20000764 	.word	0x20000764
 8006e3c:	2000076c 	.word	0x2000076c
 8006e40:	20000754 	.word	0x20000754
 8006e44:	20000650 	.word	0x20000650
 8006e48:	2000064c 	.word	0x2000064c
 8006e4c:	2000075c 	.word	0x2000075c
 8006e50:	20000760 	.word	0x20000760

08006e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <vTaskSwitchContext+0xac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e62:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <vTaskSwitchContext+0xb0>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e68:	e044      	b.n	8006ef4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <vTaskSwitchContext+0xb0>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e70:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <vTaskSwitchContext+0xb4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	fab3 f383 	clz	r3, r3
 8006e7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	f1c3 031f 	rsb	r3, r3, #31
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	4921      	ldr	r1, [pc, #132]	; (8006f0c <vTaskSwitchContext+0xb8>)
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	607b      	str	r3, [r7, #4]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vTaskSwitchContext+0x5a>
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a14      	ldr	r2, [pc, #80]	; (8006f0c <vTaskSwitchContext+0xb8>)
 8006ebc:	4413      	add	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d104      	bne.n	8006ee0 <vTaskSwitchContext+0x8c>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <vTaskSwitchContext+0xbc>)
 8006ee8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <vTaskSwitchContext+0xbc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	334c      	adds	r3, #76	; 0x4c
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <vTaskSwitchContext+0xc0>)
 8006ef2:	6013      	str	r3, [r2, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000774 	.word	0x20000774
 8006f04:	20000760 	.word	0x20000760
 8006f08:	20000754 	.word	0x20000754
 8006f0c:	20000650 	.word	0x20000650
 8006f10:	2000064c 	.word	0x2000064c
 8006f14:	20000010 	.word	0x20000010

08006f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <vTaskPlaceOnEventList+0x44>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3318      	adds	r3, #24
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe ff50 	bl	8005dec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f000 fa6e 	bl	8007430 <prvAddCurrentTaskToDelayedList>
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	2000064c 	.word	0x2000064c

08006f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3318      	adds	r3, #24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe ff63 	bl	8005e5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <xTaskRemoveFromEventList+0xac>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11c      	bne.n	8006fd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe ff5a 	bl	8005e5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	2201      	movs	r2, #1
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xTaskRemoveFromEventList+0xb0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xTaskRemoveFromEventList+0xb0>)
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4a13      	ldr	r2, [pc, #76]	; (8007014 <xTaskRemoveFromEventList+0xb4>)
 8006fc8:	441a      	add	r2, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f7fe fee8 	bl	8005da6 <vListInsertEnd>
 8006fd6:	e005      	b.n	8006fe4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	3318      	adds	r3, #24
 8006fdc:	4619      	mov	r1, r3
 8006fde:	480e      	ldr	r0, [pc, #56]	; (8007018 <xTaskRemoveFromEventList+0xb8>)
 8006fe0:	f7fe fee1 	bl	8005da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <xTaskRemoveFromEventList+0xbc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d905      	bls.n	8006ffe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <xTaskRemoveFromEventList+0xc0>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e001      	b.n	8007002 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000774 	.word	0x20000774
 8007010:	20000754 	.word	0x20000754
 8007014:	20000650 	.word	0x20000650
 8007018:	2000070c 	.word	0x2000070c
 800701c:	2000064c 	.word	0x2000064c
 8007020:	20000760 	.word	0x20000760

08007024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <vTaskInternalSetTimeOutState+0x24>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <vTaskInternalSetTimeOutState+0x28>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000764 	.word	0x20000764
 800704c:	20000750 	.word	0x20000750

08007050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	60fb      	str	r3, [r7, #12]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007092:	f000 fb23 	bl	80076dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <xTaskCheckForTimeOut+0xbc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d102      	bne.n	80070b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e023      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <xTaskCheckForTimeOut+0xc0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d007      	beq.n	80070d2 <xTaskCheckForTimeOut+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e015      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20b      	bcs.n	80070f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff9b 	bl	8007024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e004      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070fe:	f000 fb1d 	bl	800773c <vPortExitCritical>

	return xReturn;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000750 	.word	0x20000750
 8007110:	20000764 	.word	0x20000764

08007114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <vTaskMissedYield+0x14>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000760 	.word	0x20000760

0800712c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007134:	f000 f852 	bl	80071dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvIdleTask+0x28>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d9f9      	bls.n	8007134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <prvIdleTask+0x2c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007150:	e7f0      	b.n	8007134 <prvIdleTask+0x8>
 8007152:	bf00      	nop
 8007154:	20000650 	.word	0x20000650
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e00c      	b.n	8007182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <prvInitialiseTaskLists+0x60>)
 8007174:	4413      	add	r3, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fdea 	bl	8005d50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b06      	cmp	r3, #6
 8007186:	d9ef      	bls.n	8007168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007188:	480d      	ldr	r0, [pc, #52]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 800718a:	f7fe fde1 	bl	8005d50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 8007190:	f7fe fdde 	bl	8005d50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007194:	480c      	ldr	r0, [pc, #48]	; (80071c8 <prvInitialiseTaskLists+0x6c>)
 8007196:	f7fe fddb 	bl	8005d50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719a:	480c      	ldr	r0, [pc, #48]	; (80071cc <prvInitialiseTaskLists+0x70>)
 800719c:	f7fe fdd8 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a0:	480b      	ldr	r0, [pc, #44]	; (80071d0 <prvInitialiseTaskLists+0x74>)
 80071a2:	f7fe fdd5 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvInitialiseTaskLists+0x78>)
 80071a8:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 80071aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvInitialiseTaskLists+0x7c>)
 80071ae:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000650 	.word	0x20000650
 80071c0:	200006dc 	.word	0x200006dc
 80071c4:	200006f0 	.word	0x200006f0
 80071c8:	2000070c 	.word	0x2000070c
 80071cc:	20000720 	.word	0x20000720
 80071d0:	20000738 	.word	0x20000738
 80071d4:	20000704 	.word	0x20000704
 80071d8:	20000708 	.word	0x20000708

080071dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e2:	e019      	b.n	8007218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e4:	f000 fa7a 	bl	80076dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071e8:	4b10      	ldr	r3, [pc, #64]	; (800722c <prvCheckTasksWaitingTermination+0x50>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fe31 	bl	8005e5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800720c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800720e:	f000 fa95 	bl	800773c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f810 	bl	8007238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e1      	bne.n	80071e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000720 	.word	0x20000720
 8007230:	2000074c 	.word	0x2000074c
 8007234:	20000734 	.word	0x20000734

08007238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	334c      	adds	r3, #76	; 0x4c
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fdbb 	bl	8008dc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fbc5 	bl	80079e8 <vPortFree>
				vPortFree( pxTCB );
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fbc2 	bl	80079e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007264:	e018      	b.n	8007298 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d103      	bne.n	8007278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fbb9 	bl	80079e8 <vPortFree>
	}
 8007276:	e00f      	b.n	8007298 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800727e:	2b02      	cmp	r3, #2
 8007280:	d00a      	beq.n	8007298 <prvDeleteTCB+0x60>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <prvDeleteTCB+0x5e>
	}
 8007298:	bf00      	nop
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a6:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <prvResetNextTaskUnblockTime+0x40>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <prvResetNextTaskUnblockTime+0x14>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <prvResetNextTaskUnblockTime+0x16>
 80072b4:	2300      	movs	r3, #0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072ba:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <prvResetNextTaskUnblockTime+0x44>)
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072c2:	e008      	b.n	80072d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <prvResetNextTaskUnblockTime+0x40>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <prvResetNextTaskUnblockTime+0x44>)
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr
 80072e0:	20000704 	.word	0x20000704
 80072e4:	2000076c 	.word	0x2000076c

080072e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ee:	4b0b      	ldr	r3, [pc, #44]	; (800731c <xTaskGetSchedulerState+0x34>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072f6:	2301      	movs	r3, #1
 80072f8:	607b      	str	r3, [r7, #4]
 80072fa:	e008      	b.n	800730e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <xTaskGetSchedulerState+0x38>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007304:	2302      	movs	r3, #2
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	e001      	b.n	800730e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800730a:	2300      	movs	r3, #0
 800730c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800730e:	687b      	ldr	r3, [r7, #4]
	}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000758 	.word	0x20000758
 8007320:	20000774 	.word	0x20000774

08007324 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d06e      	beq.n	8007418 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800733a:	4b3a      	ldr	r3, [pc, #232]	; (8007424 <xTaskPriorityDisinherit+0x100>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d00a      	beq.n	800735a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	60bb      	str	r3, [r7, #8]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	429a      	cmp	r2, r3
 800738c:	d044      	beq.n	8007418 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007392:	2b00      	cmp	r3, #0
 8007394:	d140      	bne.n	8007418 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fd5e 	bl	8005e5c <uxListRemove>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d115      	bne.n	80073d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	491f      	ldr	r1, [pc, #124]	; (8007428 <xTaskPriorityDisinherit+0x104>)
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xTaskPriorityDisinherit+0xae>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	2201      	movs	r2, #1
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43da      	mvns	r2, r3
 80073c8:	4b18      	ldr	r3, [pc, #96]	; (800742c <xTaskPriorityDisinherit+0x108>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <xTaskPriorityDisinherit+0x108>)
 80073d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	f1c3 0207 	rsb	r2, r3, #7
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	2201      	movs	r2, #1
 80073ec:	409a      	lsls	r2, r3
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <xTaskPriorityDisinherit+0x108>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <xTaskPriorityDisinherit+0x108>)
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4a08      	ldr	r2, [pc, #32]	; (8007428 <xTaskPriorityDisinherit+0x104>)
 8007406:	441a      	add	r2, r3
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fe fcc9 	bl	8005da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	2000064c 	.word	0x2000064c
 8007428:	20000650 	.word	0x20000650
 800742c:	20000754 	.word	0x20000754

08007430 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800743a:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007440:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fd08 	bl	8005e5c <uxListRemove>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2201      	movs	r2, #1
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	43da      	mvns	r2, r3
 8007460:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007468:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d10a      	bne.n	8007488 <prvAddCurrentTaskToDelayedList+0x58>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3304      	adds	r3, #4
 800747e:	4619      	mov	r1, r3
 8007480:	481a      	ldr	r0, [pc, #104]	; (80074ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007482:	f7fe fc90 	bl	8005da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007486:	e026      	b.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007490:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	429a      	cmp	r2, r3
 800749e:	d209      	bcs.n	80074b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe fc9d 	bl	8005dec <vListInsert>
}
 80074b2:	e010      	b.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fe fc93 	bl	8005dec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d202      	bcs.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074d0:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6013      	str	r3, [r2, #0]
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000750 	.word	0x20000750
 80074e4:	2000064c 	.word	0x2000064c
 80074e8:	20000754 	.word	0x20000754
 80074ec:	20000738 	.word	0x20000738
 80074f0:	20000708 	.word	0x20000708
 80074f4:	20000704 	.word	0x20000704
 80074f8:	2000076c 	.word	0x2000076c

080074fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3b04      	subs	r3, #4
 800750c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b04      	subs	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3b04      	subs	r3, #4
 800752a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <pxPortInitialiseStack+0x54>)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3b14      	subs	r3, #20
 8007536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b20      	subs	r3, #32
 8007542:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr
 8007550:	08007555 	.word	0x08007555

08007554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800755a:	2300      	movs	r3, #0
 800755c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <prvTaskExitError+0x54>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d00a      	beq.n	800757e <prvTaskExitError+0x2a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	60fb      	str	r3, [r7, #12]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <prvTaskExitError+0x28>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60bb      	str	r3, [r7, #8]
}
 8007590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007592:	bf00      	nop
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0fc      	beq.n	8007594 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c
 80075ac:	00000000 	.word	0x00000000

080075b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <pxCurrentTCBConst2>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075ba:	f380 8809 	msr	PSP, r0
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8811 	msr	BASEPRI, r0
 80075ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80075ce:	4770      	bx	lr

080075d0 <pxCurrentTCBConst2>:
 80075d0:	2000064c 	.word	0x2000064c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80075d8:	4806      	ldr	r0, [pc, #24]	; (80075f4 <prvPortStartFirstTask+0x1c>)
 80075da:	6800      	ldr	r0, [r0, #0]
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f380 8808 	msr	MSP, r0
 80075e2:	b662      	cpsie	i
 80075e4:	b661      	cpsie	f
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	df00      	svc	0
 80075f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed08 	.word	0xe000ed08

080075f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075fe:	4b32      	ldr	r3, [pc, #200]	; (80076c8 <xPortStartScheduler+0xd0>)
 8007600:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	22ff      	movs	r2, #255	; 0xff
 800760e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007620:	b2da      	uxtb	r2, r3
 8007622:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <xPortStartScheduler+0xd4>)
 8007624:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007626:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007628:	2207      	movs	r2, #7
 800762a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800762c:	e009      	b.n	8007642 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800762e:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3b01      	subs	r3, #1
 8007634:	4a26      	ldr	r2, [pc, #152]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007636:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764a:	2b80      	cmp	r3, #128	; 0x80
 800764c:	d0ef      	beq.n	800762e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800764e:	4b20      	ldr	r3, [pc, #128]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1c3 0307 	rsb	r3, r3, #7
 8007656:	2b04      	cmp	r3, #4
 8007658:	d00a      	beq.n	8007670 <xPortStartScheduler+0x78>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	60bb      	str	r3, [r7, #8]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007670:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007678:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800767a:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <xPortStartScheduler+0xd8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <xPortStartScheduler+0xd8>)
 8007684:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <xPortStartScheduler+0xdc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <xPortStartScheduler+0xdc>)
 8007694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <xPortStartScheduler+0xdc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a0d      	ldr	r2, [pc, #52]	; (80076d4 <xPortStartScheduler+0xdc>)
 80076a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076a6:	f000 f8b9 	bl	800781c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <xPortStartScheduler+0xe0>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076b0:	f7ff ff92 	bl	80075d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076b4:	f7ff fbce 	bl	8006e54 <vTaskSwitchContext>
	prvTaskExitError();
 80076b8:	f7ff ff4c 	bl	8007554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000e400 	.word	0xe000e400
 80076cc:	20000778 	.word	0x20000778
 80076d0:	2000077c 	.word	0x2000077c
 80076d4:	e000ed20 	.word	0xe000ed20
 80076d8:	2000000c 	.word	0x2000000c

080076dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	607b      	str	r3, [r7, #4]
}
 80076f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <vPortEnterCritical+0x58>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	4a0d      	ldr	r2, [pc, #52]	; (8007734 <vPortEnterCritical+0x58>)
 80076fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007700:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <vPortEnterCritical+0x58>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10f      	bne.n	8007728 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007708:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <vPortEnterCritical+0x5c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <vPortEnterCritical+0x4c>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	603b      	str	r3, [r7, #0]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vPortEnterCritical+0x4a>
	}
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000000c 	.word	0x2000000c
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <vPortExitCritical+0x4c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <vPortExitCritical+0x24>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	607b      	str	r3, [r7, #4]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <vPortExitCritical+0x4c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3b01      	subs	r3, #1
 8007766:	4a08      	ldr	r2, [pc, #32]	; (8007788 <vPortExitCritical+0x4c>)
 8007768:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800776a:	4b07      	ldr	r3, [pc, #28]	; (8007788 <vPortExitCritical+0x4c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <vPortExitCritical+0x42>
 8007772:	2300      	movs	r3, #0
 8007774:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800777c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr
 8007788:	2000000c 	.word	0x2000000c
 800778c:	00000000 	.word	0x00000000

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077a0:	6010      	str	r0, [r2, #0]
 80077a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077aa:	f380 8811 	msr	BASEPRI, r0
 80077ae:	f7ff fb51 	bl	8006e54 <vTaskSwitchContext>
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8811 	msr	BASEPRI, r0
 80077ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	6808      	ldr	r0, [r1, #0]
 80077c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077c6:	f380 8809 	msr	PSP, r0
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	4770      	bx	lr

080077d0 <pxCurrentTCBConst>:
 80077d0:	2000064c 	.word	0x2000064c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	607b      	str	r3, [r7, #4]
}
 80077f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077f2:	f7ff fa71 	bl	8006cd8 <xTaskIncrementTick>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <SysTick_Handler+0x40>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	2300      	movs	r3, #0
 8007806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f383 8811 	msr	BASEPRI, r3
}
 800780e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <vPortSetupTimerInterrupt+0x30>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <vPortSetupTimerInterrupt+0x34>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800782c:	4b09      	ldr	r3, [pc, #36]	; (8007854 <vPortSetupTimerInterrupt+0x38>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <vPortSetupTimerInterrupt+0x3c>)
 8007832:	fba2 2303 	umull	r2, r3, r2, r3
 8007836:	099b      	lsrs	r3, r3, #6
 8007838:	4a08      	ldr	r2, [pc, #32]	; (800785c <vPortSetupTimerInterrupt+0x40>)
 800783a:	3b01      	subs	r3, #1
 800783c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800783e:	4b03      	ldr	r3, [pc, #12]	; (800784c <vPortSetupTimerInterrupt+0x30>)
 8007840:	2207      	movs	r2, #7
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	e000e010 	.word	0xe000e010
 8007850:	e000e018 	.word	0xe000e018
 8007854:	20000000 	.word	0x20000000
 8007858:	10624dd3 	.word	0x10624dd3
 800785c:	e000e014 	.word	0xe000e014

08007860 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800786c:	f7ff f98a 	bl	8006b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007870:	4b58      	ldr	r3, [pc, #352]	; (80079d4 <pvPortMalloc+0x174>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007878:	f000 f910 	bl	8007a9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800787c:	4b56      	ldr	r3, [pc, #344]	; (80079d8 <pvPortMalloc+0x178>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 808e 	bne.w	80079a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01d      	beq.n	80078cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007890:	2208      	movs	r2, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4413      	add	r3, r2
 8007896:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d014      	beq.n	80078cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f023 0307 	bic.w	r3, r3, #7
 80078a8:	3308      	adds	r3, #8
 80078aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <pvPortMalloc+0x6c>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	617b      	str	r3, [r7, #20]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d069      	beq.n	80079a6 <pvPortMalloc+0x146>
 80078d2:	4b42      	ldr	r3, [pc, #264]	; (80079dc <pvPortMalloc+0x17c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d864      	bhi.n	80079a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078dc:	4b40      	ldr	r3, [pc, #256]	; (80079e0 <pvPortMalloc+0x180>)
 80078de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078e0:	4b3f      	ldr	r3, [pc, #252]	; (80079e0 <pvPortMalloc+0x180>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e6:	e004      	b.n	80078f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <pvPortMalloc+0xa4>
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f1      	bne.n	80078e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007904:	4b33      	ldr	r3, [pc, #204]	; (80079d4 <pvPortMalloc+0x174>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	429a      	cmp	r2, r3
 800790c:	d04b      	beq.n	80079a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2208      	movs	r2, #8
 8007914:	4413      	add	r3, r2
 8007916:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	2308      	movs	r3, #8
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	429a      	cmp	r2, r3
 800792e:	d91f      	bls.n	8007970 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <pvPortMalloc+0xf8>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	613b      	str	r3, [r7, #16]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800796a:	69b8      	ldr	r0, [r7, #24]
 800796c:	f000 f8f8 	bl	8007b60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007970:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <pvPortMalloc+0x17c>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	4a18      	ldr	r2, [pc, #96]	; (80079dc <pvPortMalloc+0x17c>)
 800797c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800797e:	4b17      	ldr	r3, [pc, #92]	; (80079dc <pvPortMalloc+0x17c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b18      	ldr	r3, [pc, #96]	; (80079e4 <pvPortMalloc+0x184>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d203      	bcs.n	8007992 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800798a:	4b14      	ldr	r3, [pc, #80]	; (80079dc <pvPortMalloc+0x17c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a15      	ldr	r2, [pc, #84]	; (80079e4 <pvPortMalloc+0x184>)
 8007990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <pvPortMalloc+0x178>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	431a      	orrs	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079a6:	f7ff f8fb 	bl	8006ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <pvPortMalloc+0x16a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	60fb      	str	r3, [r7, #12]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <pvPortMalloc+0x168>
	return pvReturn;
 80079ca:	69fb      	ldr	r3, [r7, #28]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3728      	adds	r7, #40	; 0x28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20001388 	.word	0x20001388
 80079d8:	20001394 	.word	0x20001394
 80079dc:	2000138c 	.word	0x2000138c
 80079e0:	20001380 	.word	0x20001380
 80079e4:	20001390 	.word	0x20001390

080079e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d048      	beq.n	8007a8c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079fa:	2308      	movs	r3, #8
 80079fc:	425b      	negs	r3, r3
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <vPortFree+0xac>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <vPortFree+0x44>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60fb      	str	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <vPortFree+0x62>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60bb      	str	r3, [r7, #8]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <vPortFree+0xac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d019      	beq.n	8007a8c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d115      	bne.n	8007a8c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <vPortFree+0xac>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a70:	f7ff f888 	bl	8006b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <vPortFree+0xb0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	4a06      	ldr	r2, [pc, #24]	; (8007a98 <vPortFree+0xb0>)
 8007a80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a82:	6938      	ldr	r0, [r7, #16]
 8007a84:	f000 f86c 	bl	8007b60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a88:	f7ff f88a 	bl	8006ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20001394 	.word	0x20001394
 8007a98:	2000138c 	.word	0x2000138c

08007a9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007aa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aa8:	4b27      	ldr	r3, [pc, #156]	; (8007b48 <prvHeapInit+0xac>)
 8007aaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0307 	bic.w	r3, r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <prvHeapInit+0xac>)
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ad4:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <prvHeapInit+0xb0>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ada:	4b1c      	ldr	r3, [pc, #112]	; (8007b4c <prvHeapInit+0xb0>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <prvHeapInit+0xb4>)
 8007afc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <prvHeapInit+0xb4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b06:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <prvHeapInit+0xb4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <prvHeapInit+0xb4>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <prvHeapInit+0xb8>)
 8007b2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a09      	ldr	r2, [pc, #36]	; (8007b58 <prvHeapInit+0xbc>)
 8007b32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <prvHeapInit+0xc0>)
 8007b36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b3a:	601a      	str	r2, [r3, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000780 	.word	0x20000780
 8007b4c:	20001380 	.word	0x20001380
 8007b50:	20001388 	.word	0x20001388
 8007b54:	20001390 	.word	0x20001390
 8007b58:	2000138c 	.word	0x2000138c
 8007b5c:	20001394 	.word	0x20001394

08007b60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b68:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <prvInsertBlockIntoFreeList+0xa8>)
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e002      	b.n	8007b74 <prvInsertBlockIntoFreeList+0x14>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d8f7      	bhi.n	8007b6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d108      	bne.n	8007ba2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	441a      	add	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d118      	bne.n	8007be8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <prvInsertBlockIntoFreeList+0xac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d00d      	beq.n	8007bde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e008      	b.n	8007bf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <prvInsertBlockIntoFreeList+0xac>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e003      	b.n	8007bf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d002      	beq.n	8007bfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr
 8007c08:	20001380 	.word	0x20001380
 8007c0c:	20001388 	.word	0x20001388

08007c10 <__errno>:
 8007c10:	4b01      	ldr	r3, [pc, #4]	; (8007c18 <__errno+0x8>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	20000010 	.word	0x20000010

08007c1c <std>:
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	b510      	push	{r4, lr}
 8007c20:	4604      	mov	r4, r0
 8007c22:	e9c0 3300 	strd	r3, r3, [r0]
 8007c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c2a:	6083      	str	r3, [r0, #8]
 8007c2c:	8181      	strh	r1, [r0, #12]
 8007c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c30:	81c2      	strh	r2, [r0, #14]
 8007c32:	6183      	str	r3, [r0, #24]
 8007c34:	4619      	mov	r1, r3
 8007c36:	2208      	movs	r2, #8
 8007c38:	305c      	adds	r0, #92	; 0x5c
 8007c3a:	f000 f91a 	bl	8007e72 <memset>
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <std+0x38>)
 8007c40:	6224      	str	r4, [r4, #32]
 8007c42:	6263      	str	r3, [r4, #36]	; 0x24
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <std+0x3c>)
 8007c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <std+0x40>)
 8007c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <std+0x44>)
 8007c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	bf00      	nop
 8007c54:	08008ee1 	.word	0x08008ee1
 8007c58:	08008f03 	.word	0x08008f03
 8007c5c:	08008f3b 	.word	0x08008f3b
 8007c60:	08008f5f 	.word	0x08008f5f

08007c64 <_cleanup_r>:
 8007c64:	4901      	ldr	r1, [pc, #4]	; (8007c6c <_cleanup_r+0x8>)
 8007c66:	f000 b8af 	b.w	8007dc8 <_fwalk_reent>
 8007c6a:	bf00      	nop
 8007c6c:	0800ac59 	.word	0x0800ac59

08007c70 <__sfmoreglue>:
 8007c70:	2268      	movs	r2, #104	; 0x68
 8007c72:	b570      	push	{r4, r5, r6, lr}
 8007c74:	1e4d      	subs	r5, r1, #1
 8007c76:	4355      	muls	r5, r2
 8007c78:	460e      	mov	r6, r1
 8007c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c7e:	f000 f921 	bl	8007ec4 <_malloc_r>
 8007c82:	4604      	mov	r4, r0
 8007c84:	b140      	cbz	r0, 8007c98 <__sfmoreglue+0x28>
 8007c86:	2100      	movs	r1, #0
 8007c88:	e9c0 1600 	strd	r1, r6, [r0]
 8007c8c:	300c      	adds	r0, #12
 8007c8e:	60a0      	str	r0, [r4, #8]
 8007c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c94:	f000 f8ed 	bl	8007e72 <memset>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}

08007c9c <__sfp_lock_acquire>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	; (8007ca4 <__sfp_lock_acquire+0x8>)
 8007c9e:	f000 b8d8 	b.w	8007e52 <__retarget_lock_acquire_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	20001399 	.word	0x20001399

08007ca8 <__sfp_lock_release>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__sfp_lock_release+0x8>)
 8007caa:	f000 b8d3 	b.w	8007e54 <__retarget_lock_release_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20001399 	.word	0x20001399

08007cb4 <__sinit_lock_acquire>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__sinit_lock_acquire+0x8>)
 8007cb6:	f000 b8cc 	b.w	8007e52 <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	2000139a 	.word	0x2000139a

08007cc0 <__sinit_lock_release>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__sinit_lock_release+0x8>)
 8007cc2:	f000 b8c7 	b.w	8007e54 <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	2000139a 	.word	0x2000139a

08007ccc <__sinit>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	f7ff fff0 	bl	8007cb4 <__sinit_lock_acquire>
 8007cd4:	69a3      	ldr	r3, [r4, #24]
 8007cd6:	b11b      	cbz	r3, 8007ce0 <__sinit+0x14>
 8007cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cdc:	f7ff bff0 	b.w	8007cc0 <__sinit_lock_release>
 8007ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ce6:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <__sinit+0x68>)
 8007ce8:	4a13      	ldr	r2, [pc, #76]	; (8007d38 <__sinit+0x6c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cee:	42a3      	cmp	r3, r4
 8007cf0:	bf08      	it	eq
 8007cf2:	2301      	moveq	r3, #1
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	bf08      	it	eq
 8007cf8:	61a3      	streq	r3, [r4, #24]
 8007cfa:	f000 f81f 	bl	8007d3c <__sfp>
 8007cfe:	6060      	str	r0, [r4, #4]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 f81b 	bl	8007d3c <__sfp>
 8007d06:	60a0      	str	r0, [r4, #8]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 f817 	bl	8007d3c <__sfp>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2104      	movs	r1, #4
 8007d12:	60e0      	str	r0, [r4, #12]
 8007d14:	6860      	ldr	r0, [r4, #4]
 8007d16:	f7ff ff81 	bl	8007c1c <std>
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2109      	movs	r1, #9
 8007d1e:	68a0      	ldr	r0, [r4, #8]
 8007d20:	f7ff ff7c 	bl	8007c1c <std>
 8007d24:	2202      	movs	r2, #2
 8007d26:	2112      	movs	r1, #18
 8007d28:	68e0      	ldr	r0, [r4, #12]
 8007d2a:	f7ff ff77 	bl	8007c1c <std>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61a3      	str	r3, [r4, #24]
 8007d32:	e7d1      	b.n	8007cd8 <__sinit+0xc>
 8007d34:	0800c858 	.word	0x0800c858
 8007d38:	08007c65 	.word	0x08007c65

08007d3c <__sfp>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	4607      	mov	r7, r0
 8007d40:	f7ff ffac 	bl	8007c9c <__sfp_lock_acquire>
 8007d44:	4b1e      	ldr	r3, [pc, #120]	; (8007dc0 <__sfp+0x84>)
 8007d46:	681e      	ldr	r6, [r3, #0]
 8007d48:	69b3      	ldr	r3, [r6, #24]
 8007d4a:	b913      	cbnz	r3, 8007d52 <__sfp+0x16>
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff ffbd 	bl	8007ccc <__sinit>
 8007d52:	3648      	adds	r6, #72	; 0x48
 8007d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	d503      	bpl.n	8007d64 <__sfp+0x28>
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	b30b      	cbz	r3, 8007da4 <__sfp+0x68>
 8007d60:	6836      	ldr	r6, [r6, #0]
 8007d62:	e7f7      	b.n	8007d54 <__sfp+0x18>
 8007d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d68:	b9d5      	cbnz	r5, 8007da0 <__sfp+0x64>
 8007d6a:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <__sfp+0x88>)
 8007d6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d70:	60e3      	str	r3, [r4, #12]
 8007d72:	6665      	str	r5, [r4, #100]	; 0x64
 8007d74:	f000 f86c 	bl	8007e50 <__retarget_lock_init_recursive>
 8007d78:	f7ff ff96 	bl	8007ca8 <__sfp_lock_release>
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	4629      	mov	r1, r5
 8007d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d88:	6025      	str	r5, [r4, #0]
 8007d8a:	61a5      	str	r5, [r4, #24]
 8007d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d90:	f000 f86f 	bl	8007e72 <memset>
 8007d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	3468      	adds	r4, #104	; 0x68
 8007da2:	e7d9      	b.n	8007d58 <__sfp+0x1c>
 8007da4:	2104      	movs	r1, #4
 8007da6:	4638      	mov	r0, r7
 8007da8:	f7ff ff62 	bl	8007c70 <__sfmoreglue>
 8007dac:	4604      	mov	r4, r0
 8007dae:	6030      	str	r0, [r6, #0]
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1d5      	bne.n	8007d60 <__sfp+0x24>
 8007db4:	f7ff ff78 	bl	8007ca8 <__sfp_lock_release>
 8007db8:	230c      	movs	r3, #12
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	e7ee      	b.n	8007d9c <__sfp+0x60>
 8007dbe:	bf00      	nop
 8007dc0:	0800c858 	.word	0x0800c858
 8007dc4:	ffff0001 	.word	0xffff0001

08007dc8 <_fwalk_reent>:
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4606      	mov	r6, r0
 8007dce:	4688      	mov	r8, r1
 8007dd0:	2700      	movs	r7, #0
 8007dd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dda:	f1b9 0901 	subs.w	r9, r9, #1
 8007dde:	d505      	bpl.n	8007dec <_fwalk_reent+0x24>
 8007de0:	6824      	ldr	r4, [r4, #0]
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	d1f7      	bne.n	8007dd6 <_fwalk_reent+0xe>
 8007de6:	4638      	mov	r0, r7
 8007de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dec:	89ab      	ldrh	r3, [r5, #12]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d907      	bls.n	8007e02 <_fwalk_reent+0x3a>
 8007df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df6:	3301      	adds	r3, #1
 8007df8:	d003      	beq.n	8007e02 <_fwalk_reent+0x3a>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	47c0      	blx	r8
 8007e00:	4307      	orrs	r7, r0
 8007e02:	3568      	adds	r5, #104	; 0x68
 8007e04:	e7e9      	b.n	8007dda <_fwalk_reent+0x12>
	...

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	4d0c      	ldr	r5, [pc, #48]	; (8007e40 <__libc_init_array+0x38>)
 8007e0e:	4c0d      	ldr	r4, [pc, #52]	; (8007e44 <__libc_init_array+0x3c>)
 8007e10:	1b64      	subs	r4, r4, r5
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	f004 fc60 	bl	800c6dc <_init>
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	4d0a      	ldr	r5, [pc, #40]	; (8007e48 <__libc_init_array+0x40>)
 8007e20:	4c0a      	ldr	r4, [pc, #40]	; (8007e4c <__libc_init_array+0x44>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	0800cc9c 	.word	0x0800cc9c
 8007e44:	0800cc9c 	.word	0x0800cc9c
 8007e48:	0800cc9c 	.word	0x0800cc9c
 8007e4c:	0800cca0 	.word	0x0800cca0

08007e50 <__retarget_lock_init_recursive>:
 8007e50:	4770      	bx	lr

08007e52 <__retarget_lock_acquire_recursive>:
 8007e52:	4770      	bx	lr

08007e54 <__retarget_lock_release_recursive>:
 8007e54:	4770      	bx	lr

08007e56 <memcpy>:
 8007e56:	440a      	add	r2, r1
 8007e58:	4291      	cmp	r1, r2
 8007e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e5e:	d100      	bne.n	8007e62 <memcpy+0xc>
 8007e60:	4770      	bx	lr
 8007e62:	b510      	push	{r4, lr}
 8007e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e68:	4291      	cmp	r1, r2
 8007e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e6e:	d1f9      	bne.n	8007e64 <memcpy+0xe>
 8007e70:	bd10      	pop	{r4, pc}

08007e72 <memset>:
 8007e72:	4603      	mov	r3, r0
 8007e74:	4402      	add	r2, r0
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d100      	bne.n	8007e7c <memset+0xa>
 8007e7a:	4770      	bx	lr
 8007e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e80:	e7f9      	b.n	8007e76 <memset+0x4>
	...

08007e84 <sbrk_aligned>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4e0e      	ldr	r6, [pc, #56]	; (8007ec0 <sbrk_aligned+0x3c>)
 8007e88:	460c      	mov	r4, r1
 8007e8a:	6831      	ldr	r1, [r6, #0]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	b911      	cbnz	r1, 8007e96 <sbrk_aligned+0x12>
 8007e90:	f000 fff2 	bl	8008e78 <_sbrk_r>
 8007e94:	6030      	str	r0, [r6, #0]
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 ffed 	bl	8008e78 <_sbrk_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d00a      	beq.n	8007eb8 <sbrk_aligned+0x34>
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d007      	beq.n	8007ebc <sbrk_aligned+0x38>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 ffe2 	bl	8008e78 <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d101      	bne.n	8007ebc <sbrk_aligned+0x38>
 8007eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	200013a0 	.word	0x200013a0

08007ec4 <_malloc_r>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	1ccd      	adds	r5, r1, #3
 8007eca:	f025 0503 	bic.w	r5, r5, #3
 8007ece:	3508      	adds	r5, #8
 8007ed0:	2d0c      	cmp	r5, #12
 8007ed2:	bf38      	it	cc
 8007ed4:	250c      	movcc	r5, #12
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	4607      	mov	r7, r0
 8007eda:	db01      	blt.n	8007ee0 <_malloc_r+0x1c>
 8007edc:	42a9      	cmp	r1, r5
 8007ede:	d905      	bls.n	8007eec <_malloc_r+0x28>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	603b      	str	r3, [r7, #0]
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	4e2e      	ldr	r6, [pc, #184]	; (8007fa8 <_malloc_r+0xe4>)
 8007eee:	f003 faf9 	bl	800b4e4 <__malloc_lock>
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	461c      	mov	r4, r3
 8007ef6:	bb34      	cbnz	r4, 8007f46 <_malloc_r+0x82>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ffc2 	bl	8007e84 <sbrk_aligned>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	4604      	mov	r4, r0
 8007f04:	d14d      	bne.n	8007fa2 <_malloc_r+0xde>
 8007f06:	6834      	ldr	r4, [r6, #0]
 8007f08:	4626      	mov	r6, r4
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d140      	bne.n	8007f90 <_malloc_r+0xcc>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	4631      	mov	r1, r6
 8007f12:	4638      	mov	r0, r7
 8007f14:	eb04 0803 	add.w	r8, r4, r3
 8007f18:	f000 ffae 	bl	8008e78 <_sbrk_r>
 8007f1c:	4580      	cmp	r8, r0
 8007f1e:	d13a      	bne.n	8007f96 <_malloc_r+0xd2>
 8007f20:	6821      	ldr	r1, [r4, #0]
 8007f22:	3503      	adds	r5, #3
 8007f24:	1a6d      	subs	r5, r5, r1
 8007f26:	f025 0503 	bic.w	r5, r5, #3
 8007f2a:	3508      	adds	r5, #8
 8007f2c:	2d0c      	cmp	r5, #12
 8007f2e:	bf38      	it	cc
 8007f30:	250c      	movcc	r5, #12
 8007f32:	4638      	mov	r0, r7
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7ff ffa5 	bl	8007e84 <sbrk_aligned>
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	d02b      	beq.n	8007f96 <_malloc_r+0xd2>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	442b      	add	r3, r5
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	e00e      	b.n	8007f64 <_malloc_r+0xa0>
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	1b52      	subs	r2, r2, r5
 8007f4a:	d41e      	bmi.n	8007f8a <_malloc_r+0xc6>
 8007f4c:	2a0b      	cmp	r2, #11
 8007f4e:	d916      	bls.n	8007f7e <_malloc_r+0xba>
 8007f50:	1961      	adds	r1, r4, r5
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	6025      	str	r5, [r4, #0]
 8007f56:	bf18      	it	ne
 8007f58:	6059      	strne	r1, [r3, #4]
 8007f5a:	6863      	ldr	r3, [r4, #4]
 8007f5c:	bf08      	it	eq
 8007f5e:	6031      	streq	r1, [r6, #0]
 8007f60:	5162      	str	r2, [r4, r5]
 8007f62:	604b      	str	r3, [r1, #4]
 8007f64:	4638      	mov	r0, r7
 8007f66:	f104 060b 	add.w	r6, r4, #11
 8007f6a:	f003 fac1 	bl	800b4f0 <__malloc_unlock>
 8007f6e:	f026 0607 	bic.w	r6, r6, #7
 8007f72:	1d23      	adds	r3, r4, #4
 8007f74:	1af2      	subs	r2, r6, r3
 8007f76:	d0b6      	beq.n	8007ee6 <_malloc_r+0x22>
 8007f78:	1b9b      	subs	r3, r3, r6
 8007f7a:	50a3      	str	r3, [r4, r2]
 8007f7c:	e7b3      	b.n	8007ee6 <_malloc_r+0x22>
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	bf0c      	ite	eq
 8007f84:	6032      	streq	r2, [r6, #0]
 8007f86:	605a      	strne	r2, [r3, #4]
 8007f88:	e7ec      	b.n	8007f64 <_malloc_r+0xa0>
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	6864      	ldr	r4, [r4, #4]
 8007f8e:	e7b2      	b.n	8007ef6 <_malloc_r+0x32>
 8007f90:	4634      	mov	r4, r6
 8007f92:	6876      	ldr	r6, [r6, #4]
 8007f94:	e7b9      	b.n	8007f0a <_malloc_r+0x46>
 8007f96:	230c      	movs	r3, #12
 8007f98:	4638      	mov	r0, r7
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	f003 faa8 	bl	800b4f0 <__malloc_unlock>
 8007fa0:	e7a1      	b.n	8007ee6 <_malloc_r+0x22>
 8007fa2:	6025      	str	r5, [r4, #0]
 8007fa4:	e7de      	b.n	8007f64 <_malloc_r+0xa0>
 8007fa6:	bf00      	nop
 8007fa8:	2000139c 	.word	0x2000139c

08007fac <__cvt>:
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	bfbb      	ittet	lt
 8007fb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007fba:	461f      	movlt	r7, r3
 8007fbc:	2300      	movge	r3, #0
 8007fbe:	232d      	movlt	r3, #45	; 0x2d
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fc8:	7013      	strb	r3, [r2, #0]
 8007fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fd0:	f023 0820 	bic.w	r8, r3, #32
 8007fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fd8:	d005      	beq.n	8007fe6 <__cvt+0x3a>
 8007fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fde:	d100      	bne.n	8007fe2 <__cvt+0x36>
 8007fe0:	3501      	adds	r5, #1
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e000      	b.n	8007fe8 <__cvt+0x3c>
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	aa07      	add	r2, sp, #28
 8007fea:	9204      	str	r2, [sp, #16]
 8007fec:	aa06      	add	r2, sp, #24
 8007fee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ff2:	e9cd 3500 	strd	r3, r5, [sp]
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	f001 ffbd 	bl	8009f78 <_dtoa_r>
 8007ffe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008002:	4606      	mov	r6, r0
 8008004:	d102      	bne.n	800800c <__cvt+0x60>
 8008006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008008:	07db      	lsls	r3, r3, #31
 800800a:	d522      	bpl.n	8008052 <__cvt+0xa6>
 800800c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008010:	eb06 0905 	add.w	r9, r6, r5
 8008014:	d110      	bne.n	8008038 <__cvt+0x8c>
 8008016:	7833      	ldrb	r3, [r6, #0]
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d10a      	bne.n	8008032 <__cvt+0x86>
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	4620      	mov	r0, r4
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8008028:	b918      	cbnz	r0, 8008032 <__cvt+0x86>
 800802a:	f1c5 0501 	rsb	r5, r5, #1
 800802e:	f8ca 5000 	str.w	r5, [sl]
 8008032:	f8da 3000 	ldr.w	r3, [sl]
 8008036:	4499      	add	r9, r3
 8008038:	2200      	movs	r2, #0
 800803a:	2300      	movs	r3, #0
 800803c:	4620      	mov	r0, r4
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fcb2 	bl	80009a8 <__aeabi_dcmpeq>
 8008044:	b108      	cbz	r0, 800804a <__cvt+0x9e>
 8008046:	f8cd 901c 	str.w	r9, [sp, #28]
 800804a:	2230      	movs	r2, #48	; 0x30
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	454b      	cmp	r3, r9
 8008050:	d307      	bcc.n	8008062 <__cvt+0xb6>
 8008052:	4630      	mov	r0, r6
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008058:	1b9b      	subs	r3, r3, r6
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	b008      	add	sp, #32
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008062:	1c59      	adds	r1, r3, #1
 8008064:	9107      	str	r1, [sp, #28]
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	e7f0      	b.n	800804c <__cvt+0xa0>

0800806a <__exponent>:
 800806a:	4603      	mov	r3, r0
 800806c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800806e:	2900      	cmp	r1, #0
 8008070:	f803 2b02 	strb.w	r2, [r3], #2
 8008074:	bfb6      	itet	lt
 8008076:	222d      	movlt	r2, #45	; 0x2d
 8008078:	222b      	movge	r2, #43	; 0x2b
 800807a:	4249      	neglt	r1, r1
 800807c:	2909      	cmp	r1, #9
 800807e:	7042      	strb	r2, [r0, #1]
 8008080:	dd2b      	ble.n	80080da <__exponent+0x70>
 8008082:	f10d 0407 	add.w	r4, sp, #7
 8008086:	46a4      	mov	ip, r4
 8008088:	270a      	movs	r7, #10
 800808a:	fb91 f6f7 	sdiv	r6, r1, r7
 800808e:	460a      	mov	r2, r1
 8008090:	46a6      	mov	lr, r4
 8008092:	fb07 1516 	mls	r5, r7, r6, r1
 8008096:	2a63      	cmp	r2, #99	; 0x63
 8008098:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800809c:	4631      	mov	r1, r6
 800809e:	f104 34ff 	add.w	r4, r4, #4294967295
 80080a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080a6:	dcf0      	bgt.n	800808a <__exponent+0x20>
 80080a8:	3130      	adds	r1, #48	; 0x30
 80080aa:	f1ae 0502 	sub.w	r5, lr, #2
 80080ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080b2:	4629      	mov	r1, r5
 80080b4:	1c44      	adds	r4, r0, #1
 80080b6:	4561      	cmp	r1, ip
 80080b8:	d30a      	bcc.n	80080d0 <__exponent+0x66>
 80080ba:	f10d 0209 	add.w	r2, sp, #9
 80080be:	eba2 020e 	sub.w	r2, r2, lr
 80080c2:	4565      	cmp	r5, ip
 80080c4:	bf88      	it	hi
 80080c6:	2200      	movhi	r2, #0
 80080c8:	4413      	add	r3, r2
 80080ca:	1a18      	subs	r0, r3, r0
 80080cc:	b003      	add	sp, #12
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080d8:	e7ed      	b.n	80080b6 <__exponent+0x4c>
 80080da:	2330      	movs	r3, #48	; 0x30
 80080dc:	3130      	adds	r1, #48	; 0x30
 80080de:	7083      	strb	r3, [r0, #2]
 80080e0:	70c1      	strb	r1, [r0, #3]
 80080e2:	1d03      	adds	r3, r0, #4
 80080e4:	e7f1      	b.n	80080ca <__exponent+0x60>
	...

080080e8 <_printf_float>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	b091      	sub	sp, #68	; 0x44
 80080ee:	460c      	mov	r4, r1
 80080f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080f4:	4616      	mov	r6, r2
 80080f6:	461f      	mov	r7, r3
 80080f8:	4605      	mov	r5, r0
 80080fa:	f003 f94f 	bl	800b39c <_localeconv_r>
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	f7f8 f824 	bl	8000150 <strlen>
 8008108:	2300      	movs	r3, #0
 800810a:	930e      	str	r3, [sp, #56]	; 0x38
 800810c:	f8d8 3000 	ldr.w	r3, [r8]
 8008110:	900a      	str	r0, [sp, #40]	; 0x28
 8008112:	3307      	adds	r3, #7
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	f103 0208 	add.w	r2, r3, #8
 800811c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008120:	f8d4 b000 	ldr.w	fp, [r4]
 8008124:	f8c8 2000 	str.w	r2, [r8]
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008130:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008134:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008138:	930b      	str	r3, [sp, #44]	; 0x2c
 800813a:	f04f 32ff 	mov.w	r2, #4294967295
 800813e:	4640      	mov	r0, r8
 8008140:	4b9c      	ldr	r3, [pc, #624]	; (80083b4 <_printf_float+0x2cc>)
 8008142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008144:	f7f8 fc62 	bl	8000a0c <__aeabi_dcmpun>
 8008148:	bb70      	cbnz	r0, 80081a8 <_printf_float+0xc0>
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	4640      	mov	r0, r8
 8008150:	4b98      	ldr	r3, [pc, #608]	; (80083b4 <_printf_float+0x2cc>)
 8008152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008154:	f7f8 fc3c 	bl	80009d0 <__aeabi_dcmple>
 8008158:	bb30      	cbnz	r0, 80081a8 <_printf_float+0xc0>
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	4640      	mov	r0, r8
 8008160:	4651      	mov	r1, sl
 8008162:	f7f8 fc2b 	bl	80009bc <__aeabi_dcmplt>
 8008166:	b110      	cbz	r0, 800816e <_printf_float+0x86>
 8008168:	232d      	movs	r3, #45	; 0x2d
 800816a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800816e:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <_printf_float+0x2d0>)
 8008170:	4892      	ldr	r0, [pc, #584]	; (80083bc <_printf_float+0x2d4>)
 8008172:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008176:	bf94      	ite	ls
 8008178:	4698      	movls	r8, r3
 800817a:	4680      	movhi	r8, r0
 800817c:	2303      	movs	r3, #3
 800817e:	f04f 0a00 	mov.w	sl, #0
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	f02b 0304 	bic.w	r3, fp, #4
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	4633      	mov	r3, r6
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	9700      	str	r7, [sp, #0]
 8008192:	aa0f      	add	r2, sp, #60	; 0x3c
 8008194:	f000 f9d4 	bl	8008540 <_printf_common>
 8008198:	3001      	adds	r0, #1
 800819a:	f040 8090 	bne.w	80082be <_printf_float+0x1d6>
 800819e:	f04f 30ff 	mov.w	r0, #4294967295
 80081a2:	b011      	add	sp, #68	; 0x44
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	4642      	mov	r2, r8
 80081aa:	4653      	mov	r3, sl
 80081ac:	4640      	mov	r0, r8
 80081ae:	4651      	mov	r1, sl
 80081b0:	f7f8 fc2c 	bl	8000a0c <__aeabi_dcmpun>
 80081b4:	b148      	cbz	r0, 80081ca <_printf_float+0xe2>
 80081b6:	f1ba 0f00 	cmp.w	sl, #0
 80081ba:	bfb8      	it	lt
 80081bc:	232d      	movlt	r3, #45	; 0x2d
 80081be:	4880      	ldr	r0, [pc, #512]	; (80083c0 <_printf_float+0x2d8>)
 80081c0:	bfb8      	it	lt
 80081c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081c6:	4b7f      	ldr	r3, [pc, #508]	; (80083c4 <_printf_float+0x2dc>)
 80081c8:	e7d3      	b.n	8008172 <_printf_float+0x8a>
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	d142      	bne.n	800825a <_printf_float+0x172>
 80081d4:	2306      	movs	r3, #6
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	9206      	str	r2, [sp, #24]
 80081dc:	aa0e      	add	r2, sp, #56	; 0x38
 80081de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081e2:	aa0d      	add	r2, sp, #52	; 0x34
 80081e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081e8:	9203      	str	r2, [sp, #12]
 80081ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	4642      	mov	r2, r8
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4628      	mov	r0, r5
 80081fc:	4653      	mov	r3, sl
 80081fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008200:	f7ff fed4 	bl	8007fac <__cvt>
 8008204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008206:	4680      	mov	r8, r0
 8008208:	2947      	cmp	r1, #71	; 0x47
 800820a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800820c:	d108      	bne.n	8008220 <_printf_float+0x138>
 800820e:	1cc8      	adds	r0, r1, #3
 8008210:	db02      	blt.n	8008218 <_printf_float+0x130>
 8008212:	6863      	ldr	r3, [r4, #4]
 8008214:	4299      	cmp	r1, r3
 8008216:	dd40      	ble.n	800829a <_printf_float+0x1b2>
 8008218:	f1a9 0902 	sub.w	r9, r9, #2
 800821c:	fa5f f989 	uxtb.w	r9, r9
 8008220:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008224:	d81f      	bhi.n	8008266 <_printf_float+0x17e>
 8008226:	464a      	mov	r2, r9
 8008228:	3901      	subs	r1, #1
 800822a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800822e:	910d      	str	r1, [sp, #52]	; 0x34
 8008230:	f7ff ff1b 	bl	800806a <__exponent>
 8008234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008236:	4682      	mov	sl, r0
 8008238:	1813      	adds	r3, r2, r0
 800823a:	2a01      	cmp	r2, #1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	dc02      	bgt.n	8008246 <_printf_float+0x15e>
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	07d2      	lsls	r2, r2, #31
 8008244:	d501      	bpl.n	800824a <_printf_float+0x162>
 8008246:	3301      	adds	r3, #1
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800824e:	2b00      	cmp	r3, #0
 8008250:	d09b      	beq.n	800818a <_printf_float+0xa2>
 8008252:	232d      	movs	r3, #45	; 0x2d
 8008254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008258:	e797      	b.n	800818a <_printf_float+0xa2>
 800825a:	2947      	cmp	r1, #71	; 0x47
 800825c:	d1bc      	bne.n	80081d8 <_printf_float+0xf0>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1ba      	bne.n	80081d8 <_printf_float+0xf0>
 8008262:	2301      	movs	r3, #1
 8008264:	e7b7      	b.n	80081d6 <_printf_float+0xee>
 8008266:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800826a:	d118      	bne.n	800829e <_printf_float+0x1b6>
 800826c:	2900      	cmp	r1, #0
 800826e:	6863      	ldr	r3, [r4, #4]
 8008270:	dd0b      	ble.n	800828a <_printf_float+0x1a2>
 8008272:	6121      	str	r1, [r4, #16]
 8008274:	b913      	cbnz	r3, 800827c <_printf_float+0x194>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	07d0      	lsls	r0, r2, #31
 800827a:	d502      	bpl.n	8008282 <_printf_float+0x19a>
 800827c:	3301      	adds	r3, #1
 800827e:	440b      	add	r3, r1
 8008280:	6123      	str	r3, [r4, #16]
 8008282:	f04f 0a00 	mov.w	sl, #0
 8008286:	65a1      	str	r1, [r4, #88]	; 0x58
 8008288:	e7df      	b.n	800824a <_printf_float+0x162>
 800828a:	b913      	cbnz	r3, 8008292 <_printf_float+0x1aa>
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	07d2      	lsls	r2, r2, #31
 8008290:	d501      	bpl.n	8008296 <_printf_float+0x1ae>
 8008292:	3302      	adds	r3, #2
 8008294:	e7f4      	b.n	8008280 <_printf_float+0x198>
 8008296:	2301      	movs	r3, #1
 8008298:	e7f2      	b.n	8008280 <_printf_float+0x198>
 800829a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800829e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a0:	4299      	cmp	r1, r3
 80082a2:	db05      	blt.n	80082b0 <_printf_float+0x1c8>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	6121      	str	r1, [r4, #16]
 80082a8:	07d8      	lsls	r0, r3, #31
 80082aa:	d5ea      	bpl.n	8008282 <_printf_float+0x19a>
 80082ac:	1c4b      	adds	r3, r1, #1
 80082ae:	e7e7      	b.n	8008280 <_printf_float+0x198>
 80082b0:	2900      	cmp	r1, #0
 80082b2:	bfcc      	ite	gt
 80082b4:	2201      	movgt	r2, #1
 80082b6:	f1c1 0202 	rsble	r2, r1, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	e7e0      	b.n	8008280 <_printf_float+0x198>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	055a      	lsls	r2, r3, #21
 80082c2:	d407      	bmi.n	80082d4 <_printf_float+0x1ec>
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	4642      	mov	r2, r8
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	d12b      	bne.n	800832a <_printf_float+0x242>
 80082d2:	e764      	b.n	800819e <_printf_float+0xb6>
 80082d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082d8:	f240 80dd 	bls.w	8008496 <_printf_float+0x3ae>
 80082dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d033      	beq.n	8008354 <_printf_float+0x26c>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	4a35      	ldr	r2, [pc, #212]	; (80083c8 <_printf_float+0x2e0>)
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af51 	beq.w	800819e <_printf_float+0xb6>
 80082fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008300:	429a      	cmp	r2, r3
 8008302:	db02      	blt.n	800830a <_printf_float+0x222>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	07d8      	lsls	r0, r3, #31
 8008308:	d50f      	bpl.n	800832a <_printf_float+0x242>
 800830a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f af42 	beq.w	800819e <_printf_float+0xb6>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	f104 091a 	add.w	r9, r4, #26
 8008322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008324:	3b01      	subs	r3, #1
 8008326:	4543      	cmp	r3, r8
 8008328:	dc09      	bgt.n	800833e <_printf_float+0x256>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	079b      	lsls	r3, r3, #30
 800832e:	f100 8102 	bmi.w	8008536 <_printf_float+0x44e>
 8008332:	68e0      	ldr	r0, [r4, #12]
 8008334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008336:	4298      	cmp	r0, r3
 8008338:	bfb8      	it	lt
 800833a:	4618      	movlt	r0, r3
 800833c:	e731      	b.n	80081a2 <_printf_float+0xba>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f af28 	beq.w	800819e <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	e7e6      	b.n	8008322 <_printf_float+0x23a>
 8008354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008356:	2b00      	cmp	r3, #0
 8008358:	dc38      	bgt.n	80083cc <_printf_float+0x2e4>
 800835a:	2301      	movs	r3, #1
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <_printf_float+0x2e0>)
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f af1a 	beq.w	800819e <_printf_float+0xb6>
 800836a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800836e:	4313      	orrs	r3, r2
 8008370:	d102      	bne.n	8008378 <_printf_float+0x290>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	07d9      	lsls	r1, r3, #31
 8008376:	d5d8      	bpl.n	800832a <_printf_float+0x242>
 8008378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	f43f af0b 	beq.w	800819e <_printf_float+0xb6>
 8008388:	f04f 0900 	mov.w	r9, #0
 800838c:	f104 0a1a 	add.w	sl, r4, #26
 8008390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008392:	425b      	negs	r3, r3
 8008394:	454b      	cmp	r3, r9
 8008396:	dc01      	bgt.n	800839c <_printf_float+0x2b4>
 8008398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800839a:	e794      	b.n	80082c6 <_printf_float+0x1de>
 800839c:	2301      	movs	r3, #1
 800839e:	4652      	mov	r2, sl
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f aef9 	beq.w	800819e <_printf_float+0xb6>
 80083ac:	f109 0901 	add.w	r9, r9, #1
 80083b0:	e7ee      	b.n	8008390 <_printf_float+0x2a8>
 80083b2:	bf00      	nop
 80083b4:	7fefffff 	.word	0x7fefffff
 80083b8:	0800c85c 	.word	0x0800c85c
 80083bc:	0800c860 	.word	0x0800c860
 80083c0:	0800c868 	.word	0x0800c868
 80083c4:	0800c864 	.word	0x0800c864
 80083c8:	0800c86c 	.word	0x0800c86c
 80083cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bfa8      	it	ge
 80083d4:	461a      	movge	r2, r3
 80083d6:	2a00      	cmp	r2, #0
 80083d8:	4691      	mov	r9, r2
 80083da:	dc37      	bgt.n	800844c <_printf_float+0x364>
 80083dc:	f04f 0b00 	mov.w	fp, #0
 80083e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e4:	f104 021a 	add.w	r2, r4, #26
 80083e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083ec:	ebaa 0309 	sub.w	r3, sl, r9
 80083f0:	455b      	cmp	r3, fp
 80083f2:	dc33      	bgt.n	800845c <_printf_float+0x374>
 80083f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083f8:	429a      	cmp	r2, r3
 80083fa:	db3b      	blt.n	8008474 <_printf_float+0x38c>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	07da      	lsls	r2, r3, #31
 8008400:	d438      	bmi.n	8008474 <_printf_float+0x38c>
 8008402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008404:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008406:	eba3 020a 	sub.w	r2, r3, sl
 800840a:	eba3 0901 	sub.w	r9, r3, r1
 800840e:	4591      	cmp	r9, r2
 8008410:	bfa8      	it	ge
 8008412:	4691      	movge	r9, r2
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	dc34      	bgt.n	8008484 <_printf_float+0x39c>
 800841a:	f04f 0800 	mov.w	r8, #0
 800841e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008422:	f104 0a1a 	add.w	sl, r4, #26
 8008426:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800842a:	1a9b      	subs	r3, r3, r2
 800842c:	eba3 0309 	sub.w	r3, r3, r9
 8008430:	4543      	cmp	r3, r8
 8008432:	f77f af7a 	ble.w	800832a <_printf_float+0x242>
 8008436:	2301      	movs	r3, #1
 8008438:	4652      	mov	r2, sl
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	47b8      	blx	r7
 8008440:	3001      	adds	r0, #1
 8008442:	f43f aeac 	beq.w	800819e <_printf_float+0xb6>
 8008446:	f108 0801 	add.w	r8, r8, #1
 800844a:	e7ec      	b.n	8008426 <_printf_float+0x33e>
 800844c:	4613      	mov	r3, r2
 800844e:	4631      	mov	r1, r6
 8008450:	4642      	mov	r2, r8
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	d1c0      	bne.n	80083dc <_printf_float+0x2f4>
 800845a:	e6a0      	b.n	800819e <_printf_float+0xb6>
 800845c:	2301      	movs	r3, #1
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	920b      	str	r2, [sp, #44]	; 0x2c
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f ae99 	beq.w	800819e <_printf_float+0xb6>
 800846c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800846e:	f10b 0b01 	add.w	fp, fp, #1
 8008472:	e7b9      	b.n	80083e8 <_printf_float+0x300>
 8008474:	4631      	mov	r1, r6
 8008476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	d1bf      	bne.n	8008402 <_printf_float+0x31a>
 8008482:	e68c      	b.n	800819e <_printf_float+0xb6>
 8008484:	464b      	mov	r3, r9
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	eb08 020a 	add.w	r2, r8, sl
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d1c2      	bne.n	800841a <_printf_float+0x332>
 8008494:	e683      	b.n	800819e <_printf_float+0xb6>
 8008496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008498:	2a01      	cmp	r2, #1
 800849a:	dc01      	bgt.n	80084a0 <_printf_float+0x3b8>
 800849c:	07db      	lsls	r3, r3, #31
 800849e:	d537      	bpl.n	8008510 <_printf_float+0x428>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4642      	mov	r2, r8
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f ae77 	beq.w	800819e <_printf_float+0xb6>
 80084b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f ae6f 	beq.w	800819e <_printf_float+0xb6>
 80084c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	f7f8 fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80084cc:	b9d8      	cbnz	r0, 8008506 <_printf_float+0x41e>
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	f108 0201 	add.w	r2, r8, #1
 80084d4:	3b01      	subs	r3, #1
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	d10e      	bne.n	80084fe <_printf_float+0x416>
 80084e0:	e65d      	b.n	800819e <_printf_float+0xb6>
 80084e2:	2301      	movs	r3, #1
 80084e4:	464a      	mov	r2, r9
 80084e6:	4631      	mov	r1, r6
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b8      	blx	r7
 80084ec:	3001      	adds	r0, #1
 80084ee:	f43f ae56 	beq.w	800819e <_printf_float+0xb6>
 80084f2:	f108 0801 	add.w	r8, r8, #1
 80084f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f8:	3b01      	subs	r3, #1
 80084fa:	4543      	cmp	r3, r8
 80084fc:	dcf1      	bgt.n	80084e2 <_printf_float+0x3fa>
 80084fe:	4653      	mov	r3, sl
 8008500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008504:	e6e0      	b.n	80082c8 <_printf_float+0x1e0>
 8008506:	f04f 0800 	mov.w	r8, #0
 800850a:	f104 091a 	add.w	r9, r4, #26
 800850e:	e7f2      	b.n	80084f6 <_printf_float+0x40e>
 8008510:	2301      	movs	r3, #1
 8008512:	4642      	mov	r2, r8
 8008514:	e7df      	b.n	80084d6 <_printf_float+0x3ee>
 8008516:	2301      	movs	r3, #1
 8008518:	464a      	mov	r2, r9
 800851a:	4631      	mov	r1, r6
 800851c:	4628      	mov	r0, r5
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	f43f ae3c 	beq.w	800819e <_printf_float+0xb6>
 8008526:	f108 0801 	add.w	r8, r8, #1
 800852a:	68e3      	ldr	r3, [r4, #12]
 800852c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800852e:	1a5b      	subs	r3, r3, r1
 8008530:	4543      	cmp	r3, r8
 8008532:	dcf0      	bgt.n	8008516 <_printf_float+0x42e>
 8008534:	e6fd      	b.n	8008332 <_printf_float+0x24a>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	f104 0919 	add.w	r9, r4, #25
 800853e:	e7f4      	b.n	800852a <_printf_float+0x442>

08008540 <_printf_common>:
 8008540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008544:	4616      	mov	r6, r2
 8008546:	4699      	mov	r9, r3
 8008548:	688a      	ldr	r2, [r1, #8]
 800854a:	690b      	ldr	r3, [r1, #16]
 800854c:	4607      	mov	r7, r0
 800854e:	4293      	cmp	r3, r2
 8008550:	bfb8      	it	lt
 8008552:	4613      	movlt	r3, r2
 8008554:	6033      	str	r3, [r6, #0]
 8008556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800855a:	460c      	mov	r4, r1
 800855c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008560:	b10a      	cbz	r2, 8008566 <_printf_common+0x26>
 8008562:	3301      	adds	r3, #1
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	0699      	lsls	r1, r3, #26
 800856a:	bf42      	ittt	mi
 800856c:	6833      	ldrmi	r3, [r6, #0]
 800856e:	3302      	addmi	r3, #2
 8008570:	6033      	strmi	r3, [r6, #0]
 8008572:	6825      	ldr	r5, [r4, #0]
 8008574:	f015 0506 	ands.w	r5, r5, #6
 8008578:	d106      	bne.n	8008588 <_printf_common+0x48>
 800857a:	f104 0a19 	add.w	sl, r4, #25
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	6832      	ldr	r2, [r6, #0]
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	42ab      	cmp	r3, r5
 8008586:	dc28      	bgt.n	80085da <_printf_common+0x9a>
 8008588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800858c:	1e13      	subs	r3, r2, #0
 800858e:	6822      	ldr	r2, [r4, #0]
 8008590:	bf18      	it	ne
 8008592:	2301      	movne	r3, #1
 8008594:	0692      	lsls	r2, r2, #26
 8008596:	d42d      	bmi.n	80085f4 <_printf_common+0xb4>
 8008598:	4649      	mov	r1, r9
 800859a:	4638      	mov	r0, r7
 800859c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a0:	47c0      	blx	r8
 80085a2:	3001      	adds	r0, #1
 80085a4:	d020      	beq.n	80085e8 <_printf_common+0xa8>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	68e5      	ldr	r5, [r4, #12]
 80085aa:	f003 0306 	and.w	r3, r3, #6
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	bf18      	it	ne
 80085b2:	2500      	movne	r5, #0
 80085b4:	6832      	ldr	r2, [r6, #0]
 80085b6:	f04f 0600 	mov.w	r6, #0
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	bf08      	it	eq
 80085be:	1aad      	subeq	r5, r5, r2
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	bf08      	it	eq
 80085c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bfc4      	itt	gt
 80085cc:	1a9b      	subgt	r3, r3, r2
 80085ce:	18ed      	addgt	r5, r5, r3
 80085d0:	341a      	adds	r4, #26
 80085d2:	42b5      	cmp	r5, r6
 80085d4:	d11a      	bne.n	800860c <_printf_common+0xcc>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e008      	b.n	80085ec <_printf_common+0xac>
 80085da:	2301      	movs	r3, #1
 80085dc:	4652      	mov	r2, sl
 80085de:	4649      	mov	r1, r9
 80085e0:	4638      	mov	r0, r7
 80085e2:	47c0      	blx	r8
 80085e4:	3001      	adds	r0, #1
 80085e6:	d103      	bne.n	80085f0 <_printf_common+0xb0>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	3501      	adds	r5, #1
 80085f2:	e7c4      	b.n	800857e <_printf_common+0x3e>
 80085f4:	2030      	movs	r0, #48	; 0x30
 80085f6:	18e1      	adds	r1, r4, r3
 80085f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008602:	4422      	add	r2, r4
 8008604:	3302      	adds	r3, #2
 8008606:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800860a:	e7c5      	b.n	8008598 <_printf_common+0x58>
 800860c:	2301      	movs	r3, #1
 800860e:	4622      	mov	r2, r4
 8008610:	4649      	mov	r1, r9
 8008612:	4638      	mov	r0, r7
 8008614:	47c0      	blx	r8
 8008616:	3001      	adds	r0, #1
 8008618:	d0e6      	beq.n	80085e8 <_printf_common+0xa8>
 800861a:	3601      	adds	r6, #1
 800861c:	e7d9      	b.n	80085d2 <_printf_common+0x92>
	...

08008620 <_printf_i>:
 8008620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	7e0f      	ldrb	r7, [r1, #24]
 8008626:	4691      	mov	r9, r2
 8008628:	2f78      	cmp	r7, #120	; 0x78
 800862a:	4680      	mov	r8, r0
 800862c:	460c      	mov	r4, r1
 800862e:	469a      	mov	sl, r3
 8008630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008636:	d807      	bhi.n	8008648 <_printf_i+0x28>
 8008638:	2f62      	cmp	r7, #98	; 0x62
 800863a:	d80a      	bhi.n	8008652 <_printf_i+0x32>
 800863c:	2f00      	cmp	r7, #0
 800863e:	f000 80d9 	beq.w	80087f4 <_printf_i+0x1d4>
 8008642:	2f58      	cmp	r7, #88	; 0x58
 8008644:	f000 80a4 	beq.w	8008790 <_printf_i+0x170>
 8008648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800864c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008650:	e03a      	b.n	80086c8 <_printf_i+0xa8>
 8008652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008656:	2b15      	cmp	r3, #21
 8008658:	d8f6      	bhi.n	8008648 <_printf_i+0x28>
 800865a:	a101      	add	r1, pc, #4	; (adr r1, 8008660 <_printf_i+0x40>)
 800865c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086cd 	.word	0x080086cd
 8008668:	08008649 	.word	0x08008649
 800866c:	08008649 	.word	0x08008649
 8008670:	08008649 	.word	0x08008649
 8008674:	08008649 	.word	0x08008649
 8008678:	080086cd 	.word	0x080086cd
 800867c:	08008649 	.word	0x08008649
 8008680:	08008649 	.word	0x08008649
 8008684:	08008649 	.word	0x08008649
 8008688:	08008649 	.word	0x08008649
 800868c:	080087db 	.word	0x080087db
 8008690:	080086fd 	.word	0x080086fd
 8008694:	080087bd 	.word	0x080087bd
 8008698:	08008649 	.word	0x08008649
 800869c:	08008649 	.word	0x08008649
 80086a0:	080087fd 	.word	0x080087fd
 80086a4:	08008649 	.word	0x08008649
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	08008649 	.word	0x08008649
 80086b0:	08008649 	.word	0x08008649
 80086b4:	080087c5 	.word	0x080087c5
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	602a      	str	r2, [r5, #0]
 80086c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0a4      	b.n	8008816 <_printf_i+0x1f6>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	6829      	ldr	r1, [r5, #0]
 80086d0:	0606      	lsls	r6, r0, #24
 80086d2:	f101 0304 	add.w	r3, r1, #4
 80086d6:	d50a      	bpl.n	80086ee <_printf_i+0xce>
 80086d8:	680e      	ldr	r6, [r1, #0]
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	2e00      	cmp	r6, #0
 80086de:	da03      	bge.n	80086e8 <_printf_i+0xc8>
 80086e0:	232d      	movs	r3, #45	; 0x2d
 80086e2:	4276      	negs	r6, r6
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e8:	230a      	movs	r3, #10
 80086ea:	485e      	ldr	r0, [pc, #376]	; (8008864 <_printf_i+0x244>)
 80086ec:	e019      	b.n	8008722 <_printf_i+0x102>
 80086ee:	680e      	ldr	r6, [r1, #0]
 80086f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086f4:	602b      	str	r3, [r5, #0]
 80086f6:	bf18      	it	ne
 80086f8:	b236      	sxthne	r6, r6
 80086fa:	e7ef      	b.n	80086dc <_printf_i+0xbc>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	6820      	ldr	r0, [r4, #0]
 8008700:	1d19      	adds	r1, r3, #4
 8008702:	6029      	str	r1, [r5, #0]
 8008704:	0601      	lsls	r1, r0, #24
 8008706:	d501      	bpl.n	800870c <_printf_i+0xec>
 8008708:	681e      	ldr	r6, [r3, #0]
 800870a:	e002      	b.n	8008712 <_printf_i+0xf2>
 800870c:	0646      	lsls	r6, r0, #25
 800870e:	d5fb      	bpl.n	8008708 <_printf_i+0xe8>
 8008710:	881e      	ldrh	r6, [r3, #0]
 8008712:	2f6f      	cmp	r7, #111	; 0x6f
 8008714:	bf0c      	ite	eq
 8008716:	2308      	moveq	r3, #8
 8008718:	230a      	movne	r3, #10
 800871a:	4852      	ldr	r0, [pc, #328]	; (8008864 <_printf_i+0x244>)
 800871c:	2100      	movs	r1, #0
 800871e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008722:	6865      	ldr	r5, [r4, #4]
 8008724:	2d00      	cmp	r5, #0
 8008726:	bfa8      	it	ge
 8008728:	6821      	ldrge	r1, [r4, #0]
 800872a:	60a5      	str	r5, [r4, #8]
 800872c:	bfa4      	itt	ge
 800872e:	f021 0104 	bicge.w	r1, r1, #4
 8008732:	6021      	strge	r1, [r4, #0]
 8008734:	b90e      	cbnz	r6, 800873a <_printf_i+0x11a>
 8008736:	2d00      	cmp	r5, #0
 8008738:	d04d      	beq.n	80087d6 <_printf_i+0x1b6>
 800873a:	4615      	mov	r5, r2
 800873c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008740:	fb03 6711 	mls	r7, r3, r1, r6
 8008744:	5dc7      	ldrb	r7, [r0, r7]
 8008746:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800874a:	4637      	mov	r7, r6
 800874c:	42bb      	cmp	r3, r7
 800874e:	460e      	mov	r6, r1
 8008750:	d9f4      	bls.n	800873c <_printf_i+0x11c>
 8008752:	2b08      	cmp	r3, #8
 8008754:	d10b      	bne.n	800876e <_printf_i+0x14e>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	07de      	lsls	r6, r3, #31
 800875a:	d508      	bpl.n	800876e <_printf_i+0x14e>
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	6861      	ldr	r1, [r4, #4]
 8008760:	4299      	cmp	r1, r3
 8008762:	bfde      	ittt	le
 8008764:	2330      	movle	r3, #48	; 0x30
 8008766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800876a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800876e:	1b52      	subs	r2, r2, r5
 8008770:	6122      	str	r2, [r4, #16]
 8008772:	464b      	mov	r3, r9
 8008774:	4621      	mov	r1, r4
 8008776:	4640      	mov	r0, r8
 8008778:	f8cd a000 	str.w	sl, [sp]
 800877c:	aa03      	add	r2, sp, #12
 800877e:	f7ff fedf 	bl	8008540 <_printf_common>
 8008782:	3001      	adds	r0, #1
 8008784:	d14c      	bne.n	8008820 <_printf_i+0x200>
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	b004      	add	sp, #16
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008790:	4834      	ldr	r0, [pc, #208]	; (8008864 <_printf_i+0x244>)
 8008792:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008796:	6829      	ldr	r1, [r5, #0]
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f851 6b04 	ldr.w	r6, [r1], #4
 800879e:	6029      	str	r1, [r5, #0]
 80087a0:	061d      	lsls	r5, r3, #24
 80087a2:	d514      	bpl.n	80087ce <_printf_i+0x1ae>
 80087a4:	07df      	lsls	r7, r3, #31
 80087a6:	bf44      	itt	mi
 80087a8:	f043 0320 	orrmi.w	r3, r3, #32
 80087ac:	6023      	strmi	r3, [r4, #0]
 80087ae:	b91e      	cbnz	r6, 80087b8 <_printf_i+0x198>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	f023 0320 	bic.w	r3, r3, #32
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	2310      	movs	r3, #16
 80087ba:	e7af      	b.n	800871c <_printf_i+0xfc>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f043 0320 	orr.w	r3, r3, #32
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	2378      	movs	r3, #120	; 0x78
 80087c6:	4828      	ldr	r0, [pc, #160]	; (8008868 <_printf_i+0x248>)
 80087c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087cc:	e7e3      	b.n	8008796 <_printf_i+0x176>
 80087ce:	0659      	lsls	r1, r3, #25
 80087d0:	bf48      	it	mi
 80087d2:	b2b6      	uxthmi	r6, r6
 80087d4:	e7e6      	b.n	80087a4 <_printf_i+0x184>
 80087d6:	4615      	mov	r5, r2
 80087d8:	e7bb      	b.n	8008752 <_printf_i+0x132>
 80087da:	682b      	ldr	r3, [r5, #0]
 80087dc:	6826      	ldr	r6, [r4, #0]
 80087de:	1d18      	adds	r0, r3, #4
 80087e0:	6961      	ldr	r1, [r4, #20]
 80087e2:	6028      	str	r0, [r5, #0]
 80087e4:	0635      	lsls	r5, r6, #24
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	d501      	bpl.n	80087ee <_printf_i+0x1ce>
 80087ea:	6019      	str	r1, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <_printf_i+0x1d4>
 80087ee:	0670      	lsls	r0, r6, #25
 80087f0:	d5fb      	bpl.n	80087ea <_printf_i+0x1ca>
 80087f2:	8019      	strh	r1, [r3, #0]
 80087f4:	2300      	movs	r3, #0
 80087f6:	4615      	mov	r5, r2
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	e7ba      	b.n	8008772 <_printf_i+0x152>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	2100      	movs	r1, #0
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	602a      	str	r2, [r5, #0]
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	6862      	ldr	r2, [r4, #4]
 8008808:	4628      	mov	r0, r5
 800880a:	f002 fe5d 	bl	800b4c8 <memchr>
 800880e:	b108      	cbz	r0, 8008814 <_printf_i+0x1f4>
 8008810:	1b40      	subs	r0, r0, r5
 8008812:	6060      	str	r0, [r4, #4]
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	2300      	movs	r3, #0
 800881a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881e:	e7a8      	b.n	8008772 <_printf_i+0x152>
 8008820:	462a      	mov	r2, r5
 8008822:	4649      	mov	r1, r9
 8008824:	4640      	mov	r0, r8
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	47d0      	blx	sl
 800882a:	3001      	adds	r0, #1
 800882c:	d0ab      	beq.n	8008786 <_printf_i+0x166>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	079b      	lsls	r3, r3, #30
 8008832:	d413      	bmi.n	800885c <_printf_i+0x23c>
 8008834:	68e0      	ldr	r0, [r4, #12]
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	4298      	cmp	r0, r3
 800883a:	bfb8      	it	lt
 800883c:	4618      	movlt	r0, r3
 800883e:	e7a4      	b.n	800878a <_printf_i+0x16a>
 8008840:	2301      	movs	r3, #1
 8008842:	4632      	mov	r2, r6
 8008844:	4649      	mov	r1, r9
 8008846:	4640      	mov	r0, r8
 8008848:	47d0      	blx	sl
 800884a:	3001      	adds	r0, #1
 800884c:	d09b      	beq.n	8008786 <_printf_i+0x166>
 800884e:	3501      	adds	r5, #1
 8008850:	68e3      	ldr	r3, [r4, #12]
 8008852:	9903      	ldr	r1, [sp, #12]
 8008854:	1a5b      	subs	r3, r3, r1
 8008856:	42ab      	cmp	r3, r5
 8008858:	dcf2      	bgt.n	8008840 <_printf_i+0x220>
 800885a:	e7eb      	b.n	8008834 <_printf_i+0x214>
 800885c:	2500      	movs	r5, #0
 800885e:	f104 0619 	add.w	r6, r4, #25
 8008862:	e7f5      	b.n	8008850 <_printf_i+0x230>
 8008864:	0800c86e 	.word	0x0800c86e
 8008868:	0800c87f 	.word	0x0800c87f

0800886c <_scanf_float>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	b087      	sub	sp, #28
 8008872:	9303      	str	r3, [sp, #12]
 8008874:	688b      	ldr	r3, [r1, #8]
 8008876:	4617      	mov	r7, r2
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800887e:	bf85      	ittet	hi
 8008880:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008884:	195b      	addhi	r3, r3, r5
 8008886:	2300      	movls	r3, #0
 8008888:	9302      	strhi	r3, [sp, #8]
 800888a:	bf88      	it	hi
 800888c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008890:	468b      	mov	fp, r1
 8008892:	f04f 0500 	mov.w	r5, #0
 8008896:	bf8c      	ite	hi
 8008898:	608b      	strhi	r3, [r1, #8]
 800889a:	9302      	strls	r3, [sp, #8]
 800889c:	680b      	ldr	r3, [r1, #0]
 800889e:	4680      	mov	r8, r0
 80088a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80088a8:	460c      	mov	r4, r1
 80088aa:	465e      	mov	r6, fp
 80088ac:	46aa      	mov	sl, r5
 80088ae:	46a9      	mov	r9, r5
 80088b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088b4:	9501      	str	r5, [sp, #4]
 80088b6:	68a2      	ldr	r2, [r4, #8]
 80088b8:	b152      	cbz	r2, 80088d0 <_scanf_float+0x64>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b4e      	cmp	r3, #78	; 0x4e
 80088c0:	d864      	bhi.n	800898c <_scanf_float+0x120>
 80088c2:	2b40      	cmp	r3, #64	; 0x40
 80088c4:	d83c      	bhi.n	8008940 <_scanf_float+0xd4>
 80088c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088ca:	b2c8      	uxtb	r0, r1
 80088cc:	280e      	cmp	r0, #14
 80088ce:	d93a      	bls.n	8008946 <_scanf_float+0xda>
 80088d0:	f1b9 0f00 	cmp.w	r9, #0
 80088d4:	d003      	beq.n	80088de <_scanf_float+0x72>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e2:	f1ba 0f01 	cmp.w	sl, #1
 80088e6:	f200 8113 	bhi.w	8008b10 <_scanf_float+0x2a4>
 80088ea:	455e      	cmp	r6, fp
 80088ec:	f200 8105 	bhi.w	8008afa <_scanf_float+0x28e>
 80088f0:	2501      	movs	r5, #1
 80088f2:	4628      	mov	r0, r5
 80088f4:	b007      	add	sp, #28
 80088f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088fe:	2a0d      	cmp	r2, #13
 8008900:	d8e6      	bhi.n	80088d0 <_scanf_float+0x64>
 8008902:	a101      	add	r1, pc, #4	; (adr r1, 8008908 <_scanf_float+0x9c>)
 8008904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008908:	08008a47 	.word	0x08008a47
 800890c:	080088d1 	.word	0x080088d1
 8008910:	080088d1 	.word	0x080088d1
 8008914:	080088d1 	.word	0x080088d1
 8008918:	08008aa7 	.word	0x08008aa7
 800891c:	08008a7f 	.word	0x08008a7f
 8008920:	080088d1 	.word	0x080088d1
 8008924:	080088d1 	.word	0x080088d1
 8008928:	08008a55 	.word	0x08008a55
 800892c:	080088d1 	.word	0x080088d1
 8008930:	080088d1 	.word	0x080088d1
 8008934:	080088d1 	.word	0x080088d1
 8008938:	080088d1 	.word	0x080088d1
 800893c:	08008a0d 	.word	0x08008a0d
 8008940:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008944:	e7db      	b.n	80088fe <_scanf_float+0x92>
 8008946:	290e      	cmp	r1, #14
 8008948:	d8c2      	bhi.n	80088d0 <_scanf_float+0x64>
 800894a:	a001      	add	r0, pc, #4	; (adr r0, 8008950 <_scanf_float+0xe4>)
 800894c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008950:	080089ff 	.word	0x080089ff
 8008954:	080088d1 	.word	0x080088d1
 8008958:	080089ff 	.word	0x080089ff
 800895c:	08008a93 	.word	0x08008a93
 8008960:	080088d1 	.word	0x080088d1
 8008964:	080089ad 	.word	0x080089ad
 8008968:	080089e9 	.word	0x080089e9
 800896c:	080089e9 	.word	0x080089e9
 8008970:	080089e9 	.word	0x080089e9
 8008974:	080089e9 	.word	0x080089e9
 8008978:	080089e9 	.word	0x080089e9
 800897c:	080089e9 	.word	0x080089e9
 8008980:	080089e9 	.word	0x080089e9
 8008984:	080089e9 	.word	0x080089e9
 8008988:	080089e9 	.word	0x080089e9
 800898c:	2b6e      	cmp	r3, #110	; 0x6e
 800898e:	d809      	bhi.n	80089a4 <_scanf_float+0x138>
 8008990:	2b60      	cmp	r3, #96	; 0x60
 8008992:	d8b2      	bhi.n	80088fa <_scanf_float+0x8e>
 8008994:	2b54      	cmp	r3, #84	; 0x54
 8008996:	d077      	beq.n	8008a88 <_scanf_float+0x21c>
 8008998:	2b59      	cmp	r3, #89	; 0x59
 800899a:	d199      	bne.n	80088d0 <_scanf_float+0x64>
 800899c:	2d07      	cmp	r5, #7
 800899e:	d197      	bne.n	80088d0 <_scanf_float+0x64>
 80089a0:	2508      	movs	r5, #8
 80089a2:	e029      	b.n	80089f8 <_scanf_float+0x18c>
 80089a4:	2b74      	cmp	r3, #116	; 0x74
 80089a6:	d06f      	beq.n	8008a88 <_scanf_float+0x21c>
 80089a8:	2b79      	cmp	r3, #121	; 0x79
 80089aa:	e7f6      	b.n	800899a <_scanf_float+0x12e>
 80089ac:	6821      	ldr	r1, [r4, #0]
 80089ae:	05c8      	lsls	r0, r1, #23
 80089b0:	d51a      	bpl.n	80089e8 <_scanf_float+0x17c>
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089b8:	6021      	str	r1, [r4, #0]
 80089ba:	f109 0901 	add.w	r9, r9, #1
 80089be:	b11b      	cbz	r3, 80089c8 <_scanf_float+0x15c>
 80089c0:	3b01      	subs	r3, #1
 80089c2:	3201      	adds	r2, #1
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	60a2      	str	r2, [r4, #8]
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	f340 8084 	ble.w	8008ae8 <_scanf_float+0x27c>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	603b      	str	r3, [r7, #0]
 80089e6:	e766      	b.n	80088b6 <_scanf_float+0x4a>
 80089e8:	eb1a 0f05 	cmn.w	sl, r5
 80089ec:	f47f af70 	bne.w	80088d0 <_scanf_float+0x64>
 80089f0:	6822      	ldr	r2, [r4, #0]
 80089f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	f806 3b01 	strb.w	r3, [r6], #1
 80089fc:	e7e4      	b.n	80089c8 <_scanf_float+0x15c>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	0610      	lsls	r0, r2, #24
 8008a02:	f57f af65 	bpl.w	80088d0 <_scanf_float+0x64>
 8008a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a0a:	e7f4      	b.n	80089f6 <_scanf_float+0x18a>
 8008a0c:	f1ba 0f00 	cmp.w	sl, #0
 8008a10:	d10e      	bne.n	8008a30 <_scanf_float+0x1c4>
 8008a12:	f1b9 0f00 	cmp.w	r9, #0
 8008a16:	d10e      	bne.n	8008a36 <_scanf_float+0x1ca>
 8008a18:	6822      	ldr	r2, [r4, #0]
 8008a1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a22:	d108      	bne.n	8008a36 <_scanf_float+0x1ca>
 8008a24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a28:	f04f 0a01 	mov.w	sl, #1
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	e7e3      	b.n	80089f8 <_scanf_float+0x18c>
 8008a30:	f1ba 0f02 	cmp.w	sl, #2
 8008a34:	d055      	beq.n	8008ae2 <_scanf_float+0x276>
 8008a36:	2d01      	cmp	r5, #1
 8008a38:	d002      	beq.n	8008a40 <_scanf_float+0x1d4>
 8008a3a:	2d04      	cmp	r5, #4
 8008a3c:	f47f af48 	bne.w	80088d0 <_scanf_float+0x64>
 8008a40:	3501      	adds	r5, #1
 8008a42:	b2ed      	uxtb	r5, r5
 8008a44:	e7d8      	b.n	80089f8 <_scanf_float+0x18c>
 8008a46:	f1ba 0f01 	cmp.w	sl, #1
 8008a4a:	f47f af41 	bne.w	80088d0 <_scanf_float+0x64>
 8008a4e:	f04f 0a02 	mov.w	sl, #2
 8008a52:	e7d1      	b.n	80089f8 <_scanf_float+0x18c>
 8008a54:	b97d      	cbnz	r5, 8008a76 <_scanf_float+0x20a>
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	f47f af3c 	bne.w	80088d6 <_scanf_float+0x6a>
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a68:	f47f af39 	bne.w	80088de <_scanf_float+0x72>
 8008a6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a70:	2501      	movs	r5, #1
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	e7c0      	b.n	80089f8 <_scanf_float+0x18c>
 8008a76:	2d03      	cmp	r5, #3
 8008a78:	d0e2      	beq.n	8008a40 <_scanf_float+0x1d4>
 8008a7a:	2d05      	cmp	r5, #5
 8008a7c:	e7de      	b.n	8008a3c <_scanf_float+0x1d0>
 8008a7e:	2d02      	cmp	r5, #2
 8008a80:	f47f af26 	bne.w	80088d0 <_scanf_float+0x64>
 8008a84:	2503      	movs	r5, #3
 8008a86:	e7b7      	b.n	80089f8 <_scanf_float+0x18c>
 8008a88:	2d06      	cmp	r5, #6
 8008a8a:	f47f af21 	bne.w	80088d0 <_scanf_float+0x64>
 8008a8e:	2507      	movs	r5, #7
 8008a90:	e7b2      	b.n	80089f8 <_scanf_float+0x18c>
 8008a92:	6822      	ldr	r2, [r4, #0]
 8008a94:	0591      	lsls	r1, r2, #22
 8008a96:	f57f af1b 	bpl.w	80088d0 <_scanf_float+0x64>
 8008a9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a9e:	6022      	str	r2, [r4, #0]
 8008aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008aa4:	e7a8      	b.n	80089f8 <_scanf_float+0x18c>
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008aac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ab0:	d006      	beq.n	8008ac0 <_scanf_float+0x254>
 8008ab2:	0550      	lsls	r0, r2, #21
 8008ab4:	f57f af0c 	bpl.w	80088d0 <_scanf_float+0x64>
 8008ab8:	f1b9 0f00 	cmp.w	r9, #0
 8008abc:	f43f af0f 	beq.w	80088de <_scanf_float+0x72>
 8008ac0:	0591      	lsls	r1, r2, #22
 8008ac2:	bf58      	it	pl
 8008ac4:	9901      	ldrpl	r1, [sp, #4]
 8008ac6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008aca:	bf58      	it	pl
 8008acc:	eba9 0101 	subpl.w	r1, r9, r1
 8008ad0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ad4:	f04f 0900 	mov.w	r9, #0
 8008ad8:	bf58      	it	pl
 8008ada:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ade:	6022      	str	r2, [r4, #0]
 8008ae0:	e78a      	b.n	80089f8 <_scanf_float+0x18c>
 8008ae2:	f04f 0a03 	mov.w	sl, #3
 8008ae6:	e787      	b.n	80089f8 <_scanf_float+0x18c>
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4640      	mov	r0, r8
 8008aec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008af0:	4798      	blx	r3
 8008af2:	2800      	cmp	r0, #0
 8008af4:	f43f aedf 	beq.w	80088b6 <_scanf_float+0x4a>
 8008af8:	e6ea      	b.n	80088d0 <_scanf_float+0x64>
 8008afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008afe:	463a      	mov	r2, r7
 8008b00:	4640      	mov	r0, r8
 8008b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b06:	4798      	blx	r3
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	e6ec      	b.n	80088ea <_scanf_float+0x7e>
 8008b10:	1e6b      	subs	r3, r5, #1
 8008b12:	2b06      	cmp	r3, #6
 8008b14:	d825      	bhi.n	8008b62 <_scanf_float+0x2f6>
 8008b16:	2d02      	cmp	r5, #2
 8008b18:	d836      	bhi.n	8008b88 <_scanf_float+0x31c>
 8008b1a:	455e      	cmp	r6, fp
 8008b1c:	f67f aee8 	bls.w	80088f0 <_scanf_float+0x84>
 8008b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b24:	463a      	mov	r2, r7
 8008b26:	4640      	mov	r0, r8
 8008b28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b2c:	4798      	blx	r3
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	e7f1      	b.n	8008b1a <_scanf_float+0x2ae>
 8008b36:	9802      	ldr	r0, [sp, #8]
 8008b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b40:	463a      	mov	r2, r7
 8008b42:	9002      	str	r0, [sp, #8]
 8008b44:	4640      	mov	r0, r8
 8008b46:	4798      	blx	r3
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	6123      	str	r3, [r4, #16]
 8008b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b52:	fa5f fa8a 	uxtb.w	sl, sl
 8008b56:	f1ba 0f02 	cmp.w	sl, #2
 8008b5a:	d1ec      	bne.n	8008b36 <_scanf_float+0x2ca>
 8008b5c:	3d03      	subs	r5, #3
 8008b5e:	b2ed      	uxtb	r5, r5
 8008b60:	1b76      	subs	r6, r6, r5
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	05da      	lsls	r2, r3, #23
 8008b66:	d52f      	bpl.n	8008bc8 <_scanf_float+0x35c>
 8008b68:	055b      	lsls	r3, r3, #21
 8008b6a:	d510      	bpl.n	8008b8e <_scanf_float+0x322>
 8008b6c:	455e      	cmp	r6, fp
 8008b6e:	f67f aebf 	bls.w	80088f0 <_scanf_float+0x84>
 8008b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b76:	463a      	mov	r2, r7
 8008b78:	4640      	mov	r0, r8
 8008b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b7e:	4798      	blx	r3
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	e7f1      	b.n	8008b6c <_scanf_float+0x300>
 8008b88:	46aa      	mov	sl, r5
 8008b8a:	9602      	str	r6, [sp, #8]
 8008b8c:	e7df      	b.n	8008b4e <_scanf_float+0x2e2>
 8008b8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	2965      	cmp	r1, #101	; 0x65
 8008b96:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	d00c      	beq.n	8008bbc <_scanf_float+0x350>
 8008ba2:	2945      	cmp	r1, #69	; 0x45
 8008ba4:	d00a      	beq.n	8008bbc <_scanf_float+0x350>
 8008ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008baa:	463a      	mov	r2, r7
 8008bac:	4640      	mov	r0, r8
 8008bae:	4798      	blx	r3
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	1eb5      	subs	r5, r6, #2
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	463a      	mov	r2, r7
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc4:	4798      	blx	r3
 8008bc6:	462e      	mov	r6, r5
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	f015 0510 	ands.w	r5, r5, #16
 8008bce:	d155      	bne.n	8008c7c <_scanf_float+0x410>
 8008bd0:	7035      	strb	r5, [r6, #0]
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bdc:	d11b      	bne.n	8008c16 <_scanf_float+0x3aa>
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	454b      	cmp	r3, r9
 8008be2:	eba3 0209 	sub.w	r2, r3, r9
 8008be6:	d123      	bne.n	8008c30 <_scanf_float+0x3c4>
 8008be8:	2200      	movs	r2, #0
 8008bea:	4659      	mov	r1, fp
 8008bec:	4640      	mov	r0, r8
 8008bee:	f000 ffc3 	bl	8009b78 <_strtod_r>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	f012 0f02 	tst.w	r2, #2
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	d021      	beq.n	8008c46 <_scanf_float+0x3da>
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	9903      	ldr	r1, [sp, #12]
 8008c06:	600a      	str	r2, [r1, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	e9c3 6700 	strd	r6, r7, [r3]
 8008c0e:	68e3      	ldr	r3, [r4, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	60e3      	str	r3, [r4, #12]
 8008c14:	e66d      	b.n	80088f2 <_scanf_float+0x86>
 8008c16:	9b04      	ldr	r3, [sp, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0e5      	beq.n	8008be8 <_scanf_float+0x37c>
 8008c1c:	9905      	ldr	r1, [sp, #20]
 8008c1e:	230a      	movs	r3, #10
 8008c20:	462a      	mov	r2, r5
 8008c22:	4640      	mov	r0, r8
 8008c24:	3101      	adds	r1, #1
 8008c26:	f001 f835 	bl	8009c94 <_strtol_r>
 8008c2a:	9b04      	ldr	r3, [sp, #16]
 8008c2c:	9e05      	ldr	r6, [sp, #20]
 8008c2e:	1ac2      	subs	r2, r0, r3
 8008c30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c34:	429e      	cmp	r6, r3
 8008c36:	bf28      	it	cs
 8008c38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4910      	ldr	r1, [pc, #64]	; (8008c80 <_scanf_float+0x414>)
 8008c40:	f000 f92e 	bl	8008ea0 <siprintf>
 8008c44:	e7d0      	b.n	8008be8 <_scanf_float+0x37c>
 8008c46:	f012 0f04 	tst.w	r2, #4
 8008c4a:	f103 0204 	add.w	r2, r3, #4
 8008c4e:	d1d9      	bne.n	8008c04 <_scanf_float+0x398>
 8008c50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008c54:	f8cc 2000 	str.w	r2, [ip]
 8008c58:	f8d3 8000 	ldr.w	r8, [r3]
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	f7f7 fed4 	bl	8000a0c <__aeabi_dcmpun>
 8008c64:	b128      	cbz	r0, 8008c72 <_scanf_float+0x406>
 8008c66:	4807      	ldr	r0, [pc, #28]	; (8008c84 <_scanf_float+0x418>)
 8008c68:	f000 f916 	bl	8008e98 <nanf>
 8008c6c:	f8c8 0000 	str.w	r0, [r8]
 8008c70:	e7cd      	b.n	8008c0e <_scanf_float+0x3a2>
 8008c72:	4630      	mov	r0, r6
 8008c74:	4639      	mov	r1, r7
 8008c76:	f7f7 ff27 	bl	8000ac8 <__aeabi_d2f>
 8008c7a:	e7f7      	b.n	8008c6c <_scanf_float+0x400>
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	e638      	b.n	80088f2 <_scanf_float+0x86>
 8008c80:	0800c890 	.word	0x0800c890
 8008c84:	0800cc98 	.word	0x0800cc98

08008c88 <iprintf>:
 8008c88:	b40f      	push	{r0, r1, r2, r3}
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <iprintf+0x2c>)
 8008c8c:	b513      	push	{r0, r1, r4, lr}
 8008c8e:	681c      	ldr	r4, [r3, #0]
 8008c90:	b124      	cbz	r4, 8008c9c <iprintf+0x14>
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	b913      	cbnz	r3, 8008c9c <iprintf+0x14>
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7ff f818 	bl	8007ccc <__sinit>
 8008c9c:	ab05      	add	r3, sp, #20
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	9a04      	ldr	r2, [sp, #16]
 8008ca2:	68a1      	ldr	r1, [r4, #8]
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	f003 fac1 	bl	800c22c <_vfiprintf_r>
 8008caa:	b002      	add	sp, #8
 8008cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb0:	b004      	add	sp, #16
 8008cb2:	4770      	bx	lr
 8008cb4:	20000010 	.word	0x20000010

08008cb8 <_puts_r>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	460e      	mov	r6, r1
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	b118      	cbz	r0, 8008cc8 <_puts_r+0x10>
 8008cc0:	6983      	ldr	r3, [r0, #24]
 8008cc2:	b90b      	cbnz	r3, 8008cc8 <_puts_r+0x10>
 8008cc4:	f7ff f802 	bl	8007ccc <__sinit>
 8008cc8:	69ab      	ldr	r3, [r5, #24]
 8008cca:	68ac      	ldr	r4, [r5, #8]
 8008ccc:	b913      	cbnz	r3, 8008cd4 <_puts_r+0x1c>
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7fe fffc 	bl	8007ccc <__sinit>
 8008cd4:	4b2c      	ldr	r3, [pc, #176]	; (8008d88 <_puts_r+0xd0>)
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d120      	bne.n	8008d1c <_puts_r+0x64>
 8008cda:	686c      	ldr	r4, [r5, #4]
 8008cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cde:	07db      	lsls	r3, r3, #31
 8008ce0:	d405      	bmi.n	8008cee <_puts_r+0x36>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	0598      	lsls	r0, r3, #22
 8008ce6:	d402      	bmi.n	8008cee <_puts_r+0x36>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f7ff f8b2 	bl	8007e52 <__retarget_lock_acquire_recursive>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	0719      	lsls	r1, r3, #28
 8008cf2:	d51d      	bpl.n	8008d30 <_puts_r+0x78>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	b1db      	cbz	r3, 8008d30 <_puts_r+0x78>
 8008cf8:	3e01      	subs	r6, #1
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d00:	3b01      	subs	r3, #1
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	bb39      	cbnz	r1, 8008d56 <_puts_r+0x9e>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	da38      	bge.n	8008d7c <_puts_r+0xc4>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	210a      	movs	r1, #10
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 ffc2 	bl	8009c98 <__swbuf_r>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d011      	beq.n	8008d3c <_puts_r+0x84>
 8008d18:	250a      	movs	r5, #10
 8008d1a:	e011      	b.n	8008d40 <_puts_r+0x88>
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <_puts_r+0xd4>)
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d101      	bne.n	8008d26 <_puts_r+0x6e>
 8008d22:	68ac      	ldr	r4, [r5, #8]
 8008d24:	e7da      	b.n	8008cdc <_puts_r+0x24>
 8008d26:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <_puts_r+0xd8>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	68ec      	ldreq	r4, [r5, #12]
 8008d2e:	e7d5      	b.n	8008cdc <_puts_r+0x24>
 8008d30:	4621      	mov	r1, r4
 8008d32:	4628      	mov	r0, r5
 8008d34:	f001 f814 	bl	8009d60 <__swsetup_r>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d0dd      	beq.n	8008cf8 <_puts_r+0x40>
 8008d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8008d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d42:	07da      	lsls	r2, r3, #31
 8008d44:	d405      	bmi.n	8008d52 <_puts_r+0x9a>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	059b      	lsls	r3, r3, #22
 8008d4a:	d402      	bmi.n	8008d52 <_puts_r+0x9a>
 8008d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d4e:	f7ff f881 	bl	8007e54 <__retarget_lock_release_recursive>
 8008d52:	4628      	mov	r0, r5
 8008d54:	bd70      	pop	{r4, r5, r6, pc}
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da04      	bge.n	8008d64 <_puts_r+0xac>
 8008d5a:	69a2      	ldr	r2, [r4, #24]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	dc06      	bgt.n	8008d6e <_puts_r+0xb6>
 8008d60:	290a      	cmp	r1, #10
 8008d62:	d004      	beq.n	8008d6e <_puts_r+0xb6>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	7019      	strb	r1, [r3, #0]
 8008d6c:	e7c5      	b.n	8008cfa <_puts_r+0x42>
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 ff91 	bl	8009c98 <__swbuf_r>
 8008d76:	3001      	adds	r0, #1
 8008d78:	d1bf      	bne.n	8008cfa <_puts_r+0x42>
 8008d7a:	e7df      	b.n	8008d3c <_puts_r+0x84>
 8008d7c:	250a      	movs	r5, #10
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	6022      	str	r2, [r4, #0]
 8008d84:	701d      	strb	r5, [r3, #0]
 8008d86:	e7db      	b.n	8008d40 <_puts_r+0x88>
 8008d88:	0800c818 	.word	0x0800c818
 8008d8c:	0800c838 	.word	0x0800c838
 8008d90:	0800c7f8 	.word	0x0800c7f8

08008d94 <puts>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <puts+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f7ff bf8d 	b.w	8008cb8 <_puts_r>
 8008d9e:	bf00      	nop
 8008da0:	20000010 	.word	0x20000010

08008da4 <cleanup_glue>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	6809      	ldr	r1, [r1, #0]
 8008daa:	4605      	mov	r5, r0
 8008dac:	b109      	cbz	r1, 8008db2 <cleanup_glue+0xe>
 8008dae:	f7ff fff9 	bl	8008da4 <cleanup_glue>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dba:	f003 b86b 	b.w	800be94 <_free_r>
	...

08008dc0 <_reclaim_reent>:
 8008dc0:	4b2c      	ldr	r3, [pc, #176]	; (8008e74 <_reclaim_reent+0xb4>)
 8008dc2:	b570      	push	{r4, r5, r6, lr}
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d051      	beq.n	8008e70 <_reclaim_reent+0xb0>
 8008dcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dce:	b143      	cbz	r3, 8008de2 <_reclaim_reent+0x22>
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d14a      	bne.n	8008e6c <_reclaim_reent+0xac>
 8008dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd8:	6819      	ldr	r1, [r3, #0]
 8008dda:	b111      	cbz	r1, 8008de2 <_reclaim_reent+0x22>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f003 f859 	bl	800be94 <_free_r>
 8008de2:	6961      	ldr	r1, [r4, #20]
 8008de4:	b111      	cbz	r1, 8008dec <_reclaim_reent+0x2c>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f003 f854 	bl	800be94 <_free_r>
 8008dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dee:	b111      	cbz	r1, 8008df6 <_reclaim_reent+0x36>
 8008df0:	4620      	mov	r0, r4
 8008df2:	f003 f84f 	bl	800be94 <_free_r>
 8008df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008df8:	b111      	cbz	r1, 8008e00 <_reclaim_reent+0x40>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f003 f84a 	bl	800be94 <_free_r>
 8008e00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e02:	b111      	cbz	r1, 8008e0a <_reclaim_reent+0x4a>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f003 f845 	bl	800be94 <_free_r>
 8008e0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e0c:	b111      	cbz	r1, 8008e14 <_reclaim_reent+0x54>
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f003 f840 	bl	800be94 <_free_r>
 8008e14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e16:	b111      	cbz	r1, 8008e1e <_reclaim_reent+0x5e>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f003 f83b 	bl	800be94 <_free_r>
 8008e1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e20:	b111      	cbz	r1, 8008e28 <_reclaim_reent+0x68>
 8008e22:	4620      	mov	r0, r4
 8008e24:	f003 f836 	bl	800be94 <_free_r>
 8008e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e2a:	b111      	cbz	r1, 8008e32 <_reclaim_reent+0x72>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f003 f831 	bl	800be94 <_free_r>
 8008e32:	69a3      	ldr	r3, [r4, #24]
 8008e34:	b1e3      	cbz	r3, 8008e70 <_reclaim_reent+0xb0>
 8008e36:	4620      	mov	r0, r4
 8008e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e3a:	4798      	blx	r3
 8008e3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e3e:	b1b9      	cbz	r1, 8008e70 <_reclaim_reent+0xb0>
 8008e40:	4620      	mov	r0, r4
 8008e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e46:	f7ff bfad 	b.w	8008da4 <cleanup_glue>
 8008e4a:	5949      	ldr	r1, [r1, r5]
 8008e4c:	b941      	cbnz	r1, 8008e60 <_reclaim_reent+0xa0>
 8008e4e:	3504      	adds	r5, #4
 8008e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e52:	2d80      	cmp	r5, #128	; 0x80
 8008e54:	68d9      	ldr	r1, [r3, #12]
 8008e56:	d1f8      	bne.n	8008e4a <_reclaim_reent+0x8a>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f003 f81b 	bl	800be94 <_free_r>
 8008e5e:	e7ba      	b.n	8008dd6 <_reclaim_reent+0x16>
 8008e60:	680e      	ldr	r6, [r1, #0]
 8008e62:	4620      	mov	r0, r4
 8008e64:	f003 f816 	bl	800be94 <_free_r>
 8008e68:	4631      	mov	r1, r6
 8008e6a:	e7ef      	b.n	8008e4c <_reclaim_reent+0x8c>
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	e7ef      	b.n	8008e50 <_reclaim_reent+0x90>
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	bf00      	nop
 8008e74:	20000010 	.word	0x20000010

08008e78 <_sbrk_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4d05      	ldr	r5, [pc, #20]	; (8008e94 <_sbrk_r+0x1c>)
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 fd9e 	bl	80019c4 <_sbrk>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_sbrk_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_sbrk_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	200013a4 	.word	0x200013a4

08008e98 <nanf>:
 8008e98:	4800      	ldr	r0, [pc, #0]	; (8008e9c <nanf+0x4>)
 8008e9a:	4770      	bx	lr
 8008e9c:	7fc00000 	.word	0x7fc00000

08008ea0 <siprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ea6:	b500      	push	{lr}
 8008ea8:	b09c      	sub	sp, #112	; 0x70
 8008eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8008eac:	9002      	str	r0, [sp, #8]
 8008eae:	9006      	str	r0, [sp, #24]
 8008eb0:	9107      	str	r1, [sp, #28]
 8008eb2:	9104      	str	r1, [sp, #16]
 8008eb4:	4808      	ldr	r0, [pc, #32]	; (8008ed8 <siprintf+0x38>)
 8008eb6:	4909      	ldr	r1, [pc, #36]	; (8008edc <siprintf+0x3c>)
 8008eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebc:	9105      	str	r1, [sp, #20]
 8008ebe:	6800      	ldr	r0, [r0, #0]
 8008ec0:	a902      	add	r1, sp, #8
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	f003 f88a 	bl	800bfdc <_svfiprintf_r>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	9b02      	ldr	r3, [sp, #8]
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	b01c      	add	sp, #112	; 0x70
 8008ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed4:	b003      	add	sp, #12
 8008ed6:	4770      	bx	lr
 8008ed8:	20000010 	.word	0x20000010
 8008edc:	ffff0208 	.word	0xffff0208

08008ee0 <__sread>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	f003 fad0 	bl	800c48c <_read_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	bfab      	itete	ge
 8008ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef4:	181b      	addge	r3, r3, r0
 8008ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008efa:	bfac      	ite	ge
 8008efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008efe:	81a3      	strhlt	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__swrite>:
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	461f      	mov	r7, r3
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	05db      	lsls	r3, r3, #23
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4616      	mov	r6, r2
 8008f12:	d505      	bpl.n	8008f20 <__swrite+0x1e>
 8008f14:	2302      	movs	r3, #2
 8008f16:	2200      	movs	r2, #0
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	f002 fa42 	bl	800b3a4 <_lseek_r>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	4632      	mov	r2, r6
 8008f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	f000 bf01 	b.w	8009d3c <_write_r>

08008f3a <__sseek>:
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f42:	f002 fa2f 	bl	800b3a4 <_lseek_r>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	bf15      	itete	ne
 8008f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f56:	81a3      	strheq	r3, [r4, #12]
 8008f58:	bf18      	it	ne
 8008f5a:	81a3      	strhne	r3, [r4, #12]
 8008f5c:	bd10      	pop	{r4, pc}

08008f5e <__sclose>:
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 bf6b 	b.w	8009e3c <_close_r>

08008f66 <sulp>:
 8008f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	4690      	mov	r8, r2
 8008f6e:	f002 fe35 	bl	800bbdc <__ulp>
 8008f72:	4604      	mov	r4, r0
 8008f74:	460d      	mov	r5, r1
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	d011      	beq.n	8008fa0 <sulp+0x3a>
 8008f7c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dd0b      	ble.n	8008fa0 <sulp+0x3a>
 8008f88:	2400      	movs	r4, #0
 8008f8a:	051b      	lsls	r3, r3, #20
 8008f8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f94:	4622      	mov	r2, r4
 8008f96:	462b      	mov	r3, r5
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fa8 <_strtod_l>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	469b      	mov	fp, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	b09f      	sub	sp, #124	; 0x7c
 8008fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb4:	4b9e      	ldr	r3, [pc, #632]	; (8009230 <_strtod_l+0x288>)
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	681f      	ldr	r7, [r3, #0]
 8008fba:	460e      	mov	r6, r1
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	9215      	str	r2, [sp, #84]	; 0x54
 8008fc0:	f7f7 f8c6 	bl	8000150 <strlen>
 8008fc4:	f04f 0800 	mov.w	r8, #0
 8008fc8:	4604      	mov	r4, r0
 8008fca:	f04f 0900 	mov.w	r9, #0
 8008fce:	9619      	str	r6, [sp, #100]	; 0x64
 8008fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	2a2b      	cmp	r2, #43	; 0x2b
 8008fd6:	d04c      	beq.n	8009072 <_strtod_l+0xca>
 8008fd8:	d83a      	bhi.n	8009050 <_strtod_l+0xa8>
 8008fda:	2a0d      	cmp	r2, #13
 8008fdc:	d833      	bhi.n	8009046 <_strtod_l+0x9e>
 8008fde:	2a08      	cmp	r2, #8
 8008fe0:	d833      	bhi.n	800904a <_strtod_l+0xa2>
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	d03d      	beq.n	8009062 <_strtod_l+0xba>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8008fea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008fec:	782b      	ldrb	r3, [r5, #0]
 8008fee:	2b30      	cmp	r3, #48	; 0x30
 8008ff0:	f040 80aa 	bne.w	8009148 <_strtod_l+0x1a0>
 8008ff4:	786b      	ldrb	r3, [r5, #1]
 8008ff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ffa:	2b58      	cmp	r3, #88	; 0x58
 8008ffc:	d166      	bne.n	80090cc <_strtod_l+0x124>
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	4650      	mov	r0, sl
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	ab1a      	add	r3, sp, #104	; 0x68
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4a8a      	ldr	r2, [pc, #552]	; (8009234 <_strtod_l+0x28c>)
 800900a:	f8cd b008 	str.w	fp, [sp, #8]
 800900e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009010:	a919      	add	r1, sp, #100	; 0x64
 8009012:	f001 fec5 	bl	800ada0 <__gethex>
 8009016:	f010 0607 	ands.w	r6, r0, #7
 800901a:	4604      	mov	r4, r0
 800901c:	d005      	beq.n	800902a <_strtod_l+0x82>
 800901e:	2e06      	cmp	r6, #6
 8009020:	d129      	bne.n	8009076 <_strtod_l+0xce>
 8009022:	2300      	movs	r3, #0
 8009024:	3501      	adds	r5, #1
 8009026:	9519      	str	r5, [sp, #100]	; 0x64
 8009028:	930a      	str	r3, [sp, #40]	; 0x28
 800902a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 858a 	bne.w	8009b46 <_strtod_l+0xb9e>
 8009032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009034:	b1d3      	cbz	r3, 800906c <_strtod_l+0xc4>
 8009036:	4642      	mov	r2, r8
 8009038:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800903c:	4610      	mov	r0, r2
 800903e:	4619      	mov	r1, r3
 8009040:	b01f      	add	sp, #124	; 0x7c
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	2a20      	cmp	r2, #32
 8009048:	d1cd      	bne.n	8008fe6 <_strtod_l+0x3e>
 800904a:	3301      	adds	r3, #1
 800904c:	9319      	str	r3, [sp, #100]	; 0x64
 800904e:	e7bf      	b.n	8008fd0 <_strtod_l+0x28>
 8009050:	2a2d      	cmp	r2, #45	; 0x2d
 8009052:	d1c8      	bne.n	8008fe6 <_strtod_l+0x3e>
 8009054:	2201      	movs	r2, #1
 8009056:	920a      	str	r2, [sp, #40]	; 0x28
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	9219      	str	r2, [sp, #100]	; 0x64
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1c3      	bne.n	8008fea <_strtod_l+0x42>
 8009062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009064:	9619      	str	r6, [sp, #100]	; 0x64
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 856b 	bne.w	8009b42 <_strtod_l+0xb9a>
 800906c:	4642      	mov	r2, r8
 800906e:	464b      	mov	r3, r9
 8009070:	e7e4      	b.n	800903c <_strtod_l+0x94>
 8009072:	2200      	movs	r2, #0
 8009074:	e7ef      	b.n	8009056 <_strtod_l+0xae>
 8009076:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009078:	b13a      	cbz	r2, 800908a <_strtod_l+0xe2>
 800907a:	2135      	movs	r1, #53	; 0x35
 800907c:	a81c      	add	r0, sp, #112	; 0x70
 800907e:	f002 feb1 	bl	800bde4 <__copybits>
 8009082:	4650      	mov	r0, sl
 8009084:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009086:	f002 fa79 	bl	800b57c <_Bfree>
 800908a:	3e01      	subs	r6, #1
 800908c:	2e04      	cmp	r6, #4
 800908e:	d806      	bhi.n	800909e <_strtod_l+0xf6>
 8009090:	e8df f006 	tbb	[pc, r6]
 8009094:	1714030a 	.word	0x1714030a
 8009098:	0a          	.byte	0x0a
 8009099:	00          	.byte	0x00
 800909a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800909e:	0721      	lsls	r1, r4, #28
 80090a0:	d5c3      	bpl.n	800902a <_strtod_l+0x82>
 80090a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80090a6:	e7c0      	b.n	800902a <_strtod_l+0x82>
 80090a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090aa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80090ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80090ba:	e7f0      	b.n	800909e <_strtod_l+0xf6>
 80090bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009238 <_strtod_l+0x290>
 80090c0:	e7ed      	b.n	800909e <_strtod_l+0xf6>
 80090c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80090c6:	f04f 38ff 	mov.w	r8, #4294967295
 80090ca:	e7e8      	b.n	800909e <_strtod_l+0xf6>
 80090cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	9219      	str	r2, [sp, #100]	; 0x64
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	d0f9      	beq.n	80090cc <_strtod_l+0x124>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0a6      	beq.n	800902a <_strtod_l+0x82>
 80090dc:	2301      	movs	r3, #1
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090e2:	220a      	movs	r2, #10
 80090e4:	9308      	str	r3, [sp, #32]
 80090e6:	2300      	movs	r3, #0
 80090e8:	469b      	mov	fp, r3
 80090ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80090ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80090f0:	7805      	ldrb	r5, [r0, #0]
 80090f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80090f6:	b2d9      	uxtb	r1, r3
 80090f8:	2909      	cmp	r1, #9
 80090fa:	d927      	bls.n	800914c <_strtod_l+0x1a4>
 80090fc:	4622      	mov	r2, r4
 80090fe:	4639      	mov	r1, r7
 8009100:	f003 f9dc 	bl	800c4bc <strncmp>
 8009104:	2800      	cmp	r0, #0
 8009106:	d033      	beq.n	8009170 <_strtod_l+0x1c8>
 8009108:	2000      	movs	r0, #0
 800910a:	462a      	mov	r2, r5
 800910c:	465c      	mov	r4, fp
 800910e:	4603      	mov	r3, r0
 8009110:	9004      	str	r0, [sp, #16]
 8009112:	2a65      	cmp	r2, #101	; 0x65
 8009114:	d001      	beq.n	800911a <_strtod_l+0x172>
 8009116:	2a45      	cmp	r2, #69	; 0x45
 8009118:	d114      	bne.n	8009144 <_strtod_l+0x19c>
 800911a:	b91c      	cbnz	r4, 8009124 <_strtod_l+0x17c>
 800911c:	9a07      	ldr	r2, [sp, #28]
 800911e:	4302      	orrs	r2, r0
 8009120:	d09f      	beq.n	8009062 <_strtod_l+0xba>
 8009122:	2400      	movs	r4, #0
 8009124:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009126:	1c72      	adds	r2, r6, #1
 8009128:	9219      	str	r2, [sp, #100]	; 0x64
 800912a:	7872      	ldrb	r2, [r6, #1]
 800912c:	2a2b      	cmp	r2, #43	; 0x2b
 800912e:	d079      	beq.n	8009224 <_strtod_l+0x27c>
 8009130:	2a2d      	cmp	r2, #45	; 0x2d
 8009132:	f000 8083 	beq.w	800923c <_strtod_l+0x294>
 8009136:	2700      	movs	r7, #0
 8009138:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800913c:	2909      	cmp	r1, #9
 800913e:	f240 8083 	bls.w	8009248 <_strtod_l+0x2a0>
 8009142:	9619      	str	r6, [sp, #100]	; 0x64
 8009144:	2500      	movs	r5, #0
 8009146:	e09f      	b.n	8009288 <_strtod_l+0x2e0>
 8009148:	2300      	movs	r3, #0
 800914a:	e7c8      	b.n	80090de <_strtod_l+0x136>
 800914c:	f1bb 0f08 	cmp.w	fp, #8
 8009150:	bfd5      	itete	le
 8009152:	9906      	ldrle	r1, [sp, #24]
 8009154:	9905      	ldrgt	r1, [sp, #20]
 8009156:	fb02 3301 	mlale	r3, r2, r1, r3
 800915a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800915e:	f100 0001 	add.w	r0, r0, #1
 8009162:	bfd4      	ite	le
 8009164:	9306      	strle	r3, [sp, #24]
 8009166:	9305      	strgt	r3, [sp, #20]
 8009168:	f10b 0b01 	add.w	fp, fp, #1
 800916c:	9019      	str	r0, [sp, #100]	; 0x64
 800916e:	e7be      	b.n	80090ee <_strtod_l+0x146>
 8009170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009172:	191a      	adds	r2, r3, r4
 8009174:	9219      	str	r2, [sp, #100]	; 0x64
 8009176:	5d1a      	ldrb	r2, [r3, r4]
 8009178:	f1bb 0f00 	cmp.w	fp, #0
 800917c:	d036      	beq.n	80091ec <_strtod_l+0x244>
 800917e:	465c      	mov	r4, fp
 8009180:	9004      	str	r0, [sp, #16]
 8009182:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d912      	bls.n	80091b0 <_strtod_l+0x208>
 800918a:	2301      	movs	r3, #1
 800918c:	e7c1      	b.n	8009112 <_strtod_l+0x16a>
 800918e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009190:	3001      	adds	r0, #1
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	9219      	str	r2, [sp, #100]	; 0x64
 8009196:	785a      	ldrb	r2, [r3, #1]
 8009198:	2a30      	cmp	r2, #48	; 0x30
 800919a:	d0f8      	beq.n	800918e <_strtod_l+0x1e6>
 800919c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	f200 84d5 	bhi.w	8009b50 <_strtod_l+0xba8>
 80091a6:	9004      	str	r0, [sp, #16]
 80091a8:	2000      	movs	r0, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091ae:	9308      	str	r3, [sp, #32]
 80091b0:	3a30      	subs	r2, #48	; 0x30
 80091b2:	f100 0301 	add.w	r3, r0, #1
 80091b6:	d013      	beq.n	80091e0 <_strtod_l+0x238>
 80091b8:	9904      	ldr	r1, [sp, #16]
 80091ba:	1905      	adds	r5, r0, r4
 80091bc:	4419      	add	r1, r3
 80091be:	9104      	str	r1, [sp, #16]
 80091c0:	4623      	mov	r3, r4
 80091c2:	210a      	movs	r1, #10
 80091c4:	42ab      	cmp	r3, r5
 80091c6:	d113      	bne.n	80091f0 <_strtod_l+0x248>
 80091c8:	1823      	adds	r3, r4, r0
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	f104 0401 	add.w	r4, r4, #1
 80091d0:	4404      	add	r4, r0
 80091d2:	dc1b      	bgt.n	800920c <_strtod_l+0x264>
 80091d4:	230a      	movs	r3, #10
 80091d6:	9906      	ldr	r1, [sp, #24]
 80091d8:	fb03 2301 	mla	r3, r3, r1, r2
 80091dc:	9306      	str	r3, [sp, #24]
 80091de:	2300      	movs	r3, #0
 80091e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091e2:	4618      	mov	r0, r3
 80091e4:	1c51      	adds	r1, r2, #1
 80091e6:	9119      	str	r1, [sp, #100]	; 0x64
 80091e8:	7852      	ldrb	r2, [r2, #1]
 80091ea:	e7ca      	b.n	8009182 <_strtod_l+0x1da>
 80091ec:	4658      	mov	r0, fp
 80091ee:	e7d3      	b.n	8009198 <_strtod_l+0x1f0>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	dc04      	bgt.n	80091fe <_strtod_l+0x256>
 80091f4:	9f06      	ldr	r7, [sp, #24]
 80091f6:	434f      	muls	r7, r1
 80091f8:	9706      	str	r7, [sp, #24]
 80091fa:	3301      	adds	r3, #1
 80091fc:	e7e2      	b.n	80091c4 <_strtod_l+0x21c>
 80091fe:	1c5f      	adds	r7, r3, #1
 8009200:	2f10      	cmp	r7, #16
 8009202:	bfde      	ittt	le
 8009204:	9f05      	ldrle	r7, [sp, #20]
 8009206:	434f      	mulle	r7, r1
 8009208:	9705      	strle	r7, [sp, #20]
 800920a:	e7f6      	b.n	80091fa <_strtod_l+0x252>
 800920c:	2c10      	cmp	r4, #16
 800920e:	bfdf      	itttt	le
 8009210:	230a      	movle	r3, #10
 8009212:	9905      	ldrle	r1, [sp, #20]
 8009214:	fb03 2301 	mlale	r3, r3, r1, r2
 8009218:	9305      	strle	r3, [sp, #20]
 800921a:	e7e0      	b.n	80091de <_strtod_l+0x236>
 800921c:	2300      	movs	r3, #0
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	2301      	movs	r3, #1
 8009222:	e77b      	b.n	800911c <_strtod_l+0x174>
 8009224:	2700      	movs	r7, #0
 8009226:	1cb2      	adds	r2, r6, #2
 8009228:	9219      	str	r2, [sp, #100]	; 0x64
 800922a:	78b2      	ldrb	r2, [r6, #2]
 800922c:	e784      	b.n	8009138 <_strtod_l+0x190>
 800922e:	bf00      	nop
 8009230:	0800cae0 	.word	0x0800cae0
 8009234:	0800c898 	.word	0x0800c898
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	2701      	movs	r7, #1
 800923e:	e7f2      	b.n	8009226 <_strtod_l+0x27e>
 8009240:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009242:	1c51      	adds	r1, r2, #1
 8009244:	9119      	str	r1, [sp, #100]	; 0x64
 8009246:	7852      	ldrb	r2, [r2, #1]
 8009248:	2a30      	cmp	r2, #48	; 0x30
 800924a:	d0f9      	beq.n	8009240 <_strtod_l+0x298>
 800924c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009250:	2908      	cmp	r1, #8
 8009252:	f63f af77 	bhi.w	8009144 <_strtod_l+0x19c>
 8009256:	f04f 0e0a 	mov.w	lr, #10
 800925a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800925e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009260:	9209      	str	r2, [sp, #36]	; 0x24
 8009262:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009264:	1c51      	adds	r1, r2, #1
 8009266:	9119      	str	r1, [sp, #100]	; 0x64
 8009268:	7852      	ldrb	r2, [r2, #1]
 800926a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800926e:	2d09      	cmp	r5, #9
 8009270:	d935      	bls.n	80092de <_strtod_l+0x336>
 8009272:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009274:	1b49      	subs	r1, r1, r5
 8009276:	2908      	cmp	r1, #8
 8009278:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800927c:	dc02      	bgt.n	8009284 <_strtod_l+0x2dc>
 800927e:	4565      	cmp	r5, ip
 8009280:	bfa8      	it	ge
 8009282:	4665      	movge	r5, ip
 8009284:	b107      	cbz	r7, 8009288 <_strtod_l+0x2e0>
 8009286:	426d      	negs	r5, r5
 8009288:	2c00      	cmp	r4, #0
 800928a:	d14c      	bne.n	8009326 <_strtod_l+0x37e>
 800928c:	9907      	ldr	r1, [sp, #28]
 800928e:	4301      	orrs	r1, r0
 8009290:	f47f aecb 	bne.w	800902a <_strtod_l+0x82>
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f aee4 	bne.w	8009062 <_strtod_l+0xba>
 800929a:	2a69      	cmp	r2, #105	; 0x69
 800929c:	d026      	beq.n	80092ec <_strtod_l+0x344>
 800929e:	dc23      	bgt.n	80092e8 <_strtod_l+0x340>
 80092a0:	2a49      	cmp	r2, #73	; 0x49
 80092a2:	d023      	beq.n	80092ec <_strtod_l+0x344>
 80092a4:	2a4e      	cmp	r2, #78	; 0x4e
 80092a6:	f47f aedc 	bne.w	8009062 <_strtod_l+0xba>
 80092aa:	499d      	ldr	r1, [pc, #628]	; (8009520 <_strtod_l+0x578>)
 80092ac:	a819      	add	r0, sp, #100	; 0x64
 80092ae:	f001 ffc5 	bl	800b23c <__match>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f43f aed5 	beq.w	8009062 <_strtod_l+0xba>
 80092b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b28      	cmp	r3, #40	; 0x28
 80092be:	d12c      	bne.n	800931a <_strtod_l+0x372>
 80092c0:	4998      	ldr	r1, [pc, #608]	; (8009524 <_strtod_l+0x57c>)
 80092c2:	aa1c      	add	r2, sp, #112	; 0x70
 80092c4:	a819      	add	r0, sp, #100	; 0x64
 80092c6:	f001 ffcd 	bl	800b264 <__hexnan>
 80092ca:	2805      	cmp	r0, #5
 80092cc:	d125      	bne.n	800931a <_strtod_l+0x372>
 80092ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80092d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80092d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80092dc:	e6a5      	b.n	800902a <_strtod_l+0x82>
 80092de:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80092e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80092e6:	e7bc      	b.n	8009262 <_strtod_l+0x2ba>
 80092e8:	2a6e      	cmp	r2, #110	; 0x6e
 80092ea:	e7dc      	b.n	80092a6 <_strtod_l+0x2fe>
 80092ec:	498e      	ldr	r1, [pc, #568]	; (8009528 <_strtod_l+0x580>)
 80092ee:	a819      	add	r0, sp, #100	; 0x64
 80092f0:	f001 ffa4 	bl	800b23c <__match>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	f43f aeb4 	beq.w	8009062 <_strtod_l+0xba>
 80092fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092fc:	498b      	ldr	r1, [pc, #556]	; (800952c <_strtod_l+0x584>)
 80092fe:	3b01      	subs	r3, #1
 8009300:	a819      	add	r0, sp, #100	; 0x64
 8009302:	9319      	str	r3, [sp, #100]	; 0x64
 8009304:	f001 ff9a 	bl	800b23c <__match>
 8009308:	b910      	cbnz	r0, 8009310 <_strtod_l+0x368>
 800930a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800930c:	3301      	adds	r3, #1
 800930e:	9319      	str	r3, [sp, #100]	; 0x64
 8009310:	f04f 0800 	mov.w	r8, #0
 8009314:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009530 <_strtod_l+0x588>
 8009318:	e687      	b.n	800902a <_strtod_l+0x82>
 800931a:	4886      	ldr	r0, [pc, #536]	; (8009534 <_strtod_l+0x58c>)
 800931c:	f003 f8c8 	bl	800c4b0 <nan>
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	e681      	b.n	800902a <_strtod_l+0x82>
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	f1bb 0f00 	cmp.w	fp, #0
 800932c:	bf08      	it	eq
 800932e:	46a3      	moveq	fp, r4
 8009330:	1aeb      	subs	r3, r5, r3
 8009332:	2c10      	cmp	r4, #16
 8009334:	9806      	ldr	r0, [sp, #24]
 8009336:	4626      	mov	r6, r4
 8009338:	9307      	str	r3, [sp, #28]
 800933a:	bfa8      	it	ge
 800933c:	2610      	movge	r6, #16
 800933e:	f7f7 f851 	bl	80003e4 <__aeabi_ui2d>
 8009342:	2c09      	cmp	r4, #9
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	dd13      	ble.n	8009372 <_strtod_l+0x3ca>
 800934a:	4b7b      	ldr	r3, [pc, #492]	; (8009538 <_strtod_l+0x590>)
 800934c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009350:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009354:	f7f7 f8c0 	bl	80004d8 <__aeabi_dmul>
 8009358:	4680      	mov	r8, r0
 800935a:	9805      	ldr	r0, [sp, #20]
 800935c:	4689      	mov	r9, r1
 800935e:	f7f7 f841 	bl	80003e4 <__aeabi_ui2d>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4640      	mov	r0, r8
 8009368:	4649      	mov	r1, r9
 800936a:	f7f6 feff 	bl	800016c <__adddf3>
 800936e:	4680      	mov	r8, r0
 8009370:	4689      	mov	r9, r1
 8009372:	2c0f      	cmp	r4, #15
 8009374:	dc36      	bgt.n	80093e4 <_strtod_l+0x43c>
 8009376:	9b07      	ldr	r3, [sp, #28]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f43f ae56 	beq.w	800902a <_strtod_l+0x82>
 800937e:	dd22      	ble.n	80093c6 <_strtod_l+0x41e>
 8009380:	2b16      	cmp	r3, #22
 8009382:	dc09      	bgt.n	8009398 <_strtod_l+0x3f0>
 8009384:	496c      	ldr	r1, [pc, #432]	; (8009538 <_strtod_l+0x590>)
 8009386:	4642      	mov	r2, r8
 8009388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800938c:	464b      	mov	r3, r9
 800938e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009392:	f7f7 f8a1 	bl	80004d8 <__aeabi_dmul>
 8009396:	e7c3      	b.n	8009320 <_strtod_l+0x378>
 8009398:	9a07      	ldr	r2, [sp, #28]
 800939a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800939e:	4293      	cmp	r3, r2
 80093a0:	db20      	blt.n	80093e4 <_strtod_l+0x43c>
 80093a2:	4d65      	ldr	r5, [pc, #404]	; (8009538 <_strtod_l+0x590>)
 80093a4:	f1c4 040f 	rsb	r4, r4, #15
 80093a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80093ac:	4642      	mov	r2, r8
 80093ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b2:	464b      	mov	r3, r9
 80093b4:	f7f7 f890 	bl	80004d8 <__aeabi_dmul>
 80093b8:	9b07      	ldr	r3, [sp, #28]
 80093ba:	1b1c      	subs	r4, r3, r4
 80093bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80093c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093c4:	e7e5      	b.n	8009392 <_strtod_l+0x3ea>
 80093c6:	9b07      	ldr	r3, [sp, #28]
 80093c8:	3316      	adds	r3, #22
 80093ca:	db0b      	blt.n	80093e4 <_strtod_l+0x43c>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	4640      	mov	r0, r8
 80093d0:	1b5d      	subs	r5, r3, r5
 80093d2:	4b59      	ldr	r3, [pc, #356]	; (8009538 <_strtod_l+0x590>)
 80093d4:	4649      	mov	r1, r9
 80093d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80093da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093de:	f7f7 f9a5 	bl	800072c <__aeabi_ddiv>
 80093e2:	e79d      	b.n	8009320 <_strtod_l+0x378>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	1ba6      	subs	r6, r4, r6
 80093e8:	441e      	add	r6, r3
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	dd74      	ble.n	80094d8 <_strtod_l+0x530>
 80093ee:	f016 030f 	ands.w	r3, r6, #15
 80093f2:	d00a      	beq.n	800940a <_strtod_l+0x462>
 80093f4:	4950      	ldr	r1, [pc, #320]	; (8009538 <_strtod_l+0x590>)
 80093f6:	4642      	mov	r2, r8
 80093f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009400:	464b      	mov	r3, r9
 8009402:	f7f7 f869 	bl	80004d8 <__aeabi_dmul>
 8009406:	4680      	mov	r8, r0
 8009408:	4689      	mov	r9, r1
 800940a:	f036 060f 	bics.w	r6, r6, #15
 800940e:	d052      	beq.n	80094b6 <_strtod_l+0x50e>
 8009410:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009414:	dd27      	ble.n	8009466 <_strtod_l+0x4be>
 8009416:	f04f 0b00 	mov.w	fp, #0
 800941a:	f8cd b010 	str.w	fp, [sp, #16]
 800941e:	f8cd b020 	str.w	fp, [sp, #32]
 8009422:	f8cd b018 	str.w	fp, [sp, #24]
 8009426:	2322      	movs	r3, #34	; 0x22
 8009428:	f04f 0800 	mov.w	r8, #0
 800942c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009530 <_strtod_l+0x588>
 8009430:	f8ca 3000 	str.w	r3, [sl]
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f adf7 	beq.w	800902a <_strtod_l+0x82>
 800943c:	4650      	mov	r0, sl
 800943e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009440:	f002 f89c 	bl	800b57c <_Bfree>
 8009444:	4650      	mov	r0, sl
 8009446:	9906      	ldr	r1, [sp, #24]
 8009448:	f002 f898 	bl	800b57c <_Bfree>
 800944c:	4650      	mov	r0, sl
 800944e:	9904      	ldr	r1, [sp, #16]
 8009450:	f002 f894 	bl	800b57c <_Bfree>
 8009454:	4650      	mov	r0, sl
 8009456:	9908      	ldr	r1, [sp, #32]
 8009458:	f002 f890 	bl	800b57c <_Bfree>
 800945c:	4659      	mov	r1, fp
 800945e:	4650      	mov	r0, sl
 8009460:	f002 f88c 	bl	800b57c <_Bfree>
 8009464:	e5e1      	b.n	800902a <_strtod_l+0x82>
 8009466:	4b35      	ldr	r3, [pc, #212]	; (800953c <_strtod_l+0x594>)
 8009468:	4640      	mov	r0, r8
 800946a:	9305      	str	r3, [sp, #20]
 800946c:	2300      	movs	r3, #0
 800946e:	4649      	mov	r1, r9
 8009470:	461f      	mov	r7, r3
 8009472:	1136      	asrs	r6, r6, #4
 8009474:	2e01      	cmp	r6, #1
 8009476:	dc21      	bgt.n	80094bc <_strtod_l+0x514>
 8009478:	b10b      	cbz	r3, 800947e <_strtod_l+0x4d6>
 800947a:	4680      	mov	r8, r0
 800947c:	4689      	mov	r9, r1
 800947e:	4b2f      	ldr	r3, [pc, #188]	; (800953c <_strtod_l+0x594>)
 8009480:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009484:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009488:	4642      	mov	r2, r8
 800948a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800948e:	464b      	mov	r3, r9
 8009490:	f7f7 f822 	bl	80004d8 <__aeabi_dmul>
 8009494:	4b26      	ldr	r3, [pc, #152]	; (8009530 <_strtod_l+0x588>)
 8009496:	460a      	mov	r2, r1
 8009498:	400b      	ands	r3, r1
 800949a:	4929      	ldr	r1, [pc, #164]	; (8009540 <_strtod_l+0x598>)
 800949c:	4680      	mov	r8, r0
 800949e:	428b      	cmp	r3, r1
 80094a0:	d8b9      	bhi.n	8009416 <_strtod_l+0x46e>
 80094a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094a6:	428b      	cmp	r3, r1
 80094a8:	bf86      	itte	hi
 80094aa:	f04f 38ff 	movhi.w	r8, #4294967295
 80094ae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009544 <_strtod_l+0x59c>
 80094b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80094b6:	2300      	movs	r3, #0
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	e07f      	b.n	80095bc <_strtod_l+0x614>
 80094bc:	07f2      	lsls	r2, r6, #31
 80094be:	d505      	bpl.n	80094cc <_strtod_l+0x524>
 80094c0:	9b05      	ldr	r3, [sp, #20]
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f7 f807 	bl	80004d8 <__aeabi_dmul>
 80094ca:	2301      	movs	r3, #1
 80094cc:	9a05      	ldr	r2, [sp, #20]
 80094ce:	3701      	adds	r7, #1
 80094d0:	3208      	adds	r2, #8
 80094d2:	1076      	asrs	r6, r6, #1
 80094d4:	9205      	str	r2, [sp, #20]
 80094d6:	e7cd      	b.n	8009474 <_strtod_l+0x4cc>
 80094d8:	d0ed      	beq.n	80094b6 <_strtod_l+0x50e>
 80094da:	4276      	negs	r6, r6
 80094dc:	f016 020f 	ands.w	r2, r6, #15
 80094e0:	d00a      	beq.n	80094f8 <_strtod_l+0x550>
 80094e2:	4b15      	ldr	r3, [pc, #84]	; (8009538 <_strtod_l+0x590>)
 80094e4:	4640      	mov	r0, r8
 80094e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ea:	4649      	mov	r1, r9
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f7 f91c 	bl	800072c <__aeabi_ddiv>
 80094f4:	4680      	mov	r8, r0
 80094f6:	4689      	mov	r9, r1
 80094f8:	1136      	asrs	r6, r6, #4
 80094fa:	d0dc      	beq.n	80094b6 <_strtod_l+0x50e>
 80094fc:	2e1f      	cmp	r6, #31
 80094fe:	dd23      	ble.n	8009548 <_strtod_l+0x5a0>
 8009500:	f04f 0b00 	mov.w	fp, #0
 8009504:	f8cd b010 	str.w	fp, [sp, #16]
 8009508:	f8cd b020 	str.w	fp, [sp, #32]
 800950c:	f8cd b018 	str.w	fp, [sp, #24]
 8009510:	2322      	movs	r3, #34	; 0x22
 8009512:	f04f 0800 	mov.w	r8, #0
 8009516:	f04f 0900 	mov.w	r9, #0
 800951a:	f8ca 3000 	str.w	r3, [sl]
 800951e:	e789      	b.n	8009434 <_strtod_l+0x48c>
 8009520:	0800c869 	.word	0x0800c869
 8009524:	0800c8ac 	.word	0x0800c8ac
 8009528:	0800c861 	.word	0x0800c861
 800952c:	0800c9ec 	.word	0x0800c9ec
 8009530:	7ff00000 	.word	0x7ff00000
 8009534:	0800cc98 	.word	0x0800cc98
 8009538:	0800cb78 	.word	0x0800cb78
 800953c:	0800cb50 	.word	0x0800cb50
 8009540:	7ca00000 	.word	0x7ca00000
 8009544:	7fefffff 	.word	0x7fefffff
 8009548:	f016 0310 	ands.w	r3, r6, #16
 800954c:	bf18      	it	ne
 800954e:	236a      	movne	r3, #106	; 0x6a
 8009550:	4640      	mov	r0, r8
 8009552:	9305      	str	r3, [sp, #20]
 8009554:	4649      	mov	r1, r9
 8009556:	2300      	movs	r3, #0
 8009558:	4fb0      	ldr	r7, [pc, #704]	; (800981c <_strtod_l+0x874>)
 800955a:	07f2      	lsls	r2, r6, #31
 800955c:	d504      	bpl.n	8009568 <_strtod_l+0x5c0>
 800955e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009562:	f7f6 ffb9 	bl	80004d8 <__aeabi_dmul>
 8009566:	2301      	movs	r3, #1
 8009568:	1076      	asrs	r6, r6, #1
 800956a:	f107 0708 	add.w	r7, r7, #8
 800956e:	d1f4      	bne.n	800955a <_strtod_l+0x5b2>
 8009570:	b10b      	cbz	r3, 8009576 <_strtod_l+0x5ce>
 8009572:	4680      	mov	r8, r0
 8009574:	4689      	mov	r9, r1
 8009576:	9b05      	ldr	r3, [sp, #20]
 8009578:	b1c3      	cbz	r3, 80095ac <_strtod_l+0x604>
 800957a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800957e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009582:	2b00      	cmp	r3, #0
 8009584:	4649      	mov	r1, r9
 8009586:	dd11      	ble.n	80095ac <_strtod_l+0x604>
 8009588:	2b1f      	cmp	r3, #31
 800958a:	f340 8127 	ble.w	80097dc <_strtod_l+0x834>
 800958e:	2b34      	cmp	r3, #52	; 0x34
 8009590:	bfd8      	it	le
 8009592:	f04f 33ff 	movle.w	r3, #4294967295
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	bfcf      	iteee	gt
 800959c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80095a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80095a4:	fa03 f202 	lslle.w	r2, r3, r2
 80095a8:	ea02 0901 	andle.w	r9, r2, r1
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1a1      	bne.n	8009500 <_strtod_l+0x558>
 80095bc:	9b06      	ldr	r3, [sp, #24]
 80095be:	465a      	mov	r2, fp
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4650      	mov	r0, sl
 80095c4:	4623      	mov	r3, r4
 80095c6:	9908      	ldr	r1, [sp, #32]
 80095c8:	f002 f840 	bl	800b64c <__s2b>
 80095cc:	9008      	str	r0, [sp, #32]
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f43f af21 	beq.w	8009416 <_strtod_l+0x46e>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	f04f 0b00 	mov.w	fp, #0
 80095da:	1b5d      	subs	r5, r3, r5
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	f8cd b010 	str.w	fp, [sp, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfb4      	ite	lt
 80095e6:	462b      	movlt	r3, r5
 80095e8:	2300      	movge	r3, #0
 80095ea:	930e      	str	r3, [sp, #56]	; 0x38
 80095ec:	9b07      	ldr	r3, [sp, #28]
 80095ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095f2:	9314      	str	r3, [sp, #80]	; 0x50
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	4650      	mov	r0, sl
 80095f8:	6859      	ldr	r1, [r3, #4]
 80095fa:	f001 ff7f 	bl	800b4fc <_Balloc>
 80095fe:	9006      	str	r0, [sp, #24]
 8009600:	2800      	cmp	r0, #0
 8009602:	f43f af10 	beq.w	8009426 <_strtod_l+0x47e>
 8009606:	9b08      	ldr	r3, [sp, #32]
 8009608:	300c      	adds	r0, #12
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	f103 010c 	add.w	r1, r3, #12
 8009610:	3202      	adds	r2, #2
 8009612:	0092      	lsls	r2, r2, #2
 8009614:	f7fe fc1f 	bl	8007e56 <memcpy>
 8009618:	ab1c      	add	r3, sp, #112	; 0x70
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	ab1b      	add	r3, sp, #108	; 0x6c
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4642      	mov	r2, r8
 8009622:	464b      	mov	r3, r9
 8009624:	4650      	mov	r0, sl
 8009626:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800962a:	f002 fb51 	bl	800bcd0 <__d2b>
 800962e:	901a      	str	r0, [sp, #104]	; 0x68
 8009630:	2800      	cmp	r0, #0
 8009632:	f43f aef8 	beq.w	8009426 <_strtod_l+0x47e>
 8009636:	2101      	movs	r1, #1
 8009638:	4650      	mov	r0, sl
 800963a:	f002 f89f 	bl	800b77c <__i2b>
 800963e:	4603      	mov	r3, r0
 8009640:	9004      	str	r0, [sp, #16]
 8009642:	2800      	cmp	r0, #0
 8009644:	f43f aeef 	beq.w	8009426 <_strtod_l+0x47e>
 8009648:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800964a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800964c:	2d00      	cmp	r5, #0
 800964e:	bfab      	itete	ge
 8009650:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009652:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009654:	18ee      	addge	r6, r5, r3
 8009656:	1b5c      	sublt	r4, r3, r5
 8009658:	9b05      	ldr	r3, [sp, #20]
 800965a:	bfa8      	it	ge
 800965c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800965e:	eba5 0503 	sub.w	r5, r5, r3
 8009662:	4415      	add	r5, r2
 8009664:	4b6e      	ldr	r3, [pc, #440]	; (8009820 <_strtod_l+0x878>)
 8009666:	f105 35ff 	add.w	r5, r5, #4294967295
 800966a:	bfb8      	it	lt
 800966c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800966e:	429d      	cmp	r5, r3
 8009670:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009674:	f280 80c4 	bge.w	8009800 <_strtod_l+0x858>
 8009678:	1b5b      	subs	r3, r3, r5
 800967a:	2b1f      	cmp	r3, #31
 800967c:	f04f 0701 	mov.w	r7, #1
 8009680:	eba2 0203 	sub.w	r2, r2, r3
 8009684:	f300 80b1 	bgt.w	80097ea <_strtod_l+0x842>
 8009688:	2500      	movs	r5, #0
 800968a:	fa07 f303 	lsl.w	r3, r7, r3
 800968e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009690:	18b7      	adds	r7, r6, r2
 8009692:	9b05      	ldr	r3, [sp, #20]
 8009694:	42be      	cmp	r6, r7
 8009696:	4414      	add	r4, r2
 8009698:	441c      	add	r4, r3
 800969a:	4633      	mov	r3, r6
 800969c:	bfa8      	it	ge
 800969e:	463b      	movge	r3, r7
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	bfa8      	it	ge
 80096a4:	4623      	movge	r3, r4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfc2      	ittt	gt
 80096aa:	1aff      	subgt	r7, r7, r3
 80096ac:	1ae4      	subgt	r4, r4, r3
 80096ae:	1af6      	subgt	r6, r6, r3
 80096b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dd17      	ble.n	80096e6 <_strtod_l+0x73e>
 80096b6:	461a      	mov	r2, r3
 80096b8:	4650      	mov	r0, sl
 80096ba:	9904      	ldr	r1, [sp, #16]
 80096bc:	f002 f91c 	bl	800b8f8 <__pow5mult>
 80096c0:	9004      	str	r0, [sp, #16]
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f43f aeaf 	beq.w	8009426 <_strtod_l+0x47e>
 80096c8:	4601      	mov	r1, r0
 80096ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096cc:	4650      	mov	r0, sl
 80096ce:	f002 f86b 	bl	800b7a8 <__multiply>
 80096d2:	9009      	str	r0, [sp, #36]	; 0x24
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f43f aea6 	beq.w	8009426 <_strtod_l+0x47e>
 80096da:	4650      	mov	r0, sl
 80096dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096de:	f001 ff4d 	bl	800b57c <_Bfree>
 80096e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e4:	931a      	str	r3, [sp, #104]	; 0x68
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	f300 808e 	bgt.w	8009808 <_strtod_l+0x860>
 80096ec:	9b07      	ldr	r3, [sp, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dd08      	ble.n	8009704 <_strtod_l+0x75c>
 80096f2:	4650      	mov	r0, sl
 80096f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096f6:	9906      	ldr	r1, [sp, #24]
 80096f8:	f002 f8fe 	bl	800b8f8 <__pow5mult>
 80096fc:	9006      	str	r0, [sp, #24]
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f ae91 	beq.w	8009426 <_strtod_l+0x47e>
 8009704:	2c00      	cmp	r4, #0
 8009706:	dd08      	ble.n	800971a <_strtod_l+0x772>
 8009708:	4622      	mov	r2, r4
 800970a:	4650      	mov	r0, sl
 800970c:	9906      	ldr	r1, [sp, #24]
 800970e:	f002 f94d 	bl	800b9ac <__lshift>
 8009712:	9006      	str	r0, [sp, #24]
 8009714:	2800      	cmp	r0, #0
 8009716:	f43f ae86 	beq.w	8009426 <_strtod_l+0x47e>
 800971a:	2e00      	cmp	r6, #0
 800971c:	dd08      	ble.n	8009730 <_strtod_l+0x788>
 800971e:	4632      	mov	r2, r6
 8009720:	4650      	mov	r0, sl
 8009722:	9904      	ldr	r1, [sp, #16]
 8009724:	f002 f942 	bl	800b9ac <__lshift>
 8009728:	9004      	str	r0, [sp, #16]
 800972a:	2800      	cmp	r0, #0
 800972c:	f43f ae7b 	beq.w	8009426 <_strtod_l+0x47e>
 8009730:	4650      	mov	r0, sl
 8009732:	9a06      	ldr	r2, [sp, #24]
 8009734:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009736:	f002 f9c5 	bl	800bac4 <__mdiff>
 800973a:	4683      	mov	fp, r0
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f ae72 	beq.w	8009426 <_strtod_l+0x47e>
 8009742:	2400      	movs	r4, #0
 8009744:	68c3      	ldr	r3, [r0, #12]
 8009746:	9904      	ldr	r1, [sp, #16]
 8009748:	60c4      	str	r4, [r0, #12]
 800974a:	930b      	str	r3, [sp, #44]	; 0x2c
 800974c:	f002 f99e 	bl	800ba8c <__mcmp>
 8009750:	42a0      	cmp	r0, r4
 8009752:	da6b      	bge.n	800982c <_strtod_l+0x884>
 8009754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009756:	ea53 0308 	orrs.w	r3, r3, r8
 800975a:	f040 8091 	bne.w	8009880 <_strtod_l+0x8d8>
 800975e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 808c 	bne.w	8009880 <_strtod_l+0x8d8>
 8009768:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800976c:	0d1b      	lsrs	r3, r3, #20
 800976e:	051b      	lsls	r3, r3, #20
 8009770:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009774:	f240 8084 	bls.w	8009880 <_strtod_l+0x8d8>
 8009778:	f8db 3014 	ldr.w	r3, [fp, #20]
 800977c:	b91b      	cbnz	r3, 8009786 <_strtod_l+0x7de>
 800977e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009782:	2b01      	cmp	r3, #1
 8009784:	dd7c      	ble.n	8009880 <_strtod_l+0x8d8>
 8009786:	4659      	mov	r1, fp
 8009788:	2201      	movs	r2, #1
 800978a:	4650      	mov	r0, sl
 800978c:	f002 f90e 	bl	800b9ac <__lshift>
 8009790:	9904      	ldr	r1, [sp, #16]
 8009792:	4683      	mov	fp, r0
 8009794:	f002 f97a 	bl	800ba8c <__mcmp>
 8009798:	2800      	cmp	r0, #0
 800979a:	dd71      	ble.n	8009880 <_strtod_l+0x8d8>
 800979c:	9905      	ldr	r1, [sp, #20]
 800979e:	464b      	mov	r3, r9
 80097a0:	4a20      	ldr	r2, [pc, #128]	; (8009824 <_strtod_l+0x87c>)
 80097a2:	2900      	cmp	r1, #0
 80097a4:	f000 808c 	beq.w	80098c0 <_strtod_l+0x918>
 80097a8:	ea02 0109 	and.w	r1, r2, r9
 80097ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097b0:	f300 8086 	bgt.w	80098c0 <_strtod_l+0x918>
 80097b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097b8:	f77f aeaa 	ble.w	8009510 <_strtod_l+0x568>
 80097bc:	4640      	mov	r0, r8
 80097be:	4649      	mov	r1, r9
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <_strtod_l+0x880>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	f7f6 fe88 	bl	80004d8 <__aeabi_dmul>
 80097c8:	460b      	mov	r3, r1
 80097ca:	4303      	orrs	r3, r0
 80097cc:	bf08      	it	eq
 80097ce:	2322      	moveq	r3, #34	; 0x22
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	bf08      	it	eq
 80097d6:	f8ca 3000 	streq.w	r3, [sl]
 80097da:	e62f      	b.n	800943c <_strtod_l+0x494>
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	ea03 0808 	and.w	r8, r3, r8
 80097e8:	e6e0      	b.n	80095ac <_strtod_l+0x604>
 80097ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80097ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80097f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80097f6:	35e2      	adds	r5, #226	; 0xe2
 80097f8:	fa07 f505 	lsl.w	r5, r7, r5
 80097fc:	970f      	str	r7, [sp, #60]	; 0x3c
 80097fe:	e747      	b.n	8009690 <_strtod_l+0x6e8>
 8009800:	2301      	movs	r3, #1
 8009802:	2500      	movs	r5, #0
 8009804:	930f      	str	r3, [sp, #60]	; 0x3c
 8009806:	e743      	b.n	8009690 <_strtod_l+0x6e8>
 8009808:	463a      	mov	r2, r7
 800980a:	4650      	mov	r0, sl
 800980c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800980e:	f002 f8cd 	bl	800b9ac <__lshift>
 8009812:	901a      	str	r0, [sp, #104]	; 0x68
 8009814:	2800      	cmp	r0, #0
 8009816:	f47f af69 	bne.w	80096ec <_strtod_l+0x744>
 800981a:	e604      	b.n	8009426 <_strtod_l+0x47e>
 800981c:	0800c8c0 	.word	0x0800c8c0
 8009820:	fffffc02 	.word	0xfffffc02
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	39500000 	.word	0x39500000
 800982c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009830:	d165      	bne.n	80098fe <_strtod_l+0x956>
 8009832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009838:	b35a      	cbz	r2, 8009892 <_strtod_l+0x8ea>
 800983a:	4a99      	ldr	r2, [pc, #612]	; (8009aa0 <_strtod_l+0xaf8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d12b      	bne.n	8009898 <_strtod_l+0x8f0>
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	4641      	mov	r1, r8
 8009844:	b303      	cbz	r3, 8009888 <_strtod_l+0x8e0>
 8009846:	464a      	mov	r2, r9
 8009848:	4b96      	ldr	r3, [pc, #600]	; (8009aa4 <_strtod_l+0xafc>)
 800984a:	4013      	ands	r3, r2
 800984c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009850:	f04f 32ff 	mov.w	r2, #4294967295
 8009854:	d81b      	bhi.n	800988e <_strtod_l+0x8e6>
 8009856:	0d1b      	lsrs	r3, r3, #20
 8009858:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	4299      	cmp	r1, r3
 8009862:	d119      	bne.n	8009898 <_strtod_l+0x8f0>
 8009864:	4b90      	ldr	r3, [pc, #576]	; (8009aa8 <_strtod_l+0xb00>)
 8009866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009868:	429a      	cmp	r2, r3
 800986a:	d102      	bne.n	8009872 <_strtod_l+0x8ca>
 800986c:	3101      	adds	r1, #1
 800986e:	f43f adda 	beq.w	8009426 <_strtod_l+0x47e>
 8009872:	f04f 0800 	mov.w	r8, #0
 8009876:	4b8b      	ldr	r3, [pc, #556]	; (8009aa4 <_strtod_l+0xafc>)
 8009878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800987a:	401a      	ands	r2, r3
 800987c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009880:	9b05      	ldr	r3, [sp, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d19a      	bne.n	80097bc <_strtod_l+0x814>
 8009886:	e5d9      	b.n	800943c <_strtod_l+0x494>
 8009888:	f04f 33ff 	mov.w	r3, #4294967295
 800988c:	e7e8      	b.n	8009860 <_strtod_l+0x8b8>
 800988e:	4613      	mov	r3, r2
 8009890:	e7e6      	b.n	8009860 <_strtod_l+0x8b8>
 8009892:	ea53 0308 	orrs.w	r3, r3, r8
 8009896:	d081      	beq.n	800979c <_strtod_l+0x7f4>
 8009898:	b1e5      	cbz	r5, 80098d4 <_strtod_l+0x92c>
 800989a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989c:	421d      	tst	r5, r3
 800989e:	d0ef      	beq.n	8009880 <_strtod_l+0x8d8>
 80098a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	9a05      	ldr	r2, [sp, #20]
 80098a8:	b1c3      	cbz	r3, 80098dc <_strtod_l+0x934>
 80098aa:	f7ff fb5c 	bl	8008f66 <sulp>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b6:	f7f6 fc59 	bl	800016c <__adddf3>
 80098ba:	4680      	mov	r8, r0
 80098bc:	4689      	mov	r9, r1
 80098be:	e7df      	b.n	8009880 <_strtod_l+0x8d8>
 80098c0:	4013      	ands	r3, r2
 80098c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80098ca:	f04f 38ff 	mov.w	r8, #4294967295
 80098ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80098d2:	e7d5      	b.n	8009880 <_strtod_l+0x8d8>
 80098d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098d6:	ea13 0f08 	tst.w	r3, r8
 80098da:	e7e0      	b.n	800989e <_strtod_l+0x8f6>
 80098dc:	f7ff fb43 	bl	8008f66 <sulp>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e8:	f7f6 fc3e 	bl	8000168 <__aeabi_dsub>
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	4680      	mov	r8, r0
 80098f2:	4689      	mov	r9, r1
 80098f4:	f7f7 f858 	bl	80009a8 <__aeabi_dcmpeq>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0c1      	beq.n	8009880 <_strtod_l+0x8d8>
 80098fc:	e608      	b.n	8009510 <_strtod_l+0x568>
 80098fe:	4658      	mov	r0, fp
 8009900:	9904      	ldr	r1, [sp, #16]
 8009902:	f002 fa41 	bl	800bd88 <__ratio>
 8009906:	2200      	movs	r2, #0
 8009908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	f7f7 f85e 	bl	80009d0 <__aeabi_dcmple>
 8009914:	2800      	cmp	r0, #0
 8009916:	d070      	beq.n	80099fa <_strtod_l+0xa52>
 8009918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d042      	beq.n	80099a4 <_strtod_l+0x9fc>
 800991e:	2600      	movs	r6, #0
 8009920:	4f62      	ldr	r7, [pc, #392]	; (8009aac <_strtod_l+0xb04>)
 8009922:	4d62      	ldr	r5, [pc, #392]	; (8009aac <_strtod_l+0xb04>)
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800992a:	0d1b      	lsrs	r3, r3, #20
 800992c:	051b      	lsls	r3, r3, #20
 800992e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009932:	4b5f      	ldr	r3, [pc, #380]	; (8009ab0 <_strtod_l+0xb08>)
 8009934:	429a      	cmp	r2, r3
 8009936:	f040 80c3 	bne.w	8009ac0 <_strtod_l+0xb18>
 800993a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993c:	4640      	mov	r0, r8
 800993e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009942:	4649      	mov	r1, r9
 8009944:	f002 f94a 	bl	800bbdc <__ulp>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f6 fdc2 	bl	80004d8 <__aeabi_dmul>
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	f7f6 fc08 	bl	800016c <__adddf3>
 800995c:	460b      	mov	r3, r1
 800995e:	4951      	ldr	r1, [pc, #324]	; (8009aa4 <_strtod_l+0xafc>)
 8009960:	4a54      	ldr	r2, [pc, #336]	; (8009ab4 <_strtod_l+0xb0c>)
 8009962:	4019      	ands	r1, r3
 8009964:	4291      	cmp	r1, r2
 8009966:	4680      	mov	r8, r0
 8009968:	d95d      	bls.n	8009a26 <_strtod_l+0xa7e>
 800996a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800996c:	4b4e      	ldr	r3, [pc, #312]	; (8009aa8 <_strtod_l+0xb00>)
 800996e:	429a      	cmp	r2, r3
 8009970:	d103      	bne.n	800997a <_strtod_l+0x9d2>
 8009972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009974:	3301      	adds	r3, #1
 8009976:	f43f ad56 	beq.w	8009426 <_strtod_l+0x47e>
 800997a:	f04f 38ff 	mov.w	r8, #4294967295
 800997e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009aa8 <_strtod_l+0xb00>
 8009982:	4650      	mov	r0, sl
 8009984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009986:	f001 fdf9 	bl	800b57c <_Bfree>
 800998a:	4650      	mov	r0, sl
 800998c:	9906      	ldr	r1, [sp, #24]
 800998e:	f001 fdf5 	bl	800b57c <_Bfree>
 8009992:	4650      	mov	r0, sl
 8009994:	9904      	ldr	r1, [sp, #16]
 8009996:	f001 fdf1 	bl	800b57c <_Bfree>
 800999a:	4659      	mov	r1, fp
 800999c:	4650      	mov	r0, sl
 800999e:	f001 fded 	bl	800b57c <_Bfree>
 80099a2:	e627      	b.n	80095f4 <_strtod_l+0x64c>
 80099a4:	f1b8 0f00 	cmp.w	r8, #0
 80099a8:	d119      	bne.n	80099de <_strtod_l+0xa36>
 80099aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b0:	b9e3      	cbnz	r3, 80099ec <_strtod_l+0xa44>
 80099b2:	2200      	movs	r2, #0
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <_strtod_l+0xb04>)
 80099ba:	f7f6 ffff 	bl	80009bc <__aeabi_dcmplt>
 80099be:	b9c8      	cbnz	r0, 80099f4 <_strtod_l+0xa4c>
 80099c0:	2200      	movs	r2, #0
 80099c2:	4630      	mov	r0, r6
 80099c4:	4639      	mov	r1, r7
 80099c6:	4b3c      	ldr	r3, [pc, #240]	; (8009ab8 <_strtod_l+0xb10>)
 80099c8:	f7f6 fd86 	bl	80004d8 <__aeabi_dmul>
 80099cc:	4604      	mov	r4, r0
 80099ce:	460d      	mov	r5, r1
 80099d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80099d4:	9416      	str	r4, [sp, #88]	; 0x58
 80099d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80099d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80099dc:	e7a2      	b.n	8009924 <_strtod_l+0x97c>
 80099de:	f1b8 0f01 	cmp.w	r8, #1
 80099e2:	d103      	bne.n	80099ec <_strtod_l+0xa44>
 80099e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f43f ad92 	beq.w	8009510 <_strtod_l+0x568>
 80099ec:	2600      	movs	r6, #0
 80099ee:	2400      	movs	r4, #0
 80099f0:	4f32      	ldr	r7, [pc, #200]	; (8009abc <_strtod_l+0xb14>)
 80099f2:	e796      	b.n	8009922 <_strtod_l+0x97a>
 80099f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80099f6:	4d30      	ldr	r5, [pc, #192]	; (8009ab8 <_strtod_l+0xb10>)
 80099f8:	e7ea      	b.n	80099d0 <_strtod_l+0xa28>
 80099fa:	4b2f      	ldr	r3, [pc, #188]	; (8009ab8 <_strtod_l+0xb10>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fd69 	bl	80004d8 <__aeabi_dmul>
 8009a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	b933      	cbnz	r3, 8009a1c <_strtod_l+0xa74>
 8009a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a12:	9010      	str	r0, [sp, #64]	; 0x40
 8009a14:	9311      	str	r3, [sp, #68]	; 0x44
 8009a16:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009a1a:	e783      	b.n	8009924 <_strtod_l+0x97c>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009a24:	e7f7      	b.n	8009a16 <_strtod_l+0xa6e>
 8009a26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009a2a:	9b05      	ldr	r3, [sp, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1a8      	bne.n	8009982 <_strtod_l+0x9da>
 8009a30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a36:	0d1b      	lsrs	r3, r3, #20
 8009a38:	051b      	lsls	r3, r3, #20
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d1a1      	bne.n	8009982 <_strtod_l+0x9da>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f7 f891 	bl	8000b68 <__aeabi_d2lz>
 8009a46:	f7f6 fd19 	bl	800047c <__aeabi_l2d>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fb89 	bl	8000168 <__aeabi_dsub>
 8009a56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a5c:	ea43 0308 	orr.w	r3, r3, r8
 8009a60:	4313      	orrs	r3, r2
 8009a62:	4604      	mov	r4, r0
 8009a64:	460d      	mov	r5, r1
 8009a66:	d066      	beq.n	8009b36 <_strtod_l+0xb8e>
 8009a68:	a309      	add	r3, pc, #36	; (adr r3, 8009a90 <_strtod_l+0xae8>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 ffa5 	bl	80009bc <__aeabi_dcmplt>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f47f ace2 	bne.w	800943c <_strtod_l+0x494>
 8009a78:	a307      	add	r3, pc, #28	; (adr r3, 8009a98 <_strtod_l+0xaf0>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7f6 ffb9 	bl	80009f8 <__aeabi_dcmpgt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f af7b 	beq.w	8009982 <_strtod_l+0x9da>
 8009a8c:	e4d6      	b.n	800943c <_strtod_l+0x494>
 8009a8e:	bf00      	nop
 8009a90:	94a03595 	.word	0x94a03595
 8009a94:	3fdfffff 	.word	0x3fdfffff
 8009a98:	35afe535 	.word	0x35afe535
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	000fffff 	.word	0x000fffff
 8009aa4:	7ff00000 	.word	0x7ff00000
 8009aa8:	7fefffff 	.word	0x7fefffff
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	7fe00000 	.word	0x7fe00000
 8009ab4:	7c9fffff 	.word	0x7c9fffff
 8009ab8:	3fe00000 	.word	0x3fe00000
 8009abc:	bff00000 	.word	0xbff00000
 8009ac0:	9b05      	ldr	r3, [sp, #20]
 8009ac2:	b313      	cbz	r3, 8009b0a <_strtod_l+0xb62>
 8009ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ac6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009aca:	d81e      	bhi.n	8009b0a <_strtod_l+0xb62>
 8009acc:	a326      	add	r3, pc, #152	; (adr r3, 8009b68 <_strtod_l+0xbc0>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 ff7b 	bl	80009d0 <__aeabi_dcmple>
 8009ada:	b190      	cbz	r0, 8009b02 <_strtod_l+0xb5a>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7f6 ffd2 	bl	8000a88 <__aeabi_d2uiz>
 8009ae4:	2801      	cmp	r0, #1
 8009ae6:	bf38      	it	cc
 8009ae8:	2001      	movcc	r0, #1
 8009aea:	f7f6 fc7b 	bl	80003e4 <__aeabi_ui2d>
 8009aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	b9d3      	cbnz	r3, 8009b2c <_strtod_l+0xb84>
 8009af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009afa:	9012      	str	r0, [sp, #72]	; 0x48
 8009afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009afe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009b08:	1a9f      	subs	r7, r3, r2
 8009b0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b0e:	f002 f865 	bl	800bbdc <__ulp>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 fcdd 	bl	80004d8 <__aeabi_dmul>
 8009b1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b22:	f7f6 fb23 	bl	800016c <__adddf3>
 8009b26:	4680      	mov	r8, r0
 8009b28:	4689      	mov	r9, r1
 8009b2a:	e77e      	b.n	8009a2a <_strtod_l+0xa82>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009b34:	e7e3      	b.n	8009afe <_strtod_l+0xb56>
 8009b36:	a30e      	add	r3, pc, #56	; (adr r3, 8009b70 <_strtod_l+0xbc8>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 ff3e 	bl	80009bc <__aeabi_dcmplt>
 8009b40:	e7a1      	b.n	8009a86 <_strtod_l+0xade>
 8009b42:	2300      	movs	r3, #0
 8009b44:	930a      	str	r3, [sp, #40]	; 0x28
 8009b46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	f7ff ba71 	b.w	8009032 <_strtod_l+0x8a>
 8009b50:	2a65      	cmp	r2, #101	; 0x65
 8009b52:	f43f ab63 	beq.w	800921c <_strtod_l+0x274>
 8009b56:	2a45      	cmp	r2, #69	; 0x45
 8009b58:	f43f ab60 	beq.w	800921c <_strtod_l+0x274>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f7ff bb95 	b.w	800928c <_strtod_l+0x2e4>
 8009b62:	bf00      	nop
 8009b64:	f3af 8000 	nop.w
 8009b68:	ffc00000 	.word	0xffc00000
 8009b6c:	41dfffff 	.word	0x41dfffff
 8009b70:	94a03595 	.word	0x94a03595
 8009b74:	3fcfffff 	.word	0x3fcfffff

08009b78 <_strtod_r>:
 8009b78:	4b01      	ldr	r3, [pc, #4]	; (8009b80 <_strtod_r+0x8>)
 8009b7a:	f7ff ba15 	b.w	8008fa8 <_strtod_l>
 8009b7e:	bf00      	nop
 8009b80:	20000078 	.word	0x20000078

08009b84 <strtod>:
 8009b84:	460a      	mov	r2, r1
 8009b86:	4601      	mov	r1, r0
 8009b88:	4802      	ldr	r0, [pc, #8]	; (8009b94 <strtod+0x10>)
 8009b8a:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <strtod+0x14>)
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f7ff ba0b 	b.w	8008fa8 <_strtod_l>
 8009b92:	bf00      	nop
 8009b94:	20000010 	.word	0x20000010
 8009b98:	20000078 	.word	0x20000078

08009b9c <_strtol_l.constprop.0>:
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	d001      	beq.n	8009baa <_strtol_l.constprop.0+0xe>
 8009ba6:	2b24      	cmp	r3, #36	; 0x24
 8009ba8:	d906      	bls.n	8009bb8 <_strtol_l.constprop.0+0x1c>
 8009baa:	f7fe f831 	bl	8007c10 <__errno>
 8009bae:	2316      	movs	r3, #22
 8009bb0:	6003      	str	r3, [r0, #0]
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4f35      	ldr	r7, [pc, #212]	; (8009c90 <_strtol_l.constprop.0+0xf4>)
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc2:	5de6      	ldrb	r6, [r4, r7]
 8009bc4:	f016 0608 	ands.w	r6, r6, #8
 8009bc8:	d1f8      	bne.n	8009bbc <_strtol_l.constprop.0+0x20>
 8009bca:	2c2d      	cmp	r4, #45	; 0x2d
 8009bcc:	d12f      	bne.n	8009c2e <_strtol_l.constprop.0+0x92>
 8009bce:	2601      	movs	r6, #1
 8009bd0:	782c      	ldrb	r4, [r5, #0]
 8009bd2:	1c85      	adds	r5, r0, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d057      	beq.n	8009c88 <_strtol_l.constprop.0+0xec>
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d109      	bne.n	8009bf0 <_strtol_l.constprop.0+0x54>
 8009bdc:	2c30      	cmp	r4, #48	; 0x30
 8009bde:	d107      	bne.n	8009bf0 <_strtol_l.constprop.0+0x54>
 8009be0:	7828      	ldrb	r0, [r5, #0]
 8009be2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009be6:	2858      	cmp	r0, #88	; 0x58
 8009be8:	d149      	bne.n	8009c7e <_strtol_l.constprop.0+0xe2>
 8009bea:	2310      	movs	r3, #16
 8009bec:	786c      	ldrb	r4, [r5, #1]
 8009bee:	3502      	adds	r5, #2
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009bf6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009bfa:	fbbe f9f3 	udiv	r9, lr, r3
 8009bfe:	4638      	mov	r0, r7
 8009c00:	fb03 ea19 	mls	sl, r3, r9, lr
 8009c04:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c08:	f1bc 0f09 	cmp.w	ip, #9
 8009c0c:	d814      	bhi.n	8009c38 <_strtol_l.constprop.0+0x9c>
 8009c0e:	4664      	mov	r4, ip
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	dd22      	ble.n	8009c5a <_strtol_l.constprop.0+0xbe>
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	db1d      	blt.n	8009c54 <_strtol_l.constprop.0+0xb8>
 8009c18:	4581      	cmp	r9, r0
 8009c1a:	d31b      	bcc.n	8009c54 <_strtol_l.constprop.0+0xb8>
 8009c1c:	d101      	bne.n	8009c22 <_strtol_l.constprop.0+0x86>
 8009c1e:	45a2      	cmp	sl, r4
 8009c20:	db18      	blt.n	8009c54 <_strtol_l.constprop.0+0xb8>
 8009c22:	2701      	movs	r7, #1
 8009c24:	fb00 4003 	mla	r0, r0, r3, r4
 8009c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c2c:	e7ea      	b.n	8009c04 <_strtol_l.constprop.0+0x68>
 8009c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c30:	bf04      	itt	eq
 8009c32:	782c      	ldrbeq	r4, [r5, #0]
 8009c34:	1c85      	addeq	r5, r0, #2
 8009c36:	e7cd      	b.n	8009bd4 <_strtol_l.constprop.0+0x38>
 8009c38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c3c:	f1bc 0f19 	cmp.w	ip, #25
 8009c40:	d801      	bhi.n	8009c46 <_strtol_l.constprop.0+0xaa>
 8009c42:	3c37      	subs	r4, #55	; 0x37
 8009c44:	e7e4      	b.n	8009c10 <_strtol_l.constprop.0+0x74>
 8009c46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c4a:	f1bc 0f19 	cmp.w	ip, #25
 8009c4e:	d804      	bhi.n	8009c5a <_strtol_l.constprop.0+0xbe>
 8009c50:	3c57      	subs	r4, #87	; 0x57
 8009c52:	e7dd      	b.n	8009c10 <_strtol_l.constprop.0+0x74>
 8009c54:	f04f 37ff 	mov.w	r7, #4294967295
 8009c58:	e7e6      	b.n	8009c28 <_strtol_l.constprop.0+0x8c>
 8009c5a:	2f00      	cmp	r7, #0
 8009c5c:	da07      	bge.n	8009c6e <_strtol_l.constprop.0+0xd2>
 8009c5e:	2322      	movs	r3, #34	; 0x22
 8009c60:	4670      	mov	r0, lr
 8009c62:	f8c8 3000 	str.w	r3, [r8]
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	d0a4      	beq.n	8009bb4 <_strtol_l.constprop.0+0x18>
 8009c6a:	1e69      	subs	r1, r5, #1
 8009c6c:	e005      	b.n	8009c7a <_strtol_l.constprop.0+0xde>
 8009c6e:	b106      	cbz	r6, 8009c72 <_strtol_l.constprop.0+0xd6>
 8009c70:	4240      	negs	r0, r0
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	d09e      	beq.n	8009bb4 <_strtol_l.constprop.0+0x18>
 8009c76:	2f00      	cmp	r7, #0
 8009c78:	d1f7      	bne.n	8009c6a <_strtol_l.constprop.0+0xce>
 8009c7a:	6011      	str	r1, [r2, #0]
 8009c7c:	e79a      	b.n	8009bb4 <_strtol_l.constprop.0+0x18>
 8009c7e:	2430      	movs	r4, #48	; 0x30
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1b5      	bne.n	8009bf0 <_strtol_l.constprop.0+0x54>
 8009c84:	2308      	movs	r3, #8
 8009c86:	e7b3      	b.n	8009bf0 <_strtol_l.constprop.0+0x54>
 8009c88:	2c30      	cmp	r4, #48	; 0x30
 8009c8a:	d0a9      	beq.n	8009be0 <_strtol_l.constprop.0+0x44>
 8009c8c:	230a      	movs	r3, #10
 8009c8e:	e7af      	b.n	8009bf0 <_strtol_l.constprop.0+0x54>
 8009c90:	0800c8e9 	.word	0x0800c8e9

08009c94 <_strtol_r>:
 8009c94:	f7ff bf82 	b.w	8009b9c <_strtol_l.constprop.0>

08009c98 <__swbuf_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	460e      	mov	r6, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b118      	cbz	r0, 8009caa <__swbuf_r+0x12>
 8009ca2:	6983      	ldr	r3, [r0, #24]
 8009ca4:	b90b      	cbnz	r3, 8009caa <__swbuf_r+0x12>
 8009ca6:	f7fe f811 	bl	8007ccc <__sinit>
 8009caa:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <__swbuf_r+0x98>)
 8009cac:	429c      	cmp	r4, r3
 8009cae:	d12b      	bne.n	8009d08 <__swbuf_r+0x70>
 8009cb0:	686c      	ldr	r4, [r5, #4]
 8009cb2:	69a3      	ldr	r3, [r4, #24]
 8009cb4:	60a3      	str	r3, [r4, #8]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	071a      	lsls	r2, r3, #28
 8009cba:	d52f      	bpl.n	8009d1c <__swbuf_r+0x84>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	b36b      	cbz	r3, 8009d1c <__swbuf_r+0x84>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	6820      	ldr	r0, [r4, #0]
 8009cc4:	b2f6      	uxtb	r6, r6
 8009cc6:	1ac0      	subs	r0, r0, r3
 8009cc8:	6963      	ldr	r3, [r4, #20]
 8009cca:	4637      	mov	r7, r6
 8009ccc:	4283      	cmp	r3, r0
 8009cce:	dc04      	bgt.n	8009cda <__swbuf_r+0x42>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 ffc0 	bl	800ac58 <_fflush_r>
 8009cd8:	bb30      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	3001      	adds	r0, #1
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	6022      	str	r2, [r4, #0]
 8009ce8:	701e      	strb	r6, [r3, #0]
 8009cea:	6963      	ldr	r3, [r4, #20]
 8009cec:	4283      	cmp	r3, r0
 8009cee:	d004      	beq.n	8009cfa <__swbuf_r+0x62>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d506      	bpl.n	8009d04 <__swbuf_r+0x6c>
 8009cf6:	2e0a      	cmp	r6, #10
 8009cf8:	d104      	bne.n	8009d04 <__swbuf_r+0x6c>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 ffab 	bl	800ac58 <_fflush_r>
 8009d02:	b988      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009d04:	4638      	mov	r0, r7
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <__swbuf_r+0x9c>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swbuf_r+0x7a>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7cf      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <__swbuf_r+0xa0>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7ca      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f81e 	bl	8009d60 <__swsetup_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0cb      	beq.n	8009cc0 <__swbuf_r+0x28>
 8009d28:	f04f 37ff 	mov.w	r7, #4294967295
 8009d2c:	e7ea      	b.n	8009d04 <__swbuf_r+0x6c>
 8009d2e:	bf00      	nop
 8009d30:	0800c818 	.word	0x0800c818
 8009d34:	0800c838 	.word	0x0800c838
 8009d38:	0800c7f8 	.word	0x0800c7f8

08009d3c <_write_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	2200      	movs	r2, #0
 8009d46:	4d05      	ldr	r5, [pc, #20]	; (8009d5c <_write_r+0x20>)
 8009d48:	602a      	str	r2, [r5, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f7f7 f93a 	bl	8000fc4 <_write>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_write_r+0x1e>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_write_r+0x1e>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	200013a4 	.word	0x200013a4

08009d60 <__swsetup_r>:
 8009d60:	4b32      	ldr	r3, [pc, #200]	; (8009e2c <__swsetup_r+0xcc>)
 8009d62:	b570      	push	{r4, r5, r6, lr}
 8009d64:	681d      	ldr	r5, [r3, #0]
 8009d66:	4606      	mov	r6, r0
 8009d68:	460c      	mov	r4, r1
 8009d6a:	b125      	cbz	r5, 8009d76 <__swsetup_r+0x16>
 8009d6c:	69ab      	ldr	r3, [r5, #24]
 8009d6e:	b913      	cbnz	r3, 8009d76 <__swsetup_r+0x16>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7fd ffab 	bl	8007ccc <__sinit>
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <__swsetup_r+0xd0>)
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	d10f      	bne.n	8009d9c <__swsetup_r+0x3c>
 8009d7c:	686c      	ldr	r4, [r5, #4]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d42c      	bmi.n	8009de2 <__swsetup_r+0x82>
 8009d88:	06dd      	lsls	r5, r3, #27
 8009d8a:	d411      	bmi.n	8009db0 <__swsetup_r+0x50>
 8009d8c:	2309      	movs	r3, #9
 8009d8e:	6033      	str	r3, [r6, #0]
 8009d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	e03e      	b.n	8009e1a <__swsetup_r+0xba>
 8009d9c:	4b25      	ldr	r3, [pc, #148]	; (8009e34 <__swsetup_r+0xd4>)
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d101      	bne.n	8009da6 <__swsetup_r+0x46>
 8009da2:	68ac      	ldr	r4, [r5, #8]
 8009da4:	e7eb      	b.n	8009d7e <__swsetup_r+0x1e>
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <__swsetup_r+0xd8>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	bf08      	it	eq
 8009dac:	68ec      	ldreq	r4, [r5, #12]
 8009dae:	e7e6      	b.n	8009d7e <__swsetup_r+0x1e>
 8009db0:	0758      	lsls	r0, r3, #29
 8009db2:	d512      	bpl.n	8009dda <__swsetup_r+0x7a>
 8009db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009db6:	b141      	cbz	r1, 8009dca <__swsetup_r+0x6a>
 8009db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dbc:	4299      	cmp	r1, r3
 8009dbe:	d002      	beq.n	8009dc6 <__swsetup_r+0x66>
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f002 f867 	bl	800be94 <_free_r>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6063      	str	r3, [r4, #4]
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f043 0308 	orr.w	r3, r3, #8
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	b94b      	cbnz	r3, 8009dfa <__swsetup_r+0x9a>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df0:	d003      	beq.n	8009dfa <__swsetup_r+0x9a>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4630      	mov	r0, r6
 8009df6:	f001 fb0d 	bl	800b414 <__smakebuf_r>
 8009dfa:	89a0      	ldrh	r0, [r4, #12]
 8009dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e00:	f010 0301 	ands.w	r3, r0, #1
 8009e04:	d00a      	beq.n	8009e1c <__swsetup_r+0xbc>
 8009e06:	2300      	movs	r3, #0
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	6963      	ldr	r3, [r4, #20]
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	61a3      	str	r3, [r4, #24]
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	b943      	cbnz	r3, 8009e26 <__swsetup_r+0xc6>
 8009e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e18:	d1ba      	bne.n	8009d90 <__swsetup_r+0x30>
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	0781      	lsls	r1, r0, #30
 8009e1e:	bf58      	it	pl
 8009e20:	6963      	ldrpl	r3, [r4, #20]
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	e7f4      	b.n	8009e10 <__swsetup_r+0xb0>
 8009e26:	2000      	movs	r0, #0
 8009e28:	e7f7      	b.n	8009e1a <__swsetup_r+0xba>
 8009e2a:	bf00      	nop
 8009e2c:	20000010 	.word	0x20000010
 8009e30:	0800c818 	.word	0x0800c818
 8009e34:	0800c838 	.word	0x0800c838
 8009e38:	0800c7f8 	.word	0x0800c7f8

08009e3c <_close_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4d05      	ldr	r5, [pc, #20]	; (8009e58 <_close_r+0x1c>)
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	f7f7 fd8c 	bl	8001964 <_close>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d102      	bne.n	8009e56 <_close_r+0x1a>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	b103      	cbz	r3, 8009e56 <_close_r+0x1a>
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	200013a4 	.word	0x200013a4

08009e5c <quorem>:
 8009e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	6903      	ldr	r3, [r0, #16]
 8009e62:	690c      	ldr	r4, [r1, #16]
 8009e64:	4607      	mov	r7, r0
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	f2c0 8082 	blt.w	8009f70 <quorem+0x114>
 8009e6c:	3c01      	subs	r4, #1
 8009e6e:	f100 0514 	add.w	r5, r0, #20
 8009e72:	f101 0814 	add.w	r8, r1, #20
 8009e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e84:	3301      	adds	r3, #1
 8009e86:	429a      	cmp	r2, r3
 8009e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e94:	d331      	bcc.n	8009efa <quorem+0x9e>
 8009e96:	f04f 0e00 	mov.w	lr, #0
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	46ac      	mov	ip, r5
 8009e9e:	46f2      	mov	sl, lr
 8009ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ea4:	b293      	uxth	r3, r2
 8009ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8009eaa:	0c12      	lsrs	r2, r2, #16
 8009eac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	fb06 e202 	mla	r2, r6, r2, lr
 8009eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009eba:	f8dc a000 	ldr.w	sl, [ip]
 8009ebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ec2:	fa1f fa8a 	uxth.w	sl, sl
 8009ec6:	4453      	add	r3, sl
 8009ec8:	f8dc a000 	ldr.w	sl, [ip]
 8009ecc:	b292      	uxth	r2, r2
 8009ece:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009edc:	4581      	cmp	r9, r0
 8009ede:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee6:	d2db      	bcs.n	8009ea0 <quorem+0x44>
 8009ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009eec:	b92b      	cbnz	r3, 8009efa <quorem+0x9e>
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	3b04      	subs	r3, #4
 8009ef2:	429d      	cmp	r5, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	d32f      	bcc.n	8009f58 <quorem+0xfc>
 8009ef8:	613c      	str	r4, [r7, #16]
 8009efa:	4638      	mov	r0, r7
 8009efc:	f001 fdc6 	bl	800ba8c <__mcmp>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	db25      	blt.n	8009f50 <quorem+0xf4>
 8009f04:	4628      	mov	r0, r5
 8009f06:	f04f 0c00 	mov.w	ip, #0
 8009f0a:	3601      	adds	r6, #1
 8009f0c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f10:	f8d0 e000 	ldr.w	lr, [r0]
 8009f14:	b28b      	uxth	r3, r1
 8009f16:	ebac 0303 	sub.w	r3, ip, r3
 8009f1a:	fa1f f28e 	uxth.w	r2, lr
 8009f1e:	4413      	add	r3, r2
 8009f20:	0c0a      	lsrs	r2, r1, #16
 8009f22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f30:	45c1      	cmp	r9, r8
 8009f32:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f36:	f840 3b04 	str.w	r3, [r0], #4
 8009f3a:	d2e7      	bcs.n	8009f0c <quorem+0xb0>
 8009f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f44:	b922      	cbnz	r2, 8009f50 <quorem+0xf4>
 8009f46:	3b04      	subs	r3, #4
 8009f48:	429d      	cmp	r5, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	d30a      	bcc.n	8009f64 <quorem+0x108>
 8009f4e:	613c      	str	r4, [r7, #16]
 8009f50:	4630      	mov	r0, r6
 8009f52:	b003      	add	sp, #12
 8009f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f58:	6812      	ldr	r2, [r2, #0]
 8009f5a:	3b04      	subs	r3, #4
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	d1cb      	bne.n	8009ef8 <quorem+0x9c>
 8009f60:	3c01      	subs	r4, #1
 8009f62:	e7c6      	b.n	8009ef2 <quorem+0x96>
 8009f64:	6812      	ldr	r2, [r2, #0]
 8009f66:	3b04      	subs	r3, #4
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	d1f0      	bne.n	8009f4e <quorem+0xf2>
 8009f6c:	3c01      	subs	r4, #1
 8009f6e:	e7eb      	b.n	8009f48 <quorem+0xec>
 8009f70:	2000      	movs	r0, #0
 8009f72:	e7ee      	b.n	8009f52 <quorem+0xf6>
 8009f74:	0000      	movs	r0, r0
	...

08009f78 <_dtoa_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	461f      	mov	r7, r3
 8009f80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f82:	b099      	sub	sp, #100	; 0x64
 8009f84:	4605      	mov	r5, r0
 8009f86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f8e:	b974      	cbnz	r4, 8009fae <_dtoa_r+0x36>
 8009f90:	2010      	movs	r0, #16
 8009f92:	f001 fa7f 	bl	800b494 <malloc>
 8009f96:	4602      	mov	r2, r0
 8009f98:	6268      	str	r0, [r5, #36]	; 0x24
 8009f9a:	b920      	cbnz	r0, 8009fa6 <_dtoa_r+0x2e>
 8009f9c:	21ea      	movs	r1, #234	; 0xea
 8009f9e:	4ba8      	ldr	r3, [pc, #672]	; (800a240 <_dtoa_r+0x2c8>)
 8009fa0:	48a8      	ldr	r0, [pc, #672]	; (800a244 <_dtoa_r+0x2cc>)
 8009fa2:	f002 faad 	bl	800c500 <__assert_func>
 8009fa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009faa:	6004      	str	r4, [r0, #0]
 8009fac:	60c4      	str	r4, [r0, #12]
 8009fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fb0:	6819      	ldr	r1, [r3, #0]
 8009fb2:	b151      	cbz	r1, 8009fca <_dtoa_r+0x52>
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4093      	lsls	r3, r2
 8009fba:	604a      	str	r2, [r1, #4]
 8009fbc:	608b      	str	r3, [r1, #8]
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f001 fadc 	bl	800b57c <_Bfree>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	1e3b      	subs	r3, r7, #0
 8009fcc:	bfaf      	iteee	ge
 8009fce:	2300      	movge	r3, #0
 8009fd0:	2201      	movlt	r2, #1
 8009fd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fd6:	9305      	strlt	r3, [sp, #20]
 8009fd8:	bfa8      	it	ge
 8009fda:	f8c8 3000 	strge.w	r3, [r8]
 8009fde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009fe2:	4b99      	ldr	r3, [pc, #612]	; (800a248 <_dtoa_r+0x2d0>)
 8009fe4:	bfb8      	it	lt
 8009fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8009fea:	ea33 0309 	bics.w	r3, r3, r9
 8009fee:	d119      	bne.n	800a024 <_dtoa_r+0xac>
 8009ff0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ff4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ffc:	4333      	orrs	r3, r6
 8009ffe:	f000 857f 	beq.w	800ab00 <_dtoa_r+0xb88>
 800a002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a004:	b953      	cbnz	r3, 800a01c <_dtoa_r+0xa4>
 800a006:	4b91      	ldr	r3, [pc, #580]	; (800a24c <_dtoa_r+0x2d4>)
 800a008:	e022      	b.n	800a050 <_dtoa_r+0xd8>
 800a00a:	4b91      	ldr	r3, [pc, #580]	; (800a250 <_dtoa_r+0x2d8>)
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	3308      	adds	r3, #8
 800a010:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	9803      	ldr	r0, [sp, #12]
 800a016:	b019      	add	sp, #100	; 0x64
 800a018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01c:	4b8b      	ldr	r3, [pc, #556]	; (800a24c <_dtoa_r+0x2d4>)
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	3303      	adds	r3, #3
 800a022:	e7f5      	b.n	800a010 <_dtoa_r+0x98>
 800a024:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a028:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a030:	2200      	movs	r2, #0
 800a032:	2300      	movs	r3, #0
 800a034:	f7f6 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 800a038:	4680      	mov	r8, r0
 800a03a:	b158      	cbz	r0, 800a054 <_dtoa_r+0xdc>
 800a03c:	2301      	movs	r3, #1
 800a03e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 8558 	beq.w	800aafa <_dtoa_r+0xb82>
 800a04a:	4882      	ldr	r0, [pc, #520]	; (800a254 <_dtoa_r+0x2dc>)
 800a04c:	6018      	str	r0, [r3, #0]
 800a04e:	1e43      	subs	r3, r0, #1
 800a050:	9303      	str	r3, [sp, #12]
 800a052:	e7df      	b.n	800a014 <_dtoa_r+0x9c>
 800a054:	ab16      	add	r3, sp, #88	; 0x58
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	ab17      	add	r3, sp, #92	; 0x5c
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4628      	mov	r0, r5
 800a05e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a062:	f001 fe35 	bl	800bcd0 <__d2b>
 800a066:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a06a:	4683      	mov	fp, r0
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	d07f      	beq.n	800a170 <_dtoa_r+0x1f8>
 800a070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a076:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a07a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a07e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a082:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a086:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a08a:	2200      	movs	r2, #0
 800a08c:	4b72      	ldr	r3, [pc, #456]	; (800a258 <_dtoa_r+0x2e0>)
 800a08e:	f7f6 f86b 	bl	8000168 <__aeabi_dsub>
 800a092:	a365      	add	r3, pc, #404	; (adr r3, 800a228 <_dtoa_r+0x2b0>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 fa1e 	bl	80004d8 <__aeabi_dmul>
 800a09c:	a364      	add	r3, pc, #400	; (adr r3, 800a230 <_dtoa_r+0x2b8>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f863 	bl	800016c <__adddf3>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	f7f6 f9aa 	bl	8000404 <__aeabi_i2d>
 800a0b0:	a361      	add	r3, pc, #388	; (adr r3, 800a238 <_dtoa_r+0x2c0>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 fa0f 	bl	80004d8 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7f6 f853 	bl	800016c <__adddf3>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	f7f6 fcb5 	bl	8000a38 <__aeabi_d2iz>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4682      	mov	sl, r0
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 fc70 	bl	80009bc <__aeabi_dcmplt>
 800a0dc:	b148      	cbz	r0, 800a0f2 <_dtoa_r+0x17a>
 800a0de:	4650      	mov	r0, sl
 800a0e0:	f7f6 f990 	bl	8000404 <__aeabi_i2d>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 800a0ec:	b908      	cbnz	r0, 800a0f2 <_dtoa_r+0x17a>
 800a0ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0f2:	f1ba 0f16 	cmp.w	sl, #22
 800a0f6:	d858      	bhi.n	800a1aa <_dtoa_r+0x232>
 800a0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0fc:	4b57      	ldr	r3, [pc, #348]	; (800a25c <_dtoa_r+0x2e4>)
 800a0fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fc59 	bl	80009bc <__aeabi_dcmplt>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d04f      	beq.n	800a1ae <_dtoa_r+0x236>
 800a10e:	2300      	movs	r3, #0
 800a110:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a114:	930f      	str	r3, [sp, #60]	; 0x3c
 800a116:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a118:	1b1c      	subs	r4, r3, r4
 800a11a:	1e63      	subs	r3, r4, #1
 800a11c:	9309      	str	r3, [sp, #36]	; 0x24
 800a11e:	bf49      	itett	mi
 800a120:	f1c4 0301 	rsbmi	r3, r4, #1
 800a124:	2300      	movpl	r3, #0
 800a126:	9306      	strmi	r3, [sp, #24]
 800a128:	2300      	movmi	r3, #0
 800a12a:	bf54      	ite	pl
 800a12c:	9306      	strpl	r3, [sp, #24]
 800a12e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a130:	f1ba 0f00 	cmp.w	sl, #0
 800a134:	db3d      	blt.n	800a1b2 <_dtoa_r+0x23a>
 800a136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a138:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a13c:	4453      	add	r3, sl
 800a13e:	9309      	str	r3, [sp, #36]	; 0x24
 800a140:	2300      	movs	r3, #0
 800a142:	930a      	str	r3, [sp, #40]	; 0x28
 800a144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a146:	2b09      	cmp	r3, #9
 800a148:	f200 808c 	bhi.w	800a264 <_dtoa_r+0x2ec>
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	bfc4      	itt	gt
 800a150:	3b04      	subgt	r3, #4
 800a152:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a156:	bfc8      	it	gt
 800a158:	2400      	movgt	r4, #0
 800a15a:	f1a3 0302 	sub.w	r3, r3, #2
 800a15e:	bfd8      	it	le
 800a160:	2401      	movle	r4, #1
 800a162:	2b03      	cmp	r3, #3
 800a164:	f200 808a 	bhi.w	800a27c <_dtoa_r+0x304>
 800a168:	e8df f003 	tbb	[pc, r3]
 800a16c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a170:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a174:	441c      	add	r4, r3
 800a176:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a17a:	2b20      	cmp	r3, #32
 800a17c:	bfc3      	ittte	gt
 800a17e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a182:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a186:	fa09 f303 	lslgt.w	r3, r9, r3
 800a18a:	f1c3 0320 	rsble	r3, r3, #32
 800a18e:	bfc6      	itte	gt
 800a190:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a194:	4318      	orrgt	r0, r3
 800a196:	fa06 f003 	lslle.w	r0, r6, r3
 800a19a:	f7f6 f923 	bl	80003e4 <__aeabi_ui2d>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1a4:	3c01      	subs	r4, #1
 800a1a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1a8:	e76f      	b.n	800a08a <_dtoa_r+0x112>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7b2      	b.n	800a114 <_dtoa_r+0x19c>
 800a1ae:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1b0:	e7b1      	b.n	800a116 <_dtoa_r+0x19e>
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	eba3 030a 	sub.w	r3, r3, sl
 800a1b8:	9306      	str	r3, [sp, #24]
 800a1ba:	f1ca 0300 	rsb	r3, sl, #0
 800a1be:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a1c4:	e7be      	b.n	800a144 <_dtoa_r+0x1cc>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dc58      	bgt.n	800a282 <_dtoa_r+0x30a>
 800a1d0:	f04f 0901 	mov.w	r9, #1
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a1da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a1e2:	6042      	str	r2, [r0, #4]
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	f102 0614 	add.w	r6, r2, #20
 800a1ea:	429e      	cmp	r6, r3
 800a1ec:	6841      	ldr	r1, [r0, #4]
 800a1ee:	d94e      	bls.n	800a28e <_dtoa_r+0x316>
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f001 f983 	bl	800b4fc <_Balloc>
 800a1f6:	9003      	str	r0, [sp, #12]
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d14c      	bne.n	800a296 <_dtoa_r+0x31e>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a202:	4b17      	ldr	r3, [pc, #92]	; (800a260 <_dtoa_r+0x2e8>)
 800a204:	e6cc      	b.n	8009fa0 <_dtoa_r+0x28>
 800a206:	2301      	movs	r3, #1
 800a208:	e7de      	b.n	800a1c8 <_dtoa_r+0x250>
 800a20a:	2300      	movs	r3, #0
 800a20c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a210:	eb0a 0903 	add.w	r9, sl, r3
 800a214:	f109 0301 	add.w	r3, r9, #1
 800a218:	2b01      	cmp	r3, #1
 800a21a:	9308      	str	r3, [sp, #32]
 800a21c:	bfb8      	it	lt
 800a21e:	2301      	movlt	r3, #1
 800a220:	e7dd      	b.n	800a1de <_dtoa_r+0x266>
 800a222:	2301      	movs	r3, #1
 800a224:	e7f2      	b.n	800a20c <_dtoa_r+0x294>
 800a226:	bf00      	nop
 800a228:	636f4361 	.word	0x636f4361
 800a22c:	3fd287a7 	.word	0x3fd287a7
 800a230:	8b60c8b3 	.word	0x8b60c8b3
 800a234:	3fc68a28 	.word	0x3fc68a28
 800a238:	509f79fb 	.word	0x509f79fb
 800a23c:	3fd34413 	.word	0x3fd34413
 800a240:	0800c9f6 	.word	0x0800c9f6
 800a244:	0800ca0d 	.word	0x0800ca0d
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	0800c9f2 	.word	0x0800c9f2
 800a250:	0800c9e9 	.word	0x0800c9e9
 800a254:	0800c86d 	.word	0x0800c86d
 800a258:	3ff80000 	.word	0x3ff80000
 800a25c:	0800cb78 	.word	0x0800cb78
 800a260:	0800ca68 	.word	0x0800ca68
 800a264:	2401      	movs	r4, #1
 800a266:	2300      	movs	r3, #0
 800a268:	940b      	str	r4, [sp, #44]	; 0x2c
 800a26a:	9322      	str	r3, [sp, #136]	; 0x88
 800a26c:	f04f 39ff 	mov.w	r9, #4294967295
 800a270:	2200      	movs	r2, #0
 800a272:	2312      	movs	r3, #18
 800a274:	f8cd 9020 	str.w	r9, [sp, #32]
 800a278:	9223      	str	r2, [sp, #140]	; 0x8c
 800a27a:	e7b0      	b.n	800a1de <_dtoa_r+0x266>
 800a27c:	2301      	movs	r3, #1
 800a27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a280:	e7f4      	b.n	800a26c <_dtoa_r+0x2f4>
 800a282:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a286:	464b      	mov	r3, r9
 800a288:	f8cd 9020 	str.w	r9, [sp, #32]
 800a28c:	e7a7      	b.n	800a1de <_dtoa_r+0x266>
 800a28e:	3101      	adds	r1, #1
 800a290:	6041      	str	r1, [r0, #4]
 800a292:	0052      	lsls	r2, r2, #1
 800a294:	e7a7      	b.n	800a1e6 <_dtoa_r+0x26e>
 800a296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a298:	9a03      	ldr	r2, [sp, #12]
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	2b0e      	cmp	r3, #14
 800a2a0:	f200 80a8 	bhi.w	800a3f4 <_dtoa_r+0x47c>
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	f000 80a5 	beq.w	800a3f4 <_dtoa_r+0x47c>
 800a2aa:	f1ba 0f00 	cmp.w	sl, #0
 800a2ae:	dd34      	ble.n	800a31a <_dtoa_r+0x3a2>
 800a2b0:	4a9a      	ldr	r2, [pc, #616]	; (800a51c <_dtoa_r+0x5a4>)
 800a2b2:	f00a 030f 	and.w	r3, sl, #15
 800a2b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a2ca:	d016      	beq.n	800a2fa <_dtoa_r+0x382>
 800a2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2d0:	4b93      	ldr	r3, [pc, #588]	; (800a520 <_dtoa_r+0x5a8>)
 800a2d2:	2703      	movs	r7, #3
 800a2d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2d8:	f7f6 fa28 	bl	800072c <__aeabi_ddiv>
 800a2dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2e0:	f004 040f 	and.w	r4, r4, #15
 800a2e4:	4e8e      	ldr	r6, [pc, #568]	; (800a520 <_dtoa_r+0x5a8>)
 800a2e6:	b954      	cbnz	r4, 800a2fe <_dtoa_r+0x386>
 800a2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f0:	f7f6 fa1c 	bl	800072c <__aeabi_ddiv>
 800a2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f8:	e029      	b.n	800a34e <_dtoa_r+0x3d6>
 800a2fa:	2702      	movs	r7, #2
 800a2fc:	e7f2      	b.n	800a2e4 <_dtoa_r+0x36c>
 800a2fe:	07e1      	lsls	r1, r4, #31
 800a300:	d508      	bpl.n	800a314 <_dtoa_r+0x39c>
 800a302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a306:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a30a:	f7f6 f8e5 	bl	80004d8 <__aeabi_dmul>
 800a30e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a312:	3701      	adds	r7, #1
 800a314:	1064      	asrs	r4, r4, #1
 800a316:	3608      	adds	r6, #8
 800a318:	e7e5      	b.n	800a2e6 <_dtoa_r+0x36e>
 800a31a:	f000 80a5 	beq.w	800a468 <_dtoa_r+0x4f0>
 800a31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a322:	f1ca 0400 	rsb	r4, sl, #0
 800a326:	4b7d      	ldr	r3, [pc, #500]	; (800a51c <_dtoa_r+0x5a4>)
 800a328:	f004 020f 	and.w	r2, r4, #15
 800a32c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f7f6 f8d0 	bl	80004d8 <__aeabi_dmul>
 800a338:	2702      	movs	r7, #2
 800a33a:	2300      	movs	r3, #0
 800a33c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a340:	4e77      	ldr	r6, [pc, #476]	; (800a520 <_dtoa_r+0x5a8>)
 800a342:	1124      	asrs	r4, r4, #4
 800a344:	2c00      	cmp	r4, #0
 800a346:	f040 8084 	bne.w	800a452 <_dtoa_r+0x4da>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1d2      	bne.n	800a2f4 <_dtoa_r+0x37c>
 800a34e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 808b 	beq.w	800a46c <_dtoa_r+0x4f4>
 800a356:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a35a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a35e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a362:	2200      	movs	r2, #0
 800a364:	4b6f      	ldr	r3, [pc, #444]	; (800a524 <_dtoa_r+0x5ac>)
 800a366:	f7f6 fb29 	bl	80009bc <__aeabi_dcmplt>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d07e      	beq.n	800a46c <_dtoa_r+0x4f4>
 800a36e:	9b08      	ldr	r3, [sp, #32]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d07b      	beq.n	800a46c <_dtoa_r+0x4f4>
 800a374:	f1b9 0f00 	cmp.w	r9, #0
 800a378:	dd38      	ble.n	800a3ec <_dtoa_r+0x474>
 800a37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a37e:	2200      	movs	r2, #0
 800a380:	4b69      	ldr	r3, [pc, #420]	; (800a528 <_dtoa_r+0x5b0>)
 800a382:	f7f6 f8a9 	bl	80004d8 <__aeabi_dmul>
 800a386:	464c      	mov	r4, r9
 800a388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a38c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a390:	3701      	adds	r7, #1
 800a392:	4638      	mov	r0, r7
 800a394:	f7f6 f836 	bl	8000404 <__aeabi_i2d>
 800a398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a39c:	f7f6 f89c 	bl	80004d8 <__aeabi_dmul>
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	4b62      	ldr	r3, [pc, #392]	; (800a52c <_dtoa_r+0x5b4>)
 800a3a4:	f7f5 fee2 	bl	800016c <__adddf3>
 800a3a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3b0:	9611      	str	r6, [sp, #68]	; 0x44
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	d15d      	bne.n	800a472 <_dtoa_r+0x4fa>
 800a3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4b5c      	ldr	r3, [pc, #368]	; (800a530 <_dtoa_r+0x5b8>)
 800a3be:	f7f5 fed3 	bl	8000168 <__aeabi_dsub>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3ca:	4633      	mov	r3, r6
 800a3cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3ce:	f7f6 fb13 	bl	80009f8 <__aeabi_dcmpgt>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f040 829c 	bne.w	800a910 <_dtoa_r+0x998>
 800a3d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3e2:	f7f6 faeb 	bl	80009bc <__aeabi_dcmplt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f040 8290 	bne.w	800a90c <_dtoa_r+0x994>
 800a3ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a3f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f2c0 8152 	blt.w	800a6a0 <_dtoa_r+0x728>
 800a3fc:	f1ba 0f0e 	cmp.w	sl, #14
 800a400:	f300 814e 	bgt.w	800a6a0 <_dtoa_r+0x728>
 800a404:	4b45      	ldr	r3, [pc, #276]	; (800a51c <_dtoa_r+0x5a4>)
 800a406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a40a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a40e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a412:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a414:	2b00      	cmp	r3, #0
 800a416:	f280 80db 	bge.w	800a5d0 <_dtoa_r+0x658>
 800a41a:	9b08      	ldr	r3, [sp, #32]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f300 80d7 	bgt.w	800a5d0 <_dtoa_r+0x658>
 800a422:	f040 8272 	bne.w	800a90a <_dtoa_r+0x992>
 800a426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a42a:	2200      	movs	r2, #0
 800a42c:	4b40      	ldr	r3, [pc, #256]	; (800a530 <_dtoa_r+0x5b8>)
 800a42e:	f7f6 f853 	bl	80004d8 <__aeabi_dmul>
 800a432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a436:	f7f6 fad5 	bl	80009e4 <__aeabi_dcmpge>
 800a43a:	9c08      	ldr	r4, [sp, #32]
 800a43c:	4626      	mov	r6, r4
 800a43e:	2800      	cmp	r0, #0
 800a440:	f040 8248 	bne.w	800a8d4 <_dtoa_r+0x95c>
 800a444:	2331      	movs	r3, #49	; 0x31
 800a446:	9f03      	ldr	r7, [sp, #12]
 800a448:	f10a 0a01 	add.w	sl, sl, #1
 800a44c:	f807 3b01 	strb.w	r3, [r7], #1
 800a450:	e244      	b.n	800a8dc <_dtoa_r+0x964>
 800a452:	07e2      	lsls	r2, r4, #31
 800a454:	d505      	bpl.n	800a462 <_dtoa_r+0x4ea>
 800a456:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a45a:	f7f6 f83d 	bl	80004d8 <__aeabi_dmul>
 800a45e:	2301      	movs	r3, #1
 800a460:	3701      	adds	r7, #1
 800a462:	1064      	asrs	r4, r4, #1
 800a464:	3608      	adds	r6, #8
 800a466:	e76d      	b.n	800a344 <_dtoa_r+0x3cc>
 800a468:	2702      	movs	r7, #2
 800a46a:	e770      	b.n	800a34e <_dtoa_r+0x3d6>
 800a46c:	46d0      	mov	r8, sl
 800a46e:	9c08      	ldr	r4, [sp, #32]
 800a470:	e78f      	b.n	800a392 <_dtoa_r+0x41a>
 800a472:	9903      	ldr	r1, [sp, #12]
 800a474:	4b29      	ldr	r3, [pc, #164]	; (800a51c <_dtoa_r+0x5a4>)
 800a476:	4421      	add	r1, r4
 800a478:	9112      	str	r1, [sp, #72]	; 0x48
 800a47a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a47c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a480:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a484:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a488:	2900      	cmp	r1, #0
 800a48a:	d055      	beq.n	800a538 <_dtoa_r+0x5c0>
 800a48c:	2000      	movs	r0, #0
 800a48e:	4929      	ldr	r1, [pc, #164]	; (800a534 <_dtoa_r+0x5bc>)
 800a490:	f7f6 f94c 	bl	800072c <__aeabi_ddiv>
 800a494:	463b      	mov	r3, r7
 800a496:	4632      	mov	r2, r6
 800a498:	f7f5 fe66 	bl	8000168 <__aeabi_dsub>
 800a49c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4a0:	9f03      	ldr	r7, [sp, #12]
 800a4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a6:	f7f6 fac7 	bl	8000a38 <__aeabi_d2iz>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	f7f5 ffaa 	bl	8000404 <__aeabi_i2d>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b8:	f7f5 fe56 	bl	8000168 <__aeabi_dsub>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	3430      	adds	r4, #48	; 0x30
 800a4c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ca:	f807 4b01 	strb.w	r4, [r7], #1
 800a4ce:	f7f6 fa75 	bl	80009bc <__aeabi_dcmplt>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d174      	bne.n	800a5c0 <_dtoa_r+0x648>
 800a4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4da:	2000      	movs	r0, #0
 800a4dc:	4911      	ldr	r1, [pc, #68]	; (800a524 <_dtoa_r+0x5ac>)
 800a4de:	f7f5 fe43 	bl	8000168 <__aeabi_dsub>
 800a4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4e6:	f7f6 fa69 	bl	80009bc <__aeabi_dcmplt>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f040 80b7 	bne.w	800a65e <_dtoa_r+0x6e6>
 800a4f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4f2:	429f      	cmp	r7, r3
 800a4f4:	f43f af7a 	beq.w	800a3ec <_dtoa_r+0x474>
 800a4f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <_dtoa_r+0x5b0>)
 800a500:	f7f5 ffea 	bl	80004d8 <__aeabi_dmul>
 800a504:	2200      	movs	r2, #0
 800a506:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a50a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a50e:	4b06      	ldr	r3, [pc, #24]	; (800a528 <_dtoa_r+0x5b0>)
 800a510:	f7f5 ffe2 	bl	80004d8 <__aeabi_dmul>
 800a514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a518:	e7c3      	b.n	800a4a2 <_dtoa_r+0x52a>
 800a51a:	bf00      	nop
 800a51c:	0800cb78 	.word	0x0800cb78
 800a520:	0800cb50 	.word	0x0800cb50
 800a524:	3ff00000 	.word	0x3ff00000
 800a528:	40240000 	.word	0x40240000
 800a52c:	401c0000 	.word	0x401c0000
 800a530:	40140000 	.word	0x40140000
 800a534:	3fe00000 	.word	0x3fe00000
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f5 ffcc 	bl	80004d8 <__aeabi_dmul>
 800a540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a542:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a546:	9c03      	ldr	r4, [sp, #12]
 800a548:	9314      	str	r3, [sp, #80]	; 0x50
 800a54a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a54e:	f7f6 fa73 	bl	8000a38 <__aeabi_d2iz>
 800a552:	9015      	str	r0, [sp, #84]	; 0x54
 800a554:	f7f5 ff56 	bl	8000404 <__aeabi_i2d>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a560:	f7f5 fe02 	bl	8000168 <__aeabi_dsub>
 800a564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a566:	4606      	mov	r6, r0
 800a568:	3330      	adds	r3, #48	; 0x30
 800a56a:	f804 3b01 	strb.w	r3, [r4], #1
 800a56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a570:	460f      	mov	r7, r1
 800a572:	429c      	cmp	r4, r3
 800a574:	f04f 0200 	mov.w	r2, #0
 800a578:	d124      	bne.n	800a5c4 <_dtoa_r+0x64c>
 800a57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a57e:	4bb0      	ldr	r3, [pc, #704]	; (800a840 <_dtoa_r+0x8c8>)
 800a580:	f7f5 fdf4 	bl	800016c <__adddf3>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 fa34 	bl	80009f8 <__aeabi_dcmpgt>
 800a590:	2800      	cmp	r0, #0
 800a592:	d163      	bne.n	800a65c <_dtoa_r+0x6e4>
 800a594:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a598:	2000      	movs	r0, #0
 800a59a:	49a9      	ldr	r1, [pc, #676]	; (800a840 <_dtoa_r+0x8c8>)
 800a59c:	f7f5 fde4 	bl	8000168 <__aeabi_dsub>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f7f6 fa08 	bl	80009bc <__aeabi_dcmplt>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f43f af1d 	beq.w	800a3ec <_dtoa_r+0x474>
 800a5b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5b4:	1e7b      	subs	r3, r7, #1
 800a5b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a5b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5bc:	2b30      	cmp	r3, #48	; 0x30
 800a5be:	d0f8      	beq.n	800a5b2 <_dtoa_r+0x63a>
 800a5c0:	46c2      	mov	sl, r8
 800a5c2:	e03b      	b.n	800a63c <_dtoa_r+0x6c4>
 800a5c4:	4b9f      	ldr	r3, [pc, #636]	; (800a844 <_dtoa_r+0x8cc>)
 800a5c6:	f7f5 ff87 	bl	80004d8 <__aeabi_dmul>
 800a5ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ce:	e7bc      	b.n	800a54a <_dtoa_r+0x5d2>
 800a5d0:	9f03      	ldr	r7, [sp, #12]
 800a5d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a5d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f6 f8a5 	bl	800072c <__aeabi_ddiv>
 800a5e2:	f7f6 fa29 	bl	8000a38 <__aeabi_d2iz>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f7f5 ff0c 	bl	8000404 <__aeabi_i2d>
 800a5ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5f0:	f7f5 ff72 	bl	80004d8 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fdb4 	bl	8000168 <__aeabi_dsub>
 800a600:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a604:	f807 6b01 	strb.w	r6, [r7], #1
 800a608:	9e03      	ldr	r6, [sp, #12]
 800a60a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a60e:	1bbe      	subs	r6, r7, r6
 800a610:	45b4      	cmp	ip, r6
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	d136      	bne.n	800a686 <_dtoa_r+0x70e>
 800a618:	f7f5 fda8 	bl	800016c <__adddf3>
 800a61c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a620:	4680      	mov	r8, r0
 800a622:	4689      	mov	r9, r1
 800a624:	f7f6 f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 800a628:	bb58      	cbnz	r0, 800a682 <_dtoa_r+0x70a>
 800a62a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	f7f6 f9b9 	bl	80009a8 <__aeabi_dcmpeq>
 800a636:	b108      	cbz	r0, 800a63c <_dtoa_r+0x6c4>
 800a638:	07e1      	lsls	r1, r4, #31
 800a63a:	d422      	bmi.n	800a682 <_dtoa_r+0x70a>
 800a63c:	4628      	mov	r0, r5
 800a63e:	4659      	mov	r1, fp
 800a640:	f000 ff9c 	bl	800b57c <_Bfree>
 800a644:	2300      	movs	r3, #0
 800a646:	703b      	strb	r3, [r7, #0]
 800a648:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a64a:	f10a 0001 	add.w	r0, sl, #1
 800a64e:	6018      	str	r0, [r3, #0]
 800a650:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a652:	2b00      	cmp	r3, #0
 800a654:	f43f acde 	beq.w	800a014 <_dtoa_r+0x9c>
 800a658:	601f      	str	r7, [r3, #0]
 800a65a:	e4db      	b.n	800a014 <_dtoa_r+0x9c>
 800a65c:	4627      	mov	r7, r4
 800a65e:	463b      	mov	r3, r7
 800a660:	461f      	mov	r7, r3
 800a662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a666:	2a39      	cmp	r2, #57	; 0x39
 800a668:	d107      	bne.n	800a67a <_dtoa_r+0x702>
 800a66a:	9a03      	ldr	r2, [sp, #12]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d1f7      	bne.n	800a660 <_dtoa_r+0x6e8>
 800a670:	2230      	movs	r2, #48	; 0x30
 800a672:	9903      	ldr	r1, [sp, #12]
 800a674:	f108 0801 	add.w	r8, r8, #1
 800a678:	700a      	strb	r2, [r1, #0]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	3201      	adds	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	e79e      	b.n	800a5c0 <_dtoa_r+0x648>
 800a682:	46d0      	mov	r8, sl
 800a684:	e7eb      	b.n	800a65e <_dtoa_r+0x6e6>
 800a686:	2200      	movs	r2, #0
 800a688:	4b6e      	ldr	r3, [pc, #440]	; (800a844 <_dtoa_r+0x8cc>)
 800a68a:	f7f5 ff25 	bl	80004d8 <__aeabi_dmul>
 800a68e:	2200      	movs	r2, #0
 800a690:	2300      	movs	r3, #0
 800a692:	4680      	mov	r8, r0
 800a694:	4689      	mov	r9, r1
 800a696:	f7f6 f987 	bl	80009a8 <__aeabi_dcmpeq>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d09b      	beq.n	800a5d6 <_dtoa_r+0x65e>
 800a69e:	e7cd      	b.n	800a63c <_dtoa_r+0x6c4>
 800a6a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	f000 80d0 	beq.w	800a848 <_dtoa_r+0x8d0>
 800a6a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6aa:	2a01      	cmp	r2, #1
 800a6ac:	f300 80ae 	bgt.w	800a80c <_dtoa_r+0x894>
 800a6b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	f000 80a6 	beq.w	800a804 <_dtoa_r+0x88c>
 800a6b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6be:	9f06      	ldr	r7, [sp, #24]
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	441a      	add	r2, r3
 800a6c6:	9206      	str	r2, [sp, #24]
 800a6c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	441a      	add	r2, r3
 800a6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a6d0:	f001 f854 	bl	800b77c <__i2b>
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	2f00      	cmp	r7, #0
 800a6d8:	dd0c      	ble.n	800a6f4 <_dtoa_r+0x77c>
 800a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd09      	ble.n	800a6f4 <_dtoa_r+0x77c>
 800a6e0:	42bb      	cmp	r3, r7
 800a6e2:	bfa8      	it	ge
 800a6e4:	463b      	movge	r3, r7
 800a6e6:	9a06      	ldr	r2, [sp, #24]
 800a6e8:	1aff      	subs	r7, r7, r3
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	9206      	str	r2, [sp, #24]
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f6:	b1f3      	cbz	r3, 800a736 <_dtoa_r+0x7be>
 800a6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80a8 	beq.w	800a850 <_dtoa_r+0x8d8>
 800a700:	2c00      	cmp	r4, #0
 800a702:	dd10      	ble.n	800a726 <_dtoa_r+0x7ae>
 800a704:	4631      	mov	r1, r6
 800a706:	4622      	mov	r2, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f001 f8f5 	bl	800b8f8 <__pow5mult>
 800a70e:	465a      	mov	r2, fp
 800a710:	4601      	mov	r1, r0
 800a712:	4606      	mov	r6, r0
 800a714:	4628      	mov	r0, r5
 800a716:	f001 f847 	bl	800b7a8 <__multiply>
 800a71a:	4680      	mov	r8, r0
 800a71c:	4659      	mov	r1, fp
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 ff2c 	bl	800b57c <_Bfree>
 800a724:	46c3      	mov	fp, r8
 800a726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a728:	1b1a      	subs	r2, r3, r4
 800a72a:	d004      	beq.n	800a736 <_dtoa_r+0x7be>
 800a72c:	4659      	mov	r1, fp
 800a72e:	4628      	mov	r0, r5
 800a730:	f001 f8e2 	bl	800b8f8 <__pow5mult>
 800a734:	4683      	mov	fp, r0
 800a736:	2101      	movs	r1, #1
 800a738:	4628      	mov	r0, r5
 800a73a:	f001 f81f 	bl	800b77c <__i2b>
 800a73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a740:	4604      	mov	r4, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	f340 8086 	ble.w	800a854 <_dtoa_r+0x8dc>
 800a748:	461a      	mov	r2, r3
 800a74a:	4601      	mov	r1, r0
 800a74c:	4628      	mov	r0, r5
 800a74e:	f001 f8d3 	bl	800b8f8 <__pow5mult>
 800a752:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a754:	4604      	mov	r4, r0
 800a756:	2b01      	cmp	r3, #1
 800a758:	dd7f      	ble.n	800a85a <_dtoa_r+0x8e2>
 800a75a:	f04f 0800 	mov.w	r8, #0
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a764:	6918      	ldr	r0, [r3, #16]
 800a766:	f000 ffbb 	bl	800b6e0 <__hi0bits>
 800a76a:	f1c0 0020 	rsb	r0, r0, #32
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	4418      	add	r0, r3
 800a772:	f010 001f 	ands.w	r0, r0, #31
 800a776:	f000 8092 	beq.w	800a89e <_dtoa_r+0x926>
 800a77a:	f1c0 0320 	rsb	r3, r0, #32
 800a77e:	2b04      	cmp	r3, #4
 800a780:	f340 808a 	ble.w	800a898 <_dtoa_r+0x920>
 800a784:	f1c0 001c 	rsb	r0, r0, #28
 800a788:	9b06      	ldr	r3, [sp, #24]
 800a78a:	4407      	add	r7, r0
 800a78c:	4403      	add	r3, r0
 800a78e:	9306      	str	r3, [sp, #24]
 800a790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a792:	4403      	add	r3, r0
 800a794:	9309      	str	r3, [sp, #36]	; 0x24
 800a796:	9b06      	ldr	r3, [sp, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dd05      	ble.n	800a7a8 <_dtoa_r+0x830>
 800a79c:	4659      	mov	r1, fp
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f001 f903 	bl	800b9ac <__lshift>
 800a7a6:	4683      	mov	fp, r0
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dd05      	ble.n	800a7ba <_dtoa_r+0x842>
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f001 f8fa 	bl	800b9ac <__lshift>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d070      	beq.n	800a8a2 <_dtoa_r+0x92a>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f001 f962 	bl	800ba8c <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	da6a      	bge.n	800a8a2 <_dtoa_r+0x92a>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4659      	mov	r1, fp
 800a7d0:	220a      	movs	r2, #10
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 fef4 	bl	800b5c0 <__multadd>
 800a7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7da:	4683      	mov	fp, r0
 800a7dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 8194 	beq.w	800ab0e <_dtoa_r+0xb96>
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	220a      	movs	r2, #10
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 fee7 	bl	800b5c0 <__multadd>
 800a7f2:	f1b9 0f00 	cmp.w	r9, #0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	f300 8093 	bgt.w	800a922 <_dtoa_r+0x9aa>
 800a7fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	dc57      	bgt.n	800a8b2 <_dtoa_r+0x93a>
 800a802:	e08e      	b.n	800a922 <_dtoa_r+0x9aa>
 800a804:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a80a:	e757      	b.n	800a6bc <_dtoa_r+0x744>
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	1e5c      	subs	r4, r3, #1
 800a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a812:	42a3      	cmp	r3, r4
 800a814:	bfb7      	itett	lt
 800a816:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a818:	1b1c      	subge	r4, r3, r4
 800a81a:	1ae2      	sublt	r2, r4, r3
 800a81c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a81e:	bfbe      	ittt	lt
 800a820:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a822:	189b      	addlt	r3, r3, r2
 800a824:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a826:	9b08      	ldr	r3, [sp, #32]
 800a828:	bfb8      	it	lt
 800a82a:	2400      	movlt	r4, #0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	bfbb      	ittet	lt
 800a830:	9b06      	ldrlt	r3, [sp, #24]
 800a832:	9a08      	ldrlt	r2, [sp, #32]
 800a834:	9f06      	ldrge	r7, [sp, #24]
 800a836:	1a9f      	sublt	r7, r3, r2
 800a838:	bfac      	ite	ge
 800a83a:	9b08      	ldrge	r3, [sp, #32]
 800a83c:	2300      	movlt	r3, #0
 800a83e:	e73f      	b.n	800a6c0 <_dtoa_r+0x748>
 800a840:	3fe00000 	.word	0x3fe00000
 800a844:	40240000 	.word	0x40240000
 800a848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a84a:	9f06      	ldr	r7, [sp, #24]
 800a84c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a84e:	e742      	b.n	800a6d6 <_dtoa_r+0x75e>
 800a850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a852:	e76b      	b.n	800a72c <_dtoa_r+0x7b4>
 800a854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a856:	2b01      	cmp	r3, #1
 800a858:	dc19      	bgt.n	800a88e <_dtoa_r+0x916>
 800a85a:	9b04      	ldr	r3, [sp, #16]
 800a85c:	b9bb      	cbnz	r3, 800a88e <_dtoa_r+0x916>
 800a85e:	9b05      	ldr	r3, [sp, #20]
 800a860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a864:	b99b      	cbnz	r3, 800a88e <_dtoa_r+0x916>
 800a866:	9b05      	ldr	r3, [sp, #20]
 800a868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a86c:	0d1b      	lsrs	r3, r3, #20
 800a86e:	051b      	lsls	r3, r3, #20
 800a870:	b183      	cbz	r3, 800a894 <_dtoa_r+0x91c>
 800a872:	f04f 0801 	mov.w	r8, #1
 800a876:	9b06      	ldr	r3, [sp, #24]
 800a878:	3301      	adds	r3, #1
 800a87a:	9306      	str	r3, [sp, #24]
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	3301      	adds	r3, #1
 800a880:	9309      	str	r3, [sp, #36]	; 0x24
 800a882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	f47f af6a 	bne.w	800a75e <_dtoa_r+0x7e6>
 800a88a:	2001      	movs	r0, #1
 800a88c:	e76f      	b.n	800a76e <_dtoa_r+0x7f6>
 800a88e:	f04f 0800 	mov.w	r8, #0
 800a892:	e7f6      	b.n	800a882 <_dtoa_r+0x90a>
 800a894:	4698      	mov	r8, r3
 800a896:	e7f4      	b.n	800a882 <_dtoa_r+0x90a>
 800a898:	f43f af7d 	beq.w	800a796 <_dtoa_r+0x81e>
 800a89c:	4618      	mov	r0, r3
 800a89e:	301c      	adds	r0, #28
 800a8a0:	e772      	b.n	800a788 <_dtoa_r+0x810>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dc36      	bgt.n	800a916 <_dtoa_r+0x99e>
 800a8a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	dd33      	ble.n	800a916 <_dtoa_r+0x99e>
 800a8ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8b2:	f1b9 0f00 	cmp.w	r9, #0
 800a8b6:	d10d      	bne.n	800a8d4 <_dtoa_r+0x95c>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	2205      	movs	r2, #5
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f000 fe7e 	bl	800b5c0 <__multadd>
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4658      	mov	r0, fp
 800a8ca:	f001 f8df 	bl	800ba8c <__mcmp>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f73f adb8 	bgt.w	800a444 <_dtoa_r+0x4cc>
 800a8d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8d6:	9f03      	ldr	r7, [sp, #12]
 800a8d8:	ea6f 0a03 	mvn.w	sl, r3
 800a8dc:	f04f 0800 	mov.w	r8, #0
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 fe4a 	bl	800b57c <_Bfree>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	f43f aea7 	beq.w	800a63c <_dtoa_r+0x6c4>
 800a8ee:	f1b8 0f00 	cmp.w	r8, #0
 800a8f2:	d005      	beq.n	800a900 <_dtoa_r+0x988>
 800a8f4:	45b0      	cmp	r8, r6
 800a8f6:	d003      	beq.n	800a900 <_dtoa_r+0x988>
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 fe3e 	bl	800b57c <_Bfree>
 800a900:	4631      	mov	r1, r6
 800a902:	4628      	mov	r0, r5
 800a904:	f000 fe3a 	bl	800b57c <_Bfree>
 800a908:	e698      	b.n	800a63c <_dtoa_r+0x6c4>
 800a90a:	2400      	movs	r4, #0
 800a90c:	4626      	mov	r6, r4
 800a90e:	e7e1      	b.n	800a8d4 <_dtoa_r+0x95c>
 800a910:	46c2      	mov	sl, r8
 800a912:	4626      	mov	r6, r4
 800a914:	e596      	b.n	800a444 <_dtoa_r+0x4cc>
 800a916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 80fd 	beq.w	800ab1c <_dtoa_r+0xba4>
 800a922:	2f00      	cmp	r7, #0
 800a924:	dd05      	ble.n	800a932 <_dtoa_r+0x9ba>
 800a926:	4631      	mov	r1, r6
 800a928:	463a      	mov	r2, r7
 800a92a:	4628      	mov	r0, r5
 800a92c:	f001 f83e 	bl	800b9ac <__lshift>
 800a930:	4606      	mov	r6, r0
 800a932:	f1b8 0f00 	cmp.w	r8, #0
 800a936:	d05c      	beq.n	800a9f2 <_dtoa_r+0xa7a>
 800a938:	4628      	mov	r0, r5
 800a93a:	6871      	ldr	r1, [r6, #4]
 800a93c:	f000 fdde 	bl	800b4fc <_Balloc>
 800a940:	4607      	mov	r7, r0
 800a942:	b928      	cbnz	r0, 800a950 <_dtoa_r+0x9d8>
 800a944:	4602      	mov	r2, r0
 800a946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a94a:	4b7f      	ldr	r3, [pc, #508]	; (800ab48 <_dtoa_r+0xbd0>)
 800a94c:	f7ff bb28 	b.w	8009fa0 <_dtoa_r+0x28>
 800a950:	6932      	ldr	r2, [r6, #16]
 800a952:	f106 010c 	add.w	r1, r6, #12
 800a956:	3202      	adds	r2, #2
 800a958:	0092      	lsls	r2, r2, #2
 800a95a:	300c      	adds	r0, #12
 800a95c:	f7fd fa7b 	bl	8007e56 <memcpy>
 800a960:	2201      	movs	r2, #1
 800a962:	4639      	mov	r1, r7
 800a964:	4628      	mov	r0, r5
 800a966:	f001 f821 	bl	800b9ac <__lshift>
 800a96a:	46b0      	mov	r8, r6
 800a96c:	4606      	mov	r6, r0
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	9308      	str	r3, [sp, #32]
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	444b      	add	r3, r9
 800a978:	930a      	str	r3, [sp, #40]	; 0x28
 800a97a:	9b04      	ldr	r3, [sp, #16]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	9309      	str	r3, [sp, #36]	; 0x24
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	4621      	mov	r1, r4
 800a986:	3b01      	subs	r3, #1
 800a988:	4658      	mov	r0, fp
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	f7ff fa66 	bl	8009e5c <quorem>
 800a990:	4603      	mov	r3, r0
 800a992:	4641      	mov	r1, r8
 800a994:	3330      	adds	r3, #48	; 0x30
 800a996:	9006      	str	r0, [sp, #24]
 800a998:	4658      	mov	r0, fp
 800a99a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a99c:	f001 f876 	bl	800ba8c <__mcmp>
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4681      	mov	r9, r0
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f001 f88c 	bl	800bac4 <__mdiff>
 800a9ac:	68c2      	ldr	r2, [r0, #12]
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b2:	bb02      	cbnz	r2, 800a9f6 <_dtoa_r+0xa7e>
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	4658      	mov	r0, fp
 800a9b8:	f001 f868 	bl	800ba8c <__mcmp>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a9c8:	f000 fdd8 	bl	800b57c <_Bfree>
 800a9cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9d0:	9f08      	ldr	r7, [sp, #32]
 800a9d2:	ea43 0102 	orr.w	r1, r3, r2
 800a9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9dc:	d10d      	bne.n	800a9fa <_dtoa_r+0xa82>
 800a9de:	2b39      	cmp	r3, #57	; 0x39
 800a9e0:	d029      	beq.n	800aa36 <_dtoa_r+0xabe>
 800a9e2:	f1b9 0f00 	cmp.w	r9, #0
 800a9e6:	dd01      	ble.n	800a9ec <_dtoa_r+0xa74>
 800a9e8:	9b06      	ldr	r3, [sp, #24]
 800a9ea:	3331      	adds	r3, #49	; 0x31
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	7013      	strb	r3, [r2, #0]
 800a9f0:	e776      	b.n	800a8e0 <_dtoa_r+0x968>
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	e7b9      	b.n	800a96a <_dtoa_r+0x9f2>
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	e7e2      	b.n	800a9c0 <_dtoa_r+0xa48>
 800a9fa:	f1b9 0f00 	cmp.w	r9, #0
 800a9fe:	db06      	blt.n	800aa0e <_dtoa_r+0xa96>
 800aa00:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa02:	ea41 0909 	orr.w	r9, r1, r9
 800aa06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa08:	ea59 0101 	orrs.w	r1, r9, r1
 800aa0c:	d120      	bne.n	800aa50 <_dtoa_r+0xad8>
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	ddec      	ble.n	800a9ec <_dtoa_r+0xa74>
 800aa12:	4659      	mov	r1, fp
 800aa14:	2201      	movs	r2, #1
 800aa16:	4628      	mov	r0, r5
 800aa18:	9308      	str	r3, [sp, #32]
 800aa1a:	f000 ffc7 	bl	800b9ac <__lshift>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4683      	mov	fp, r0
 800aa22:	f001 f833 	bl	800ba8c <__mcmp>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	dc02      	bgt.n	800aa32 <_dtoa_r+0xaba>
 800aa2c:	d1de      	bne.n	800a9ec <_dtoa_r+0xa74>
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d5dc      	bpl.n	800a9ec <_dtoa_r+0xa74>
 800aa32:	2b39      	cmp	r3, #57	; 0x39
 800aa34:	d1d8      	bne.n	800a9e8 <_dtoa_r+0xa70>
 800aa36:	2339      	movs	r3, #57	; 0x39
 800aa38:	9a04      	ldr	r2, [sp, #16]
 800aa3a:	7013      	strb	r3, [r2, #0]
 800aa3c:	463b      	mov	r3, r7
 800aa3e:	461f      	mov	r7, r3
 800aa40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	2a39      	cmp	r2, #57	; 0x39
 800aa48:	d050      	beq.n	800aaec <_dtoa_r+0xb74>
 800aa4a:	3201      	adds	r2, #1
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	e747      	b.n	800a8e0 <_dtoa_r+0x968>
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	dd03      	ble.n	800aa5c <_dtoa_r+0xae4>
 800aa54:	2b39      	cmp	r3, #57	; 0x39
 800aa56:	d0ee      	beq.n	800aa36 <_dtoa_r+0xabe>
 800aa58:	3301      	adds	r3, #1
 800aa5a:	e7c7      	b.n	800a9ec <_dtoa_r+0xa74>
 800aa5c:	9a08      	ldr	r2, [sp, #32]
 800aa5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa64:	428a      	cmp	r2, r1
 800aa66:	d02a      	beq.n	800aabe <_dtoa_r+0xb46>
 800aa68:	4659      	mov	r1, fp
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	220a      	movs	r2, #10
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f000 fda6 	bl	800b5c0 <__multadd>
 800aa74:	45b0      	cmp	r8, r6
 800aa76:	4683      	mov	fp, r0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	f04f 020a 	mov.w	r2, #10
 800aa80:	4641      	mov	r1, r8
 800aa82:	4628      	mov	r0, r5
 800aa84:	d107      	bne.n	800aa96 <_dtoa_r+0xb1e>
 800aa86:	f000 fd9b 	bl	800b5c0 <__multadd>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	9b08      	ldr	r3, [sp, #32]
 800aa90:	3301      	adds	r3, #1
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	e775      	b.n	800a982 <_dtoa_r+0xa0a>
 800aa96:	f000 fd93 	bl	800b5c0 <__multadd>
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 fd8c 	bl	800b5c0 <__multadd>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	e7f0      	b.n	800aa8e <_dtoa_r+0xb16>
 800aaac:	f1b9 0f00 	cmp.w	r9, #0
 800aab0:	bfcc      	ite	gt
 800aab2:	464f      	movgt	r7, r9
 800aab4:	2701      	movle	r7, #1
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	9a03      	ldr	r2, [sp, #12]
 800aabc:	4417      	add	r7, r2
 800aabe:	4659      	mov	r1, fp
 800aac0:	2201      	movs	r2, #1
 800aac2:	4628      	mov	r0, r5
 800aac4:	9308      	str	r3, [sp, #32]
 800aac6:	f000 ff71 	bl	800b9ac <__lshift>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4683      	mov	fp, r0
 800aace:	f000 ffdd 	bl	800ba8c <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	dcb2      	bgt.n	800aa3c <_dtoa_r+0xac4>
 800aad6:	d102      	bne.n	800aade <_dtoa_r+0xb66>
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	07db      	lsls	r3, r3, #31
 800aadc:	d4ae      	bmi.n	800aa3c <_dtoa_r+0xac4>
 800aade:	463b      	mov	r3, r7
 800aae0:	461f      	mov	r7, r3
 800aae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aae6:	2a30      	cmp	r2, #48	; 0x30
 800aae8:	d0fa      	beq.n	800aae0 <_dtoa_r+0xb68>
 800aaea:	e6f9      	b.n	800a8e0 <_dtoa_r+0x968>
 800aaec:	9a03      	ldr	r2, [sp, #12]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d1a5      	bne.n	800aa3e <_dtoa_r+0xac6>
 800aaf2:	2331      	movs	r3, #49	; 0x31
 800aaf4:	f10a 0a01 	add.w	sl, sl, #1
 800aaf8:	e779      	b.n	800a9ee <_dtoa_r+0xa76>
 800aafa:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <_dtoa_r+0xbd4>)
 800aafc:	f7ff baa8 	b.w	800a050 <_dtoa_r+0xd8>
 800ab00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f47f aa81 	bne.w	800a00a <_dtoa_r+0x92>
 800ab08:	4b11      	ldr	r3, [pc, #68]	; (800ab50 <_dtoa_r+0xbd8>)
 800ab0a:	f7ff baa1 	b.w	800a050 <_dtoa_r+0xd8>
 800ab0e:	f1b9 0f00 	cmp.w	r9, #0
 800ab12:	dc03      	bgt.n	800ab1c <_dtoa_r+0xba4>
 800ab14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	f73f aecb 	bgt.w	800a8b2 <_dtoa_r+0x93a>
 800ab1c:	9f03      	ldr	r7, [sp, #12]
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4658      	mov	r0, fp
 800ab22:	f7ff f99b 	bl	8009e5c <quorem>
 800ab26:	9a03      	ldr	r2, [sp, #12]
 800ab28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab2c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab30:	1aba      	subs	r2, r7, r2
 800ab32:	4591      	cmp	r9, r2
 800ab34:	ddba      	ble.n	800aaac <_dtoa_r+0xb34>
 800ab36:	4659      	mov	r1, fp
 800ab38:	2300      	movs	r3, #0
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	f000 fd3f 	bl	800b5c0 <__multadd>
 800ab42:	4683      	mov	fp, r0
 800ab44:	e7eb      	b.n	800ab1e <_dtoa_r+0xba6>
 800ab46:	bf00      	nop
 800ab48:	0800ca68 	.word	0x0800ca68
 800ab4c:	0800c86c 	.word	0x0800c86c
 800ab50:	0800c9e9 	.word	0x0800c9e9

0800ab54 <__sflush_r>:
 800ab54:	898a      	ldrh	r2, [r1, #12]
 800ab56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab58:	4605      	mov	r5, r0
 800ab5a:	0710      	lsls	r0, r2, #28
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	d457      	bmi.n	800ac10 <__sflush_r+0xbc>
 800ab60:	684b      	ldr	r3, [r1, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dc04      	bgt.n	800ab70 <__sflush_r+0x1c>
 800ab66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dc01      	bgt.n	800ab70 <__sflush_r+0x1c>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab72:	2e00      	cmp	r6, #0
 800ab74:	d0fa      	beq.n	800ab6c <__sflush_r+0x18>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab7c:	682f      	ldr	r7, [r5, #0]
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	d032      	beq.n	800abe8 <__sflush_r+0x94>
 800ab82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	075a      	lsls	r2, r3, #29
 800ab88:	d505      	bpl.n	800ab96 <__sflush_r+0x42>
 800ab8a:	6863      	ldr	r3, [r4, #4]
 800ab8c:	1ac0      	subs	r0, r0, r3
 800ab8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab90:	b10b      	cbz	r3, 800ab96 <__sflush_r+0x42>
 800ab92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab94:	1ac0      	subs	r0, r0, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	6a21      	ldr	r1, [r4, #32]
 800aba0:	47b0      	blx	r6
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	d106      	bne.n	800abb6 <__sflush_r+0x62>
 800aba8:	6829      	ldr	r1, [r5, #0]
 800abaa:	291d      	cmp	r1, #29
 800abac:	d82c      	bhi.n	800ac08 <__sflush_r+0xb4>
 800abae:	4a29      	ldr	r2, [pc, #164]	; (800ac54 <__sflush_r+0x100>)
 800abb0:	40ca      	lsrs	r2, r1
 800abb2:	07d6      	lsls	r6, r2, #31
 800abb4:	d528      	bpl.n	800ac08 <__sflush_r+0xb4>
 800abb6:	2200      	movs	r2, #0
 800abb8:	6062      	str	r2, [r4, #4]
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	04d9      	lsls	r1, r3, #19
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	d504      	bpl.n	800abcc <__sflush_r+0x78>
 800abc2:	1c42      	adds	r2, r0, #1
 800abc4:	d101      	bne.n	800abca <__sflush_r+0x76>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	b903      	cbnz	r3, 800abcc <__sflush_r+0x78>
 800abca:	6560      	str	r0, [r4, #84]	; 0x54
 800abcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abce:	602f      	str	r7, [r5, #0]
 800abd0:	2900      	cmp	r1, #0
 800abd2:	d0cb      	beq.n	800ab6c <__sflush_r+0x18>
 800abd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__sflush_r+0x8e>
 800abdc:	4628      	mov	r0, r5
 800abde:	f001 f959 	bl	800be94 <_free_r>
 800abe2:	2000      	movs	r0, #0
 800abe4:	6360      	str	r0, [r4, #52]	; 0x34
 800abe6:	e7c2      	b.n	800ab6e <__sflush_r+0x1a>
 800abe8:	6a21      	ldr	r1, [r4, #32]
 800abea:	2301      	movs	r3, #1
 800abec:	4628      	mov	r0, r5
 800abee:	47b0      	blx	r6
 800abf0:	1c41      	adds	r1, r0, #1
 800abf2:	d1c7      	bne.n	800ab84 <__sflush_r+0x30>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0c4      	beq.n	800ab84 <__sflush_r+0x30>
 800abfa:	2b1d      	cmp	r3, #29
 800abfc:	d001      	beq.n	800ac02 <__sflush_r+0xae>
 800abfe:	2b16      	cmp	r3, #22
 800ac00:	d101      	bne.n	800ac06 <__sflush_r+0xb2>
 800ac02:	602f      	str	r7, [r5, #0]
 800ac04:	e7b2      	b.n	800ab6c <__sflush_r+0x18>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	e7ae      	b.n	800ab6e <__sflush_r+0x1a>
 800ac10:	690f      	ldr	r7, [r1, #16]
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	d0aa      	beq.n	800ab6c <__sflush_r+0x18>
 800ac16:	0793      	lsls	r3, r2, #30
 800ac18:	bf18      	it	ne
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	680e      	ldr	r6, [r1, #0]
 800ac1e:	bf08      	it	eq
 800ac20:	694b      	ldreq	r3, [r1, #20]
 800ac22:	1bf6      	subs	r6, r6, r7
 800ac24:	600f      	str	r7, [r1, #0]
 800ac26:	608b      	str	r3, [r1, #8]
 800ac28:	2e00      	cmp	r6, #0
 800ac2a:	dd9f      	ble.n	800ab6c <__sflush_r+0x18>
 800ac2c:	4633      	mov	r3, r6
 800ac2e:	463a      	mov	r2, r7
 800ac30:	4628      	mov	r0, r5
 800ac32:	6a21      	ldr	r1, [r4, #32]
 800ac34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ac38:	47e0      	blx	ip
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	dc06      	bgt.n	800ac4c <__sflush_r+0xf8>
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e790      	b.n	800ab6e <__sflush_r+0x1a>
 800ac4c:	4407      	add	r7, r0
 800ac4e:	1a36      	subs	r6, r6, r0
 800ac50:	e7ea      	b.n	800ac28 <__sflush_r+0xd4>
 800ac52:	bf00      	nop
 800ac54:	20400001 	.word	0x20400001

0800ac58 <_fflush_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	690b      	ldr	r3, [r1, #16]
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b913      	cbnz	r3, 800ac68 <_fflush_r+0x10>
 800ac62:	2500      	movs	r5, #0
 800ac64:	4628      	mov	r0, r5
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	b118      	cbz	r0, 800ac72 <_fflush_r+0x1a>
 800ac6a:	6983      	ldr	r3, [r0, #24]
 800ac6c:	b90b      	cbnz	r3, 800ac72 <_fflush_r+0x1a>
 800ac6e:	f7fd f82d 	bl	8007ccc <__sinit>
 800ac72:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <_fflush_r+0x6c>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d11b      	bne.n	800acb0 <_fflush_r+0x58>
 800ac78:	686c      	ldr	r4, [r5, #4]
 800ac7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0ef      	beq.n	800ac62 <_fflush_r+0xa>
 800ac82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac84:	07d0      	lsls	r0, r2, #31
 800ac86:	d404      	bmi.n	800ac92 <_fflush_r+0x3a>
 800ac88:	0599      	lsls	r1, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_fflush_r+0x3a>
 800ac8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac8e:	f7fd f8e0 	bl	8007e52 <__retarget_lock_acquire_recursive>
 800ac92:	4628      	mov	r0, r5
 800ac94:	4621      	mov	r1, r4
 800ac96:	f7ff ff5d 	bl	800ab54 <__sflush_r>
 800ac9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	07da      	lsls	r2, r3, #31
 800aca0:	d4e0      	bmi.n	800ac64 <_fflush_r+0xc>
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	059b      	lsls	r3, r3, #22
 800aca6:	d4dd      	bmi.n	800ac64 <_fflush_r+0xc>
 800aca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acaa:	f7fd f8d3 	bl	8007e54 <__retarget_lock_release_recursive>
 800acae:	e7d9      	b.n	800ac64 <_fflush_r+0xc>
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <_fflush_r+0x70>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d101      	bne.n	800acba <_fflush_r+0x62>
 800acb6:	68ac      	ldr	r4, [r5, #8]
 800acb8:	e7df      	b.n	800ac7a <_fflush_r+0x22>
 800acba:	4b04      	ldr	r3, [pc, #16]	; (800accc <_fflush_r+0x74>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	bf08      	it	eq
 800acc0:	68ec      	ldreq	r4, [r5, #12]
 800acc2:	e7da      	b.n	800ac7a <_fflush_r+0x22>
 800acc4:	0800c818 	.word	0x0800c818
 800acc8:	0800c838 	.word	0x0800c838
 800accc:	0800c7f8 	.word	0x0800c7f8

0800acd0 <rshift>:
 800acd0:	6903      	ldr	r3, [r0, #16]
 800acd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800acda:	f100 0414 	add.w	r4, r0, #20
 800acde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ace2:	dd46      	ble.n	800ad72 <rshift+0xa2>
 800ace4:	f011 011f 	ands.w	r1, r1, #31
 800ace8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800acec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800acf0:	d10c      	bne.n	800ad0c <rshift+0x3c>
 800acf2:	4629      	mov	r1, r5
 800acf4:	f100 0710 	add.w	r7, r0, #16
 800acf8:	42b1      	cmp	r1, r6
 800acfa:	d335      	bcc.n	800ad68 <rshift+0x98>
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	1eea      	subs	r2, r5, #3
 800ad02:	4296      	cmp	r6, r2
 800ad04:	bf38      	it	cc
 800ad06:	2300      	movcc	r3, #0
 800ad08:	4423      	add	r3, r4
 800ad0a:	e015      	b.n	800ad38 <rshift+0x68>
 800ad0c:	46a1      	mov	r9, r4
 800ad0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad12:	f1c1 0820 	rsb	r8, r1, #32
 800ad16:	40cf      	lsrs	r7, r1
 800ad18:	f105 0e04 	add.w	lr, r5, #4
 800ad1c:	4576      	cmp	r6, lr
 800ad1e:	46f4      	mov	ip, lr
 800ad20:	d816      	bhi.n	800ad50 <rshift+0x80>
 800ad22:	1a9a      	subs	r2, r3, r2
 800ad24:	0092      	lsls	r2, r2, #2
 800ad26:	3a04      	subs	r2, #4
 800ad28:	3501      	adds	r5, #1
 800ad2a:	42ae      	cmp	r6, r5
 800ad2c:	bf38      	it	cc
 800ad2e:	2200      	movcc	r2, #0
 800ad30:	18a3      	adds	r3, r4, r2
 800ad32:	50a7      	str	r7, [r4, r2]
 800ad34:	b107      	cbz	r7, 800ad38 <rshift+0x68>
 800ad36:	3304      	adds	r3, #4
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	eba3 0204 	sub.w	r2, r3, r4
 800ad3e:	bf08      	it	eq
 800ad40:	2300      	moveq	r3, #0
 800ad42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad46:	6102      	str	r2, [r0, #16]
 800ad48:	bf08      	it	eq
 800ad4a:	6143      	streq	r3, [r0, #20]
 800ad4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad50:	f8dc c000 	ldr.w	ip, [ip]
 800ad54:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad58:	ea4c 0707 	orr.w	r7, ip, r7
 800ad5c:	f849 7b04 	str.w	r7, [r9], #4
 800ad60:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad64:	40cf      	lsrs	r7, r1
 800ad66:	e7d9      	b.n	800ad1c <rshift+0x4c>
 800ad68:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad6c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad70:	e7c2      	b.n	800acf8 <rshift+0x28>
 800ad72:	4623      	mov	r3, r4
 800ad74:	e7e0      	b.n	800ad38 <rshift+0x68>

0800ad76 <__hexdig_fun>:
 800ad76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad7a:	2b09      	cmp	r3, #9
 800ad7c:	d802      	bhi.n	800ad84 <__hexdig_fun+0xe>
 800ad7e:	3820      	subs	r0, #32
 800ad80:	b2c0      	uxtb	r0, r0
 800ad82:	4770      	bx	lr
 800ad84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad88:	2b05      	cmp	r3, #5
 800ad8a:	d801      	bhi.n	800ad90 <__hexdig_fun+0x1a>
 800ad8c:	3847      	subs	r0, #71	; 0x47
 800ad8e:	e7f7      	b.n	800ad80 <__hexdig_fun+0xa>
 800ad90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad94:	2b05      	cmp	r3, #5
 800ad96:	d801      	bhi.n	800ad9c <__hexdig_fun+0x26>
 800ad98:	3827      	subs	r0, #39	; 0x27
 800ad9a:	e7f1      	b.n	800ad80 <__hexdig_fun+0xa>
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	4770      	bx	lr

0800ada0 <__gethex>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	b08b      	sub	sp, #44	; 0x2c
 800ada6:	9305      	str	r3, [sp, #20]
 800ada8:	4bb2      	ldr	r3, [pc, #712]	; (800b074 <__gethex+0x2d4>)
 800adaa:	9002      	str	r0, [sp, #8]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	468b      	mov	fp, r1
 800adb0:	4618      	mov	r0, r3
 800adb2:	4690      	mov	r8, r2
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	f7f5 f9cb 	bl	8000150 <strlen>
 800adba:	4682      	mov	sl, r0
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	f8db 2000 	ldr.w	r2, [fp]
 800adc2:	4403      	add	r3, r0
 800adc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800adc8:	9306      	str	r3, [sp, #24]
 800adca:	1c93      	adds	r3, r2, #2
 800adcc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800add0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800add4:	32fe      	adds	r2, #254	; 0xfe
 800add6:	18d1      	adds	r1, r2, r3
 800add8:	461f      	mov	r7, r3
 800adda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800adde:	9101      	str	r1, [sp, #4]
 800ade0:	2830      	cmp	r0, #48	; 0x30
 800ade2:	d0f8      	beq.n	800add6 <__gethex+0x36>
 800ade4:	f7ff ffc7 	bl	800ad76 <__hexdig_fun>
 800ade8:	4604      	mov	r4, r0
 800adea:	2800      	cmp	r0, #0
 800adec:	d13a      	bne.n	800ae64 <__gethex+0xc4>
 800adee:	4652      	mov	r2, sl
 800adf0:	4638      	mov	r0, r7
 800adf2:	9903      	ldr	r1, [sp, #12]
 800adf4:	f001 fb62 	bl	800c4bc <strncmp>
 800adf8:	4605      	mov	r5, r0
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d166      	bne.n	800aecc <__gethex+0x12c>
 800adfe:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae02:	eb07 060a 	add.w	r6, r7, sl
 800ae06:	f7ff ffb6 	bl	800ad76 <__hexdig_fun>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d060      	beq.n	800aed0 <__gethex+0x130>
 800ae0e:	4633      	mov	r3, r6
 800ae10:	7818      	ldrb	r0, [r3, #0]
 800ae12:	461f      	mov	r7, r3
 800ae14:	2830      	cmp	r0, #48	; 0x30
 800ae16:	f103 0301 	add.w	r3, r3, #1
 800ae1a:	d0f9      	beq.n	800ae10 <__gethex+0x70>
 800ae1c:	f7ff ffab 	bl	800ad76 <__hexdig_fun>
 800ae20:	2301      	movs	r3, #1
 800ae22:	fab0 f480 	clz	r4, r0
 800ae26:	4635      	mov	r5, r6
 800ae28:	0964      	lsrs	r4, r4, #5
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4616      	mov	r6, r2
 800ae30:	7830      	ldrb	r0, [r6, #0]
 800ae32:	3201      	adds	r2, #1
 800ae34:	f7ff ff9f 	bl	800ad76 <__hexdig_fun>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1f8      	bne.n	800ae2e <__gethex+0x8e>
 800ae3c:	4652      	mov	r2, sl
 800ae3e:	4630      	mov	r0, r6
 800ae40:	9903      	ldr	r1, [sp, #12]
 800ae42:	f001 fb3b 	bl	800c4bc <strncmp>
 800ae46:	b980      	cbnz	r0, 800ae6a <__gethex+0xca>
 800ae48:	b94d      	cbnz	r5, 800ae5e <__gethex+0xbe>
 800ae4a:	eb06 050a 	add.w	r5, r6, sl
 800ae4e:	462a      	mov	r2, r5
 800ae50:	4616      	mov	r6, r2
 800ae52:	7830      	ldrb	r0, [r6, #0]
 800ae54:	3201      	adds	r2, #1
 800ae56:	f7ff ff8e 	bl	800ad76 <__hexdig_fun>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1f8      	bne.n	800ae50 <__gethex+0xb0>
 800ae5e:	1bad      	subs	r5, r5, r6
 800ae60:	00ad      	lsls	r5, r5, #2
 800ae62:	e004      	b.n	800ae6e <__gethex+0xce>
 800ae64:	2400      	movs	r4, #0
 800ae66:	4625      	mov	r5, r4
 800ae68:	e7e0      	b.n	800ae2c <__gethex+0x8c>
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	d1f7      	bne.n	800ae5e <__gethex+0xbe>
 800ae6e:	7833      	ldrb	r3, [r6, #0]
 800ae70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae74:	2b50      	cmp	r3, #80	; 0x50
 800ae76:	d139      	bne.n	800aeec <__gethex+0x14c>
 800ae78:	7873      	ldrb	r3, [r6, #1]
 800ae7a:	2b2b      	cmp	r3, #43	; 0x2b
 800ae7c:	d02a      	beq.n	800aed4 <__gethex+0x134>
 800ae7e:	2b2d      	cmp	r3, #45	; 0x2d
 800ae80:	d02c      	beq.n	800aedc <__gethex+0x13c>
 800ae82:	f04f 0900 	mov.w	r9, #0
 800ae86:	1c71      	adds	r1, r6, #1
 800ae88:	7808      	ldrb	r0, [r1, #0]
 800ae8a:	f7ff ff74 	bl	800ad76 <__hexdig_fun>
 800ae8e:	1e43      	subs	r3, r0, #1
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b18      	cmp	r3, #24
 800ae94:	d82a      	bhi.n	800aeec <__gethex+0x14c>
 800ae96:	f1a0 0210 	sub.w	r2, r0, #16
 800ae9a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae9e:	f7ff ff6a 	bl	800ad76 <__hexdig_fun>
 800aea2:	1e43      	subs	r3, r0, #1
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b18      	cmp	r3, #24
 800aea8:	d91b      	bls.n	800aee2 <__gethex+0x142>
 800aeaa:	f1b9 0f00 	cmp.w	r9, #0
 800aeae:	d000      	beq.n	800aeb2 <__gethex+0x112>
 800aeb0:	4252      	negs	r2, r2
 800aeb2:	4415      	add	r5, r2
 800aeb4:	f8cb 1000 	str.w	r1, [fp]
 800aeb8:	b1d4      	cbz	r4, 800aef0 <__gethex+0x150>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	bf14      	ite	ne
 800aec0:	2700      	movne	r7, #0
 800aec2:	2706      	moveq	r7, #6
 800aec4:	4638      	mov	r0, r7
 800aec6:	b00b      	add	sp, #44	; 0x2c
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	463e      	mov	r6, r7
 800aece:	4625      	mov	r5, r4
 800aed0:	2401      	movs	r4, #1
 800aed2:	e7cc      	b.n	800ae6e <__gethex+0xce>
 800aed4:	f04f 0900 	mov.w	r9, #0
 800aed8:	1cb1      	adds	r1, r6, #2
 800aeda:	e7d5      	b.n	800ae88 <__gethex+0xe8>
 800aedc:	f04f 0901 	mov.w	r9, #1
 800aee0:	e7fa      	b.n	800aed8 <__gethex+0x138>
 800aee2:	230a      	movs	r3, #10
 800aee4:	fb03 0202 	mla	r2, r3, r2, r0
 800aee8:	3a10      	subs	r2, #16
 800aeea:	e7d6      	b.n	800ae9a <__gethex+0xfa>
 800aeec:	4631      	mov	r1, r6
 800aeee:	e7e1      	b.n	800aeb4 <__gethex+0x114>
 800aef0:	4621      	mov	r1, r4
 800aef2:	1bf3      	subs	r3, r6, r7
 800aef4:	3b01      	subs	r3, #1
 800aef6:	2b07      	cmp	r3, #7
 800aef8:	dc0a      	bgt.n	800af10 <__gethex+0x170>
 800aefa:	9802      	ldr	r0, [sp, #8]
 800aefc:	f000 fafe 	bl	800b4fc <_Balloc>
 800af00:	4604      	mov	r4, r0
 800af02:	b940      	cbnz	r0, 800af16 <__gethex+0x176>
 800af04:	4602      	mov	r2, r0
 800af06:	21de      	movs	r1, #222	; 0xde
 800af08:	4b5b      	ldr	r3, [pc, #364]	; (800b078 <__gethex+0x2d8>)
 800af0a:	485c      	ldr	r0, [pc, #368]	; (800b07c <__gethex+0x2dc>)
 800af0c:	f001 faf8 	bl	800c500 <__assert_func>
 800af10:	3101      	adds	r1, #1
 800af12:	105b      	asrs	r3, r3, #1
 800af14:	e7ef      	b.n	800aef6 <__gethex+0x156>
 800af16:	f04f 0b00 	mov.w	fp, #0
 800af1a:	f100 0914 	add.w	r9, r0, #20
 800af1e:	f1ca 0301 	rsb	r3, sl, #1
 800af22:	f8cd 9010 	str.w	r9, [sp, #16]
 800af26:	f8cd b004 	str.w	fp, [sp, #4]
 800af2a:	9308      	str	r3, [sp, #32]
 800af2c:	42b7      	cmp	r7, r6
 800af2e:	d33f      	bcc.n	800afb0 <__gethex+0x210>
 800af30:	9f04      	ldr	r7, [sp, #16]
 800af32:	9b01      	ldr	r3, [sp, #4]
 800af34:	f847 3b04 	str.w	r3, [r7], #4
 800af38:	eba7 0709 	sub.w	r7, r7, r9
 800af3c:	10bf      	asrs	r7, r7, #2
 800af3e:	6127      	str	r7, [r4, #16]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fbcd 	bl	800b6e0 <__hi0bits>
 800af46:	017f      	lsls	r7, r7, #5
 800af48:	f8d8 6000 	ldr.w	r6, [r8]
 800af4c:	1a3f      	subs	r7, r7, r0
 800af4e:	42b7      	cmp	r7, r6
 800af50:	dd62      	ble.n	800b018 <__gethex+0x278>
 800af52:	1bbf      	subs	r7, r7, r6
 800af54:	4639      	mov	r1, r7
 800af56:	4620      	mov	r0, r4
 800af58:	f000 ff67 	bl	800be2a <__any_on>
 800af5c:	4682      	mov	sl, r0
 800af5e:	b1a8      	cbz	r0, 800af8c <__gethex+0x1ec>
 800af60:	f04f 0a01 	mov.w	sl, #1
 800af64:	1e7b      	subs	r3, r7, #1
 800af66:	1159      	asrs	r1, r3, #5
 800af68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af6c:	f003 021f 	and.w	r2, r3, #31
 800af70:	fa0a f202 	lsl.w	r2, sl, r2
 800af74:	420a      	tst	r2, r1
 800af76:	d009      	beq.n	800af8c <__gethex+0x1ec>
 800af78:	4553      	cmp	r3, sl
 800af7a:	dd05      	ble.n	800af88 <__gethex+0x1e8>
 800af7c:	4620      	mov	r0, r4
 800af7e:	1eb9      	subs	r1, r7, #2
 800af80:	f000 ff53 	bl	800be2a <__any_on>
 800af84:	2800      	cmp	r0, #0
 800af86:	d144      	bne.n	800b012 <__gethex+0x272>
 800af88:	f04f 0a02 	mov.w	sl, #2
 800af8c:	4639      	mov	r1, r7
 800af8e:	4620      	mov	r0, r4
 800af90:	f7ff fe9e 	bl	800acd0 <rshift>
 800af94:	443d      	add	r5, r7
 800af96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af9a:	42ab      	cmp	r3, r5
 800af9c:	da4a      	bge.n	800b034 <__gethex+0x294>
 800af9e:	4621      	mov	r1, r4
 800afa0:	9802      	ldr	r0, [sp, #8]
 800afa2:	f000 faeb 	bl	800b57c <_Bfree>
 800afa6:	2300      	movs	r3, #0
 800afa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afaa:	27a3      	movs	r7, #163	; 0xa3
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	e789      	b.n	800aec4 <__gethex+0x124>
 800afb0:	1e73      	subs	r3, r6, #1
 800afb2:	9a06      	ldr	r2, [sp, #24]
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afba:	4293      	cmp	r3, r2
 800afbc:	d019      	beq.n	800aff2 <__gethex+0x252>
 800afbe:	f1bb 0f20 	cmp.w	fp, #32
 800afc2:	d107      	bne.n	800afd4 <__gethex+0x234>
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	9a01      	ldr	r2, [sp, #4]
 800afc8:	f843 2b04 	str.w	r2, [r3], #4
 800afcc:	9304      	str	r3, [sp, #16]
 800afce:	2300      	movs	r3, #0
 800afd0:	469b      	mov	fp, r3
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800afd8:	f7ff fecd 	bl	800ad76 <__hexdig_fun>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	f000 000f 	and.w	r0, r0, #15
 800afe2:	fa00 f00b 	lsl.w	r0, r0, fp
 800afe6:	4303      	orrs	r3, r0
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	f10b 0b04 	add.w	fp, fp, #4
 800afee:	9b07      	ldr	r3, [sp, #28]
 800aff0:	e00d      	b.n	800b00e <__gethex+0x26e>
 800aff2:	9a08      	ldr	r2, [sp, #32]
 800aff4:	1e73      	subs	r3, r6, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	42bb      	cmp	r3, r7
 800affa:	d3e0      	bcc.n	800afbe <__gethex+0x21e>
 800affc:	4618      	mov	r0, r3
 800affe:	4652      	mov	r2, sl
 800b000:	9903      	ldr	r1, [sp, #12]
 800b002:	9309      	str	r3, [sp, #36]	; 0x24
 800b004:	f001 fa5a 	bl	800c4bc <strncmp>
 800b008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d1d7      	bne.n	800afbe <__gethex+0x21e>
 800b00e:	461e      	mov	r6, r3
 800b010:	e78c      	b.n	800af2c <__gethex+0x18c>
 800b012:	f04f 0a03 	mov.w	sl, #3
 800b016:	e7b9      	b.n	800af8c <__gethex+0x1ec>
 800b018:	da09      	bge.n	800b02e <__gethex+0x28e>
 800b01a:	1bf7      	subs	r7, r6, r7
 800b01c:	4621      	mov	r1, r4
 800b01e:	463a      	mov	r2, r7
 800b020:	9802      	ldr	r0, [sp, #8]
 800b022:	f000 fcc3 	bl	800b9ac <__lshift>
 800b026:	4604      	mov	r4, r0
 800b028:	1bed      	subs	r5, r5, r7
 800b02a:	f100 0914 	add.w	r9, r0, #20
 800b02e:	f04f 0a00 	mov.w	sl, #0
 800b032:	e7b0      	b.n	800af96 <__gethex+0x1f6>
 800b034:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b038:	42a8      	cmp	r0, r5
 800b03a:	dd72      	ble.n	800b122 <__gethex+0x382>
 800b03c:	1b45      	subs	r5, r0, r5
 800b03e:	42ae      	cmp	r6, r5
 800b040:	dc35      	bgt.n	800b0ae <__gethex+0x30e>
 800b042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d029      	beq.n	800b09e <__gethex+0x2fe>
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d02b      	beq.n	800b0a6 <__gethex+0x306>
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d11c      	bne.n	800b08c <__gethex+0x2ec>
 800b052:	42ae      	cmp	r6, r5
 800b054:	d11a      	bne.n	800b08c <__gethex+0x2ec>
 800b056:	2e01      	cmp	r6, #1
 800b058:	d112      	bne.n	800b080 <__gethex+0x2e0>
 800b05a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b05e:	9a05      	ldr	r2, [sp, #20]
 800b060:	2762      	movs	r7, #98	; 0x62
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	2301      	movs	r3, #1
 800b066:	6123      	str	r3, [r4, #16]
 800b068:	f8c9 3000 	str.w	r3, [r9]
 800b06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b06e:	601c      	str	r4, [r3, #0]
 800b070:	e728      	b.n	800aec4 <__gethex+0x124>
 800b072:	bf00      	nop
 800b074:	0800cae0 	.word	0x0800cae0
 800b078:	0800ca68 	.word	0x0800ca68
 800b07c:	0800ca79 	.word	0x0800ca79
 800b080:	4620      	mov	r0, r4
 800b082:	1e71      	subs	r1, r6, #1
 800b084:	f000 fed1 	bl	800be2a <__any_on>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1e6      	bne.n	800b05a <__gethex+0x2ba>
 800b08c:	4621      	mov	r1, r4
 800b08e:	9802      	ldr	r0, [sp, #8]
 800b090:	f000 fa74 	bl	800b57c <_Bfree>
 800b094:	2300      	movs	r3, #0
 800b096:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b098:	2750      	movs	r7, #80	; 0x50
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	e712      	b.n	800aec4 <__gethex+0x124>
 800b09e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1f3      	bne.n	800b08c <__gethex+0x2ec>
 800b0a4:	e7d9      	b.n	800b05a <__gethex+0x2ba>
 800b0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1d6      	bne.n	800b05a <__gethex+0x2ba>
 800b0ac:	e7ee      	b.n	800b08c <__gethex+0x2ec>
 800b0ae:	1e6f      	subs	r7, r5, #1
 800b0b0:	f1ba 0f00 	cmp.w	sl, #0
 800b0b4:	d132      	bne.n	800b11c <__gethex+0x37c>
 800b0b6:	b127      	cbz	r7, 800b0c2 <__gethex+0x322>
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 feb5 	bl	800be2a <__any_on>
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	117b      	asrs	r3, r7, #5
 800b0c6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b0ca:	f007 071f 	and.w	r7, r7, #31
 800b0ce:	fa01 f707 	lsl.w	r7, r1, r7
 800b0d2:	421f      	tst	r7, r3
 800b0d4:	f04f 0702 	mov.w	r7, #2
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4620      	mov	r0, r4
 800b0dc:	bf18      	it	ne
 800b0de:	f04a 0a02 	orrne.w	sl, sl, #2
 800b0e2:	1b76      	subs	r6, r6, r5
 800b0e4:	f7ff fdf4 	bl	800acd0 <rshift>
 800b0e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0ec:	f1ba 0f00 	cmp.w	sl, #0
 800b0f0:	d048      	beq.n	800b184 <__gethex+0x3e4>
 800b0f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d015      	beq.n	800b126 <__gethex+0x386>
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d017      	beq.n	800b12e <__gethex+0x38e>
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d109      	bne.n	800b116 <__gethex+0x376>
 800b102:	f01a 0f02 	tst.w	sl, #2
 800b106:	d006      	beq.n	800b116 <__gethex+0x376>
 800b108:	f8d9 0000 	ldr.w	r0, [r9]
 800b10c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b110:	f01a 0f01 	tst.w	sl, #1
 800b114:	d10e      	bne.n	800b134 <__gethex+0x394>
 800b116:	f047 0710 	orr.w	r7, r7, #16
 800b11a:	e033      	b.n	800b184 <__gethex+0x3e4>
 800b11c:	f04f 0a01 	mov.w	sl, #1
 800b120:	e7cf      	b.n	800b0c2 <__gethex+0x322>
 800b122:	2701      	movs	r7, #1
 800b124:	e7e2      	b.n	800b0ec <__gethex+0x34c>
 800b126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b128:	f1c3 0301 	rsb	r3, r3, #1
 800b12c:	9315      	str	r3, [sp, #84]	; 0x54
 800b12e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f0      	beq.n	800b116 <__gethex+0x376>
 800b134:	f04f 0c00 	mov.w	ip, #0
 800b138:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b13c:	f104 0314 	add.w	r3, r4, #20
 800b140:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b144:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b148:	4618      	mov	r0, r3
 800b14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b152:	d01c      	beq.n	800b18e <__gethex+0x3ee>
 800b154:	3201      	adds	r2, #1
 800b156:	6002      	str	r2, [r0, #0]
 800b158:	2f02      	cmp	r7, #2
 800b15a:	f104 0314 	add.w	r3, r4, #20
 800b15e:	d13d      	bne.n	800b1dc <__gethex+0x43c>
 800b160:	f8d8 2000 	ldr.w	r2, [r8]
 800b164:	3a01      	subs	r2, #1
 800b166:	42b2      	cmp	r2, r6
 800b168:	d10a      	bne.n	800b180 <__gethex+0x3e0>
 800b16a:	2201      	movs	r2, #1
 800b16c:	1171      	asrs	r1, r6, #5
 800b16e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b172:	f006 061f 	and.w	r6, r6, #31
 800b176:	fa02 f606 	lsl.w	r6, r2, r6
 800b17a:	421e      	tst	r6, r3
 800b17c:	bf18      	it	ne
 800b17e:	4617      	movne	r7, r2
 800b180:	f047 0720 	orr.w	r7, r7, #32
 800b184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b186:	601c      	str	r4, [r3, #0]
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	601d      	str	r5, [r3, #0]
 800b18c:	e69a      	b.n	800aec4 <__gethex+0x124>
 800b18e:	4299      	cmp	r1, r3
 800b190:	f843 cc04 	str.w	ip, [r3, #-4]
 800b194:	d8d8      	bhi.n	800b148 <__gethex+0x3a8>
 800b196:	68a3      	ldr	r3, [r4, #8]
 800b198:	459b      	cmp	fp, r3
 800b19a:	db17      	blt.n	800b1cc <__gethex+0x42c>
 800b19c:	6861      	ldr	r1, [r4, #4]
 800b19e:	9802      	ldr	r0, [sp, #8]
 800b1a0:	3101      	adds	r1, #1
 800b1a2:	f000 f9ab 	bl	800b4fc <_Balloc>
 800b1a6:	4681      	mov	r9, r0
 800b1a8:	b918      	cbnz	r0, 800b1b2 <__gethex+0x412>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	2184      	movs	r1, #132	; 0x84
 800b1ae:	4b19      	ldr	r3, [pc, #100]	; (800b214 <__gethex+0x474>)
 800b1b0:	e6ab      	b.n	800af0a <__gethex+0x16a>
 800b1b2:	6922      	ldr	r2, [r4, #16]
 800b1b4:	f104 010c 	add.w	r1, r4, #12
 800b1b8:	3202      	adds	r2, #2
 800b1ba:	0092      	lsls	r2, r2, #2
 800b1bc:	300c      	adds	r0, #12
 800b1be:	f7fc fe4a 	bl	8007e56 <memcpy>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	9802      	ldr	r0, [sp, #8]
 800b1c6:	f000 f9d9 	bl	800b57c <_Bfree>
 800b1ca:	464c      	mov	r4, r9
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	6122      	str	r2, [r4, #16]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1d8:	615a      	str	r2, [r3, #20]
 800b1da:	e7bd      	b.n	800b158 <__gethex+0x3b8>
 800b1dc:	6922      	ldr	r2, [r4, #16]
 800b1de:	455a      	cmp	r2, fp
 800b1e0:	dd0b      	ble.n	800b1fa <__gethex+0x45a>
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f7ff fd73 	bl	800acd0 <rshift>
 800b1ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1ee:	3501      	adds	r5, #1
 800b1f0:	42ab      	cmp	r3, r5
 800b1f2:	f6ff aed4 	blt.w	800af9e <__gethex+0x1fe>
 800b1f6:	2701      	movs	r7, #1
 800b1f8:	e7c2      	b.n	800b180 <__gethex+0x3e0>
 800b1fa:	f016 061f 	ands.w	r6, r6, #31
 800b1fe:	d0fa      	beq.n	800b1f6 <__gethex+0x456>
 800b200:	4453      	add	r3, sl
 800b202:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b206:	f000 fa6b 	bl	800b6e0 <__hi0bits>
 800b20a:	f1c6 0620 	rsb	r6, r6, #32
 800b20e:	42b0      	cmp	r0, r6
 800b210:	dbe7      	blt.n	800b1e2 <__gethex+0x442>
 800b212:	e7f0      	b.n	800b1f6 <__gethex+0x456>
 800b214:	0800ca68 	.word	0x0800ca68

0800b218 <L_shift>:
 800b218:	f1c2 0208 	rsb	r2, r2, #8
 800b21c:	0092      	lsls	r2, r2, #2
 800b21e:	b570      	push	{r4, r5, r6, lr}
 800b220:	f1c2 0620 	rsb	r6, r2, #32
 800b224:	6843      	ldr	r3, [r0, #4]
 800b226:	6804      	ldr	r4, [r0, #0]
 800b228:	fa03 f506 	lsl.w	r5, r3, r6
 800b22c:	432c      	orrs	r4, r5
 800b22e:	40d3      	lsrs	r3, r2
 800b230:	6004      	str	r4, [r0, #0]
 800b232:	f840 3f04 	str.w	r3, [r0, #4]!
 800b236:	4288      	cmp	r0, r1
 800b238:	d3f4      	bcc.n	800b224 <L_shift+0xc>
 800b23a:	bd70      	pop	{r4, r5, r6, pc}

0800b23c <__match>:
 800b23c:	b530      	push	{r4, r5, lr}
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b246:	b914      	cbnz	r4, 800b24e <__match+0x12>
 800b248:	6003      	str	r3, [r0, #0]
 800b24a:	2001      	movs	r0, #1
 800b24c:	bd30      	pop	{r4, r5, pc}
 800b24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b252:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b256:	2d19      	cmp	r5, #25
 800b258:	bf98      	it	ls
 800b25a:	3220      	addls	r2, #32
 800b25c:	42a2      	cmp	r2, r4
 800b25e:	d0f0      	beq.n	800b242 <__match+0x6>
 800b260:	2000      	movs	r0, #0
 800b262:	e7f3      	b.n	800b24c <__match+0x10>

0800b264 <__hexnan>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	2500      	movs	r5, #0
 800b26a:	680b      	ldr	r3, [r1, #0]
 800b26c:	4682      	mov	sl, r0
 800b26e:	115e      	asrs	r6, r3, #5
 800b270:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b274:	f013 031f 	ands.w	r3, r3, #31
 800b278:	bf18      	it	ne
 800b27a:	3604      	addne	r6, #4
 800b27c:	1f37      	subs	r7, r6, #4
 800b27e:	46b9      	mov	r9, r7
 800b280:	463c      	mov	r4, r7
 800b282:	46ab      	mov	fp, r5
 800b284:	b087      	sub	sp, #28
 800b286:	4690      	mov	r8, r2
 800b288:	6802      	ldr	r2, [r0, #0]
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b290:	9502      	str	r5, [sp, #8]
 800b292:	7851      	ldrb	r1, [r2, #1]
 800b294:	1c53      	adds	r3, r2, #1
 800b296:	9303      	str	r3, [sp, #12]
 800b298:	b341      	cbz	r1, 800b2ec <__hexnan+0x88>
 800b29a:	4608      	mov	r0, r1
 800b29c:	9205      	str	r2, [sp, #20]
 800b29e:	9104      	str	r1, [sp, #16]
 800b2a0:	f7ff fd69 	bl	800ad76 <__hexdig_fun>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d14f      	bne.n	800b348 <__hexnan+0xe4>
 800b2a8:	9904      	ldr	r1, [sp, #16]
 800b2aa:	9a05      	ldr	r2, [sp, #20]
 800b2ac:	2920      	cmp	r1, #32
 800b2ae:	d818      	bhi.n	800b2e2 <__hexnan+0x7e>
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	459b      	cmp	fp, r3
 800b2b4:	dd13      	ble.n	800b2de <__hexnan+0x7a>
 800b2b6:	454c      	cmp	r4, r9
 800b2b8:	d206      	bcs.n	800b2c8 <__hexnan+0x64>
 800b2ba:	2d07      	cmp	r5, #7
 800b2bc:	dc04      	bgt.n	800b2c8 <__hexnan+0x64>
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff ffa8 	bl	800b218 <L_shift>
 800b2c8:	4544      	cmp	r4, r8
 800b2ca:	d950      	bls.n	800b36e <__hexnan+0x10a>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f1a4 0904 	sub.w	r9, r4, #4
 800b2d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	464c      	mov	r4, r9
 800b2da:	f8cd b008 	str.w	fp, [sp, #8]
 800b2de:	9a03      	ldr	r2, [sp, #12]
 800b2e0:	e7d7      	b.n	800b292 <__hexnan+0x2e>
 800b2e2:	2929      	cmp	r1, #41	; 0x29
 800b2e4:	d156      	bne.n	800b394 <__hexnan+0x130>
 800b2e6:	3202      	adds	r2, #2
 800b2e8:	f8ca 2000 	str.w	r2, [sl]
 800b2ec:	f1bb 0f00 	cmp.w	fp, #0
 800b2f0:	d050      	beq.n	800b394 <__hexnan+0x130>
 800b2f2:	454c      	cmp	r4, r9
 800b2f4:	d206      	bcs.n	800b304 <__hexnan+0xa0>
 800b2f6:	2d07      	cmp	r5, #7
 800b2f8:	dc04      	bgt.n	800b304 <__hexnan+0xa0>
 800b2fa:	462a      	mov	r2, r5
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ff8a 	bl	800b218 <L_shift>
 800b304:	4544      	cmp	r4, r8
 800b306:	d934      	bls.n	800b372 <__hexnan+0x10e>
 800b308:	4623      	mov	r3, r4
 800b30a:	f1a8 0204 	sub.w	r2, r8, #4
 800b30e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b312:	429f      	cmp	r7, r3
 800b314:	f842 1f04 	str.w	r1, [r2, #4]!
 800b318:	d2f9      	bcs.n	800b30e <__hexnan+0xaa>
 800b31a:	1b3b      	subs	r3, r7, r4
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3304      	adds	r3, #4
 800b322:	3401      	adds	r4, #1
 800b324:	3e03      	subs	r6, #3
 800b326:	42b4      	cmp	r4, r6
 800b328:	bf88      	it	hi
 800b32a:	2304      	movhi	r3, #4
 800b32c:	2200      	movs	r2, #0
 800b32e:	4443      	add	r3, r8
 800b330:	f843 2b04 	str.w	r2, [r3], #4
 800b334:	429f      	cmp	r7, r3
 800b336:	d2fb      	bcs.n	800b330 <__hexnan+0xcc>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	b91b      	cbnz	r3, 800b344 <__hexnan+0xe0>
 800b33c:	4547      	cmp	r7, r8
 800b33e:	d127      	bne.n	800b390 <__hexnan+0x12c>
 800b340:	2301      	movs	r3, #1
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	2005      	movs	r0, #5
 800b346:	e026      	b.n	800b396 <__hexnan+0x132>
 800b348:	3501      	adds	r5, #1
 800b34a:	2d08      	cmp	r5, #8
 800b34c:	f10b 0b01 	add.w	fp, fp, #1
 800b350:	dd06      	ble.n	800b360 <__hexnan+0xfc>
 800b352:	4544      	cmp	r4, r8
 800b354:	d9c3      	bls.n	800b2de <__hexnan+0x7a>
 800b356:	2300      	movs	r3, #0
 800b358:	2501      	movs	r5, #1
 800b35a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b35e:	3c04      	subs	r4, #4
 800b360:	6822      	ldr	r2, [r4, #0]
 800b362:	f000 000f 	and.w	r0, r0, #15
 800b366:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b36a:	6022      	str	r2, [r4, #0]
 800b36c:	e7b7      	b.n	800b2de <__hexnan+0x7a>
 800b36e:	2508      	movs	r5, #8
 800b370:	e7b5      	b.n	800b2de <__hexnan+0x7a>
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0df      	beq.n	800b338 <__hexnan+0xd4>
 800b378:	f04f 32ff 	mov.w	r2, #4294967295
 800b37c:	f1c3 0320 	rsb	r3, r3, #32
 800b380:	fa22 f303 	lsr.w	r3, r2, r3
 800b384:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b388:	401a      	ands	r2, r3
 800b38a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b38e:	e7d3      	b.n	800b338 <__hexnan+0xd4>
 800b390:	3f04      	subs	r7, #4
 800b392:	e7d1      	b.n	800b338 <__hexnan+0xd4>
 800b394:	2004      	movs	r0, #4
 800b396:	b007      	add	sp, #28
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b39c <_localeconv_r>:
 800b39c:	4800      	ldr	r0, [pc, #0]	; (800b3a0 <_localeconv_r+0x4>)
 800b39e:	4770      	bx	lr
 800b3a0:	20000168 	.word	0x20000168

0800b3a4 <_lseek_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4d05      	ldr	r5, [pc, #20]	; (800b3c4 <_lseek_r+0x20>)
 800b3b0:	602a      	str	r2, [r5, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f7f6 fafa 	bl	80019ac <_lseek>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d102      	bne.n	800b3c2 <_lseek_r+0x1e>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	b103      	cbz	r3, 800b3c2 <_lseek_r+0x1e>
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	200013a4 	.word	0x200013a4

0800b3c8 <__swhatbuf_r>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	460e      	mov	r6, r1
 800b3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	461d      	mov	r5, r3
 800b3d6:	b096      	sub	sp, #88	; 0x58
 800b3d8:	da08      	bge.n	800b3ec <__swhatbuf_r+0x24>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3e0:	602a      	str	r2, [r5, #0]
 800b3e2:	061a      	lsls	r2, r3, #24
 800b3e4:	d410      	bmi.n	800b408 <__swhatbuf_r+0x40>
 800b3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ea:	e00e      	b.n	800b40a <__swhatbuf_r+0x42>
 800b3ec:	466a      	mov	r2, sp
 800b3ee:	f001 f8b7 	bl	800c560 <_fstat_r>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	dbf1      	blt.n	800b3da <__swhatbuf_r+0x12>
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b400:	425a      	negs	r2, r3
 800b402:	415a      	adcs	r2, r3
 800b404:	602a      	str	r2, [r5, #0]
 800b406:	e7ee      	b.n	800b3e6 <__swhatbuf_r+0x1e>
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	2000      	movs	r0, #0
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	b016      	add	sp, #88	; 0x58
 800b410:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b414 <__smakebuf_r>:
 800b414:	898b      	ldrh	r3, [r1, #12]
 800b416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b418:	079d      	lsls	r5, r3, #30
 800b41a:	4606      	mov	r6, r0
 800b41c:	460c      	mov	r4, r1
 800b41e:	d507      	bpl.n	800b430 <__smakebuf_r+0x1c>
 800b420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	2301      	movs	r3, #1
 800b42a:	6163      	str	r3, [r4, #20]
 800b42c:	b002      	add	sp, #8
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	466a      	mov	r2, sp
 800b432:	ab01      	add	r3, sp, #4
 800b434:	f7ff ffc8 	bl	800b3c8 <__swhatbuf_r>
 800b438:	9900      	ldr	r1, [sp, #0]
 800b43a:	4605      	mov	r5, r0
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7fc fd41 	bl	8007ec4 <_malloc_r>
 800b442:	b948      	cbnz	r0, 800b458 <__smakebuf_r+0x44>
 800b444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b448:	059a      	lsls	r2, r3, #22
 800b44a:	d4ef      	bmi.n	800b42c <__smakebuf_r+0x18>
 800b44c:	f023 0303 	bic.w	r3, r3, #3
 800b450:	f043 0302 	orr.w	r3, r3, #2
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	e7e3      	b.n	800b420 <__smakebuf_r+0xc>
 800b458:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <__smakebuf_r+0x7c>)
 800b45a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	6020      	str	r0, [r4, #0]
 800b460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	6120      	str	r0, [r4, #16]
 800b46a:	6163      	str	r3, [r4, #20]
 800b46c:	9b01      	ldr	r3, [sp, #4]
 800b46e:	b15b      	cbz	r3, 800b488 <__smakebuf_r+0x74>
 800b470:	4630      	mov	r0, r6
 800b472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b476:	f001 f885 	bl	800c584 <_isatty_r>
 800b47a:	b128      	cbz	r0, 800b488 <__smakebuf_r+0x74>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f023 0303 	bic.w	r3, r3, #3
 800b482:	f043 0301 	orr.w	r3, r3, #1
 800b486:	81a3      	strh	r3, [r4, #12]
 800b488:	89a0      	ldrh	r0, [r4, #12]
 800b48a:	4305      	orrs	r5, r0
 800b48c:	81a5      	strh	r5, [r4, #12]
 800b48e:	e7cd      	b.n	800b42c <__smakebuf_r+0x18>
 800b490:	08007c65 	.word	0x08007c65

0800b494 <malloc>:
 800b494:	4b02      	ldr	r3, [pc, #8]	; (800b4a0 <malloc+0xc>)
 800b496:	4601      	mov	r1, r0
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f7fc bd13 	b.w	8007ec4 <_malloc_r>
 800b49e:	bf00      	nop
 800b4a0:	20000010 	.word	0x20000010

0800b4a4 <__ascii_mbtowc>:
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	b901      	cbnz	r1, 800b4aa <__ascii_mbtowc+0x6>
 800b4a8:	a901      	add	r1, sp, #4
 800b4aa:	b142      	cbz	r2, 800b4be <__ascii_mbtowc+0x1a>
 800b4ac:	b14b      	cbz	r3, 800b4c2 <__ascii_mbtowc+0x1e>
 800b4ae:	7813      	ldrb	r3, [r2, #0]
 800b4b0:	600b      	str	r3, [r1, #0]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	1e10      	subs	r0, r2, #0
 800b4b6:	bf18      	it	ne
 800b4b8:	2001      	movne	r0, #1
 800b4ba:	b002      	add	sp, #8
 800b4bc:	4770      	bx	lr
 800b4be:	4610      	mov	r0, r2
 800b4c0:	e7fb      	b.n	800b4ba <__ascii_mbtowc+0x16>
 800b4c2:	f06f 0001 	mvn.w	r0, #1
 800b4c6:	e7f8      	b.n	800b4ba <__ascii_mbtowc+0x16>

0800b4c8 <memchr>:
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	b2c9      	uxtb	r1, r1
 800b4ce:	4402      	add	r2, r0
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	d101      	bne.n	800b4da <memchr+0x12>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e003      	b.n	800b4e2 <memchr+0x1a>
 800b4da:	7804      	ldrb	r4, [r0, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	428c      	cmp	r4, r1
 800b4e0:	d1f6      	bne.n	800b4d0 <memchr+0x8>
 800b4e2:	bd10      	pop	{r4, pc}

0800b4e4 <__malloc_lock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_lock+0x8>)
 800b4e6:	f7fc bcb4 	b.w	8007e52 <__retarget_lock_acquire_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20001398 	.word	0x20001398

0800b4f0 <__malloc_unlock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__malloc_unlock+0x8>)
 800b4f2:	f7fc bcaf 	b.w	8007e54 <__retarget_lock_release_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	20001398 	.word	0x20001398

0800b4fc <_Balloc>:
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b500:	4604      	mov	r4, r0
 800b502:	460d      	mov	r5, r1
 800b504:	b976      	cbnz	r6, 800b524 <_Balloc+0x28>
 800b506:	2010      	movs	r0, #16
 800b508:	f7ff ffc4 	bl	800b494 <malloc>
 800b50c:	4602      	mov	r2, r0
 800b50e:	6260      	str	r0, [r4, #36]	; 0x24
 800b510:	b920      	cbnz	r0, 800b51c <_Balloc+0x20>
 800b512:	2166      	movs	r1, #102	; 0x66
 800b514:	4b17      	ldr	r3, [pc, #92]	; (800b574 <_Balloc+0x78>)
 800b516:	4818      	ldr	r0, [pc, #96]	; (800b578 <_Balloc+0x7c>)
 800b518:	f000 fff2 	bl	800c500 <__assert_func>
 800b51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b520:	6006      	str	r6, [r0, #0]
 800b522:	60c6      	str	r6, [r0, #12]
 800b524:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b526:	68f3      	ldr	r3, [r6, #12]
 800b528:	b183      	cbz	r3, 800b54c <_Balloc+0x50>
 800b52a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b532:	b9b8      	cbnz	r0, 800b564 <_Balloc+0x68>
 800b534:	2101      	movs	r1, #1
 800b536:	fa01 f605 	lsl.w	r6, r1, r5
 800b53a:	1d72      	adds	r2, r6, #5
 800b53c:	4620      	mov	r0, r4
 800b53e:	0092      	lsls	r2, r2, #2
 800b540:	f000 fc94 	bl	800be6c <_calloc_r>
 800b544:	b160      	cbz	r0, 800b560 <_Balloc+0x64>
 800b546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b54a:	e00e      	b.n	800b56a <_Balloc+0x6e>
 800b54c:	2221      	movs	r2, #33	; 0x21
 800b54e:	2104      	movs	r1, #4
 800b550:	4620      	mov	r0, r4
 800b552:	f000 fc8b 	bl	800be6c <_calloc_r>
 800b556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b558:	60f0      	str	r0, [r6, #12]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e4      	bne.n	800b52a <_Balloc+0x2e>
 800b560:	2000      	movs	r0, #0
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	6802      	ldr	r2, [r0, #0]
 800b566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b56a:	2300      	movs	r3, #0
 800b56c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b570:	e7f7      	b.n	800b562 <_Balloc+0x66>
 800b572:	bf00      	nop
 800b574:	0800c9f6 	.word	0x0800c9f6
 800b578:	0800caf4 	.word	0x0800caf4

0800b57c <_Bfree>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b580:	4605      	mov	r5, r0
 800b582:	460c      	mov	r4, r1
 800b584:	b976      	cbnz	r6, 800b5a4 <_Bfree+0x28>
 800b586:	2010      	movs	r0, #16
 800b588:	f7ff ff84 	bl	800b494 <malloc>
 800b58c:	4602      	mov	r2, r0
 800b58e:	6268      	str	r0, [r5, #36]	; 0x24
 800b590:	b920      	cbnz	r0, 800b59c <_Bfree+0x20>
 800b592:	218a      	movs	r1, #138	; 0x8a
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <_Bfree+0x3c>)
 800b596:	4809      	ldr	r0, [pc, #36]	; (800b5bc <_Bfree+0x40>)
 800b598:	f000 ffb2 	bl	800c500 <__assert_func>
 800b59c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5a0:	6006      	str	r6, [r0, #0]
 800b5a2:	60c6      	str	r6, [r0, #12]
 800b5a4:	b13c      	cbz	r4, 800b5b6 <_Bfree+0x3a>
 800b5a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5a8:	6862      	ldr	r2, [r4, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5b0:	6021      	str	r1, [r4, #0]
 800b5b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	0800c9f6 	.word	0x0800c9f6
 800b5bc:	0800caf4 	.word	0x0800caf4

0800b5c0 <__multadd>:
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	461e      	mov	r6, r3
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	690d      	ldr	r5, [r1, #16]
 800b5ce:	f101 0c14 	add.w	ip, r1, #20
 800b5d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	b299      	uxth	r1, r3
 800b5da:	fb02 6101 	mla	r1, r2, r1, r6
 800b5de:	0c1e      	lsrs	r6, r3, #16
 800b5e0:	0c0b      	lsrs	r3, r1, #16
 800b5e2:	fb02 3306 	mla	r3, r2, r6, r3
 800b5e6:	b289      	uxth	r1, r1
 800b5e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5ec:	4285      	cmp	r5, r0
 800b5ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b5f6:	dcec      	bgt.n	800b5d2 <__multadd+0x12>
 800b5f8:	b30e      	cbz	r6, 800b63e <__multadd+0x7e>
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	42ab      	cmp	r3, r5
 800b5fe:	dc19      	bgt.n	800b634 <__multadd+0x74>
 800b600:	6861      	ldr	r1, [r4, #4]
 800b602:	4638      	mov	r0, r7
 800b604:	3101      	adds	r1, #1
 800b606:	f7ff ff79 	bl	800b4fc <_Balloc>
 800b60a:	4680      	mov	r8, r0
 800b60c:	b928      	cbnz	r0, 800b61a <__multadd+0x5a>
 800b60e:	4602      	mov	r2, r0
 800b610:	21b5      	movs	r1, #181	; 0xb5
 800b612:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <__multadd+0x84>)
 800b614:	480c      	ldr	r0, [pc, #48]	; (800b648 <__multadd+0x88>)
 800b616:	f000 ff73 	bl	800c500 <__assert_func>
 800b61a:	6922      	ldr	r2, [r4, #16]
 800b61c:	f104 010c 	add.w	r1, r4, #12
 800b620:	3202      	adds	r2, #2
 800b622:	0092      	lsls	r2, r2, #2
 800b624:	300c      	adds	r0, #12
 800b626:	f7fc fc16 	bl	8007e56 <memcpy>
 800b62a:	4621      	mov	r1, r4
 800b62c:	4638      	mov	r0, r7
 800b62e:	f7ff ffa5 	bl	800b57c <_Bfree>
 800b632:	4644      	mov	r4, r8
 800b634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b638:	3501      	adds	r5, #1
 800b63a:	615e      	str	r6, [r3, #20]
 800b63c:	6125      	str	r5, [r4, #16]
 800b63e:	4620      	mov	r0, r4
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	0800ca68 	.word	0x0800ca68
 800b648:	0800caf4 	.word	0x0800caf4

0800b64c <__s2b>:
 800b64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	4615      	mov	r5, r2
 800b652:	2209      	movs	r2, #9
 800b654:	461f      	mov	r7, r3
 800b656:	3308      	adds	r3, #8
 800b658:	460c      	mov	r4, r1
 800b65a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b65e:	4606      	mov	r6, r0
 800b660:	2201      	movs	r2, #1
 800b662:	2100      	movs	r1, #0
 800b664:	429a      	cmp	r2, r3
 800b666:	db09      	blt.n	800b67c <__s2b+0x30>
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff ff47 	bl	800b4fc <_Balloc>
 800b66e:	b940      	cbnz	r0, 800b682 <__s2b+0x36>
 800b670:	4602      	mov	r2, r0
 800b672:	21ce      	movs	r1, #206	; 0xce
 800b674:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <__s2b+0x8c>)
 800b676:	4819      	ldr	r0, [pc, #100]	; (800b6dc <__s2b+0x90>)
 800b678:	f000 ff42 	bl	800c500 <__assert_func>
 800b67c:	0052      	lsls	r2, r2, #1
 800b67e:	3101      	adds	r1, #1
 800b680:	e7f0      	b.n	800b664 <__s2b+0x18>
 800b682:	9b08      	ldr	r3, [sp, #32]
 800b684:	2d09      	cmp	r5, #9
 800b686:	6143      	str	r3, [r0, #20]
 800b688:	f04f 0301 	mov.w	r3, #1
 800b68c:	6103      	str	r3, [r0, #16]
 800b68e:	dd16      	ble.n	800b6be <__s2b+0x72>
 800b690:	f104 0909 	add.w	r9, r4, #9
 800b694:	46c8      	mov	r8, r9
 800b696:	442c      	add	r4, r5
 800b698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b69c:	4601      	mov	r1, r0
 800b69e:	220a      	movs	r2, #10
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	3b30      	subs	r3, #48	; 0x30
 800b6a4:	f7ff ff8c 	bl	800b5c0 <__multadd>
 800b6a8:	45a0      	cmp	r8, r4
 800b6aa:	d1f5      	bne.n	800b698 <__s2b+0x4c>
 800b6ac:	f1a5 0408 	sub.w	r4, r5, #8
 800b6b0:	444c      	add	r4, r9
 800b6b2:	1b2d      	subs	r5, r5, r4
 800b6b4:	1963      	adds	r3, r4, r5
 800b6b6:	42bb      	cmp	r3, r7
 800b6b8:	db04      	blt.n	800b6c4 <__s2b+0x78>
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	2509      	movs	r5, #9
 800b6c0:	340a      	adds	r4, #10
 800b6c2:	e7f6      	b.n	800b6b2 <__s2b+0x66>
 800b6c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6c8:	4601      	mov	r1, r0
 800b6ca:	220a      	movs	r2, #10
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	3b30      	subs	r3, #48	; 0x30
 800b6d0:	f7ff ff76 	bl	800b5c0 <__multadd>
 800b6d4:	e7ee      	b.n	800b6b4 <__s2b+0x68>
 800b6d6:	bf00      	nop
 800b6d8:	0800ca68 	.word	0x0800ca68
 800b6dc:	0800caf4 	.word	0x0800caf4

0800b6e0 <__hi0bits>:
 800b6e0:	0c02      	lsrs	r2, r0, #16
 800b6e2:	0412      	lsls	r2, r2, #16
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	b9ca      	cbnz	r2, 800b71c <__hi0bits+0x3c>
 800b6e8:	0403      	lsls	r3, r0, #16
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6f0:	bf04      	itt	eq
 800b6f2:	021b      	lsleq	r3, r3, #8
 800b6f4:	3008      	addeq	r0, #8
 800b6f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6fa:	bf04      	itt	eq
 800b6fc:	011b      	lsleq	r3, r3, #4
 800b6fe:	3004      	addeq	r0, #4
 800b700:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b704:	bf04      	itt	eq
 800b706:	009b      	lsleq	r3, r3, #2
 800b708:	3002      	addeq	r0, #2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	db05      	blt.n	800b71a <__hi0bits+0x3a>
 800b70e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b712:	f100 0001 	add.w	r0, r0, #1
 800b716:	bf08      	it	eq
 800b718:	2020      	moveq	r0, #32
 800b71a:	4770      	bx	lr
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7e5      	b.n	800b6ec <__hi0bits+0xc>

0800b720 <__lo0bits>:
 800b720:	6803      	ldr	r3, [r0, #0]
 800b722:	4602      	mov	r2, r0
 800b724:	f013 0007 	ands.w	r0, r3, #7
 800b728:	d00b      	beq.n	800b742 <__lo0bits+0x22>
 800b72a:	07d9      	lsls	r1, r3, #31
 800b72c:	d421      	bmi.n	800b772 <__lo0bits+0x52>
 800b72e:	0798      	lsls	r0, r3, #30
 800b730:	bf49      	itett	mi
 800b732:	085b      	lsrmi	r3, r3, #1
 800b734:	089b      	lsrpl	r3, r3, #2
 800b736:	2001      	movmi	r0, #1
 800b738:	6013      	strmi	r3, [r2, #0]
 800b73a:	bf5c      	itt	pl
 800b73c:	2002      	movpl	r0, #2
 800b73e:	6013      	strpl	r3, [r2, #0]
 800b740:	4770      	bx	lr
 800b742:	b299      	uxth	r1, r3
 800b744:	b909      	cbnz	r1, 800b74a <__lo0bits+0x2a>
 800b746:	2010      	movs	r0, #16
 800b748:	0c1b      	lsrs	r3, r3, #16
 800b74a:	b2d9      	uxtb	r1, r3
 800b74c:	b909      	cbnz	r1, 800b752 <__lo0bits+0x32>
 800b74e:	3008      	adds	r0, #8
 800b750:	0a1b      	lsrs	r3, r3, #8
 800b752:	0719      	lsls	r1, r3, #28
 800b754:	bf04      	itt	eq
 800b756:	091b      	lsreq	r3, r3, #4
 800b758:	3004      	addeq	r0, #4
 800b75a:	0799      	lsls	r1, r3, #30
 800b75c:	bf04      	itt	eq
 800b75e:	089b      	lsreq	r3, r3, #2
 800b760:	3002      	addeq	r0, #2
 800b762:	07d9      	lsls	r1, r3, #31
 800b764:	d403      	bmi.n	800b76e <__lo0bits+0x4e>
 800b766:	085b      	lsrs	r3, r3, #1
 800b768:	f100 0001 	add.w	r0, r0, #1
 800b76c:	d003      	beq.n	800b776 <__lo0bits+0x56>
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	4770      	bx	lr
 800b772:	2000      	movs	r0, #0
 800b774:	4770      	bx	lr
 800b776:	2020      	movs	r0, #32
 800b778:	4770      	bx	lr
	...

0800b77c <__i2b>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	460c      	mov	r4, r1
 800b780:	2101      	movs	r1, #1
 800b782:	f7ff febb 	bl	800b4fc <_Balloc>
 800b786:	4602      	mov	r2, r0
 800b788:	b928      	cbnz	r0, 800b796 <__i2b+0x1a>
 800b78a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b78e:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <__i2b+0x24>)
 800b790:	4804      	ldr	r0, [pc, #16]	; (800b7a4 <__i2b+0x28>)
 800b792:	f000 feb5 	bl	800c500 <__assert_func>
 800b796:	2301      	movs	r3, #1
 800b798:	6144      	str	r4, [r0, #20]
 800b79a:	6103      	str	r3, [r0, #16]
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800ca68 	.word	0x0800ca68
 800b7a4:	0800caf4 	.word	0x0800caf4

0800b7a8 <__multiply>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	4691      	mov	r9, r2
 800b7ae:	690a      	ldr	r2, [r1, #16]
 800b7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	bfbe      	ittt	lt
 800b7ba:	460b      	movlt	r3, r1
 800b7bc:	464c      	movlt	r4, r9
 800b7be:	4699      	movlt	r9, r3
 800b7c0:	6927      	ldr	r7, [r4, #16]
 800b7c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	6861      	ldr	r1, [r4, #4]
 800b7ca:	eb07 060a 	add.w	r6, r7, sl
 800b7ce:	42b3      	cmp	r3, r6
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	bfb8      	it	lt
 800b7d4:	3101      	addlt	r1, #1
 800b7d6:	f7ff fe91 	bl	800b4fc <_Balloc>
 800b7da:	b930      	cbnz	r0, 800b7ea <__multiply+0x42>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	f240 115d 	movw	r1, #349	; 0x15d
 800b7e2:	4b43      	ldr	r3, [pc, #268]	; (800b8f0 <__multiply+0x148>)
 800b7e4:	4843      	ldr	r0, [pc, #268]	; (800b8f4 <__multiply+0x14c>)
 800b7e6:	f000 fe8b 	bl	800c500 <__assert_func>
 800b7ea:	f100 0514 	add.w	r5, r0, #20
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7f6:	4543      	cmp	r3, r8
 800b7f8:	d321      	bcc.n	800b83e <__multiply+0x96>
 800b7fa:	f104 0314 	add.w	r3, r4, #20
 800b7fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b802:	f109 0314 	add.w	r3, r9, #20
 800b806:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b80a:	9202      	str	r2, [sp, #8]
 800b80c:	1b3a      	subs	r2, r7, r4
 800b80e:	3a15      	subs	r2, #21
 800b810:	f022 0203 	bic.w	r2, r2, #3
 800b814:	3204      	adds	r2, #4
 800b816:	f104 0115 	add.w	r1, r4, #21
 800b81a:	428f      	cmp	r7, r1
 800b81c:	bf38      	it	cc
 800b81e:	2204      	movcc	r2, #4
 800b820:	9201      	str	r2, [sp, #4]
 800b822:	9a02      	ldr	r2, [sp, #8]
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	429a      	cmp	r2, r3
 800b828:	d80c      	bhi.n	800b844 <__multiply+0x9c>
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	dd03      	ble.n	800b836 <__multiply+0x8e>
 800b82e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b832:	2b00      	cmp	r3, #0
 800b834:	d059      	beq.n	800b8ea <__multiply+0x142>
 800b836:	6106      	str	r6, [r0, #16]
 800b838:	b005      	add	sp, #20
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	f843 2b04 	str.w	r2, [r3], #4
 800b842:	e7d8      	b.n	800b7f6 <__multiply+0x4e>
 800b844:	f8b3 a000 	ldrh.w	sl, [r3]
 800b848:	f1ba 0f00 	cmp.w	sl, #0
 800b84c:	d023      	beq.n	800b896 <__multiply+0xee>
 800b84e:	46a9      	mov	r9, r5
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	f104 0e14 	add.w	lr, r4, #20
 800b858:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b85c:	f8d9 1000 	ldr.w	r1, [r9]
 800b860:	fa1f fb82 	uxth.w	fp, r2
 800b864:	b289      	uxth	r1, r1
 800b866:	fb0a 110b 	mla	r1, sl, fp, r1
 800b86a:	4461      	add	r1, ip
 800b86c:	f8d9 c000 	ldr.w	ip, [r9]
 800b870:	0c12      	lsrs	r2, r2, #16
 800b872:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b876:	fb0a c202 	mla	r2, sl, r2, ip
 800b87a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b87e:	b289      	uxth	r1, r1
 800b880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b884:	4577      	cmp	r7, lr
 800b886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b88a:	f849 1b04 	str.w	r1, [r9], #4
 800b88e:	d8e3      	bhi.n	800b858 <__multiply+0xb0>
 800b890:	9a01      	ldr	r2, [sp, #4]
 800b892:	f845 c002 	str.w	ip, [r5, r2]
 800b896:	9a03      	ldr	r2, [sp, #12]
 800b898:	3304      	adds	r3, #4
 800b89a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b89e:	f1b9 0f00 	cmp.w	r9, #0
 800b8a2:	d020      	beq.n	800b8e6 <__multiply+0x13e>
 800b8a4:	46ae      	mov	lr, r5
 800b8a6:	f04f 0a00 	mov.w	sl, #0
 800b8aa:	6829      	ldr	r1, [r5, #0]
 800b8ac:	f104 0c14 	add.w	ip, r4, #20
 800b8b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b8b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8b8:	b289      	uxth	r1, r1
 800b8ba:	fb09 220b 	mla	r2, r9, fp, r2
 800b8be:	4492      	add	sl, r2
 800b8c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b8c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b8c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b8d0:	0c12      	lsrs	r2, r2, #16
 800b8d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b8d6:	4567      	cmp	r7, ip
 800b8d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b8dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8e0:	d8e6      	bhi.n	800b8b0 <__multiply+0x108>
 800b8e2:	9a01      	ldr	r2, [sp, #4]
 800b8e4:	50a9      	str	r1, [r5, r2]
 800b8e6:	3504      	adds	r5, #4
 800b8e8:	e79b      	b.n	800b822 <__multiply+0x7a>
 800b8ea:	3e01      	subs	r6, #1
 800b8ec:	e79d      	b.n	800b82a <__multiply+0x82>
 800b8ee:	bf00      	nop
 800b8f0:	0800ca68 	.word	0x0800ca68
 800b8f4:	0800caf4 	.word	0x0800caf4

0800b8f8 <__pow5mult>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4615      	mov	r5, r2
 800b8fe:	f012 0203 	ands.w	r2, r2, #3
 800b902:	4606      	mov	r6, r0
 800b904:	460f      	mov	r7, r1
 800b906:	d007      	beq.n	800b918 <__pow5mult+0x20>
 800b908:	4c25      	ldr	r4, [pc, #148]	; (800b9a0 <__pow5mult+0xa8>)
 800b90a:	3a01      	subs	r2, #1
 800b90c:	2300      	movs	r3, #0
 800b90e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b912:	f7ff fe55 	bl	800b5c0 <__multadd>
 800b916:	4607      	mov	r7, r0
 800b918:	10ad      	asrs	r5, r5, #2
 800b91a:	d03d      	beq.n	800b998 <__pow5mult+0xa0>
 800b91c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b91e:	b97c      	cbnz	r4, 800b940 <__pow5mult+0x48>
 800b920:	2010      	movs	r0, #16
 800b922:	f7ff fdb7 	bl	800b494 <malloc>
 800b926:	4602      	mov	r2, r0
 800b928:	6270      	str	r0, [r6, #36]	; 0x24
 800b92a:	b928      	cbnz	r0, 800b938 <__pow5mult+0x40>
 800b92c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <__pow5mult+0xac>)
 800b932:	481d      	ldr	r0, [pc, #116]	; (800b9a8 <__pow5mult+0xb0>)
 800b934:	f000 fde4 	bl	800c500 <__assert_func>
 800b938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b93c:	6004      	str	r4, [r0, #0]
 800b93e:	60c4      	str	r4, [r0, #12]
 800b940:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b948:	b94c      	cbnz	r4, 800b95e <__pow5mult+0x66>
 800b94a:	f240 2171 	movw	r1, #625	; 0x271
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff ff14 	bl	800b77c <__i2b>
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	f8c8 0008 	str.w	r0, [r8, #8]
 800b95c:	6003      	str	r3, [r0, #0]
 800b95e:	f04f 0900 	mov.w	r9, #0
 800b962:	07eb      	lsls	r3, r5, #31
 800b964:	d50a      	bpl.n	800b97c <__pow5mult+0x84>
 800b966:	4639      	mov	r1, r7
 800b968:	4622      	mov	r2, r4
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff1c 	bl	800b7a8 <__multiply>
 800b970:	4680      	mov	r8, r0
 800b972:	4639      	mov	r1, r7
 800b974:	4630      	mov	r0, r6
 800b976:	f7ff fe01 	bl	800b57c <_Bfree>
 800b97a:	4647      	mov	r7, r8
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	d00b      	beq.n	800b998 <__pow5mult+0xa0>
 800b980:	6820      	ldr	r0, [r4, #0]
 800b982:	b938      	cbnz	r0, 800b994 <__pow5mult+0x9c>
 800b984:	4622      	mov	r2, r4
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff ff0d 	bl	800b7a8 <__multiply>
 800b98e:	6020      	str	r0, [r4, #0]
 800b990:	f8c0 9000 	str.w	r9, [r0]
 800b994:	4604      	mov	r4, r0
 800b996:	e7e4      	b.n	800b962 <__pow5mult+0x6a>
 800b998:	4638      	mov	r0, r7
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800cc40 	.word	0x0800cc40
 800b9a4:	0800c9f6 	.word	0x0800c9f6
 800b9a8:	0800caf4 	.word	0x0800caf4

0800b9ac <__lshift>:
 800b9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	4691      	mov	r9, r2
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6849      	ldr	r1, [r1, #4]
 800b9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9c4:	f108 0601 	add.w	r6, r8, #1
 800b9c8:	42b3      	cmp	r3, r6
 800b9ca:	db0b      	blt.n	800b9e4 <__lshift+0x38>
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	f7ff fd95 	bl	800b4fc <_Balloc>
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	b948      	cbnz	r0, 800b9ea <__lshift+0x3e>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9dc:	4b29      	ldr	r3, [pc, #164]	; (800ba84 <__lshift+0xd8>)
 800b9de:	482a      	ldr	r0, [pc, #168]	; (800ba88 <__lshift+0xdc>)
 800b9e0:	f000 fd8e 	bl	800c500 <__assert_func>
 800b9e4:	3101      	adds	r1, #1
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	e7ee      	b.n	800b9c8 <__lshift+0x1c>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f100 0114 	add.w	r1, r0, #20
 800b9f0:	f100 0210 	add.w	r2, r0, #16
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	4553      	cmp	r3, sl
 800b9f8:	db37      	blt.n	800ba6a <__lshift+0xbe>
 800b9fa:	6920      	ldr	r0, [r4, #16]
 800b9fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba00:	f104 0314 	add.w	r3, r4, #20
 800ba04:	f019 091f 	ands.w	r9, r9, #31
 800ba08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba10:	d02f      	beq.n	800ba72 <__lshift+0xc6>
 800ba12:	468a      	mov	sl, r1
 800ba14:	f04f 0c00 	mov.w	ip, #0
 800ba18:	f1c9 0e20 	rsb	lr, r9, #32
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	fa02 f209 	lsl.w	r2, r2, r9
 800ba22:	ea42 020c 	orr.w	r2, r2, ip
 800ba26:	f84a 2b04 	str.w	r2, [sl], #4
 800ba2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2e:	4298      	cmp	r0, r3
 800ba30:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba34:	d8f2      	bhi.n	800ba1c <__lshift+0x70>
 800ba36:	1b03      	subs	r3, r0, r4
 800ba38:	3b15      	subs	r3, #21
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	3304      	adds	r3, #4
 800ba40:	f104 0215 	add.w	r2, r4, #21
 800ba44:	4290      	cmp	r0, r2
 800ba46:	bf38      	it	cc
 800ba48:	2304      	movcc	r3, #4
 800ba4a:	f841 c003 	str.w	ip, [r1, r3]
 800ba4e:	f1bc 0f00 	cmp.w	ip, #0
 800ba52:	d001      	beq.n	800ba58 <__lshift+0xac>
 800ba54:	f108 0602 	add.w	r6, r8, #2
 800ba58:	3e01      	subs	r6, #1
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	612e      	str	r6, [r5, #16]
 800ba60:	f7ff fd8c 	bl	800b57c <_Bfree>
 800ba64:	4628      	mov	r0, r5
 800ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba6e:	3301      	adds	r3, #1
 800ba70:	e7c1      	b.n	800b9f6 <__lshift+0x4a>
 800ba72:	3904      	subs	r1, #4
 800ba74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba78:	4298      	cmp	r0, r3
 800ba7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba7e:	d8f9      	bhi.n	800ba74 <__lshift+0xc8>
 800ba80:	e7ea      	b.n	800ba58 <__lshift+0xac>
 800ba82:	bf00      	nop
 800ba84:	0800ca68 	.word	0x0800ca68
 800ba88:	0800caf4 	.word	0x0800caf4

0800ba8c <__mcmp>:
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	690a      	ldr	r2, [r1, #16]
 800ba90:	6900      	ldr	r0, [r0, #16]
 800ba92:	b530      	push	{r4, r5, lr}
 800ba94:	1a80      	subs	r0, r0, r2
 800ba96:	d10d      	bne.n	800bab4 <__mcmp+0x28>
 800ba98:	3314      	adds	r3, #20
 800ba9a:	3114      	adds	r1, #20
 800ba9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800baa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800baa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800baa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800baac:	4295      	cmp	r5, r2
 800baae:	d002      	beq.n	800bab6 <__mcmp+0x2a>
 800bab0:	d304      	bcc.n	800babc <__mcmp+0x30>
 800bab2:	2001      	movs	r0, #1
 800bab4:	bd30      	pop	{r4, r5, pc}
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	d3f4      	bcc.n	800baa4 <__mcmp+0x18>
 800baba:	e7fb      	b.n	800bab4 <__mcmp+0x28>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e7f8      	b.n	800bab4 <__mcmp+0x28>
	...

0800bac4 <__mdiff>:
 800bac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	460d      	mov	r5, r1
 800baca:	4607      	mov	r7, r0
 800bacc:	4611      	mov	r1, r2
 800bace:	4628      	mov	r0, r5
 800bad0:	4614      	mov	r4, r2
 800bad2:	f7ff ffdb 	bl	800ba8c <__mcmp>
 800bad6:	1e06      	subs	r6, r0, #0
 800bad8:	d111      	bne.n	800bafe <__mdiff+0x3a>
 800bada:	4631      	mov	r1, r6
 800badc:	4638      	mov	r0, r7
 800bade:	f7ff fd0d 	bl	800b4fc <_Balloc>
 800bae2:	4602      	mov	r2, r0
 800bae4:	b928      	cbnz	r0, 800baf2 <__mdiff+0x2e>
 800bae6:	f240 2132 	movw	r1, #562	; 0x232
 800baea:	4b3a      	ldr	r3, [pc, #232]	; (800bbd4 <__mdiff+0x110>)
 800baec:	483a      	ldr	r0, [pc, #232]	; (800bbd8 <__mdiff+0x114>)
 800baee:	f000 fd07 	bl	800c500 <__assert_func>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800baf8:	4610      	mov	r0, r2
 800bafa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafe:	bfa4      	itt	ge
 800bb00:	4623      	movge	r3, r4
 800bb02:	462c      	movge	r4, r5
 800bb04:	4638      	mov	r0, r7
 800bb06:	6861      	ldr	r1, [r4, #4]
 800bb08:	bfa6      	itte	ge
 800bb0a:	461d      	movge	r5, r3
 800bb0c:	2600      	movge	r6, #0
 800bb0e:	2601      	movlt	r6, #1
 800bb10:	f7ff fcf4 	bl	800b4fc <_Balloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	b918      	cbnz	r0, 800bb20 <__mdiff+0x5c>
 800bb18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb1c:	4b2d      	ldr	r3, [pc, #180]	; (800bbd4 <__mdiff+0x110>)
 800bb1e:	e7e5      	b.n	800baec <__mdiff+0x28>
 800bb20:	f102 0814 	add.w	r8, r2, #20
 800bb24:	46c2      	mov	sl, r8
 800bb26:	f04f 0c00 	mov.w	ip, #0
 800bb2a:	6927      	ldr	r7, [r4, #16]
 800bb2c:	60c6      	str	r6, [r0, #12]
 800bb2e:	692e      	ldr	r6, [r5, #16]
 800bb30:	f104 0014 	add.w	r0, r4, #20
 800bb34:	f105 0914 	add.w	r9, r5, #20
 800bb38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bb3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb40:	3410      	adds	r4, #16
 800bb42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bb46:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb4a:	fa1f f18b 	uxth.w	r1, fp
 800bb4e:	448c      	add	ip, r1
 800bb50:	b299      	uxth	r1, r3
 800bb52:	0c1b      	lsrs	r3, r3, #16
 800bb54:	ebac 0101 	sub.w	r1, ip, r1
 800bb58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb60:	b289      	uxth	r1, r1
 800bb62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bb66:	454e      	cmp	r6, r9
 800bb68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bb6c:	f84a 3b04 	str.w	r3, [sl], #4
 800bb70:	d8e7      	bhi.n	800bb42 <__mdiff+0x7e>
 800bb72:	1b73      	subs	r3, r6, r5
 800bb74:	3b15      	subs	r3, #21
 800bb76:	f023 0303 	bic.w	r3, r3, #3
 800bb7a:	3515      	adds	r5, #21
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	42ae      	cmp	r6, r5
 800bb80:	bf38      	it	cc
 800bb82:	2304      	movcc	r3, #4
 800bb84:	4418      	add	r0, r3
 800bb86:	4443      	add	r3, r8
 800bb88:	461e      	mov	r6, r3
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	4575      	cmp	r5, lr
 800bb8e:	d30e      	bcc.n	800bbae <__mdiff+0xea>
 800bb90:	f10e 0103 	add.w	r1, lr, #3
 800bb94:	1a09      	subs	r1, r1, r0
 800bb96:	f021 0103 	bic.w	r1, r1, #3
 800bb9a:	3803      	subs	r0, #3
 800bb9c:	4586      	cmp	lr, r0
 800bb9e:	bf38      	it	cc
 800bba0:	2100      	movcc	r1, #0
 800bba2:	4419      	add	r1, r3
 800bba4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bba8:	b18b      	cbz	r3, 800bbce <__mdiff+0x10a>
 800bbaa:	6117      	str	r7, [r2, #16]
 800bbac:	e7a4      	b.n	800baf8 <__mdiff+0x34>
 800bbae:	f855 8b04 	ldr.w	r8, [r5], #4
 800bbb2:	fa1f f188 	uxth.w	r1, r8
 800bbb6:	4461      	add	r1, ip
 800bbb8:	140c      	asrs	r4, r1, #16
 800bbba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbbe:	b289      	uxth	r1, r1
 800bbc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bbc4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bbc8:	f846 1b04 	str.w	r1, [r6], #4
 800bbcc:	e7de      	b.n	800bb8c <__mdiff+0xc8>
 800bbce:	3f01      	subs	r7, #1
 800bbd0:	e7e8      	b.n	800bba4 <__mdiff+0xe0>
 800bbd2:	bf00      	nop
 800bbd4:	0800ca68 	.word	0x0800ca68
 800bbd8:	0800caf4 	.word	0x0800caf4

0800bbdc <__ulp>:
 800bbdc:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <__ulp+0x48>)
 800bbde:	400b      	ands	r3, r1
 800bbe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dd02      	ble.n	800bbee <__ulp+0x12>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	4619      	mov	r1, r3
 800bbec:	4770      	bx	lr
 800bbee:	425b      	negs	r3, r3
 800bbf0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bbf4:	f04f 0000 	mov.w	r0, #0
 800bbf8:	f04f 0100 	mov.w	r1, #0
 800bbfc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc00:	da04      	bge.n	800bc0c <__ulp+0x30>
 800bc02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc06:	fa43 f102 	asr.w	r1, r3, r2
 800bc0a:	4770      	bx	lr
 800bc0c:	f1a2 0314 	sub.w	r3, r2, #20
 800bc10:	2b1e      	cmp	r3, #30
 800bc12:	bfd6      	itet	le
 800bc14:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bc18:	2301      	movgt	r3, #1
 800bc1a:	fa22 f303 	lsrle.w	r3, r2, r3
 800bc1e:	4618      	mov	r0, r3
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	7ff00000 	.word	0x7ff00000

0800bc28 <__b2d>:
 800bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	6907      	ldr	r7, [r0, #16]
 800bc2e:	f100 0914 	add.w	r9, r0, #20
 800bc32:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bc36:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bc3a:	f1a7 0804 	sub.w	r8, r7, #4
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f7ff fd4e 	bl	800b6e0 <__hi0bits>
 800bc44:	f1c0 0320 	rsb	r3, r0, #32
 800bc48:	280a      	cmp	r0, #10
 800bc4a:	600b      	str	r3, [r1, #0]
 800bc4c:	491f      	ldr	r1, [pc, #124]	; (800bccc <__b2d+0xa4>)
 800bc4e:	dc17      	bgt.n	800bc80 <__b2d+0x58>
 800bc50:	45c1      	cmp	r9, r8
 800bc52:	bf28      	it	cs
 800bc54:	2200      	movcs	r2, #0
 800bc56:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc5a:	fa26 f30c 	lsr.w	r3, r6, ip
 800bc5e:	bf38      	it	cc
 800bc60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bc64:	ea43 0501 	orr.w	r5, r3, r1
 800bc68:	f100 0315 	add.w	r3, r0, #21
 800bc6c:	fa06 f303 	lsl.w	r3, r6, r3
 800bc70:	fa22 f20c 	lsr.w	r2, r2, ip
 800bc74:	ea43 0402 	orr.w	r4, r3, r2
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc80:	45c1      	cmp	r9, r8
 800bc82:	bf2e      	itee	cs
 800bc84:	2200      	movcs	r2, #0
 800bc86:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bc8a:	f1a7 0808 	subcc.w	r8, r7, #8
 800bc8e:	f1b0 030b 	subs.w	r3, r0, #11
 800bc92:	d016      	beq.n	800bcc2 <__b2d+0x9a>
 800bc94:	f1c3 0720 	rsb	r7, r3, #32
 800bc98:	fa22 f107 	lsr.w	r1, r2, r7
 800bc9c:	45c8      	cmp	r8, r9
 800bc9e:	fa06 f603 	lsl.w	r6, r6, r3
 800bca2:	ea46 0601 	orr.w	r6, r6, r1
 800bca6:	bf94      	ite	ls
 800bca8:	2100      	movls	r1, #0
 800bcaa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bcae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bcb2:	fa02 f003 	lsl.w	r0, r2, r3
 800bcb6:	40f9      	lsrs	r1, r7
 800bcb8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bcbc:	ea40 0401 	orr.w	r4, r0, r1
 800bcc0:	e7da      	b.n	800bc78 <__b2d+0x50>
 800bcc2:	4614      	mov	r4, r2
 800bcc4:	ea46 0501 	orr.w	r5, r6, r1
 800bcc8:	e7d6      	b.n	800bc78 <__b2d+0x50>
 800bcca:	bf00      	nop
 800bccc:	3ff00000 	.word	0x3ff00000

0800bcd0 <__d2b>:
 800bcd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bcda:	4690      	mov	r8, r2
 800bcdc:	461d      	mov	r5, r3
 800bcde:	f7ff fc0d 	bl	800b4fc <_Balloc>
 800bce2:	4604      	mov	r4, r0
 800bce4:	b930      	cbnz	r0, 800bcf4 <__d2b+0x24>
 800bce6:	4602      	mov	r2, r0
 800bce8:	f240 310a 	movw	r1, #778	; 0x30a
 800bcec:	4b24      	ldr	r3, [pc, #144]	; (800bd80 <__d2b+0xb0>)
 800bcee:	4825      	ldr	r0, [pc, #148]	; (800bd84 <__d2b+0xb4>)
 800bcf0:	f000 fc06 	bl	800c500 <__assert_func>
 800bcf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bcf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bcfc:	bb2d      	cbnz	r5, 800bd4a <__d2b+0x7a>
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	f1b8 0300 	subs.w	r3, r8, #0
 800bd04:	d026      	beq.n	800bd54 <__d2b+0x84>
 800bd06:	4668      	mov	r0, sp
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	f7ff fd09 	bl	800b720 <__lo0bits>
 800bd0e:	9900      	ldr	r1, [sp, #0]
 800bd10:	b1f0      	cbz	r0, 800bd50 <__d2b+0x80>
 800bd12:	9a01      	ldr	r2, [sp, #4]
 800bd14:	f1c0 0320 	rsb	r3, r0, #32
 800bd18:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	40c2      	lsrs	r2, r0
 800bd20:	6163      	str	r3, [r4, #20]
 800bd22:	9201      	str	r2, [sp, #4]
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	bf14      	ite	ne
 800bd2a:	2102      	movne	r1, #2
 800bd2c:	2101      	moveq	r1, #1
 800bd2e:	61a3      	str	r3, [r4, #24]
 800bd30:	6121      	str	r1, [r4, #16]
 800bd32:	b1c5      	cbz	r5, 800bd66 <__d2b+0x96>
 800bd34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd38:	4405      	add	r5, r0
 800bd3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd3e:	603d      	str	r5, [r7, #0]
 800bd40:	6030      	str	r0, [r6, #0]
 800bd42:	4620      	mov	r0, r4
 800bd44:	b002      	add	sp, #8
 800bd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd4e:	e7d6      	b.n	800bcfe <__d2b+0x2e>
 800bd50:	6161      	str	r1, [r4, #20]
 800bd52:	e7e7      	b.n	800bd24 <__d2b+0x54>
 800bd54:	a801      	add	r0, sp, #4
 800bd56:	f7ff fce3 	bl	800b720 <__lo0bits>
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	9b01      	ldr	r3, [sp, #4]
 800bd5e:	6121      	str	r1, [r4, #16]
 800bd60:	6163      	str	r3, [r4, #20]
 800bd62:	3020      	adds	r0, #32
 800bd64:	e7e5      	b.n	800bd32 <__d2b+0x62>
 800bd66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bd6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd6e:	6038      	str	r0, [r7, #0]
 800bd70:	6918      	ldr	r0, [r3, #16]
 800bd72:	f7ff fcb5 	bl	800b6e0 <__hi0bits>
 800bd76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bd7a:	6031      	str	r1, [r6, #0]
 800bd7c:	e7e1      	b.n	800bd42 <__d2b+0x72>
 800bd7e:	bf00      	nop
 800bd80:	0800ca68 	.word	0x0800ca68
 800bd84:	0800caf4 	.word	0x0800caf4

0800bd88 <__ratio>:
 800bd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	4688      	mov	r8, r1
 800bd8e:	4669      	mov	r1, sp
 800bd90:	4681      	mov	r9, r0
 800bd92:	f7ff ff49 	bl	800bc28 <__b2d>
 800bd96:	460f      	mov	r7, r1
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	a901      	add	r1, sp, #4
 800bda0:	f7ff ff42 	bl	800bc28 <__b2d>
 800bda4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bda8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdac:	468b      	mov	fp, r1
 800bdae:	eba3 0c02 	sub.w	ip, r3, r2
 800bdb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdb6:	1a9b      	subs	r3, r3, r2
 800bdb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	bfd5      	itete	le
 800bdc0:	460a      	movle	r2, r1
 800bdc2:	462a      	movgt	r2, r5
 800bdc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bdc8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bdcc:	bfd8      	it	le
 800bdce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bdd2:	465b      	mov	r3, fp
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7f4 fca7 	bl	800072c <__aeabi_ddiv>
 800bdde:	b003      	add	sp, #12
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bde4 <__copybits>:
 800bde4:	3901      	subs	r1, #1
 800bde6:	b570      	push	{r4, r5, r6, lr}
 800bde8:	1149      	asrs	r1, r1, #5
 800bdea:	6914      	ldr	r4, [r2, #16]
 800bdec:	3101      	adds	r1, #1
 800bdee:	f102 0314 	add.w	r3, r2, #20
 800bdf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdfa:	1f05      	subs	r5, r0, #4
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	d30c      	bcc.n	800be1a <__copybits+0x36>
 800be00:	1aa3      	subs	r3, r4, r2
 800be02:	3b11      	subs	r3, #17
 800be04:	f023 0303 	bic.w	r3, r3, #3
 800be08:	3211      	adds	r2, #17
 800be0a:	42a2      	cmp	r2, r4
 800be0c:	bf88      	it	hi
 800be0e:	2300      	movhi	r3, #0
 800be10:	4418      	add	r0, r3
 800be12:	2300      	movs	r3, #0
 800be14:	4288      	cmp	r0, r1
 800be16:	d305      	bcc.n	800be24 <__copybits+0x40>
 800be18:	bd70      	pop	{r4, r5, r6, pc}
 800be1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800be22:	e7eb      	b.n	800bdfc <__copybits+0x18>
 800be24:	f840 3b04 	str.w	r3, [r0], #4
 800be28:	e7f4      	b.n	800be14 <__copybits+0x30>

0800be2a <__any_on>:
 800be2a:	f100 0214 	add.w	r2, r0, #20
 800be2e:	6900      	ldr	r0, [r0, #16]
 800be30:	114b      	asrs	r3, r1, #5
 800be32:	4298      	cmp	r0, r3
 800be34:	b510      	push	{r4, lr}
 800be36:	db11      	blt.n	800be5c <__any_on+0x32>
 800be38:	dd0a      	ble.n	800be50 <__any_on+0x26>
 800be3a:	f011 011f 	ands.w	r1, r1, #31
 800be3e:	d007      	beq.n	800be50 <__any_on+0x26>
 800be40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be44:	fa24 f001 	lsr.w	r0, r4, r1
 800be48:	fa00 f101 	lsl.w	r1, r0, r1
 800be4c:	428c      	cmp	r4, r1
 800be4e:	d10b      	bne.n	800be68 <__any_on+0x3e>
 800be50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be54:	4293      	cmp	r3, r2
 800be56:	d803      	bhi.n	800be60 <__any_on+0x36>
 800be58:	2000      	movs	r0, #0
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	4603      	mov	r3, r0
 800be5e:	e7f7      	b.n	800be50 <__any_on+0x26>
 800be60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be64:	2900      	cmp	r1, #0
 800be66:	d0f5      	beq.n	800be54 <__any_on+0x2a>
 800be68:	2001      	movs	r0, #1
 800be6a:	e7f6      	b.n	800be5a <__any_on+0x30>

0800be6c <_calloc_r>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	fba1 5402 	umull	r5, r4, r1, r2
 800be72:	b934      	cbnz	r4, 800be82 <_calloc_r+0x16>
 800be74:	4629      	mov	r1, r5
 800be76:	f7fc f825 	bl	8007ec4 <_malloc_r>
 800be7a:	4606      	mov	r6, r0
 800be7c:	b928      	cbnz	r0, 800be8a <_calloc_r+0x1e>
 800be7e:	4630      	mov	r0, r6
 800be80:	bd70      	pop	{r4, r5, r6, pc}
 800be82:	220c      	movs	r2, #12
 800be84:	2600      	movs	r6, #0
 800be86:	6002      	str	r2, [r0, #0]
 800be88:	e7f9      	b.n	800be7e <_calloc_r+0x12>
 800be8a:	462a      	mov	r2, r5
 800be8c:	4621      	mov	r1, r4
 800be8e:	f7fb fff0 	bl	8007e72 <memset>
 800be92:	e7f4      	b.n	800be7e <_calloc_r+0x12>

0800be94 <_free_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4605      	mov	r5, r0
 800be98:	2900      	cmp	r1, #0
 800be9a:	d040      	beq.n	800bf1e <_free_r+0x8a>
 800be9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bea0:	1f0c      	subs	r4, r1, #4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	bfb8      	it	lt
 800bea6:	18e4      	addlt	r4, r4, r3
 800bea8:	f7ff fb1c 	bl	800b4e4 <__malloc_lock>
 800beac:	4a1c      	ldr	r2, [pc, #112]	; (800bf20 <_free_r+0x8c>)
 800beae:	6813      	ldr	r3, [r2, #0]
 800beb0:	b933      	cbnz	r3, 800bec0 <_free_r+0x2c>
 800beb2:	6063      	str	r3, [r4, #4]
 800beb4:	6014      	str	r4, [r2, #0]
 800beb6:	4628      	mov	r0, r5
 800beb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bebc:	f7ff bb18 	b.w	800b4f0 <__malloc_unlock>
 800bec0:	42a3      	cmp	r3, r4
 800bec2:	d908      	bls.n	800bed6 <_free_r+0x42>
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	1821      	adds	r1, r4, r0
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf01      	itttt	eq
 800becc:	6819      	ldreq	r1, [r3, #0]
 800bece:	685b      	ldreq	r3, [r3, #4]
 800bed0:	1809      	addeq	r1, r1, r0
 800bed2:	6021      	streq	r1, [r4, #0]
 800bed4:	e7ed      	b.n	800beb2 <_free_r+0x1e>
 800bed6:	461a      	mov	r2, r3
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	b10b      	cbz	r3, 800bee0 <_free_r+0x4c>
 800bedc:	42a3      	cmp	r3, r4
 800bede:	d9fa      	bls.n	800bed6 <_free_r+0x42>
 800bee0:	6811      	ldr	r1, [r2, #0]
 800bee2:	1850      	adds	r0, r2, r1
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d10b      	bne.n	800bf00 <_free_r+0x6c>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	4401      	add	r1, r0
 800beec:	1850      	adds	r0, r2, r1
 800beee:	4283      	cmp	r3, r0
 800bef0:	6011      	str	r1, [r2, #0]
 800bef2:	d1e0      	bne.n	800beb6 <_free_r+0x22>
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4401      	add	r1, r0
 800befa:	6011      	str	r1, [r2, #0]
 800befc:	6053      	str	r3, [r2, #4]
 800befe:	e7da      	b.n	800beb6 <_free_r+0x22>
 800bf00:	d902      	bls.n	800bf08 <_free_r+0x74>
 800bf02:	230c      	movs	r3, #12
 800bf04:	602b      	str	r3, [r5, #0]
 800bf06:	e7d6      	b.n	800beb6 <_free_r+0x22>
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	1821      	adds	r1, r4, r0
 800bf0c:	428b      	cmp	r3, r1
 800bf0e:	bf01      	itttt	eq
 800bf10:	6819      	ldreq	r1, [r3, #0]
 800bf12:	685b      	ldreq	r3, [r3, #4]
 800bf14:	1809      	addeq	r1, r1, r0
 800bf16:	6021      	streq	r1, [r4, #0]
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	6054      	str	r4, [r2, #4]
 800bf1c:	e7cb      	b.n	800beb6 <_free_r+0x22>
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	2000139c 	.word	0x2000139c

0800bf24 <__ssputs_r>:
 800bf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf28:	688e      	ldr	r6, [r1, #8]
 800bf2a:	4682      	mov	sl, r0
 800bf2c:	429e      	cmp	r6, r3
 800bf2e:	460c      	mov	r4, r1
 800bf30:	4690      	mov	r8, r2
 800bf32:	461f      	mov	r7, r3
 800bf34:	d838      	bhi.n	800bfa8 <__ssputs_r+0x84>
 800bf36:	898a      	ldrh	r2, [r1, #12]
 800bf38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf3c:	d032      	beq.n	800bfa4 <__ssputs_r+0x80>
 800bf3e:	6825      	ldr	r5, [r4, #0]
 800bf40:	6909      	ldr	r1, [r1, #16]
 800bf42:	3301      	adds	r3, #1
 800bf44:	eba5 0901 	sub.w	r9, r5, r1
 800bf48:	6965      	ldr	r5, [r4, #20]
 800bf4a:	444b      	add	r3, r9
 800bf4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf54:	106d      	asrs	r5, r5, #1
 800bf56:	429d      	cmp	r5, r3
 800bf58:	bf38      	it	cc
 800bf5a:	461d      	movcc	r5, r3
 800bf5c:	0553      	lsls	r3, r2, #21
 800bf5e:	d531      	bpl.n	800bfc4 <__ssputs_r+0xa0>
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7fb ffaf 	bl	8007ec4 <_malloc_r>
 800bf66:	4606      	mov	r6, r0
 800bf68:	b950      	cbnz	r0, 800bf80 <__ssputs_r+0x5c>
 800bf6a:	230c      	movs	r3, #12
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	f8ca 3000 	str.w	r3, [sl]
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf80:	464a      	mov	r2, r9
 800bf82:	6921      	ldr	r1, [r4, #16]
 800bf84:	f7fb ff67 	bl	8007e56 <memcpy>
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	6126      	str	r6, [r4, #16]
 800bf96:	444e      	add	r6, r9
 800bf98:	6026      	str	r6, [r4, #0]
 800bf9a:	463e      	mov	r6, r7
 800bf9c:	6165      	str	r5, [r4, #20]
 800bf9e:	eba5 0509 	sub.w	r5, r5, r9
 800bfa2:	60a5      	str	r5, [r4, #8]
 800bfa4:	42be      	cmp	r6, r7
 800bfa6:	d900      	bls.n	800bfaa <__ssputs_r+0x86>
 800bfa8:	463e      	mov	r6, r7
 800bfaa:	4632      	mov	r2, r6
 800bfac:	4641      	mov	r1, r8
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	f000 faf8 	bl	800c5a4 <memmove>
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	1b9b      	subs	r3, r3, r6
 800bfba:	60a3      	str	r3, [r4, #8]
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	4433      	add	r3, r6
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	e7db      	b.n	800bf7c <__ssputs_r+0x58>
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	f000 fb07 	bl	800c5d8 <_realloc_r>
 800bfca:	4606      	mov	r6, r0
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1e1      	bne.n	800bf94 <__ssputs_r+0x70>
 800bfd0:	4650      	mov	r0, sl
 800bfd2:	6921      	ldr	r1, [r4, #16]
 800bfd4:	f7ff ff5e 	bl	800be94 <_free_r>
 800bfd8:	e7c7      	b.n	800bf6a <__ssputs_r+0x46>
	...

0800bfdc <_svfiprintf_r>:
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	4698      	mov	r8, r3
 800bfe2:	898b      	ldrh	r3, [r1, #12]
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	061b      	lsls	r3, r3, #24
 800bfe8:	460d      	mov	r5, r1
 800bfea:	4614      	mov	r4, r2
 800bfec:	b09d      	sub	sp, #116	; 0x74
 800bfee:	d50e      	bpl.n	800c00e <_svfiprintf_r+0x32>
 800bff0:	690b      	ldr	r3, [r1, #16]
 800bff2:	b963      	cbnz	r3, 800c00e <_svfiprintf_r+0x32>
 800bff4:	2140      	movs	r1, #64	; 0x40
 800bff6:	f7fb ff65 	bl	8007ec4 <_malloc_r>
 800bffa:	6028      	str	r0, [r5, #0]
 800bffc:	6128      	str	r0, [r5, #16]
 800bffe:	b920      	cbnz	r0, 800c00a <_svfiprintf_r+0x2e>
 800c000:	230c      	movs	r3, #12
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	e0d1      	b.n	800c1ae <_svfiprintf_r+0x1d2>
 800c00a:	2340      	movs	r3, #64	; 0x40
 800c00c:	616b      	str	r3, [r5, #20]
 800c00e:	2300      	movs	r3, #0
 800c010:	9309      	str	r3, [sp, #36]	; 0x24
 800c012:	2320      	movs	r3, #32
 800c014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c018:	2330      	movs	r3, #48	; 0x30
 800c01a:	f04f 0901 	mov.w	r9, #1
 800c01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c022:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c1c8 <_svfiprintf_r+0x1ec>
 800c026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c02a:	4623      	mov	r3, r4
 800c02c:	469a      	mov	sl, r3
 800c02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c032:	b10a      	cbz	r2, 800c038 <_svfiprintf_r+0x5c>
 800c034:	2a25      	cmp	r2, #37	; 0x25
 800c036:	d1f9      	bne.n	800c02c <_svfiprintf_r+0x50>
 800c038:	ebba 0b04 	subs.w	fp, sl, r4
 800c03c:	d00b      	beq.n	800c056 <_svfiprintf_r+0x7a>
 800c03e:	465b      	mov	r3, fp
 800c040:	4622      	mov	r2, r4
 800c042:	4629      	mov	r1, r5
 800c044:	4638      	mov	r0, r7
 800c046:	f7ff ff6d 	bl	800bf24 <__ssputs_r>
 800c04a:	3001      	adds	r0, #1
 800c04c:	f000 80aa 	beq.w	800c1a4 <_svfiprintf_r+0x1c8>
 800c050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c052:	445a      	add	r2, fp
 800c054:	9209      	str	r2, [sp, #36]	; 0x24
 800c056:	f89a 3000 	ldrb.w	r3, [sl]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 80a2 	beq.w	800c1a4 <_svfiprintf_r+0x1c8>
 800c060:	2300      	movs	r3, #0
 800c062:	f04f 32ff 	mov.w	r2, #4294967295
 800c066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c06a:	f10a 0a01 	add.w	sl, sl, #1
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	9307      	str	r3, [sp, #28]
 800c072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c076:	931a      	str	r3, [sp, #104]	; 0x68
 800c078:	4654      	mov	r4, sl
 800c07a:	2205      	movs	r2, #5
 800c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c080:	4851      	ldr	r0, [pc, #324]	; (800c1c8 <_svfiprintf_r+0x1ec>)
 800c082:	f7ff fa21 	bl	800b4c8 <memchr>
 800c086:	9a04      	ldr	r2, [sp, #16]
 800c088:	b9d8      	cbnz	r0, 800c0c2 <_svfiprintf_r+0xe6>
 800c08a:	06d0      	lsls	r0, r2, #27
 800c08c:	bf44      	itt	mi
 800c08e:	2320      	movmi	r3, #32
 800c090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c094:	0711      	lsls	r1, r2, #28
 800c096:	bf44      	itt	mi
 800c098:	232b      	movmi	r3, #43	; 0x2b
 800c09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09e:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0a4:	d015      	beq.n	800c0d2 <_svfiprintf_r+0xf6>
 800c0a6:	4654      	mov	r4, sl
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	f04f 0c0a 	mov.w	ip, #10
 800c0ae:	9a07      	ldr	r2, [sp, #28]
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0b6:	3b30      	subs	r3, #48	; 0x30
 800c0b8:	2b09      	cmp	r3, #9
 800c0ba:	d94e      	bls.n	800c15a <_svfiprintf_r+0x17e>
 800c0bc:	b1b0      	cbz	r0, 800c0ec <_svfiprintf_r+0x110>
 800c0be:	9207      	str	r2, [sp, #28]
 800c0c0:	e014      	b.n	800c0ec <_svfiprintf_r+0x110>
 800c0c2:	eba0 0308 	sub.w	r3, r0, r8
 800c0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	46a2      	mov	sl, r4
 800c0ce:	9304      	str	r3, [sp, #16]
 800c0d0:	e7d2      	b.n	800c078 <_svfiprintf_r+0x9c>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	1d19      	adds	r1, r3, #4
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	9103      	str	r1, [sp, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfbb      	ittet	lt
 800c0de:	425b      	neglt	r3, r3
 800c0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c0e4:	9307      	strge	r3, [sp, #28]
 800c0e6:	9307      	strlt	r3, [sp, #28]
 800c0e8:	bfb8      	it	lt
 800c0ea:	9204      	strlt	r2, [sp, #16]
 800c0ec:	7823      	ldrb	r3, [r4, #0]
 800c0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f0:	d10c      	bne.n	800c10c <_svfiprintf_r+0x130>
 800c0f2:	7863      	ldrb	r3, [r4, #1]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	d135      	bne.n	800c164 <_svfiprintf_r+0x188>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	3402      	adds	r4, #2
 800c0fc:	1d1a      	adds	r2, r3, #4
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	9203      	str	r2, [sp, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	bfb8      	it	lt
 800c106:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c1cc <_svfiprintf_r+0x1f0>
 800c110:	2203      	movs	r2, #3
 800c112:	4650      	mov	r0, sl
 800c114:	7821      	ldrb	r1, [r4, #0]
 800c116:	f7ff f9d7 	bl	800b4c8 <memchr>
 800c11a:	b140      	cbz	r0, 800c12e <_svfiprintf_r+0x152>
 800c11c:	2340      	movs	r3, #64	; 0x40
 800c11e:	eba0 000a 	sub.w	r0, r0, sl
 800c122:	fa03 f000 	lsl.w	r0, r3, r0
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	3401      	adds	r4, #1
 800c12a:	4303      	orrs	r3, r0
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c132:	2206      	movs	r2, #6
 800c134:	4826      	ldr	r0, [pc, #152]	; (800c1d0 <_svfiprintf_r+0x1f4>)
 800c136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13a:	f7ff f9c5 	bl	800b4c8 <memchr>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d038      	beq.n	800c1b4 <_svfiprintf_r+0x1d8>
 800c142:	4b24      	ldr	r3, [pc, #144]	; (800c1d4 <_svfiprintf_r+0x1f8>)
 800c144:	bb1b      	cbnz	r3, 800c18e <_svfiprintf_r+0x1b2>
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	3307      	adds	r3, #7
 800c14a:	f023 0307 	bic.w	r3, r3, #7
 800c14e:	3308      	adds	r3, #8
 800c150:	9303      	str	r3, [sp, #12]
 800c152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c154:	4433      	add	r3, r6
 800c156:	9309      	str	r3, [sp, #36]	; 0x24
 800c158:	e767      	b.n	800c02a <_svfiprintf_r+0x4e>
 800c15a:	460c      	mov	r4, r1
 800c15c:	2001      	movs	r0, #1
 800c15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c162:	e7a5      	b.n	800c0b0 <_svfiprintf_r+0xd4>
 800c164:	2300      	movs	r3, #0
 800c166:	f04f 0c0a 	mov.w	ip, #10
 800c16a:	4619      	mov	r1, r3
 800c16c:	3401      	adds	r4, #1
 800c16e:	9305      	str	r3, [sp, #20]
 800c170:	4620      	mov	r0, r4
 800c172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c176:	3a30      	subs	r2, #48	; 0x30
 800c178:	2a09      	cmp	r2, #9
 800c17a:	d903      	bls.n	800c184 <_svfiprintf_r+0x1a8>
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d0c5      	beq.n	800c10c <_svfiprintf_r+0x130>
 800c180:	9105      	str	r1, [sp, #20]
 800c182:	e7c3      	b.n	800c10c <_svfiprintf_r+0x130>
 800c184:	4604      	mov	r4, r0
 800c186:	2301      	movs	r3, #1
 800c188:	fb0c 2101 	mla	r1, ip, r1, r2
 800c18c:	e7f0      	b.n	800c170 <_svfiprintf_r+0x194>
 800c18e:	ab03      	add	r3, sp, #12
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	462a      	mov	r2, r5
 800c194:	4638      	mov	r0, r7
 800c196:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <_svfiprintf_r+0x1fc>)
 800c198:	a904      	add	r1, sp, #16
 800c19a:	f7fb ffa5 	bl	80080e8 <_printf_float>
 800c19e:	1c42      	adds	r2, r0, #1
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	d1d6      	bne.n	800c152 <_svfiprintf_r+0x176>
 800c1a4:	89ab      	ldrh	r3, [r5, #12]
 800c1a6:	065b      	lsls	r3, r3, #25
 800c1a8:	f53f af2c 	bmi.w	800c004 <_svfiprintf_r+0x28>
 800c1ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ae:	b01d      	add	sp, #116	; 0x74
 800c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <_svfiprintf_r+0x1fc>)
 800c1be:	a904      	add	r1, sp, #16
 800c1c0:	f7fc fa2e 	bl	8008620 <_printf_i>
 800c1c4:	e7eb      	b.n	800c19e <_svfiprintf_r+0x1c2>
 800c1c6:	bf00      	nop
 800c1c8:	0800cc4c 	.word	0x0800cc4c
 800c1cc:	0800cc52 	.word	0x0800cc52
 800c1d0:	0800cc56 	.word	0x0800cc56
 800c1d4:	080080e9 	.word	0x080080e9
 800c1d8:	0800bf25 	.word	0x0800bf25

0800c1dc <__sfputc_r>:
 800c1dc:	6893      	ldr	r3, [r2, #8]
 800c1de:	b410      	push	{r4}
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	6093      	str	r3, [r2, #8]
 800c1e6:	da07      	bge.n	800c1f8 <__sfputc_r+0x1c>
 800c1e8:	6994      	ldr	r4, [r2, #24]
 800c1ea:	42a3      	cmp	r3, r4
 800c1ec:	db01      	blt.n	800c1f2 <__sfputc_r+0x16>
 800c1ee:	290a      	cmp	r1, #10
 800c1f0:	d102      	bne.n	800c1f8 <__sfputc_r+0x1c>
 800c1f2:	bc10      	pop	{r4}
 800c1f4:	f7fd bd50 	b.w	8009c98 <__swbuf_r>
 800c1f8:	6813      	ldr	r3, [r2, #0]
 800c1fa:	1c58      	adds	r0, r3, #1
 800c1fc:	6010      	str	r0, [r2, #0]
 800c1fe:	7019      	strb	r1, [r3, #0]
 800c200:	4608      	mov	r0, r1
 800c202:	bc10      	pop	{r4}
 800c204:	4770      	bx	lr

0800c206 <__sfputs_r>:
 800c206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	18d5      	adds	r5, r2, r3
 800c210:	42ac      	cmp	r4, r5
 800c212:	d101      	bne.n	800c218 <__sfputs_r+0x12>
 800c214:	2000      	movs	r0, #0
 800c216:	e007      	b.n	800c228 <__sfputs_r+0x22>
 800c218:	463a      	mov	r2, r7
 800c21a:	4630      	mov	r0, r6
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	f7ff ffdc 	bl	800c1dc <__sfputc_r>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d1f3      	bne.n	800c210 <__sfputs_r+0xa>
 800c228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c22c <_vfiprintf_r>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	460d      	mov	r5, r1
 800c232:	4614      	mov	r4, r2
 800c234:	4698      	mov	r8, r3
 800c236:	4606      	mov	r6, r0
 800c238:	b09d      	sub	sp, #116	; 0x74
 800c23a:	b118      	cbz	r0, 800c244 <_vfiprintf_r+0x18>
 800c23c:	6983      	ldr	r3, [r0, #24]
 800c23e:	b90b      	cbnz	r3, 800c244 <_vfiprintf_r+0x18>
 800c240:	f7fb fd44 	bl	8007ccc <__sinit>
 800c244:	4b89      	ldr	r3, [pc, #548]	; (800c46c <_vfiprintf_r+0x240>)
 800c246:	429d      	cmp	r5, r3
 800c248:	d11b      	bne.n	800c282 <_vfiprintf_r+0x56>
 800c24a:	6875      	ldr	r5, [r6, #4]
 800c24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c24e:	07d9      	lsls	r1, r3, #31
 800c250:	d405      	bmi.n	800c25e <_vfiprintf_r+0x32>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	059a      	lsls	r2, r3, #22
 800c256:	d402      	bmi.n	800c25e <_vfiprintf_r+0x32>
 800c258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c25a:	f7fb fdfa 	bl	8007e52 <__retarget_lock_acquire_recursive>
 800c25e:	89ab      	ldrh	r3, [r5, #12]
 800c260:	071b      	lsls	r3, r3, #28
 800c262:	d501      	bpl.n	800c268 <_vfiprintf_r+0x3c>
 800c264:	692b      	ldr	r3, [r5, #16]
 800c266:	b9eb      	cbnz	r3, 800c2a4 <_vfiprintf_r+0x78>
 800c268:	4629      	mov	r1, r5
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7fd fd78 	bl	8009d60 <__swsetup_r>
 800c270:	b1c0      	cbz	r0, 800c2a4 <_vfiprintf_r+0x78>
 800c272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c274:	07dc      	lsls	r4, r3, #31
 800c276:	d50e      	bpl.n	800c296 <_vfiprintf_r+0x6a>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	b01d      	add	sp, #116	; 0x74
 800c27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c282:	4b7b      	ldr	r3, [pc, #492]	; (800c470 <_vfiprintf_r+0x244>)
 800c284:	429d      	cmp	r5, r3
 800c286:	d101      	bne.n	800c28c <_vfiprintf_r+0x60>
 800c288:	68b5      	ldr	r5, [r6, #8]
 800c28a:	e7df      	b.n	800c24c <_vfiprintf_r+0x20>
 800c28c:	4b79      	ldr	r3, [pc, #484]	; (800c474 <_vfiprintf_r+0x248>)
 800c28e:	429d      	cmp	r5, r3
 800c290:	bf08      	it	eq
 800c292:	68f5      	ldreq	r5, [r6, #12]
 800c294:	e7da      	b.n	800c24c <_vfiprintf_r+0x20>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	0598      	lsls	r0, r3, #22
 800c29a:	d4ed      	bmi.n	800c278 <_vfiprintf_r+0x4c>
 800c29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c29e:	f7fb fdd9 	bl	8007e54 <__retarget_lock_release_recursive>
 800c2a2:	e7e9      	b.n	800c278 <_vfiprintf_r+0x4c>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ae:	2330      	movs	r3, #48	; 0x30
 800c2b0:	f04f 0901 	mov.w	r9, #1
 800c2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c478 <_vfiprintf_r+0x24c>
 800c2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2c0:	4623      	mov	r3, r4
 800c2c2:	469a      	mov	sl, r3
 800c2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c8:	b10a      	cbz	r2, 800c2ce <_vfiprintf_r+0xa2>
 800c2ca:	2a25      	cmp	r2, #37	; 0x25
 800c2cc:	d1f9      	bne.n	800c2c2 <_vfiprintf_r+0x96>
 800c2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c2d2:	d00b      	beq.n	800c2ec <_vfiprintf_r+0xc0>
 800c2d4:	465b      	mov	r3, fp
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ff93 	bl	800c206 <__sfputs_r>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	f000 80aa 	beq.w	800c43a <_vfiprintf_r+0x20e>
 800c2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e8:	445a      	add	r2, fp
 800c2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80a2 	beq.w	800c43a <_vfiprintf_r+0x20e>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c300:	f10a 0a01 	add.w	sl, sl, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	9307      	str	r3, [sp, #28]
 800c308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c30c:	931a      	str	r3, [sp, #104]	; 0x68
 800c30e:	4654      	mov	r4, sl
 800c310:	2205      	movs	r2, #5
 800c312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c316:	4858      	ldr	r0, [pc, #352]	; (800c478 <_vfiprintf_r+0x24c>)
 800c318:	f7ff f8d6 	bl	800b4c8 <memchr>
 800c31c:	9a04      	ldr	r2, [sp, #16]
 800c31e:	b9d8      	cbnz	r0, 800c358 <_vfiprintf_r+0x12c>
 800c320:	06d1      	lsls	r1, r2, #27
 800c322:	bf44      	itt	mi
 800c324:	2320      	movmi	r3, #32
 800c326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32a:	0713      	lsls	r3, r2, #28
 800c32c:	bf44      	itt	mi
 800c32e:	232b      	movmi	r3, #43	; 0x2b
 800c330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	2b2a      	cmp	r3, #42	; 0x2a
 800c33a:	d015      	beq.n	800c368 <_vfiprintf_r+0x13c>
 800c33c:	4654      	mov	r4, sl
 800c33e:	2000      	movs	r0, #0
 800c340:	f04f 0c0a 	mov.w	ip, #10
 800c344:	9a07      	ldr	r2, [sp, #28]
 800c346:	4621      	mov	r1, r4
 800c348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c34c:	3b30      	subs	r3, #48	; 0x30
 800c34e:	2b09      	cmp	r3, #9
 800c350:	d94e      	bls.n	800c3f0 <_vfiprintf_r+0x1c4>
 800c352:	b1b0      	cbz	r0, 800c382 <_vfiprintf_r+0x156>
 800c354:	9207      	str	r2, [sp, #28]
 800c356:	e014      	b.n	800c382 <_vfiprintf_r+0x156>
 800c358:	eba0 0308 	sub.w	r3, r0, r8
 800c35c:	fa09 f303 	lsl.w	r3, r9, r3
 800c360:	4313      	orrs	r3, r2
 800c362:	46a2      	mov	sl, r4
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	e7d2      	b.n	800c30e <_vfiprintf_r+0xe2>
 800c368:	9b03      	ldr	r3, [sp, #12]
 800c36a:	1d19      	adds	r1, r3, #4
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	9103      	str	r1, [sp, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	bfbb      	ittet	lt
 800c374:	425b      	neglt	r3, r3
 800c376:	f042 0202 	orrlt.w	r2, r2, #2
 800c37a:	9307      	strge	r3, [sp, #28]
 800c37c:	9307      	strlt	r3, [sp, #28]
 800c37e:	bfb8      	it	lt
 800c380:	9204      	strlt	r2, [sp, #16]
 800c382:	7823      	ldrb	r3, [r4, #0]
 800c384:	2b2e      	cmp	r3, #46	; 0x2e
 800c386:	d10c      	bne.n	800c3a2 <_vfiprintf_r+0x176>
 800c388:	7863      	ldrb	r3, [r4, #1]
 800c38a:	2b2a      	cmp	r3, #42	; 0x2a
 800c38c:	d135      	bne.n	800c3fa <_vfiprintf_r+0x1ce>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	3402      	adds	r4, #2
 800c392:	1d1a      	adds	r2, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	9203      	str	r2, [sp, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfb8      	it	lt
 800c39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c47c <_vfiprintf_r+0x250>
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	7821      	ldrb	r1, [r4, #0]
 800c3ac:	f7ff f88c 	bl	800b4c8 <memchr>
 800c3b0:	b140      	cbz	r0, 800c3c4 <_vfiprintf_r+0x198>
 800c3b2:	2340      	movs	r3, #64	; 0x40
 800c3b4:	eba0 000a 	sub.w	r0, r0, sl
 800c3b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	3401      	adds	r4, #1
 800c3c0:	4303      	orrs	r3, r0
 800c3c2:	9304      	str	r3, [sp, #16]
 800c3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	482d      	ldr	r0, [pc, #180]	; (800c480 <_vfiprintf_r+0x254>)
 800c3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3d0:	f7ff f87a 	bl	800b4c8 <memchr>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d03f      	beq.n	800c458 <_vfiprintf_r+0x22c>
 800c3d8:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <_vfiprintf_r+0x258>)
 800c3da:	bb1b      	cbnz	r3, 800c424 <_vfiprintf_r+0x1f8>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	3307      	adds	r3, #7
 800c3e0:	f023 0307 	bic.w	r3, r3, #7
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	9303      	str	r3, [sp, #12]
 800c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ea:	443b      	add	r3, r7
 800c3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ee:	e767      	b.n	800c2c0 <_vfiprintf_r+0x94>
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f8:	e7a5      	b.n	800c346 <_vfiprintf_r+0x11a>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4619      	mov	r1, r3
 800c402:	3401      	adds	r4, #1
 800c404:	9305      	str	r3, [sp, #20]
 800c406:	4620      	mov	r0, r4
 800c408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c40c:	3a30      	subs	r2, #48	; 0x30
 800c40e:	2a09      	cmp	r2, #9
 800c410:	d903      	bls.n	800c41a <_vfiprintf_r+0x1ee>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0c5      	beq.n	800c3a2 <_vfiprintf_r+0x176>
 800c416:	9105      	str	r1, [sp, #20]
 800c418:	e7c3      	b.n	800c3a2 <_vfiprintf_r+0x176>
 800c41a:	4604      	mov	r4, r0
 800c41c:	2301      	movs	r3, #1
 800c41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c422:	e7f0      	b.n	800c406 <_vfiprintf_r+0x1da>
 800c424:	ab03      	add	r3, sp, #12
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	462a      	mov	r2, r5
 800c42a:	4630      	mov	r0, r6
 800c42c:	4b16      	ldr	r3, [pc, #88]	; (800c488 <_vfiprintf_r+0x25c>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	f7fb fe5a 	bl	80080e8 <_printf_float>
 800c434:	4607      	mov	r7, r0
 800c436:	1c78      	adds	r0, r7, #1
 800c438:	d1d6      	bne.n	800c3e8 <_vfiprintf_r+0x1bc>
 800c43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c43c:	07d9      	lsls	r1, r3, #31
 800c43e:	d405      	bmi.n	800c44c <_vfiprintf_r+0x220>
 800c440:	89ab      	ldrh	r3, [r5, #12]
 800c442:	059a      	lsls	r2, r3, #22
 800c444:	d402      	bmi.n	800c44c <_vfiprintf_r+0x220>
 800c446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c448:	f7fb fd04 	bl	8007e54 <__retarget_lock_release_recursive>
 800c44c:	89ab      	ldrh	r3, [r5, #12]
 800c44e:	065b      	lsls	r3, r3, #25
 800c450:	f53f af12 	bmi.w	800c278 <_vfiprintf_r+0x4c>
 800c454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c456:	e711      	b.n	800c27c <_vfiprintf_r+0x50>
 800c458:	ab03      	add	r3, sp, #12
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	462a      	mov	r2, r5
 800c45e:	4630      	mov	r0, r6
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <_vfiprintf_r+0x25c>)
 800c462:	a904      	add	r1, sp, #16
 800c464:	f7fc f8dc 	bl	8008620 <_printf_i>
 800c468:	e7e4      	b.n	800c434 <_vfiprintf_r+0x208>
 800c46a:	bf00      	nop
 800c46c:	0800c818 	.word	0x0800c818
 800c470:	0800c838 	.word	0x0800c838
 800c474:	0800c7f8 	.word	0x0800c7f8
 800c478:	0800cc4c 	.word	0x0800cc4c
 800c47c:	0800cc52 	.word	0x0800cc52
 800c480:	0800cc56 	.word	0x0800cc56
 800c484:	080080e9 	.word	0x080080e9
 800c488:	0800c207 	.word	0x0800c207

0800c48c <_read_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	4611      	mov	r1, r2
 800c494:	2200      	movs	r2, #0
 800c496:	4d05      	ldr	r5, [pc, #20]	; (800c4ac <_read_r+0x20>)
 800c498:	602a      	str	r2, [r5, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f7f5 fa45 	bl	800192a <_read>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_read_r+0x1e>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_read_r+0x1e>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	200013a4 	.word	0x200013a4

0800c4b0 <nan>:
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	4901      	ldr	r1, [pc, #4]	; (800c4b8 <nan+0x8>)
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	7ff80000 	.word	0x7ff80000

0800c4bc <strncmp>:
 800c4bc:	4603      	mov	r3, r0
 800c4be:	b510      	push	{r4, lr}
 800c4c0:	b172      	cbz	r2, 800c4e0 <strncmp+0x24>
 800c4c2:	3901      	subs	r1, #1
 800c4c4:	1884      	adds	r4, r0, r2
 800c4c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4ce:	4290      	cmp	r0, r2
 800c4d0:	d101      	bne.n	800c4d6 <strncmp+0x1a>
 800c4d2:	42a3      	cmp	r3, r4
 800c4d4:	d101      	bne.n	800c4da <strncmp+0x1e>
 800c4d6:	1a80      	subs	r0, r0, r2
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d1f3      	bne.n	800c4c6 <strncmp+0xa>
 800c4de:	e7fa      	b.n	800c4d6 <strncmp+0x1a>
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	e7f9      	b.n	800c4d8 <strncmp+0x1c>

0800c4e4 <__ascii_wctomb>:
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	b141      	cbz	r1, 800c4fc <__ascii_wctomb+0x18>
 800c4ea:	2aff      	cmp	r2, #255	; 0xff
 800c4ec:	d904      	bls.n	800c4f8 <__ascii_wctomb+0x14>
 800c4ee:	228a      	movs	r2, #138	; 0x8a
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	4770      	bx	lr
 800c4f8:	2001      	movs	r0, #1
 800c4fa:	700a      	strb	r2, [r1, #0]
 800c4fc:	4770      	bx	lr
	...

0800c500 <__assert_func>:
 800c500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c502:	4614      	mov	r4, r2
 800c504:	461a      	mov	r2, r3
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <__assert_func+0x2c>)
 800c508:	4605      	mov	r5, r0
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68d8      	ldr	r0, [r3, #12]
 800c50e:	b14c      	cbz	r4, 800c524 <__assert_func+0x24>
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <__assert_func+0x30>)
 800c512:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c516:	9100      	str	r1, [sp, #0]
 800c518:	462b      	mov	r3, r5
 800c51a:	4906      	ldr	r1, [pc, #24]	; (800c534 <__assert_func+0x34>)
 800c51c:	f000 f80e 	bl	800c53c <fiprintf>
 800c520:	f000 f889 	bl	800c636 <abort>
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <__assert_func+0x38>)
 800c526:	461c      	mov	r4, r3
 800c528:	e7f3      	b.n	800c512 <__assert_func+0x12>
 800c52a:	bf00      	nop
 800c52c:	20000010 	.word	0x20000010
 800c530:	0800cc5d 	.word	0x0800cc5d
 800c534:	0800cc6a 	.word	0x0800cc6a
 800c538:	0800cc98 	.word	0x0800cc98

0800c53c <fiprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b503      	push	{r0, r1, lr}
 800c540:	4601      	mov	r1, r0
 800c542:	ab03      	add	r3, sp, #12
 800c544:	4805      	ldr	r0, [pc, #20]	; (800c55c <fiprintf+0x20>)
 800c546:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	f7ff fe6d 	bl	800c22c <_vfiprintf_r>
 800c552:	b002      	add	sp, #8
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	20000010 	.word	0x20000010

0800c560 <_fstat_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	2300      	movs	r3, #0
 800c564:	4d06      	ldr	r5, [pc, #24]	; (800c580 <_fstat_r+0x20>)
 800c566:	4604      	mov	r4, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	4611      	mov	r1, r2
 800c56c:	602b      	str	r3, [r5, #0]
 800c56e:	f7f5 fa04 	bl	800197a <_fstat>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	d102      	bne.n	800c57c <_fstat_r+0x1c>
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	b103      	cbz	r3, 800c57c <_fstat_r+0x1c>
 800c57a:	6023      	str	r3, [r4, #0]
 800c57c:	bd38      	pop	{r3, r4, r5, pc}
 800c57e:	bf00      	nop
 800c580:	200013a4 	.word	0x200013a4

0800c584 <_isatty_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	2300      	movs	r3, #0
 800c588:	4d05      	ldr	r5, [pc, #20]	; (800c5a0 <_isatty_r+0x1c>)
 800c58a:	4604      	mov	r4, r0
 800c58c:	4608      	mov	r0, r1
 800c58e:	602b      	str	r3, [r5, #0]
 800c590:	f7f5 fa02 	bl	8001998 <_isatty>
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	d102      	bne.n	800c59e <_isatty_r+0x1a>
 800c598:	682b      	ldr	r3, [r5, #0]
 800c59a:	b103      	cbz	r3, 800c59e <_isatty_r+0x1a>
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	200013a4 	.word	0x200013a4

0800c5a4 <memmove>:
 800c5a4:	4288      	cmp	r0, r1
 800c5a6:	b510      	push	{r4, lr}
 800c5a8:	eb01 0402 	add.w	r4, r1, r2
 800c5ac:	d902      	bls.n	800c5b4 <memmove+0x10>
 800c5ae:	4284      	cmp	r4, r0
 800c5b0:	4623      	mov	r3, r4
 800c5b2:	d807      	bhi.n	800c5c4 <memmove+0x20>
 800c5b4:	1e43      	subs	r3, r0, #1
 800c5b6:	42a1      	cmp	r1, r4
 800c5b8:	d008      	beq.n	800c5cc <memmove+0x28>
 800c5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c2:	e7f8      	b.n	800c5b6 <memmove+0x12>
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4402      	add	r2, r0
 800c5c8:	428a      	cmp	r2, r1
 800c5ca:	d100      	bne.n	800c5ce <memmove+0x2a>
 800c5cc:	bd10      	pop	{r4, pc}
 800c5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5d6:	e7f7      	b.n	800c5c8 <memmove+0x24>

0800c5d8 <_realloc_r>:
 800c5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4614      	mov	r4, r2
 800c5e0:	460e      	mov	r6, r1
 800c5e2:	b921      	cbnz	r1, 800c5ee <_realloc_r+0x16>
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ea:	f7fb bc6b 	b.w	8007ec4 <_malloc_r>
 800c5ee:	b92a      	cbnz	r2, 800c5fc <_realloc_r+0x24>
 800c5f0:	f7ff fc50 	bl	800be94 <_free_r>
 800c5f4:	4625      	mov	r5, r4
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	f000 f822 	bl	800c644 <_malloc_usable_size_r>
 800c600:	4284      	cmp	r4, r0
 800c602:	4607      	mov	r7, r0
 800c604:	d802      	bhi.n	800c60c <_realloc_r+0x34>
 800c606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c60a:	d812      	bhi.n	800c632 <_realloc_r+0x5a>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4640      	mov	r0, r8
 800c610:	f7fb fc58 	bl	8007ec4 <_malloc_r>
 800c614:	4605      	mov	r5, r0
 800c616:	2800      	cmp	r0, #0
 800c618:	d0ed      	beq.n	800c5f6 <_realloc_r+0x1e>
 800c61a:	42bc      	cmp	r4, r7
 800c61c:	4622      	mov	r2, r4
 800c61e:	4631      	mov	r1, r6
 800c620:	bf28      	it	cs
 800c622:	463a      	movcs	r2, r7
 800c624:	f7fb fc17 	bl	8007e56 <memcpy>
 800c628:	4631      	mov	r1, r6
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff fc32 	bl	800be94 <_free_r>
 800c630:	e7e1      	b.n	800c5f6 <_realloc_r+0x1e>
 800c632:	4635      	mov	r5, r6
 800c634:	e7df      	b.n	800c5f6 <_realloc_r+0x1e>

0800c636 <abort>:
 800c636:	2006      	movs	r0, #6
 800c638:	b508      	push	{r3, lr}
 800c63a:	f000 f833 	bl	800c6a4 <raise>
 800c63e:	2001      	movs	r0, #1
 800c640:	f7f5 f969 	bl	8001916 <_exit>

0800c644 <_malloc_usable_size_r>:
 800c644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c648:	1f18      	subs	r0, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bfbc      	itt	lt
 800c64e:	580b      	ldrlt	r3, [r1, r0]
 800c650:	18c0      	addlt	r0, r0, r3
 800c652:	4770      	bx	lr

0800c654 <_raise_r>:
 800c654:	291f      	cmp	r1, #31
 800c656:	b538      	push	{r3, r4, r5, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	d904      	bls.n	800c668 <_raise_r+0x14>
 800c65e:	2316      	movs	r3, #22
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c66a:	b112      	cbz	r2, 800c672 <_raise_r+0x1e>
 800c66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c670:	b94b      	cbnz	r3, 800c686 <_raise_r+0x32>
 800c672:	4620      	mov	r0, r4
 800c674:	f000 f830 	bl	800c6d8 <_getpid_r>
 800c678:	462a      	mov	r2, r5
 800c67a:	4601      	mov	r1, r0
 800c67c:	4620      	mov	r0, r4
 800c67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c682:	f000 b817 	b.w	800c6b4 <_kill_r>
 800c686:	2b01      	cmp	r3, #1
 800c688:	d00a      	beq.n	800c6a0 <_raise_r+0x4c>
 800c68a:	1c59      	adds	r1, r3, #1
 800c68c:	d103      	bne.n	800c696 <_raise_r+0x42>
 800c68e:	2316      	movs	r3, #22
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	2001      	movs	r0, #1
 800c694:	e7e7      	b.n	800c666 <_raise_r+0x12>
 800c696:	2400      	movs	r4, #0
 800c698:	4628      	mov	r0, r5
 800c69a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c69e:	4798      	blx	r3
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e7e0      	b.n	800c666 <_raise_r+0x12>

0800c6a4 <raise>:
 800c6a4:	4b02      	ldr	r3, [pc, #8]	; (800c6b0 <raise+0xc>)
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	f7ff bfd3 	b.w	800c654 <_raise_r>
 800c6ae:	bf00      	nop
 800c6b0:	20000010 	.word	0x20000010

0800c6b4 <_kill_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4d06      	ldr	r5, [pc, #24]	; (800c6d4 <_kill_r+0x20>)
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	f7f5 f918 	bl	80018f6 <_kill>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d102      	bne.n	800c6d0 <_kill_r+0x1c>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	b103      	cbz	r3, 800c6d0 <_kill_r+0x1c>
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200013a4 	.word	0x200013a4

0800c6d8 <_getpid_r>:
 800c6d8:	f7f5 b906 	b.w	80018e8 <_getpid>

0800c6dc <_init>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	bf00      	nop
 800c6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e2:	bc08      	pop	{r3}
 800c6e4:	469e      	mov	lr, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <_fini>:
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	bf00      	nop
 800c6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ee:	bc08      	pop	{r3}
 800c6f0:	469e      	mov	lr, r3
 800c6f2:	4770      	bx	lr
