
SEMAPHORE_COUNTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  08005e84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08005e84  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001561f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313a  00000000  00000000  000356bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000387f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00039a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4d2  00000000  00000000  0003abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142af  00000000  00000000  000550a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009491c  00000000  00000000  00069351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdc6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000fdcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cb0 	.word	0x08005cb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005cb0 	.word	0x08005cb0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//--------------PRINTF-------------------------//
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	68b9      	ldr	r1, [r7, #8]
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <_write+0x28>)
 8000198:	f001 fddc 	bl	8001d54 <HAL_UART_Transmit>
	return len;
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000344 	.word	0x20000344

080001ac <HAL_UART_RxCpltCallback>:
  return ch;
}
#endif

uint8_t DataRx;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	490f      	ldr	r1, [pc, #60]	; (80001f4 <HAL_UART_RxCpltCallback+0x48>)
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <HAL_UART_RxCpltCallback+0x4c>)
 80001ba:	f001 fe4e 	bl	8001e5a <HAL_UART_Receive_IT>
	if(DataRx == 'm'){
 80001be:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <HAL_UART_RxCpltCallback+0x48>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b6d      	cmp	r3, #109	; 0x6d
 80001c4:	d111      	bne.n	80001ea <HAL_UART_RxCpltCallback+0x3e>
		xSemaphoreGiveFromISR(myCountingSem01Handle, NULL);
 80001c6:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x50>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2100      	movs	r1, #0
 80001cc:	4618      	mov	r0, r3
 80001ce:	f003 f88f 	bl	80032f0 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(myCountingSem01Handle, NULL);
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f003 f889 	bl	80032f0 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(myCountingSem01Handle, NULL);
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x50>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2100      	movs	r1, #0
 80001e4:	4618      	mov	r0, r3
 80001e6:	f003 f883 	bl	80032f0 <xQueueGiveFromISR>
	}
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000039c 	.word	0x2000039c
 80001f8:	20000344 	.word	0x20000344
 80001fc:	20000398 	.word	0x20000398

08000200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b098      	sub	sp, #96	; 0x60
 8000204:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000206:	f000 fb6b 	bl	80008e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800020a:	f000 f863 	bl	80002d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800020e:	f000 f8d1 	bl	80003b4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000212:	f000 f8a5 	bl	8000360 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	4925      	ldr	r1, [pc, #148]	; (80002b0 <main+0xb0>)
 800021a:	4826      	ldr	r0, [pc, #152]	; (80002b4 <main+0xb4>)
 800021c:	f001 fe1d 	bl	8001e5a <HAL_UART_Receive_IT>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myCountingSem01 */
	osSemaphoreDef(myCountingSem01);
 8000220:	2300      	movs	r3, #0
 8000222:	65bb      	str	r3, [r7, #88]	; 0x58
 8000224:	2300      	movs	r3, #0
 8000226:	65fb      	str	r3, [r7, #92]	; 0x5c
	myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 3);
 8000228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800022c:	2103      	movs	r1, #3
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fc47 	bl	8002ac2 <osSemaphoreCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <main+0xb8>)
 8000238:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task01 */
	osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0xbc>)
 800023c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000240:	461d      	mov	r5, r3
 8000242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000246:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800024e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fbd4 	bl	8002a02 <osThreadCreate>
 800025a:	4603      	mov	r3, r0
 800025c:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <main+0xc0>)
 800025e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task02 */
	osThreadDef(Task02, StartTask02, osPriorityAboveNormal, 0, 128);
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0xc4>)
 8000262:	f107 0420 	add.w	r4, r7, #32
 8000266:	461d      	mov	r5, r3
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000274:	f107 0320 	add.w	r3, r7, #32
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fbc1 	bl	8002a02 <osThreadCreate>
 8000280:	4603      	mov	r3, r0
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <main+0xc8>)
 8000284:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task03 */
	osThreadDef(Task03, StartTask03, osPriorityHigh, 0, 128);
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0xcc>)
 8000288:	1d3c      	adds	r4, r7, #4
 800028a:	461d      	mov	r5, r3
 800028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fbb0 	bl	8002a02 <osThreadCreate>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <main+0xd0>)
 80002a6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002a8:	f002 fba4 	bl	80029f4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002ac:	e7fe      	b.n	80002ac <main+0xac>
 80002ae:	bf00      	nop
 80002b0:	2000039c 	.word	0x2000039c
 80002b4:	20000344 	.word	0x20000344
 80002b8:	20000398 	.word	0x20000398
 80002bc:	08005ce0 	.word	0x08005ce0
 80002c0:	2000038c 	.word	0x2000038c
 80002c4:	08005cfc 	.word	0x08005cfc
 80002c8:	20000390 	.word	0x20000390
 80002cc:	08005d18 	.word	0x08005d18
 80002d0:	20000394 	.word	0x20000394

080002d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f873 	bl	80053ce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fe3f 	bl	8000fa0 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
		Error_Handler();
 8000328:	f000 f8f0 	bl	800050c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f8ac 	bl	80014a4 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
		Error_Handler();
 8000352:	f000 f8db 	bl	800050c <Error_Handler>
	}
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <MX_USART1_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000398:	f001 fc8c 	bl	8001cb4 <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003a2:	f000 f8b3 	bl	800050c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000344 	.word	0x20000344
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <MX_GPIO_Init+0xa8>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_GPIO_Init+0xa8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1d      	ldr	r2, [pc, #116]	; (800045c <MX_GPIO_Init+0xa8>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0xa8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_GPIO_Init+0xa8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a17      	ldr	r2, [pc, #92]	; (800045c <MX_GPIO_Init+0xa8>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_GPIO_Init+0xa8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_GPIO_Init+0xa8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a11      	ldr	r2, [pc, #68]	; (800045c <MX_GPIO_Init+0xa8>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_GPIO_Init+0xa8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	480c      	ldr	r0, [pc, #48]	; (8000460 <MX_GPIO_Init+0xac>)
 8000430:	f000 fd9e 	bl	8000f70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_GPIO_Init+0xac>)
 800044e:	f000 fc0b 	bl	8000c68 <HAL_GPIO_Init>

}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000

08000464 <StartTask01>:
 * @brief  Function implementing the Task01 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const *argument) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <StartTask01+0x30>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f04f 31ff 	mov.w	r1, #4294967295
 8000474:	4618      	mov	r0, r3
 8000476:	f002 fb63 	bl	8002b40 <osSemaphoreWait>
		printf("Task 1 running !\n");
 800047a:	4807      	ldr	r0, [pc, #28]	; (8000498 <StartTask01+0x34>)
 800047c:	f005 f8b2 	bl	80055e4 <puts>
		osDelay(1000);
 8000480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000484:	f002 fb09 	bl	8002a9a <osDelay>
		osSemaphoreRelease(myCountingSem01Handle);
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <StartTask01+0x30>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fba5 	bl	8002bdc <osSemaphoreRelease>
		osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 8000492:	e7eb      	b.n	800046c <StartTask01+0x8>
 8000494:	20000398 	.word	0x20000398
 8000498:	08005d34 	.word	0x08005d34

0800049c <StartTask02>:
 * @brief Function implementing the Task02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		printf("Task 2 running !\n");
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <StartTask02+0x18>)
 80004a6:	f005 f89d 	bl	80055e4 <puts>
		osDelay(1000);
 80004aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ae:	f002 faf4 	bl	8002a9a <osDelay>
		printf("Task 2 running !\n");
 80004b2:	e7f7      	b.n	80004a4 <StartTask02+0x8>
 80004b4:	08005d48 	.word	0x08005d48

080004b8 <StartTask03>:
 * @brief Function implementing the Task03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <StartTask03+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 fb39 	bl	8002b40 <osSemaphoreWait>
		printf("Task 3 running !\n");
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <StartTask03+0x2c>)
 80004d0:	f005 f888 	bl	80055e4 <puts>
		osDelay(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f002 fadf 	bl	8002a9a <osDelay>
		osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 80004dc:	e7f0      	b.n	80004c0 <StartTask03+0x8>
 80004de:	bf00      	nop
 80004e0:	20000398 	.word	0x20000398
 80004e4:	08005d5c 	.word	0x08005d5c

080004e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004fa:	f000 fa07 	bl	800090c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40000800 	.word	0x40000800

0800050c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_MspInit+0x68>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <HAL_MspInit+0x68>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x68>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x68>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <HAL_MspInit+0x68>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x68>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	210f      	movs	r1, #15
 8000552:	f06f 0001 	mvn.w	r0, #1
 8000556:	f000 faaa 	bl	8000aae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x6c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x6c>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <HAL_UART_MspInit+0x9c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d139      	bne.n	800061c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a18      	ldr	r2, [pc, #96]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_UART_MspInit+0xa0>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	480f      	ldr	r0, [pc, #60]	; (800062c <HAL_UART_MspInit+0xa4>)
 80005ee:	f000 fb3b 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <HAL_UART_MspInit+0xa4>)
 8000608:	f000 fb2e 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2105      	movs	r1, #5
 8000610:	2025      	movs	r0, #37	; 0x25
 8000612:	f000 fa4c 	bl	8000aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000616:	2025      	movs	r0, #37	; 0x25
 8000618:	f000 fa65 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013800 	.word	0x40013800
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800

08000630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000646:	4b34      	ldr	r3, [pc, #208]	; (8000718 <HAL_InitTick+0xe8>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <HAL_InitTick+0xe8>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <HAL_InitTick+0xe8>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065e:	f107 0210 	add.w	r2, r7, #16
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f88b 	bl	8001784 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000678:	f001 f85c 	bl	8001734 <HAL_RCC_GetPCLK1Freq>
 800067c:	6378      	str	r0, [r7, #52]	; 0x34
 800067e:	e004      	b.n	800068a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000680:	f001 f858 	bl	8001734 <HAL_RCC_GetPCLK1Freq>
 8000684:	4603      	mov	r3, r0
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <HAL_InitTick+0xec>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0c9b      	lsrs	r3, r3, #18
 8000694:	3b01      	subs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_InitTick+0xf0>)
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <HAL_InitTick+0xf4>)
 800069c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <HAL_InitTick+0xf0>)
 80006a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <HAL_InitTick+0xf0>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_InitTick+0xf0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_InitTick+0xf0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_InitTick+0xf0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <HAL_InitTick+0xf0>)
 80006c0:	f001 f8ae 	bl	8001820 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11b      	bne.n	800070a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <HAL_InitTick+0xf0>)
 80006d4:	f001 f8fc 	bl	80018d0 <HAL_TIM_Base_Start_IT>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d111      	bne.n	800070a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006e6:	201e      	movs	r0, #30
 80006e8:	f000 f9fd 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b0f      	cmp	r3, #15
 80006f0:	d808      	bhi.n	8000704 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006f2:	2200      	movs	r2, #0
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	201e      	movs	r0, #30
 80006f8:	f000 f9d9 	bl	8000aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_InitTick+0xf8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e002      	b.n	800070a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800070a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800070e:	4618      	mov	r0, r3
 8000710:	3738      	adds	r7, #56	; 0x38
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	431bde83 	.word	0x431bde83
 8000720:	200003a0 	.word	0x200003a0
 8000724:	40000800 	.word	0x40000800
 8000728:	20000004 	.word	0x20000004

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <TIM4_IRQHandler+0x10>)
 800075e:	f001 f909 	bl	8001974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200003a0 	.word	0x200003a0

0800076c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USART1_IRQHandler+0x10>)
 8000772:	f001 fb97 	bl	8001ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000344 	.word	0x20000344

08000780 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00a      	b.n	80007a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000792:	f3af 8000 	nop.w
 8000796:	4601      	mov	r1, r0
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf0      	blt.n	8000792 <_read+0x12>
	}

return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e0:	605a      	str	r2, [r3, #4]
	return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <_isatty>:

int _isatty(int file)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	return 1;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000802:	b480      	push	{r7}
 8000804:	b085      	sub	sp, #20
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
	return 0;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f004 fc8e 	bl	800516c <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <_sbrk+0x64>)
 800086c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20005000 	.word	0x20005000
 800087c:	00000400 	.word	0x00000400
 8000880:	200003e8 	.word	0x200003e8
 8000884:	20001150 	.word	0x20001150

08000888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff fff8 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089a:	490c      	ldr	r1, [pc, #48]	; (80008cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b0:	4c09      	ldr	r4, [pc, #36]	; (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f004 fd51 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff fc9d 	bl	8000200 <main>
  bx lr
 80008c6:	4770      	bx	lr
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d0:	08005e10 	.word	0x08005e10
  ldr r2, =_sbss
 80008d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008d8:	2000114c 	.word	0x2000114c

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f8d1 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fe9a 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fe0c 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <HAL_IncTick+0x20>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000008 	.word	0x20000008
 800092c:	200003ec 	.word	0x200003ec

08000930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	200003ec 	.word	0x200003ec

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff4f 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac0:	f7ff ff64 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ffb2 	bl	8000a34 <NVIC_EncodePriority>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff81 	bl	80009e0 <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff57 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d008      	beq.n	8000b2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e020      	b.n	8000b6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 020e 	bic.w	r2, r2, #14
 8000b3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 0201 	bic.w	r2, r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d005      	beq.n	8000b9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2204      	movs	r2, #4
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e051      	b.n	8000c40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 020e 	bic.w	r2, r2, #14
 8000baa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 0201 	bic.w	r2, r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_DMA_Abort_IT+0xd4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d029      	beq.n	8000c1a <HAL_DMA_Abort_IT+0xa2>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_DMA_Abort_IT+0xd8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d022      	beq.n	8000c16 <HAL_DMA_Abort_IT+0x9e>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_DMA_Abort_IT+0xdc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d01a      	beq.n	8000c10 <HAL_DMA_Abort_IT+0x98>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <HAL_DMA_Abort_IT+0xe0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d012      	beq.n	8000c0a <HAL_DMA_Abort_IT+0x92>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_DMA_Abort_IT+0xe4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d00a      	beq.n	8000c04 <HAL_DMA_Abort_IT+0x8c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_DMA_Abort_IT+0xe8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d102      	bne.n	8000bfe <HAL_DMA_Abort_IT+0x86>
 8000bf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bfc:	e00e      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c02:	e00b      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	e008      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	e005      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	e002      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000c16:	2310      	movs	r3, #16
 8000c18:	e000      	b.n	8000c1c <HAL_DMA_Abort_IT+0xa4>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_DMA_Abort_IT+0xec>)
 8000c1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
    } 
  }
  return status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40020008 	.word	0x40020008
 8000c50:	4002001c 	.word	0x4002001c
 8000c54:	40020030 	.word	0x40020030
 8000c58:	40020044 	.word	0x40020044
 8000c5c:	40020058 	.word	0x40020058
 8000c60:	4002006c 	.word	0x4002006c
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e169      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8158 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a9a      	ldr	r2, [pc, #616]	; (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a98      	ldr	r2, [pc, #608]	; (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4a98      	ldr	r2, [pc, #608]	; (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a96      	ldr	r2, [pc, #600]	; (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a96      	ldr	r2, [pc, #600]	; (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a94      	ldr	r2, [pc, #592]	; (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a94      	ldr	r2, [pc, #592]	; (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a92      	ldr	r2, [pc, #584]	; (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a92      	ldr	r2, [pc, #584]	; (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a90      	ldr	r2, [pc, #576]	; (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a79      	ldr	r2, [pc, #484]	; (8000f1c <HAL_GPIO_Init+0x2b4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	; 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a40      	ldr	r2, [pc, #256]	; (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3e      	ldr	r2, [pc, #248]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3d      	ldr	r2, [pc, #244]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e54:	2300      	movs	r3, #0
 8000e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e66:	492f      	ldr	r1, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	492c      	ldr	r1, [pc, #176]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4928      	ldr	r1, [pc, #160]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	4922      	ldr	r1, [pc, #136]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	491e      	ldr	r1, [pc, #120]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4918      	ldr	r1, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4914      	ldr	r1, [pc, #80]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d021      	beq.n	8000f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e021      	b.n	8000f4a <HAL_GPIO_Init+0x2e2>
 8000f06:	bf00      	nop
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10310000 	.word	0x10310000
 8000f10:	10220000 	.word	0x10220000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10110000 	.word	0x10110000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40011400 	.word	0x40011400
 8000f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4909      	ldr	r1, [pc, #36]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae8e 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	372c      	adds	r7, #44	; 0x2c
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	611a      	str	r2, [r3, #16]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e272      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8087 	beq.w	80010ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc0:	4b92      	ldr	r3, [pc, #584]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d00c      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fcc:	4b8f      	ldr	r3, [pc, #572]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d112      	bne.n	8000ffe <HAL_RCC_OscConfig+0x5e>
 8000fd8:	4b8c      	ldr	r3, [pc, #560]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d10b      	bne.n	8000ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe6:	4b89      	ldr	r3, [pc, #548]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d06c      	beq.n	80010cc <HAL_RCC_OscConfig+0x12c>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d168      	bne.n	80010cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e24c      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x76>
 8001008:	4b80      	ldr	r3, [pc, #512]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a7f      	ldr	r2, [pc, #508]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800100e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e02e      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x98>
 800101e:	4b7b      	ldr	r3, [pc, #492]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7a      	ldr	r2, [pc, #488]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b78      	ldr	r3, [pc, #480]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a77      	ldr	r2, [pc, #476]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0xbc>
 8001042:	4b72      	ldr	r3, [pc, #456]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a71      	ldr	r2, [pc, #452]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6f      	ldr	r3, [pc, #444]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6e      	ldr	r2, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 800105c:	4b6b      	ldr	r3, [pc, #428]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a6a      	ldr	r2, [pc, #424]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a67      	ldr	r2, [pc, #412]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc58 	bl	8000930 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fc54 	bl	8000930 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e200      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xe4>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc44 	bl	8000930 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc40 	bl	8000930 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1ec      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x10c>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010da:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d11c      	bne.n	800112c <HAL_RCC_OscConfig+0x18c>
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x176>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e1c0      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4939      	ldr	r1, [pc, #228]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	e03a      	b.n	80011a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fbf9 	bl	8000930 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fbf5 	bl	8000930 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e1a1      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4927      	ldr	r1, [pc, #156]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fbd8 	bl	8000930 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fbd4 	bl	8000930 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e180      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d03a      	beq.n	8001224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d019      	beq.n	80011ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fbb8 	bl	8000930 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fbb4 	bl	8000930 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e160      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 fafe 	bl	80017e4 <RCC_Delay>
 80011e8:	e01c      	b.n	8001224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fb9e 	bl	8000930 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f6:	e00f      	b.n	8001218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fb9a 	bl	8000930 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d908      	bls.n	8001218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e146      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	42420000 	.word	0x42420000
 8001214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e9      	bne.n	80011f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a6 	beq.w	800137e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a87      	ldr	r2, [pc, #540]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_OscConfig+0x4c8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d118      	bne.n	800129c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x4c8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x4c8>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001276:	f7ff fb5b 	bl	8000930 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127e:	f7ff fb57 	bl	8000930 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e103      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b75      	ldr	r3, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x4c8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x312>
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6213      	str	r3, [r2, #32]
 80012b0:	e02d      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x334>
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a69      	ldr	r2, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	e01c      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d10c      	bne.n	80012f6 <HAL_RCC_OscConfig+0x356>
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a60      	ldr	r2, [pc, #384]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6213      	str	r3, [r2, #32]
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a5d      	ldr	r2, [pc, #372]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0x36e>
 80012f6:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4a5a      	ldr	r2, [pc, #360]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6213      	str	r3, [r2, #32]
 8001302:	4b58      	ldr	r3, [pc, #352]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d015      	beq.n	8001342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb0b 	bl	8000930 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb07 	bl	8000930 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e0b1      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ee      	beq.n	800131e <HAL_RCC_OscConfig+0x37e>
 8001340:	e014      	b.n	800136c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff faf5 	bl	8000930 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff faf1 	bl	8000930 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e09b      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ee      	bne.n	800134a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d105      	bne.n	800137e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8087 	beq.w	8001496 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d061      	beq.n	8001458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d146      	bne.n	800142a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_RCC_OscConfig+0x4cc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fac5 	bl	8000930 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fac1 	bl	8000930 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e06d      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d108      	bne.n	80013e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4921      	ldr	r1, [pc, #132]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a19      	ldr	r1, [r3, #32]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	430b      	orrs	r3, r1
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x4cc>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fa95 	bl	8000930 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fa91 	bl	8000930 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e03d      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x46a>
 8001428:	e035      	b.n	8001496 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_RCC_OscConfig+0x4cc>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fa7e 	bl	8000930 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fa7a 	bl	8000930 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e026      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x498>
 8001456:	e01e      	b.n	8001496 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e019      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
 8001464:	40021000 	.word	0x40021000
 8001468:	40007000 	.word	0x40007000
 800146c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x500>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	429a      	cmp	r2, r3
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0d0      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d910      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 0207 	bic.w	r2, r3, #7
 80014ce:	4965      	ldr	r1, [pc, #404]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800150a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d040      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e073      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06b      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4936      	ldr	r1, [pc, #216]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff f9cc 	bl	8000930 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff f9c8 	bl	8000930 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e053      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d210      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	4922      	ldr	r1, [pc, #136]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f821 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1cc>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ffec 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000
 8001668:	40021000 	.word	0x40021000
 800166c:	08005d78 	.word	0x08005d78
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d002      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x30>
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_GetSysClockFreq+0x36>
 80016a6:	e027      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_GetSysClockFreq+0x98>)
 80016aa:	613b      	str	r3, [r7, #16]
      break;
 80016ac:	e027      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d010      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0c5b      	lsrs	r3, r3, #17
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_RCC_GetSysClockFreq+0x98>)
 80016da:	fb03 f202 	mul.w	r2, r3, r2
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e004      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <HAL_RCC_GetSysClockFreq+0xa4>)
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	613b      	str	r3, [r7, #16]
      break;
 80016f6:	e002      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RCC_GetSysClockFreq+0x98>)
 80016fa:	613b      	str	r3, [r7, #16]
      break;
 80016fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fe:	693b      	ldr	r3, [r7, #16]
}
 8001700:	4618      	mov	r0, r3
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	007a1200 	.word	0x007a1200
 8001714:	08005d90 	.word	0x08005d90
 8001718:	08005da0 	.word	0x08005da0
 800171c:	003d0900 	.word	0x003d0900

08001720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <HAL_RCC_GetHCLKFreq+0x10>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	20000000 	.word	0x20000000

08001734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001738:	f7ff fff2 	bl	8001720 <HAL_RCC_GetHCLKFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	08005d88 	.word	0x08005d88

0800175c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001760:	f7ff ffde 	bl	8001720 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	4903      	ldr	r1, [pc, #12]	; (8001780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000
 8001780:	08005d88 	.word	0x08005d88

08001784 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	220f      	movs	r2, #15
 8001792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_RCC_GetClockConfig+0x58>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_GetClockConfig+0x58>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_GetClockConfig+0x58>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_RCC_GetClockConfig+0x58>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_GetClockConfig+0x5c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0207 	and.w	r2, r3, #7
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40022000 	.word	0x40022000

080017e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <RCC_Delay+0x34>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <RCC_Delay+0x38>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0a5b      	lsrs	r3, r3, #9
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001800:	bf00      	nop
  }
  while (Delay --);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	60fa      	str	r2, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f9      	bne.n	8001800 <RCC_Delay+0x1c>
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000000 	.word	0x20000000
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e041      	b.n	80018b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f839 	bl	80018be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3304      	adds	r3, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f000 f9b4 	bl	8001bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d001      	beq.n	80018e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e03a      	b.n	800195e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_TIM_Base_Start_IT+0x98>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00e      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x58>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001912:	d009      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x58>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_TIM_Base_Start_IT+0x9c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d004      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x58>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_TIM_Base_Start_IT+0xa0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d010      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800194a:	e007      	b.n	800195c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800

08001974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d122      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d11b      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0202 	mvn.w	r2, #2
 80019a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f8ed 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 80019bc:	e005      	b.n	80019ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8e0 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8ef 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d122      	bne.n	8001a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d11b      	bne.n	8001a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0204 	mvn.w	r2, #4
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8c3 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8b6 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8c5 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d122      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d11b      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0208 	mvn.w	r2, #8
 8001a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f899 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a64:	e005      	b.n	8001a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f88c 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f89b 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0210 	mvn.w	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f86f 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f862 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f871 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0201 	mvn.w	r2, #1
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fcf8 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	d10e      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d107      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8bf 	bl	8001ca2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d107      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f835 	bl	8001bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d10e      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d107      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0220 	mvn.w	r2, #32
 8001b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f88a 	bl	8001c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <TIM_Base_SetConfig+0xb8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00b      	beq.n	8001bfc <TIM_Base_SetConfig+0x30>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bea:	d007      	beq.n	8001bfc <TIM_Base_SetConfig+0x30>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <TIM_Base_SetConfig+0xbc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d003      	beq.n	8001bfc <TIM_Base_SetConfig+0x30>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <TIM_Base_SetConfig+0xc0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d108      	bne.n	8001c0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <TIM_Base_SetConfig+0xb8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00b      	beq.n	8001c2e <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d007      	beq.n	8001c2e <TIM_Base_SetConfig+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <TIM_Base_SetConfig+0xbc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <TIM_Base_SetConfig+0x62>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <TIM_Base_SetConfig+0xc0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <TIM_Base_SetConfig+0xb8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	615a      	str	r2, [r3, #20]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40012c00 	.word	0x40012c00
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40000800 	.word	0x40000800

08001c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e042      	b.n	8001d4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fc54 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fdc5 	bl	8002888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d16d      	bne.n	8001e50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_UART_Transmit+0x2c>
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e066      	b.n	8001e52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d92:	f7fe fdcd 	bl	8000930 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d108      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e003      	b.n	8001dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dc8:	e02a      	b.n	8001e20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fb14 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e036      	b.n	8001e52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e007      	b.n	8001e12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1cf      	bne.n	8001dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fae4 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e006      	b.n	8001e52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	4613      	mov	r3, r2
 8001e66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d112      	bne.n	8001e9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_UART_Receive_IT+0x26>
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e00b      	b.n	8001e9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 fb24 	bl	80024de <UART_Start_Receive_IT>
 8001e96:	4603      	mov	r3, r0
 8001e98:	e000      	b.n	8001e9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0ba      	sub	sp, #232	; 0xe8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10f      	bne.n	8001f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_UART_IRQHandler+0x66>
 8001ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fc01 	bl	800270a <UART_Receive_IT>
      return;
 8001f08:	e25b      	b.n	80023c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80de 	beq.w	80020d0 <HAL_UART_IRQHandler+0x22c>
 8001f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80d1 	beq.w	80020d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_UART_IRQHandler+0xae>
 8001f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_UART_IRQHandler+0xd2>
 8001f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_UART_IRQHandler+0xf6>
 8001f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <HAL_UART_IRQHandler+0x126>
 8001fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f043 0208 	orr.w	r2, r3, #8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 81f2 	beq.w	80023b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x14e>
 8001fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fb8c 	bl	800270a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_UART_IRQHandler+0x17a>
 8002016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04f      	beq.n	80020be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa96 	bl	8002550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d041      	beq.n	80020b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3314      	adds	r3, #20
 8002038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002040:	e853 3f00 	ldrex	r3, [r3]
 8002044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800204c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3314      	adds	r3, #20
 800205a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800205e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800206a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800206e:	e841 2300 	strex	r3, r2, [r1]
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d9      	bne.n	8002032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d013      	beq.n	80020ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <HAL_UART_IRQHandler+0x3e0>)
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fd70 	bl	8000b78 <HAL_DMA_Abort_IT>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ac:	e00e      	b.n	80020cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f993 	bl	80023da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b4:	e00a      	b.n	80020cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f98f 	bl	80023da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020bc:	e006      	b.n	80020cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f98b 	bl	80023da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80020ca:	e175      	b.n	80023b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	bf00      	nop
    return;
 80020ce:	e173      	b.n	80023b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f040 814f 	bne.w	8002378 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8148 	beq.w	8002378 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8141 	beq.w	8002378 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80b6 	beq.w	8002288 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8145 	beq.w	80023bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800213a:	429a      	cmp	r2, r3
 800213c:	f080 813e 	bcs.w	80023bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002146:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b20      	cmp	r3, #32
 8002150:	f000 8088 	beq.w	8002264 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800216a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	330c      	adds	r3, #12
 800217c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002180:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002188:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800218c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002190:	e841 2300 	strex	r3, r2, [r1]
 8002194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1d9      	bne.n	8002154 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3314      	adds	r3, #20
 80021c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021d0:	e841 2300 	strex	r3, r2, [r1]
 80021d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e1      	bne.n	80021a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3314      	adds	r3, #20
 80021e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e6:	e853 3f00 	ldrex	r3, [r3]
 80021ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002200:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002204:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002208:	e841 2300 	strex	r3, r2, [r1]
 800220c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e3      	bne.n	80021dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	330c      	adds	r3, #12
 8002228:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	e853 3f00 	ldrex	r3, [r3]
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	f023 0310 	bic.w	r3, r3, #16
 8002238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002246:	65ba      	str	r2, [r7, #88]	; 0x58
 8002248:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800224c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800224e:	e841 2300 	strex	r3, r2, [r1]
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e3      	bne.n	8002222 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fc4f 	bl	8000b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002272:	b29b      	uxth	r3, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8b6 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002280:	e09c      	b.n	80023bc <HAL_UART_IRQHandler+0x518>
 8002282:	bf00      	nop
 8002284:	08002615 	.word	0x08002615
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002290:	b29b      	uxth	r3, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 808e 	beq.w	80023c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8089 	beq.w	80023c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b8:	e853 3f00 	ldrex	r3, [r3]
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022d2:	647a      	str	r2, [r7, #68]	; 0x44
 80022d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022da:	e841 2300 	strex	r3, r2, [r1]
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e3      	bne.n	80022ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3314      	adds	r3, #20
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	e853 3f00 	ldrex	r3, [r3]
 80022f4:	623b      	str	r3, [r7, #32]
   return(result);
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3314      	adds	r3, #20
 8002306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800230a:	633a      	str	r2, [r7, #48]	; 0x30
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e3      	bne.n	80022e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	60fb      	str	r3, [r7, #12]
   return(result);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0310 	bic.w	r3, r3, #16
 8002342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002350:	61fa      	str	r2, [r7, #28]
 8002352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	617b      	str	r3, [r7, #20]
   return(result);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e3      	bne.n	800232c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800236a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f83b 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002376:	e023      	b.n	80023c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_UART_IRQHandler+0x4f4>
 8002384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f953 	bl	800263c <UART_Transmit_IT>
    return;
 8002396:	e014      	b.n	80023c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00e      	beq.n	80023c2 <HAL_UART_IRQHandler+0x51e>
 80023a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f992 	bl	80026da <UART_EndTransmit_IT>
    return;
 80023b6:	e004      	b.n	80023c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80023b8:	bf00      	nop
 80023ba:	e002      	b.n	80023c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023bc:	bf00      	nop
 80023be:	e000      	b.n	80023c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023c0:	bf00      	nop
  }
}
 80023c2:	37e8      	adds	r7, #232	; 0xe8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b090      	sub	sp, #64	; 0x40
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	e050      	b.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d04c      	beq.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x30>
 8002422:	f7fe fa85 	bl	8000930 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800242e:	429a      	cmp	r2, r3
 8002430:	d241      	bcs.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002452:	637a      	str	r2, [r7, #52]	; 0x34
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3314      	adds	r3, #20
 800246c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	613b      	str	r3, [r7, #16]
   return(result);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3314      	adds	r3, #20
 8002484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002486:	623a      	str	r2, [r7, #32]
 8002488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	69f9      	ldr	r1, [r7, #28]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	61bb      	str	r3, [r7, #24]
   return(result);
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e5      	bne.n	8002466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e00f      	b.n	80024d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4013      	ands	r3, r2
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d09f      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3740      	adds	r7, #64	; 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	; 0x22
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002522:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002550:	b480      	push	{r7}
 8002552:	b095      	sub	sp, #84	; 0x54
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002578:	643a      	str	r2, [r7, #64]	; 0x40
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800257e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	61fb      	str	r3, [r7, #28]
   return(result);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b4:	e841 2300 	strex	r3, r2, [r1]
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e5      	bne.n	800258c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d119      	bne.n	80025fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	e853 3f00 	ldrex	r3, [r3]
 80025d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 0310 	bic.w	r3, r3, #16
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e8:	61ba      	str	r2, [r7, #24]
 80025ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	6979      	ldr	r1, [r7, #20]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	e841 2300 	strex	r3, r2, [r1]
 80025f4:	613b      	str	r3, [r7, #16]
   return(result);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e5      	bne.n	80025c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800260a:	bf00      	nop
 800260c:	3754      	adds	r7, #84	; 0x54
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fed3 	bl	80023da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b21      	cmp	r3, #33	; 0x21
 800264e:	d13e      	bne.n	80026ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002658:	d114      	bne.n	8002684 <UART_Transmit_IT+0x48>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d110      	bne.n	8002684 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002676:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	1c9a      	adds	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	621a      	str	r2, [r3, #32]
 8002682:	e008      	b.n	8002696 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	1c59      	adds	r1, r3, #1
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6211      	str	r1, [r2, #32]
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4619      	mov	r1, r3
 80026a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fe64 	bl	80023c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b08c      	sub	sp, #48	; 0x30
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b22      	cmp	r3, #34	; 0x22
 800271c:	f040 80ae 	bne.w	800287c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d117      	bne.n	800275a <UART_Receive_IT+0x50>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d113      	bne.n	800275a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002748:	b29a      	uxth	r2, r3
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	1c9a      	adds	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
 8002758:	e026      	b.n	80027a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d007      	beq.n	800277e <UART_Receive_IT+0x74>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <UART_Receive_IT+0x82>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e008      	b.n	800279e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002798:	b2da      	uxtb	r2, r3
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4619      	mov	r1, r3
 80027b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d15d      	bne.n	8002878 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0220 	bic.w	r2, r2, #32
 80027ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d135      	bne.n	800286e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	e853 3f00 	ldrex	r3, [r3]
 8002816:	613b      	str	r3, [r7, #16]
   return(result);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 0310 	bic.w	r3, r3, #16
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	623a      	str	r2, [r7, #32]
 800282a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	69f9      	ldr	r1, [r7, #28]
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	61bb      	str	r3, [r7, #24]
   return(result);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e5      	bne.n	8002808 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b10      	cmp	r3, #16
 8002848:	d10a      	bne.n	8002860 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fdc0 	bl	80023ec <HAL_UARTEx_RxEventCallback>
 800286c:	e002      	b.n	8002874 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fd fc9c 	bl	80001ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e002      	b.n	800287e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3730      	adds	r7, #48	; 0x30
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028c2:	f023 030c 	bic.w	r3, r3, #12
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2c      	ldr	r2, [pc, #176]	; (800299c <UART_SetConfig+0x114>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f0:	f7fe ff34 	bl	800175c <HAL_RCC_GetPCLK2Freq>
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	e002      	b.n	80028fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7fe ff1c 	bl	8001734 <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <UART_SetConfig+0x118>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	0119      	lsls	r1, r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f2f3 	udiv	r2, r2, r3
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <UART_SetConfig+0x118>)
 8002936:	fba3 0302 	umull	r0, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	4419      	add	r1, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <UART_SetConfig+0x118>)
 800296e:	fba3 0302 	umull	r0, r3, r3, r2
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	fb00 f303 	mul.w	r3, r0, r3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <UART_SetConfig+0x118>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	440a      	add	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40013800 	.word	0x40013800
 80029a0:	51eb851f 	.word	0x51eb851f

080029a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b6:	2b84      	cmp	r3, #132	; 0x84
 80029b8:	d005      	beq.n	80029c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	3303      	adds	r3, #3
 80029c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d8:	f3ef 8305 	mrs	r3, IPSR
 80029dc:	607b      	str	r3, [r7, #4]
  return(result);
 80029de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029f8:	f001 f990 	bl	8003d1c <vTaskStartScheduler>
  
  return osOK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a04:	b089      	sub	sp, #36	; 0x24
 8002a06:	af04      	add	r7, sp, #16
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <osThreadCreate+0x54>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685c      	ldr	r4, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681d      	ldr	r5, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691e      	ldr	r6, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb8 	bl	80029a4 <makeFreeRtosPriority>
 8002a34:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a3e:	9202      	str	r2, [sp, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	9100      	str	r1, [sp, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4632      	mov	r2, r6
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 ff91 	bl	8003972 <xTaskCreateStatic>
 8002a50:	4603      	mov	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e01c      	b.n	8002a90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685c      	ldr	r4, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a62:	b29e      	uxth	r6, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff9a 	bl	80029a4 <makeFreeRtosPriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	4632      	mov	r2, r6
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	f000 ffd2 	bl	8003a2a <xTaskCreate>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <osDelay+0x16>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	e000      	b.n	8002ab2 <osDelay+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f8fe 	bl	8003cb4 <vTaskDelay>
  
  return osOK;
 8002ab8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d016      	beq.n	8002b02 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10a      	bne.n	8002af0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	9200      	str	r2, [sp, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f000 f9c6 	bl	8002e78 <xQueueGenericCreateStatic>
 8002aec:	4603      	mov	r3, r0
 8002aee:	e023      	b.n	8002b38 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f000 fa91 	bl	8003020 <xQueueCreateCountingSemaphoreStatic>
 8002afe:	4603      	mov	r3, r0
 8002b00:	e01a      	b.n	8002b38 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d110      	bne.n	8002b2a <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002b08:	2203      	movs	r2, #3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f000 fa2a 	bl	8002f66 <xQueueGenericCreate>
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <osSemaphoreCreate+0x64>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fae7 	bl	80030f4 <xQueueGenericSend>
      return sema;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	e006      	b.n	8002b38 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 faac 	bl	800308e <xQueueCreateCountingSemaphore>
 8002b36:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	e03a      	b.n	8002bce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d103      	bne.n	8002b6c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e009      	b.n	8002b80 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b80:	f7ff ff27 	bl	80029d2 <inHandlerMode>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d017      	beq.n	8002bba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2100      	movs	r1, #0
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fd46 	bl	8003624 <xQueueReceiveFromISR>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b9e:	23ff      	movs	r3, #255	; 0xff
 8002ba0:	e015      	b.n	8002bce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d011      	beq.n	8002bcc <osSemaphoreWait+0x8c>
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <osSemaphoreWait+0x98>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e008      	b.n	8002bcc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fc25 	bl	800340c <xQueueSemaphoreTake>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002bc8:	23ff      	movs	r3, #255	; 0xff
 8002bca:	e000      	b.n	8002bce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002bec:	f7ff fef1 	bl	80029d2 <inHandlerMode>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb77 	bl	80032f0 <xQueueGiveFromISR>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	e017      	b.n	8002c3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <osSemaphoreRelease+0x5e>
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <osSemaphoreRelease+0x68>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	e00a      	b.n	8002c3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa62 	bl	80030f4 <xQueueGenericSend>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002c36:	23ff      	movs	r3, #255	; 0xff
 8002c38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0208 	add.w	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 0208 	add.w	r2, r3, #8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0208 	add.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d103      	bne.n	8002d04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e00c      	b.n	8002d1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3308      	adds	r3, #8
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e002      	b.n	8002d12 <vListInsert+0x2e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d2f6      	bcs.n	8002d0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d103      	bne.n	8002d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1e5a      	subs	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dd2:	f001 fef3 	bl	8004bbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	3b01      	subs	r3, #1
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d114      	bne.n	8002e52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01a      	beq.n	8002e66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3310      	adds	r3, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f9c9 	bl	80041cc <xTaskRemoveFromEventList>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <xQueueGenericReset+0xcc>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	e009      	b.n	8002e66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3310      	adds	r3, #16
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fef6 	bl	8002c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fef1 	bl	8002c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e66:	f001 fed9 	bl	8004c1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	; 0x38
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <xQueueGenericCreateStatic+0x52>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <xQueueGenericCreateStatic+0x56>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericCreateStatic+0x58>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <xQueueGenericCreateStatic+0x7e>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGenericCreateStatic+0x82>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericCreateStatic+0x84>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61fb      	str	r3, [r7, #28]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f16:	2348      	movs	r3, #72	; 0x48
 8002f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b48      	cmp	r3, #72	; 0x48
 8002f1e:	d00a      	beq.n	8002f36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61bb      	str	r3, [r7, #24]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f843 	bl	8002fe2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3730      	adds	r7, #48	; 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	613b      	str	r3, [r7, #16]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e004      	b.n	8002fa6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3348      	adds	r3, #72	; 0x48
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 ff06 	bl	8004dbc <pvPortMalloc>
 8002fb0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00f      	beq.n	8002fd8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	3348      	adds	r3, #72	; 0x48
 8002fbc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f805 	bl	8002fe2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
	}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e002      	b.n	8003004 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003010:	2101      	movs	r1, #1
 8003012:	69b8      	ldr	r0, [r7, #24]
 8003014:	f7ff fec8 	bl	8002da8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	61bb      	str	r3, [r7, #24]
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	429a      	cmp	r2, r3
 800304e:	d90a      	bls.n	8003066 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	617b      	str	r3, [r7, #20]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff ff01 	bl	8002e78 <xQueueGenericCreateStatic>
 8003076:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003084:	69fb      	ldr	r3, [r7, #28]
	}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	613b      	str	r3, [r7, #16]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d90a      	bls.n	80030d2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60fb      	str	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80030d2:	2202      	movs	r2, #2
 80030d4:	2100      	movs	r1, #0
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff45 	bl	8002f66 <xQueueGenericCreate>
 80030dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80030ea:	697b      	ldr	r3, [r7, #20]
	}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericSend+0x32>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <xQueueGenericSend+0x40>
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <xQueueGenericSend+0x44>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <xQueueGenericSend+0x46>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xQueueGenericSend+0x60>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d103      	bne.n	8003162 <xQueueGenericSend+0x6e>
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <xQueueGenericSend+0x72>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <xQueueGenericSend+0x74>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericSend+0x8e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	623b      	str	r3, [r7, #32]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003182:	f001 f9e7 	bl	8004554 <xTaskGetSchedulerState>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xQueueGenericSend+0x9e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueGenericSend+0xa2>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueGenericSend+0xa4>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	61fb      	str	r3, [r7, #28]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b2:	f001 fd03 	bl	8004bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <xQueueGenericSend+0xd4>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d129      	bne.n	800321c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ce:	f000 fac0 	bl	8003752 <prvCopyDataToQueue>
 80031d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fff3 	bl	80041cc <xTaskRemoveFromEventList>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <xQueueGenericSend+0x1f8>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e00a      	b.n	8003214 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <xQueueGenericSend+0x1f8>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003214:	f001 fd02 	bl	8004c1c <vPortExitCritical>
				return pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	e063      	b.n	80032e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003222:	f001 fcfb 	bl	8004c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003226:	2300      	movs	r3, #0
 8003228:	e05c      	b.n	80032e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f82b 	bl	8004290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323e:	f001 fced 	bl	8004c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003242:	f000 fdd5 	bl	8003df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003246:	f001 fcb9 	bl	8004bbc <vPortEnterCritical>
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003250:	b25b      	sxtb	r3, r3
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d103      	bne.n	8003260 <xQueueGenericSend+0x16c>
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003266:	b25b      	sxtb	r3, r3
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d103      	bne.n	8003276 <xQueueGenericSend+0x182>
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003276:	f001 fcd1 	bl	8004c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800327a:	1d3a      	adds	r2, r7, #4
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f001 f81a 	bl	80042bc <xTaskCheckForTimeOut>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d124      	bne.n	80032d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800328e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003290:	f000 fb57 	bl	8003942 <prvIsQueueFull>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d018      	beq.n	80032cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 ff6e 	bl	8004184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032aa:	f000 fae2 	bl	8003872 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032ae:	f000 fdad 	bl	8003e0c <xTaskResumeAll>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f af7c 	bne.w	80031b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <xQueueGenericSend+0x1f8>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	e772      	b.n	80031b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ce:	f000 fad0 	bl	8003872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032d2:	f000 fd9b 	bl	8003e0c <xTaskResumeAll>
 80032d6:	e76c      	b.n	80031b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032da:	f000 faca 	bl	8003872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032de:	f000 fd95 	bl	8003e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032e2:	2300      	movs	r3, #0
		}
	}
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3738      	adds	r7, #56	; 0x38
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	623b      	str	r3, [r7, #32]
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61fb      	str	r3, [r7, #28]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <xQueueGiveFromISR+0x58>
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <xQueueGiveFromISR+0x5c>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <xQueueGiveFromISR+0x5e>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	61bb      	str	r3, [r7, #24]
}
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003368:	f001 fcea 	bl	8004d40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800336c:	f3ef 8211 	mrs	r2, BASEPRI
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	617a      	str	r2, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003384:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003394:	429a      	cmp	r2, r3
 8003396:	d22b      	bcs.n	80033f0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d112      	bne.n	80033da <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d016      	beq.n	80033ea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 ff03 	bl	80041cc <xTaskRemoveFromEventList>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e007      	b.n	80033ea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033de:	3301      	adds	r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	b25a      	sxtb	r2, r3
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033ea:	2301      	movs	r3, #1
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
 80033ee:	e001      	b.n	80033f4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003402:	4618      	mov	r0, r3
 8003404:	3738      	adds	r7, #56	; 0x38
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	623b      	str	r3, [r7, #32]
}
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	61fb      	str	r3, [r7, #28]
}
 8003458:	bf00      	nop
 800345a:	e7fe      	b.n	800345a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800345c:	f001 f87a 	bl	8004554 <xTaskGetSchedulerState>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <xQueueSemaphoreTake+0x60>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <xQueueSemaphoreTake+0x64>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <xQueueSemaphoreTake+0x66>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	61bb      	str	r3, [r7, #24]
}
 8003488:	bf00      	nop
 800348a:	e7fe      	b.n	800348a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800348c:	f001 fb96 	bl	8004bbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d024      	beq.n	80034e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80034ac:	f001 fa1c 	bl	80048e8 <pvTaskIncrementMutexHeldCount>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00f      	beq.n	80034de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	3310      	adds	r3, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe82 	bl	80041cc <xTaskRemoveFromEventList>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <xQueueSemaphoreTake+0x214>)
 80034d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034de:	f001 fb9d 	bl	8004c1c <vPortExitCritical>
				return pdPASS;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e097      	b.n	8003616 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	617b      	str	r3, [r7, #20]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003508:	f001 fb88 	bl	8004c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800350c:	2300      	movs	r3, #0
 800350e:	e082      	b.n	8003616 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	4618      	mov	r0, r3
 800351c:	f000 feb8 	bl	8004290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003524:	f001 fb7a 	bl	8004c1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003528:	f000 fc62 	bl	8003df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800352c:	f001 fb46 	bl	8004bbc <vPortEnterCritical>
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003536:	b25b      	sxtb	r3, r3
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d103      	bne.n	8003546 <xQueueSemaphoreTake+0x13a>
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800354c:	b25b      	sxtb	r3, r3
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d103      	bne.n	800355c <xQueueSemaphoreTake+0x150>
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355c:	f001 fb5e 	bl	8004c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003560:	463a      	mov	r2, r7
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fea7 	bl	80042bc <xTaskCheckForTimeOut>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d132      	bne.n	80035da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003576:	f000 f9ce 	bl	8003916 <prvIsQueueEmpty>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d026      	beq.n	80035ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003588:	f001 fb18 	bl	8004bbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fffd 	bl	8004590 <xTaskPriorityInherit>
 8003596:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003598:	f001 fb40 	bl	8004c1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	3324      	adds	r3, #36	; 0x24
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fded 	bl	8004184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ac:	f000 f961 	bl	8003872 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035b0:	f000 fc2c 	bl	8003e0c <xTaskResumeAll>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f47f af68 	bne.w	800348c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <xQueueSemaphoreTake+0x214>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	e75e      	b.n	800348c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d0:	f000 f94f 	bl	8003872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d4:	f000 fc1a 	bl	8003e0c <xTaskResumeAll>
 80035d8:	e758      	b.n	800348c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035dc:	f000 f949 	bl	8003872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e0:	f000 fc14 	bl	8003e0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035e6:	f000 f996 	bl	8003916 <prvIsQueueEmpty>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f43f af4d 	beq.w	800348c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035f8:	f001 fae0 	bl	8004bbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035fe:	f000 f891 	bl	8003724 <prvGetDisinheritPriorityAfterTimeout>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f8cc 	bl	80047a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003610:	f001 fb04 	bl	8004c1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003616:	4618      	mov	r0, r3
 8003618:	3738      	adds	r7, #56	; 0x38
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	623b      	str	r3, [r7, #32]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <xQueueReceiveFromISR+0x3a>
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <xQueueReceiveFromISR+0x3e>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <xQueueReceiveFromISR+0x40>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61fb      	str	r3, [r7, #28]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367e:	f001 fb5f 	bl	8004d40 <vPortValidateInterruptPriority>
	__asm volatile
 8003682:	f3ef 8211 	mrs	r2, BASEPRI
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	61ba      	str	r2, [r7, #24]
 8003698:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800369a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02f      	beq.n	800370a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b8:	f000 f8b5 	bl	8003826 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	1e5a      	subs	r2, r3, #1
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80036c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d112      	bne.n	80036f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	3310      	adds	r3, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd76 	bl	80041cc <xTaskRemoveFromEventList>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e007      	b.n	8003704 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	b25a      	sxtb	r2, r3
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003704:	2301      	movs	r3, #1
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	e001      	b.n	800370e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f383 8811 	msr	BASEPRI, r3
}
 8003718:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800371c:	4618      	mov	r0, r3
 800371e:	3738      	adds	r7, #56	; 0x38
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e001      	b.n	8003746 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003746:	68fb      	ldr	r3, [r7, #12]
	}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d14d      	bne.n	8003814 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ff8d 	bl	800469c <xTaskPriorityDisinherit>
 8003782:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e043      	b.n	8003814 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6898      	ldr	r0, [r3, #8]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	461a      	mov	r2, r3
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	f001 fe08 	bl	80053b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d32b      	bcc.n	8003814 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e026      	b.n	8003814 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68d8      	ldr	r0, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	461a      	mov	r2, r3
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	f001 fdee 	bl	80053b2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	425b      	negs	r3, r3
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d207      	bcs.n	8003802 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	425b      	negs	r3, r3
 80037fc:	441a      	add	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d105      	bne.n	8003814 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3b01      	subs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d018      	beq.n	800386a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d303      	bcc.n	800385a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	461a      	mov	r2, r3
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	f001 fda4 	bl	80053b2 <memcpy>
	}
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800387a:	f001 f99f 	bl	8004bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003884:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003886:	e011      	b.n	80038ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3324      	adds	r3, #36	; 0x24
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fc99 	bl	80041cc <xTaskRemoveFromEventList>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038a0:	f000 fd6e 	bl	8004380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	dce9      	bgt.n	8003888 <prvUnlockQueue+0x16>
 80038b4:	e000      	b.n	80038b8 <prvUnlockQueue+0x46>
					break;
 80038b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038c0:	f001 f9ac 	bl	8004c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038c4:	f001 f97a 	bl	8004bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d0:	e011      	b.n	80038f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fc74 	bl	80041cc <xTaskRemoveFromEventList>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038ea:	f000 fd49 	bl	8004380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	dce9      	bgt.n	80038d2 <prvUnlockQueue+0x60>
 80038fe:	e000      	b.n	8003902 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003900:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800390a:	f001 f987 	bl	8004c1c <vPortExitCritical>
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800391e:	f001 f94d 	bl	8004bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e001      	b.n	8003934 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003934:	f001 f972 	bl	8004c1c <vPortExitCritical>

	return xReturn;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800394a:	f001 f937 	bl	8004bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	429a      	cmp	r2, r3
 8003958:	d102      	bne.n	8003960 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e001      	b.n	8003964 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003964:	f001 f95a 	bl	8004c1c <vPortExitCritical>

	return xReturn;
 8003968:	68fb      	ldr	r3, [r7, #12]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08e      	sub	sp, #56	; 0x38
 8003976:	af04      	add	r7, sp, #16
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <xTaskCreateStatic+0x2a>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	623b      	str	r3, [r7, #32]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	61fb      	str	r3, [r7, #28]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b8:	23b4      	movs	r3, #180	; 0xb4
 80039ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2bb4      	cmp	r3, #180	; 0xb4
 80039c0:	d00a      	beq.n	80039d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	61bb      	str	r3, [r7, #24]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01e      	beq.n	8003a1c <xTaskCreateStatic+0xaa>
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f6:	2300      	movs	r3, #0
 80039f8:	9303      	str	r3, [sp, #12]
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	9302      	str	r3, [sp, #8]
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f850 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a16:	f000 f8e3 	bl	8003be0 <prvAddNewTaskToReadyList>
 8003a1a:	e001      	b.n	8003a20 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a20:	697b      	ldr	r3, [r7, #20]
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08c      	sub	sp, #48	; 0x30
 8003a2e:	af04      	add	r7, sp, #16
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f9bc 	bl	8004dbc <pvPortMalloc>
 8003a44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a4c:	20b4      	movs	r0, #180	; 0xb4
 8003a4e:	f001 f9b5 	bl	8004dbc <pvPortMalloc>
 8003a52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a60:	e005      	b.n	8003a6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f001 fa6e 	bl	8004f44 <vPortFree>
 8003a68:	e001      	b.n	8003a6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f80e 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a98:	69f8      	ldr	r0, [r7, #28]
 8003a9a:	f000 f8a1 	bl	8003be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e002      	b.n	8003aaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003acc:	3b01      	subs	r3, #1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	617b      	str	r3, [r7, #20]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e012      	b.n	8003b28 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	7819      	ldrb	r1, [r3, #0]
 8003b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3334      	adds	r3, #52	; 0x34
 8003b12:	460a      	mov	r2, r1
 8003b14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	d9e9      	bls.n	8003b02 <prvInitialiseNewTask+0x4e>
 8003b2e:	e000      	b.n	8003b32 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003b30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d901      	bls.n	8003b44 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b40:	2306      	movs	r3, #6
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2200      	movs	r2, #0
 8003b54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f893 	bl	8002c86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	3318      	adds	r3, #24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f88e 	bl	8002c86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	f1c3 0207 	rsb	r2, r3, #7
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	334c      	adds	r3, #76	; 0x4c
 8003b94:	2260      	movs	r2, #96	; 0x60
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fc18 	bl	80053ce <memset>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <prvInitialiseNewTask+0x120>)
 8003ba2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <prvInitialiseNewTask+0x124>)
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <prvInitialiseNewTask+0x128>)
 8003bae:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	69b8      	ldr	r0, [r7, #24]
 8003bb6:	f000 ff11 	bl	80049dc <pxPortInitialiseStack>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	08005dc4 	.word	0x08005dc4
 8003bd8:	08005de4 	.word	0x08005de4
 8003bdc:	08005da4 	.word	0x08005da4

08003be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be8:	f000 ffe8 	bl	8004bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <prvAddNewTaskToReadyList+0xb8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <prvAddNewTaskToReadyList+0xb8>)
 8003bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <prvAddNewTaskToReadyList+0xbc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bfe:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <prvAddNewTaskToReadyList+0xbc>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <prvAddNewTaskToReadyList+0xb8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d110      	bne.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c0c:	f000 fbdc 	bl	80043c8 <prvInitialiseTaskLists>
 8003c10:	e00d      	b.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <prvAddNewTaskToReadyList+0xc0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <prvAddNewTaskToReadyList+0xbc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d802      	bhi.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <prvAddNewTaskToReadyList+0xbc>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <prvAddNewTaskToReadyList+0xc4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <prvAddNewTaskToReadyList+0xc4>)
 8003c36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a15      	ldr	r2, [pc, #84]	; (8003cac <prvAddNewTaskToReadyList+0xcc>)
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7ff f81c 	bl	8002c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c66:	f000 ffd9 	bl	8004c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <prvAddNewTaskToReadyList+0xc0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00e      	beq.n	8003c90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <prvAddNewTaskToReadyList+0xbc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvAddNewTaskToReadyList+0xd0>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200004f0 	.word	0x200004f0
 8003c9c:	200003f0 	.word	0x200003f0
 8003ca0:	200004fc 	.word	0x200004fc
 8003ca4:	2000050c 	.word	0x2000050c
 8003ca8:	200004f8 	.word	0x200004f8
 8003cac:	200003f4 	.word	0x200003f4
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <vTaskDelay+0x60>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <vTaskDelay+0x30>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60bb      	str	r3, [r7, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ce4:	f000 f884 	bl	8003df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ce8:	2100      	movs	r1, #0
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fe10 	bl	8004910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cf0:	f000 f88c 	bl	8003e0c <xTaskResumeAll>
 8003cf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <vTaskDelay+0x64>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000518 	.word	0x20000518
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d2a:	463a      	mov	r2, r7
 8003d2c:	1d39      	adds	r1, r7, #4
 8003d2e:	f107 0308 	add.w	r3, r7, #8
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fa0c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2300      	movs	r3, #0
 8003d48:	460a      	mov	r2, r1
 8003d4a:	4921      	ldr	r1, [pc, #132]	; (8003dd0 <vTaskStartScheduler+0xb4>)
 8003d4c:	4821      	ldr	r0, [pc, #132]	; (8003dd4 <vTaskStartScheduler+0xb8>)
 8003d4e:	f7ff fe10 	bl	8003972 <xTaskCreateStatic>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <vTaskStartScheduler+0xbc>)
 8003d56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <vTaskStartScheduler+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e001      	b.n	8003d6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d11b      	bne.n	8003da8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	613b      	str	r3, [r7, #16]
}
 8003d82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <vTaskStartScheduler+0xc0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	334c      	adds	r3, #76	; 0x4c
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <vTaskStartScheduler+0xc4>)
 8003d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <vTaskStartScheduler+0xc8>)
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <vTaskStartScheduler+0xcc>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <vTaskStartScheduler+0xd0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003da2:	f000 fe99 	bl	8004ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da6:	e00e      	b.n	8003dc6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d10a      	bne.n	8003dc6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60fb      	str	r3, [r7, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <vTaskStartScheduler+0xa8>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	08005d70 	.word	0x08005d70
 8003dd4:	08004399 	.word	0x08004399
 8003dd8:	20000514 	.word	0x20000514
 8003ddc:	200003f0 	.word	0x200003f0
 8003de0:	20000010 	.word	0x20000010
 8003de4:	20000510 	.word	0x20000510
 8003de8:	200004fc 	.word	0x200004fc
 8003dec:	200004f4 	.word	0x200004f4

08003df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <vTaskSuspendAll+0x18>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <vTaskSuspendAll+0x18>)
 8003dfc:	6013      	str	r3, [r2, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000518 	.word	0x20000518

08003e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e1a:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	603b      	str	r3, [r7, #0]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e38:	f000 fec0 	bl	8004bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e3c:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d161      	bne.n	8003f12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <xTaskResumeAll+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d05d      	beq.n	8003f12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e56:	e02e      	b.n	8003eb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <xTaskResumeAll+0x11c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe ff75 	bl	8002d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe ff70 	bl	8002d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <xTaskResumeAll+0x120>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <xTaskResumeAll+0x120>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <xTaskResumeAll+0x124>)
 8003e94:	441a      	add	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe fefe 	bl	8002c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <xTaskResumeAll+0x128>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xTaskResumeAll+0x11c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1cc      	bne.n	8003e58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ec4:	f000 fb22 	bl	800450c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <xTaskResumeAll+0x130>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ed4:	f000 f836 	bl	8003f44 <xTaskIncrementTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f1      	bne.n	8003ed4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <xTaskResumeAll+0x130>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <xTaskResumeAll+0x134>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f12:	f000 fe83 	bl	8004c1c <vPortExitCritical>

	return xAlreadyYielded;
 8003f16:	68bb      	ldr	r3, [r7, #8]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000518 	.word	0x20000518
 8003f24:	200004f0 	.word	0x200004f0
 8003f28:	200004b0 	.word	0x200004b0
 8003f2c:	200004f8 	.word	0x200004f8
 8003f30:	200003f4 	.word	0x200003f4
 8003f34:	200003f0 	.word	0x200003f0
 8003f38:	20000504 	.word	0x20000504
 8003f3c:	20000500 	.word	0x20000500
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <xTaskIncrementTick+0x150>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 808d 	bne.w	8004072 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f58:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <xTaskIncrementTick+0x154>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f60:	4a4d      	ldr	r2, [pc, #308]	; (8004098 <xTaskIncrementTick+0x154>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d120      	bne.n	8003fae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <xTaskIncrementTick+0x158>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	603b      	str	r3, [r7, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskIncrementTick+0x46>
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <xTaskIncrementTick+0x158>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <xTaskIncrementTick+0x15c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <xTaskIncrementTick+0x158>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <xTaskIncrementTick+0x15c>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <xTaskIncrementTick+0x160>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <xTaskIncrementTick+0x160>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	f000 faaf 	bl	800450c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d34d      	bcc.n	8004054 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <xTaskIncrementTick+0x158>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <xTaskIncrementTick+0x82>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <xTaskIncrementTick+0x84>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	601a      	str	r2, [r3, #0]
					break;
 8003fd4:	e03e      	b.n	8004054 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd6:	4b31      	ldr	r3, [pc, #196]	; (800409c <xTaskIncrementTick+0x158>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d203      	bcs.n	8003ff6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fee:	4a2e      	ldr	r2, [pc, #184]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6013      	str	r3, [r2, #0]
						break;
 8003ff4:	e02e      	b.n	8004054 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe feaa 	bl	8002d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3318      	adds	r3, #24
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fea1 	bl	8002d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <xTaskIncrementTick+0x168>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <xTaskIncrementTick+0x168>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <xTaskIncrementTick+0x16c>)
 8004032:	441a      	add	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7fe fe2f 	bl	8002c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <xTaskIncrementTick+0x170>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	429a      	cmp	r2, r3
 800404c:	d3b4      	bcc.n	8003fb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004052:	e7b1      	b.n	8003fb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004054:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <xTaskIncrementTick+0x170>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4915      	ldr	r1, [pc, #84]	; (80040b0 <xTaskIncrementTick+0x16c>)
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d907      	bls.n	800407c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e004      	b.n	800407c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <xTaskIncrementTick+0x174>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <xTaskIncrementTick+0x174>)
 800407a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <xTaskIncrementTick+0x178>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000518 	.word	0x20000518
 8004098:	200004f4 	.word	0x200004f4
 800409c:	200004a8 	.word	0x200004a8
 80040a0:	200004ac 	.word	0x200004ac
 80040a4:	20000508 	.word	0x20000508
 80040a8:	20000510 	.word	0x20000510
 80040ac:	200004f8 	.word	0x200004f8
 80040b0:	200003f4 	.word	0x200003f4
 80040b4:	200003f0 	.word	0x200003f0
 80040b8:	20000500 	.word	0x20000500
 80040bc:	20000504 	.word	0x20000504

080040c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <vTaskSwitchContext+0xac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <vTaskSwitchContext+0xb0>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040d4:	e044      	b.n	8004160 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <vTaskSwitchContext+0xb0>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <vTaskSwitchContext+0xb4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	f1c3 031f 	rsb	r3, r3, #31
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <vTaskSwitchContext+0xb8>)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vTaskSwitchContext+0x5a>
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <vTaskSwitchContext+0xb8>)
 8004128:	4413      	add	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3308      	adds	r3, #8
 800413e:	429a      	cmp	r2, r3
 8004140:	d104      	bne.n	800414c <vTaskSwitchContext+0x8c>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <vTaskSwitchContext+0xbc>)
 8004154:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <vTaskSwitchContext+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	334c      	adds	r3, #76	; 0x4c
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <vTaskSwitchContext+0xc0>)
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000518 	.word	0x20000518
 8004170:	20000504 	.word	0x20000504
 8004174:	200004f8 	.word	0x200004f8
 8004178:	200003f4 	.word	0x200003f4
 800417c:	200003f0 	.word	0x200003f0
 8004180:	20000010 	.word	0x20000010

08004184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <vTaskPlaceOnEventList+0x44>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3318      	adds	r3, #24
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe fd96 	bl	8002ce4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b8:	2101      	movs	r1, #1
 80041ba:	6838      	ldr	r0, [r7, #0]
 80041bc:	f000 fba8 	bl	8004910 <prvAddCurrentTaskToDelayedList>
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200003f0 	.word	0x200003f0

080041cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fda9 	bl	8002d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <xTaskRemoveFromEventList+0xac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11c      	bne.n	8004244 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fda0 	bl	8002d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	2201      	movs	r2, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <xTaskRemoveFromEventList+0xb0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4313      	orrs	r3, r2
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <xTaskRemoveFromEventList+0xb0>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <xTaskRemoveFromEventList+0xb4>)
 8004234:	441a      	add	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe fd2e 	bl	8002c9e <vListInsertEnd>
 8004242:	e005      	b.n	8004250 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3318      	adds	r3, #24
 8004248:	4619      	mov	r1, r3
 800424a:	480e      	ldr	r0, [pc, #56]	; (8004284 <xTaskRemoveFromEventList+0xb8>)
 800424c:	f7fe fd27 	bl	8002c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <xTaskRemoveFromEventList+0xbc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	429a      	cmp	r2, r3
 800425c:	d905      	bls.n	800426a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <xTaskRemoveFromEventList+0xc0>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e001      	b.n	800426e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800426e:	697b      	ldr	r3, [r7, #20]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000518 	.word	0x20000518
 800427c:	200004f8 	.word	0x200004f8
 8004280:	200003f4 	.word	0x200003f4
 8004284:	200004b0 	.word	0x200004b0
 8004288:	200003f0 	.word	0x200003f0
 800428c:	20000504 	.word	0x20000504

08004290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <vTaskInternalSetTimeOutState+0x24>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <vTaskInternalSetTimeOutState+0x28>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	605a      	str	r2, [r3, #4]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000508 	.word	0x20000508
 80042b8:	200004f4 	.word	0x200004f4

080042bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60fb      	str	r3, [r7, #12]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042fe:	f000 fc5d 	bl	8004bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <xTaskCheckForTimeOut+0xbc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d102      	bne.n	8004322 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e023      	b.n	800436a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <xTaskCheckForTimeOut+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d007      	beq.n	800433e <xTaskCheckForTimeOut+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e015      	b.n	800436a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	429a      	cmp	r2, r3
 8004346:	d20b      	bcs.n	8004360 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad2      	subs	r2, r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff9b 	bl	8004290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e004      	b.n	800436a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004366:	2301      	movs	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800436a:	f000 fc57 	bl	8004c1c <vPortExitCritical>

	return xReturn;
 800436e:	69fb      	ldr	r3, [r7, #28]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200004f4 	.word	0x200004f4
 800437c:	20000508 	.word	0x20000508

08004380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <vTaskMissedYield+0x14>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000504 	.word	0x20000504

08004398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043a0:	f000 f852 	bl	8004448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <prvIdleTask+0x28>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d9f9      	bls.n	80043a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <prvIdleTask+0x2c>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043bc:	e7f0      	b.n	80043a0 <prvIdleTask+0x8>
 80043be:	bf00      	nop
 80043c0:	200003f4 	.word	0x200003f4
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	e00c      	b.n	80043ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <prvInitialiseTaskLists+0x60>)
 80043e0:	4413      	add	r3, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fc30 	bl	8002c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3301      	adds	r3, #1
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d9ef      	bls.n	80043d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043f4:	480d      	ldr	r0, [pc, #52]	; (800442c <prvInitialiseTaskLists+0x64>)
 80043f6:	f7fe fc27 	bl	8002c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043fa:	480d      	ldr	r0, [pc, #52]	; (8004430 <prvInitialiseTaskLists+0x68>)
 80043fc:	f7fe fc24 	bl	8002c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004400:	480c      	ldr	r0, [pc, #48]	; (8004434 <prvInitialiseTaskLists+0x6c>)
 8004402:	f7fe fc21 	bl	8002c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004406:	480c      	ldr	r0, [pc, #48]	; (8004438 <prvInitialiseTaskLists+0x70>)
 8004408:	f7fe fc1e 	bl	8002c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800440c:	480b      	ldr	r0, [pc, #44]	; (800443c <prvInitialiseTaskLists+0x74>)
 800440e:	f7fe fc1b 	bl	8002c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <prvInitialiseTaskLists+0x78>)
 8004414:	4a05      	ldr	r2, [pc, #20]	; (800442c <prvInitialiseTaskLists+0x64>)
 8004416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <prvInitialiseTaskLists+0x7c>)
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <prvInitialiseTaskLists+0x68>)
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200003f4 	.word	0x200003f4
 800442c:	20000480 	.word	0x20000480
 8004430:	20000494 	.word	0x20000494
 8004434:	200004b0 	.word	0x200004b0
 8004438:	200004c4 	.word	0x200004c4
 800443c:	200004dc 	.word	0x200004dc
 8004440:	200004a8 	.word	0x200004a8
 8004444:	200004ac 	.word	0x200004ac

08004448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800444e:	e019      	b.n	8004484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004450:	f000 fbb4 	bl	8004bbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004454:	4b10      	ldr	r3, [pc, #64]	; (8004498 <prvCheckTasksWaitingTermination+0x50>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fc77 	bl	8002d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <prvCheckTasksWaitingTermination+0x54>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3b01      	subs	r3, #1
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <prvCheckTasksWaitingTermination+0x54>)
 800446e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <prvCheckTasksWaitingTermination+0x58>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3b01      	subs	r3, #1
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <prvCheckTasksWaitingTermination+0x58>)
 8004478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800447a:	f000 fbcf 	bl	8004c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f810 	bl	80044a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <prvCheckTasksWaitingTermination+0x58>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e1      	bne.n	8004450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200004c4 	.word	0x200004c4
 800449c:	200004f0 	.word	0x200004f0
 80044a0:	200004d8 	.word	0x200004d8

080044a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	334c      	adds	r3, #76	; 0x4c
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 f8ad 	bl	8005610 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fd3d 	bl	8004f44 <vPortFree>
				vPortFree( pxTCB );
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fd3a 	bl	8004f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044d0:	e018      	b.n	8004504 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d103      	bne.n	80044e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fd31 	bl	8004f44 <vPortFree>
	}
 80044e2:	e00f      	b.n	8004504 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d00a      	beq.n	8004504 <prvDeleteTCB+0x60>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60fb      	str	r3, [r7, #12]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <prvDeleteTCB+0x5e>
	}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <prvResetNextTaskUnblockTime+0x14>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <prvResetNextTaskUnblockTime+0x16>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800452e:	e008      	b.n	8004542 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	200004a8 	.word	0x200004a8
 8004550:	20000510 	.word	0x20000510

08004554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <xTaskGetSchedulerState+0x34>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004562:	2301      	movs	r3, #1
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	e008      	b.n	800457a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <xTaskGetSchedulerState+0x38>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004570:	2302      	movs	r3, #2
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e001      	b.n	800457a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800457a:	687b      	ldr	r3, [r7, #4]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	200004fc 	.word	0x200004fc
 800458c:	20000518 	.word	0x20000518

08004590 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06e      	beq.n	8004684 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <xTaskPriorityInherit+0x100>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d25e      	bcs.n	8004672 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db06      	blt.n	80045ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <xTaskPriorityInherit+0x100>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f1c3 0207 	rsb	r2, r3, #7
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6959      	ldr	r1, [r3, #20]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4a2e      	ldr	r2, [pc, #184]	; (8004694 <xTaskPriorityInherit+0x104>)
 80045dc:	4413      	add	r3, r2
 80045de:	4299      	cmp	r1, r3
 80045e0:	d101      	bne.n	80045e6 <xTaskPriorityInherit+0x56>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xTaskPriorityInherit+0x58>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d03a      	beq.n	8004662 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fbaf 	bl	8002d54 <uxListRemove>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	4924      	ldr	r1, [pc, #144]	; (8004694 <xTaskPriorityInherit+0x104>)
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <xTaskPriorityInherit+0x98>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <xTaskPriorityInherit+0x108>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4013      	ands	r3, r2
 8004624:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <xTaskPriorityInherit+0x108>)
 8004626:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <xTaskPriorityInherit+0x100>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2201      	movs	r2, #1
 8004638:	409a      	lsls	r2, r3
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <xTaskPriorityInherit+0x108>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <xTaskPriorityInherit+0x108>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a10      	ldr	r2, [pc, #64]	; (8004694 <xTaskPriorityInherit+0x104>)
 8004652:	441a      	add	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe fb1f 	bl	8002c9e <vListInsertEnd>
 8004660:	e004      	b.n	800466c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <xTaskPriorityInherit+0x100>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e008      	b.n	8004684 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <xTaskPriorityInherit+0x100>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d201      	bcs.n	8004684 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004684:	68fb      	ldr	r3, [r7, #12]
	}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200003f0 	.word	0x200003f0
 8004694:	200003f4 	.word	0x200003f4
 8004698:	200004f8 	.word	0x200004f8

0800469c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d06e      	beq.n	8004790 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046b2:	4b3a      	ldr	r3, [pc, #232]	; (800479c <xTaskPriorityDisinherit+0x100>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d00a      	beq.n	80046d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60fb      	str	r3, [r7, #12]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60bb      	str	r3, [r7, #8]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	429a      	cmp	r2, r3
 8004704:	d044      	beq.n	8004790 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	2b00      	cmp	r3, #0
 800470c:	d140      	bne.n	8004790 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3304      	adds	r3, #4
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fb1e 	bl	8002d54 <uxListRemove>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d115      	bne.n	800474a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	491f      	ldr	r1, [pc, #124]	; (80047a0 <xTaskPriorityDisinherit+0x104>)
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xTaskPriorityDisinherit+0xae>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2201      	movs	r2, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <xTaskPriorityDisinherit+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4013      	ands	r3, r2
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <xTaskPriorityDisinherit+0x108>)
 8004748:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f1c3 0207 	rsb	r2, r3, #7
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <xTaskPriorityDisinherit+0x108>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <xTaskPriorityDisinherit+0x108>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <xTaskPriorityDisinherit+0x104>)
 800477e:	441a      	add	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fa89 	bl	8002c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004790:	697b      	ldr	r3, [r7, #20]
	}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	200003f0 	.word	0x200003f0
 80047a0:	200003f4 	.word	0x200003f4
 80047a4:	200004f8 	.word	0x200004f8

080047a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8088 	beq.w	80048d2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	60fb      	str	r3, [r7, #12]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d902      	bls.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e002      	b.n	80047f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d068      	beq.n	80048d2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	429a      	cmp	r2, r3
 8004808:	d163      	bne.n	80048d2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	429a      	cmp	r2, r3
 8004812:	d10a      	bne.n	800482a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	60bb      	str	r3, [r7, #8]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db04      	blt.n	8004848 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f1c3 0207 	rsb	r2, r3, #7
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6959      	ldr	r1, [r3, #20]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004858:	4413      	add	r3, r2
 800485a:	4299      	cmp	r1, r3
 800485c:	d101      	bne.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d034      	beq.n	80048d2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fa71 	bl	8002d54 <uxListRemove>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d115      	bne.n	80048a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4918      	ldr	r1, [pc, #96]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	2201      	movs	r2, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43da      	mvns	r2, r3
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4013      	ands	r3, r2
 80048a0:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80048a2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80048c4:	441a      	add	r2, r3
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe f9e6 	bl	8002c9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200003f0 	.word	0x200003f0
 80048e0:	200003f4 	.word	0x200003f4
 80048e4:	200004f8 	.word	0x200004f8

080048e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048fa:	3201      	adds	r2, #1
 80048fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 8004900:	681b      	ldr	r3, [r3, #0]
	}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200003f0 	.word	0x200003f0

08004910 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800491a:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fa14 	bl	8002d54 <uxListRemove>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	2201      	movs	r2, #1
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4013      	ands	r3, r2
 8004946:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004948:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d10a      	bne.n	8004968 <prvAddCurrentTaskToDelayedList+0x58>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	481a      	ldr	r0, [pc, #104]	; (80049cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004962:	f7fe f99c 	bl	8002c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004966:	e026      	b.n	80049b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	429a      	cmp	r2, r3
 800497e:	d209      	bcs.n	8004994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe f9a9 	bl	8002ce4 <vListInsert>
}
 8004992:	e010      	b.n	80049b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe f99f 	bl	8002ce4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d202      	bcs.n	80049b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049b0:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6013      	str	r3, [r2, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200004f4 	.word	0x200004f4
 80049c4:	200003f0 	.word	0x200003f0
 80049c8:	200004f8 	.word	0x200004f8
 80049cc:	200004dc 	.word	0x200004dc
 80049d0:	200004ac 	.word	0x200004ac
 80049d4:	200004a8 	.word	0x200004a8
 80049d8:	20000510 	.word	0x20000510

080049dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b04      	subs	r3, #4
 80049ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3b04      	subs	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <pxPortInitialiseStack+0x54>)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b14      	subs	r3, #20
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3b20      	subs	r3, #32
 8004a22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	08004a35 	.word	0x08004a35

08004a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <prvTaskExitError+0x54>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d00a      	beq.n	8004a5e <prvTaskExitError+0x2a>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	60fb      	str	r3, [r7, #12]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <prvTaskExitError+0x28>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	60bb      	str	r3, [r7, #8]
}
 8004a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a72:	bf00      	nop
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0fc      	beq.n	8004a74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c
 8004a8c:	00000000 	.word	0x00000000

08004a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <pxCurrentTCBConst2>)
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	6808      	ldr	r0, [r1, #0]
 8004a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a9a:	f380 8809 	msr	PSP, r0
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8811 	msr	BASEPRI, r0
 8004aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004aae:	4770      	bx	lr

08004ab0 <pxCurrentTCBConst2>:
 8004ab0:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop

08004ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ab8:	4806      	ldr	r0, [pc, #24]	; (8004ad4 <prvPortStartFirstTask+0x1c>)
 8004aba:	6800      	ldr	r0, [r0, #0]
 8004abc:	6800      	ldr	r0, [r0, #0]
 8004abe:	f380 8808 	msr	MSP, r0
 8004ac2:	b662      	cpsie	i
 8004ac4:	b661      	cpsie	f
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	df00      	svc	0
 8004ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed08 	.word	0xe000ed08

08004ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ade:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <xPortStartScheduler+0xd0>)
 8004ae0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	22ff      	movs	r2, #255	; 0xff
 8004aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <xPortStartScheduler+0xd4>)
 8004b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b08:	2207      	movs	r2, #7
 8004b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b0c:	e009      	b.n	8004b22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d0ef      	beq.n	8004b0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1c3 0307 	rsb	r3, r3, #7
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d00a      	beq.n	8004b50 <xPortStartScheduler+0x78>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60bb      	str	r3, [r7, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b5a:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b62:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <xPortStartScheduler+0xd8>)
 8004b64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <xPortStartScheduler+0xdc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <xPortStartScheduler+0xdc>)
 8004b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <xPortStartScheduler+0xdc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a0d      	ldr	r2, [pc, #52]	; (8004bb4 <xPortStartScheduler+0xdc>)
 8004b80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b86:	f000 f8b9 	bl	8004cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <xPortStartScheduler+0xe0>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b90:	f7ff ff92 	bl	8004ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b94:	f7ff fa94 	bl	80040c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004b98:	f7ff ff4c 	bl	8004a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e400 	.word	0xe000e400
 8004bac:	2000051c 	.word	0x2000051c
 8004bb0:	20000520 	.word	0x20000520
 8004bb4:	e000ed20 	.word	0xe000ed20
 8004bb8:	2000000c 	.word	0x2000000c

08004bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <vPortEnterCritical+0x58>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <vPortEnterCritical+0x58>)
 8004bde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <vPortEnterCritical+0x58>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d10f      	bne.n	8004c08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <vPortEnterCritical+0x5c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vPortEnterCritical+0x4a>
	}
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <vPortExitCritical+0x4c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <vPortExitCritical+0x24>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	607b      	str	r3, [r7, #4]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <vPortExitCritical+0x4c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <vPortExitCritical+0x4c>)
 8004c48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <vPortExitCritical+0x4c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <vPortExitCritical+0x42>
 8004c52:	2300      	movs	r3, #0
 8004c54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f383 8811 	msr	BASEPRI, r3
}
 8004c5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	2000000c 	.word	0x2000000c
 8004c6c:	00000000 	.word	0x00000000

08004c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c70:	f3ef 8009 	mrs	r0, PSP
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <pxCurrentTCBConst>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c80:	6010      	str	r0, [r2, #0]
 8004c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c8a:	f380 8811 	msr	BASEPRI, r0
 8004c8e:	f7ff fa17 	bl	80040c0 <vTaskSwitchContext>
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8811 	msr	BASEPRI, r0
 8004c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ca6:	f380 8809 	msr	PSP, r0
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	4770      	bx	lr

08004cb0 <pxCurrentTCBConst>:
 8004cb0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cd2:	f7ff f937 	bl	8003f44 <xTaskIncrementTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <SysTick_Handler+0x40>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <vPortSetupTimerInterrupt+0x30>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <vPortSetupTimerInterrupt+0x38>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <vPortSetupTimerInterrupt+0x3c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <vPortSetupTimerInterrupt+0x40>)
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d1e:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <vPortSetupTimerInterrupt+0x30>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	e000e010 	.word	0xe000e010
 8004d30:	e000e018 	.word	0xe000e018
 8004d34:	20000000 	.word	0x20000000
 8004d38:	10624dd3 	.word	0x10624dd3
 8004d3c:	e000e014 	.word	0xe000e014

08004d40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d46:	f3ef 8305 	mrs	r3, IPSR
 8004d4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d914      	bls.n	8004d7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d52:	4a16      	ldr	r2, [pc, #88]	; (8004dac <vPortValidateInterruptPriority+0x6c>)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <vPortValidateInterruptPriority+0x70>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	7afa      	ldrb	r2, [r7, #11]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d20a      	bcs.n	8004d7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	607b      	str	r3, [r7, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <vPortValidateInterruptPriority+0x74>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <vPortValidateInterruptPriority+0x78>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d90a      	bls.n	8004da2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	603b      	str	r3, [r7, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <vPortValidateInterruptPriority+0x60>
	}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	e000e3f0 	.word	0xe000e3f0
 8004db0:	2000051c 	.word	0x2000051c
 8004db4:	e000ed0c 	.word	0xe000ed0c
 8004db8:	20000520 	.word	0x20000520

08004dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dc8:	f7ff f812 	bl	8003df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dcc:	4b58      	ldr	r3, [pc, #352]	; (8004f30 <pvPortMalloc+0x174>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dd4:	f000 f910 	bl	8004ff8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dd8:	4b56      	ldr	r3, [pc, #344]	; (8004f34 <pvPortMalloc+0x178>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 808e 	bne.w	8004f02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004dec:	2208      	movs	r2, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f023 0307 	bic.w	r3, r3, #7
 8004e04:	3308      	adds	r3, #8
 8004e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <pvPortMalloc+0x6c>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	617b      	str	r3, [r7, #20]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d069      	beq.n	8004f02 <pvPortMalloc+0x146>
 8004e2e:	4b42      	ldr	r3, [pc, #264]	; (8004f38 <pvPortMalloc+0x17c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d864      	bhi.n	8004f02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e38:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <pvPortMalloc+0x180>)
 8004e3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e3c:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <pvPortMalloc+0x180>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e42:	e004      	b.n	8004e4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d903      	bls.n	8004e60 <pvPortMalloc+0xa4>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f1      	bne.n	8004e44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <pvPortMalloc+0x174>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d04b      	beq.n	8004f02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2208      	movs	r2, #8
 8004e70:	4413      	add	r3, r2
 8004e72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	2308      	movs	r3, #8
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d91f      	bls.n	8004ecc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0xf8>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	613b      	str	r3, [r7, #16]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ec6:	69b8      	ldr	r0, [r7, #24]
 8004ec8:	f000 f8f8 	bl	80050bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <pvPortMalloc+0x17c>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <pvPortMalloc+0x17c>)
 8004ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eda:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <pvPortMalloc+0x17c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b18      	ldr	r3, [pc, #96]	; (8004f40 <pvPortMalloc+0x184>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d203      	bcs.n	8004eee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ee6:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <pvPortMalloc+0x17c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <pvPortMalloc+0x184>)
 8004eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <pvPortMalloc+0x178>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f02:	f7fe ff83 	bl	8003e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <pvPortMalloc+0x16a>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <pvPortMalloc+0x168>
	return pvReturn;
 8004f26:	69fb      	ldr	r3, [r7, #28]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	2000112c 	.word	0x2000112c
 8004f34:	20001138 	.word	0x20001138
 8004f38:	20001130 	.word	0x20001130
 8004f3c:	20001124 	.word	0x20001124
 8004f40:	20001134 	.word	0x20001134

08004f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d048      	beq.n	8004fe8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f56:	2308      	movs	r3, #8
 8004f58:	425b      	negs	r3, r3
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <vPortFree+0xac>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vPortFree+0x44>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <vPortFree+0x62>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60bb      	str	r3, [r7, #8]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <vPortFree+0xac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d019      	beq.n	8004fe8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d115      	bne.n	8004fe8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <vPortFree+0xac>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fcc:	f7fe ff10 	bl	8003df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <vPortFree+0xb0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4413      	add	r3, r2
 8004fda:	4a06      	ldr	r2, [pc, #24]	; (8004ff4 <vPortFree+0xb0>)
 8004fdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fde:	6938      	ldr	r0, [r7, #16]
 8004fe0:	f000 f86c 	bl	80050bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fe4:	f7fe ff12 	bl	8003e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fe8:	bf00      	nop
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20001138 	.word	0x20001138
 8004ff4:	20001130 	.word	0x20001130

08004ff8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ffe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005002:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <prvHeapInit+0xac>)
 8005006:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3307      	adds	r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <prvHeapInit+0xac>)
 8005028:	4413      	add	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <prvHeapInit+0xb0>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <prvHeapInit+0xb0>)
 8005038:	2200      	movs	r2, #0
 800503a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4413      	add	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005044:	2208      	movs	r2, #8
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <prvHeapInit+0xb4>)
 8005058:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <prvHeapInit+0xb4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <prvHeapInit+0xb4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvHeapInit+0xb4>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <prvHeapInit+0xb8>)
 8005086:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <prvHeapInit+0xbc>)
 800508e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <prvHeapInit+0xc0>)
 8005092:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005096:	601a      	str	r2, [r3, #0]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000524 	.word	0x20000524
 80050a8:	20001124 	.word	0x20001124
 80050ac:	2000112c 	.word	0x2000112c
 80050b0:	20001134 	.word	0x20001134
 80050b4:	20001130 	.word	0x20001130
 80050b8:	20001138 	.word	0x20001138

080050bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <prvInsertBlockIntoFreeList+0xa8>)
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e002      	b.n	80050d0 <prvInsertBlockIntoFreeList+0x14>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d8f7      	bhi.n	80050ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d108      	bne.n	80050fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	441a      	add	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	441a      	add	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d118      	bne.n	8005144 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <prvInsertBlockIntoFreeList+0xac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d00d      	beq.n	800513a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e008      	b.n	800514c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvInsertBlockIntoFreeList+0xac>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e003      	b.n	800514c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d002      	beq.n	800515a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	20001124 	.word	0x20001124
 8005168:	2000112c 	.word	0x2000112c

0800516c <__errno>:
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <__errno+0x8>)
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000010 	.word	0x20000010

08005178 <std>:
 8005178:	2300      	movs	r3, #0
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	e9c0 3300 	strd	r3, r3, [r0]
 8005182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005186:	6083      	str	r3, [r0, #8]
 8005188:	8181      	strh	r1, [r0, #12]
 800518a:	6643      	str	r3, [r0, #100]	; 0x64
 800518c:	81c2      	strh	r2, [r0, #14]
 800518e:	6183      	str	r3, [r0, #24]
 8005190:	4619      	mov	r1, r3
 8005192:	2208      	movs	r2, #8
 8005194:	305c      	adds	r0, #92	; 0x5c
 8005196:	f000 f91a 	bl	80053ce <memset>
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x38>)
 800519c:	6224      	str	r4, [r4, #32]
 800519e:	6263      	str	r3, [r4, #36]	; 0x24
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <std+0x3c>)
 80051a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <std+0x40>)
 80051a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <std+0x44>)
 80051aa:	6323      	str	r3, [r4, #48]	; 0x30
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	080056e9 	.word	0x080056e9
 80051b4:	0800570b 	.word	0x0800570b
 80051b8:	08005743 	.word	0x08005743
 80051bc:	08005767 	.word	0x08005767

080051c0 <_cleanup_r>:
 80051c0:	4901      	ldr	r1, [pc, #4]	; (80051c8 <_cleanup_r+0x8>)
 80051c2:	f000 b8af 	b.w	8005324 <_fwalk_reent>
 80051c6:	bf00      	nop
 80051c8:	08005a39 	.word	0x08005a39

080051cc <__sfmoreglue>:
 80051cc:	2268      	movs	r2, #104	; 0x68
 80051ce:	b570      	push	{r4, r5, r6, lr}
 80051d0:	1e4d      	subs	r5, r1, #1
 80051d2:	4355      	muls	r5, r2
 80051d4:	460e      	mov	r6, r1
 80051d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051da:	f000 f921 	bl	8005420 <_malloc_r>
 80051de:	4604      	mov	r4, r0
 80051e0:	b140      	cbz	r0, 80051f4 <__sfmoreglue+0x28>
 80051e2:	2100      	movs	r1, #0
 80051e4:	e9c0 1600 	strd	r1, r6, [r0]
 80051e8:	300c      	adds	r0, #12
 80051ea:	60a0      	str	r0, [r4, #8]
 80051ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051f0:	f000 f8ed 	bl	80053ce <memset>
 80051f4:	4620      	mov	r0, r4
 80051f6:	bd70      	pop	{r4, r5, r6, pc}

080051f8 <__sfp_lock_acquire>:
 80051f8:	4801      	ldr	r0, [pc, #4]	; (8005200 <__sfp_lock_acquire+0x8>)
 80051fa:	f000 b8d8 	b.w	80053ae <__retarget_lock_acquire_recursive>
 80051fe:	bf00      	nop
 8005200:	2000113d 	.word	0x2000113d

08005204 <__sfp_lock_release>:
 8005204:	4801      	ldr	r0, [pc, #4]	; (800520c <__sfp_lock_release+0x8>)
 8005206:	f000 b8d3 	b.w	80053b0 <__retarget_lock_release_recursive>
 800520a:	bf00      	nop
 800520c:	2000113d 	.word	0x2000113d

08005210 <__sinit_lock_acquire>:
 8005210:	4801      	ldr	r0, [pc, #4]	; (8005218 <__sinit_lock_acquire+0x8>)
 8005212:	f000 b8cc 	b.w	80053ae <__retarget_lock_acquire_recursive>
 8005216:	bf00      	nop
 8005218:	2000113e 	.word	0x2000113e

0800521c <__sinit_lock_release>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__sinit_lock_release+0x8>)
 800521e:	f000 b8c7 	b.w	80053b0 <__retarget_lock_release_recursive>
 8005222:	bf00      	nop
 8005224:	2000113e 	.word	0x2000113e

08005228 <__sinit>:
 8005228:	b510      	push	{r4, lr}
 800522a:	4604      	mov	r4, r0
 800522c:	f7ff fff0 	bl	8005210 <__sinit_lock_acquire>
 8005230:	69a3      	ldr	r3, [r4, #24]
 8005232:	b11b      	cbz	r3, 800523c <__sinit+0x14>
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	f7ff bff0 	b.w	800521c <__sinit_lock_release>
 800523c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005240:	6523      	str	r3, [r4, #80]	; 0x50
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <__sinit+0x68>)
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <__sinit+0x6c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	62a2      	str	r2, [r4, #40]	; 0x28
 800524a:	42a3      	cmp	r3, r4
 800524c:	bf08      	it	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	4620      	mov	r0, r4
 8005252:	bf08      	it	eq
 8005254:	61a3      	streq	r3, [r4, #24]
 8005256:	f000 f81f 	bl	8005298 <__sfp>
 800525a:	6060      	str	r0, [r4, #4]
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f81b 	bl	8005298 <__sfp>
 8005262:	60a0      	str	r0, [r4, #8]
 8005264:	4620      	mov	r0, r4
 8005266:	f000 f817 	bl	8005298 <__sfp>
 800526a:	2200      	movs	r2, #0
 800526c:	2104      	movs	r1, #4
 800526e:	60e0      	str	r0, [r4, #12]
 8005270:	6860      	ldr	r0, [r4, #4]
 8005272:	f7ff ff81 	bl	8005178 <std>
 8005276:	2201      	movs	r2, #1
 8005278:	2109      	movs	r1, #9
 800527a:	68a0      	ldr	r0, [r4, #8]
 800527c:	f7ff ff7c 	bl	8005178 <std>
 8005280:	2202      	movs	r2, #2
 8005282:	2112      	movs	r1, #18
 8005284:	68e0      	ldr	r0, [r4, #12]
 8005286:	f7ff ff77 	bl	8005178 <std>
 800528a:	2301      	movs	r3, #1
 800528c:	61a3      	str	r3, [r4, #24]
 800528e:	e7d1      	b.n	8005234 <__sinit+0xc>
 8005290:	08005e04 	.word	0x08005e04
 8005294:	080051c1 	.word	0x080051c1

08005298 <__sfp>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	4607      	mov	r7, r0
 800529c:	f7ff ffac 	bl	80051f8 <__sfp_lock_acquire>
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <__sfp+0x84>)
 80052a2:	681e      	ldr	r6, [r3, #0]
 80052a4:	69b3      	ldr	r3, [r6, #24]
 80052a6:	b913      	cbnz	r3, 80052ae <__sfp+0x16>
 80052a8:	4630      	mov	r0, r6
 80052aa:	f7ff ffbd 	bl	8005228 <__sinit>
 80052ae:	3648      	adds	r6, #72	; 0x48
 80052b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	d503      	bpl.n	80052c0 <__sfp+0x28>
 80052b8:	6833      	ldr	r3, [r6, #0]
 80052ba:	b30b      	cbz	r3, 8005300 <__sfp+0x68>
 80052bc:	6836      	ldr	r6, [r6, #0]
 80052be:	e7f7      	b.n	80052b0 <__sfp+0x18>
 80052c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c4:	b9d5      	cbnz	r5, 80052fc <__sfp+0x64>
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <__sfp+0x88>)
 80052c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052cc:	60e3      	str	r3, [r4, #12]
 80052ce:	6665      	str	r5, [r4, #100]	; 0x64
 80052d0:	f000 f86c 	bl	80053ac <__retarget_lock_init_recursive>
 80052d4:	f7ff ff96 	bl	8005204 <__sfp_lock_release>
 80052d8:	2208      	movs	r2, #8
 80052da:	4629      	mov	r1, r5
 80052dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052e4:	6025      	str	r5, [r4, #0]
 80052e6:	61a5      	str	r5, [r4, #24]
 80052e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052ec:	f000 f86f 	bl	80053ce <memset>
 80052f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f8:	4620      	mov	r0, r4
 80052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fc:	3468      	adds	r4, #104	; 0x68
 80052fe:	e7d9      	b.n	80052b4 <__sfp+0x1c>
 8005300:	2104      	movs	r1, #4
 8005302:	4638      	mov	r0, r7
 8005304:	f7ff ff62 	bl	80051cc <__sfmoreglue>
 8005308:	4604      	mov	r4, r0
 800530a:	6030      	str	r0, [r6, #0]
 800530c:	2800      	cmp	r0, #0
 800530e:	d1d5      	bne.n	80052bc <__sfp+0x24>
 8005310:	f7ff ff78 	bl	8005204 <__sfp_lock_release>
 8005314:	230c      	movs	r3, #12
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	e7ee      	b.n	80052f8 <__sfp+0x60>
 800531a:	bf00      	nop
 800531c:	08005e04 	.word	0x08005e04
 8005320:	ffff0001 	.word	0xffff0001

08005324 <_fwalk_reent>:
 8005324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005328:	4606      	mov	r6, r0
 800532a:	4688      	mov	r8, r1
 800532c:	2700      	movs	r7, #0
 800532e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005336:	f1b9 0901 	subs.w	r9, r9, #1
 800533a:	d505      	bpl.n	8005348 <_fwalk_reent+0x24>
 800533c:	6824      	ldr	r4, [r4, #0]
 800533e:	2c00      	cmp	r4, #0
 8005340:	d1f7      	bne.n	8005332 <_fwalk_reent+0xe>
 8005342:	4638      	mov	r0, r7
 8005344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d907      	bls.n	800535e <_fwalk_reent+0x3a>
 800534e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005352:	3301      	adds	r3, #1
 8005354:	d003      	beq.n	800535e <_fwalk_reent+0x3a>
 8005356:	4629      	mov	r1, r5
 8005358:	4630      	mov	r0, r6
 800535a:	47c0      	blx	r8
 800535c:	4307      	orrs	r7, r0
 800535e:	3568      	adds	r5, #104	; 0x68
 8005360:	e7e9      	b.n	8005336 <_fwalk_reent+0x12>
	...

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	2600      	movs	r6, #0
 8005368:	4d0c      	ldr	r5, [pc, #48]	; (800539c <__libc_init_array+0x38>)
 800536a:	4c0d      	ldr	r4, [pc, #52]	; (80053a0 <__libc_init_array+0x3c>)
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	f000 fc9c 	bl	8005cb0 <_init>
 8005378:	2600      	movs	r6, #0
 800537a:	4d0a      	ldr	r5, [pc, #40]	; (80053a4 <__libc_init_array+0x40>)
 800537c:	4c0a      	ldr	r4, [pc, #40]	; (80053a8 <__libc_init_array+0x44>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	08005e08 	.word	0x08005e08
 80053a0:	08005e08 	.word	0x08005e08
 80053a4:	08005e08 	.word	0x08005e08
 80053a8:	08005e0c 	.word	0x08005e0c

080053ac <__retarget_lock_init_recursive>:
 80053ac:	4770      	bx	lr

080053ae <__retarget_lock_acquire_recursive>:
 80053ae:	4770      	bx	lr

080053b0 <__retarget_lock_release_recursive>:
 80053b0:	4770      	bx	lr

080053b2 <memcpy>:
 80053b2:	440a      	add	r2, r1
 80053b4:	4291      	cmp	r1, r2
 80053b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ba:	d100      	bne.n	80053be <memcpy+0xc>
 80053bc:	4770      	bx	lr
 80053be:	b510      	push	{r4, lr}
 80053c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c4:	4291      	cmp	r1, r2
 80053c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ca:	d1f9      	bne.n	80053c0 <memcpy+0xe>
 80053cc:	bd10      	pop	{r4, pc}

080053ce <memset>:
 80053ce:	4603      	mov	r3, r0
 80053d0:	4402      	add	r2, r0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d100      	bne.n	80053d8 <memset+0xa>
 80053d6:	4770      	bx	lr
 80053d8:	f803 1b01 	strb.w	r1, [r3], #1
 80053dc:	e7f9      	b.n	80053d2 <memset+0x4>
	...

080053e0 <sbrk_aligned>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	4e0e      	ldr	r6, [pc, #56]	; (800541c <sbrk_aligned+0x3c>)
 80053e4:	460c      	mov	r4, r1
 80053e6:	6831      	ldr	r1, [r6, #0]
 80053e8:	4605      	mov	r5, r0
 80053ea:	b911      	cbnz	r1, 80053f2 <sbrk_aligned+0x12>
 80053ec:	f000 f96c 	bl	80056c8 <_sbrk_r>
 80053f0:	6030      	str	r0, [r6, #0]
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f967 	bl	80056c8 <_sbrk_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d00a      	beq.n	8005414 <sbrk_aligned+0x34>
 80053fe:	1cc4      	adds	r4, r0, #3
 8005400:	f024 0403 	bic.w	r4, r4, #3
 8005404:	42a0      	cmp	r0, r4
 8005406:	d007      	beq.n	8005418 <sbrk_aligned+0x38>
 8005408:	1a21      	subs	r1, r4, r0
 800540a:	4628      	mov	r0, r5
 800540c:	f000 f95c 	bl	80056c8 <_sbrk_r>
 8005410:	3001      	adds	r0, #1
 8005412:	d101      	bne.n	8005418 <sbrk_aligned+0x38>
 8005414:	f04f 34ff 	mov.w	r4, #4294967295
 8005418:	4620      	mov	r0, r4
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	20001144 	.word	0x20001144

08005420 <_malloc_r>:
 8005420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005424:	1ccd      	adds	r5, r1, #3
 8005426:	f025 0503 	bic.w	r5, r5, #3
 800542a:	3508      	adds	r5, #8
 800542c:	2d0c      	cmp	r5, #12
 800542e:	bf38      	it	cc
 8005430:	250c      	movcc	r5, #12
 8005432:	2d00      	cmp	r5, #0
 8005434:	4607      	mov	r7, r0
 8005436:	db01      	blt.n	800543c <_malloc_r+0x1c>
 8005438:	42a9      	cmp	r1, r5
 800543a:	d905      	bls.n	8005448 <_malloc_r+0x28>
 800543c:	230c      	movs	r3, #12
 800543e:	2600      	movs	r6, #0
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4630      	mov	r0, r6
 8005444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005448:	4e2e      	ldr	r6, [pc, #184]	; (8005504 <_malloc_r+0xe4>)
 800544a:	f000 fba9 	bl	8005ba0 <__malloc_lock>
 800544e:	6833      	ldr	r3, [r6, #0]
 8005450:	461c      	mov	r4, r3
 8005452:	bb34      	cbnz	r4, 80054a2 <_malloc_r+0x82>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	f7ff ffc2 	bl	80053e0 <sbrk_aligned>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	4604      	mov	r4, r0
 8005460:	d14d      	bne.n	80054fe <_malloc_r+0xde>
 8005462:	6834      	ldr	r4, [r6, #0]
 8005464:	4626      	mov	r6, r4
 8005466:	2e00      	cmp	r6, #0
 8005468:	d140      	bne.n	80054ec <_malloc_r+0xcc>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	4631      	mov	r1, r6
 800546e:	4638      	mov	r0, r7
 8005470:	eb04 0803 	add.w	r8, r4, r3
 8005474:	f000 f928 	bl	80056c8 <_sbrk_r>
 8005478:	4580      	cmp	r8, r0
 800547a:	d13a      	bne.n	80054f2 <_malloc_r+0xd2>
 800547c:	6821      	ldr	r1, [r4, #0]
 800547e:	3503      	adds	r5, #3
 8005480:	1a6d      	subs	r5, r5, r1
 8005482:	f025 0503 	bic.w	r5, r5, #3
 8005486:	3508      	adds	r5, #8
 8005488:	2d0c      	cmp	r5, #12
 800548a:	bf38      	it	cc
 800548c:	250c      	movcc	r5, #12
 800548e:	4638      	mov	r0, r7
 8005490:	4629      	mov	r1, r5
 8005492:	f7ff ffa5 	bl	80053e0 <sbrk_aligned>
 8005496:	3001      	adds	r0, #1
 8005498:	d02b      	beq.n	80054f2 <_malloc_r+0xd2>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	442b      	add	r3, r5
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	e00e      	b.n	80054c0 <_malloc_r+0xa0>
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	1b52      	subs	r2, r2, r5
 80054a6:	d41e      	bmi.n	80054e6 <_malloc_r+0xc6>
 80054a8:	2a0b      	cmp	r2, #11
 80054aa:	d916      	bls.n	80054da <_malloc_r+0xba>
 80054ac:	1961      	adds	r1, r4, r5
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	6025      	str	r5, [r4, #0]
 80054b2:	bf18      	it	ne
 80054b4:	6059      	strne	r1, [r3, #4]
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	bf08      	it	eq
 80054ba:	6031      	streq	r1, [r6, #0]
 80054bc:	5162      	str	r2, [r4, r5]
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	4638      	mov	r0, r7
 80054c2:	f104 060b 	add.w	r6, r4, #11
 80054c6:	f000 fb71 	bl	8005bac <__malloc_unlock>
 80054ca:	f026 0607 	bic.w	r6, r6, #7
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	1af2      	subs	r2, r6, r3
 80054d2:	d0b6      	beq.n	8005442 <_malloc_r+0x22>
 80054d4:	1b9b      	subs	r3, r3, r6
 80054d6:	50a3      	str	r3, [r4, r2]
 80054d8:	e7b3      	b.n	8005442 <_malloc_r+0x22>
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	42a3      	cmp	r3, r4
 80054de:	bf0c      	ite	eq
 80054e0:	6032      	streq	r2, [r6, #0]
 80054e2:	605a      	strne	r2, [r3, #4]
 80054e4:	e7ec      	b.n	80054c0 <_malloc_r+0xa0>
 80054e6:	4623      	mov	r3, r4
 80054e8:	6864      	ldr	r4, [r4, #4]
 80054ea:	e7b2      	b.n	8005452 <_malloc_r+0x32>
 80054ec:	4634      	mov	r4, r6
 80054ee:	6876      	ldr	r6, [r6, #4]
 80054f0:	e7b9      	b.n	8005466 <_malloc_r+0x46>
 80054f2:	230c      	movs	r3, #12
 80054f4:	4638      	mov	r0, r7
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	f000 fb58 	bl	8005bac <__malloc_unlock>
 80054fc:	e7a1      	b.n	8005442 <_malloc_r+0x22>
 80054fe:	6025      	str	r5, [r4, #0]
 8005500:	e7de      	b.n	80054c0 <_malloc_r+0xa0>
 8005502:	bf00      	nop
 8005504:	20001140 	.word	0x20001140

08005508 <_puts_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	460e      	mov	r6, r1
 800550c:	4605      	mov	r5, r0
 800550e:	b118      	cbz	r0, 8005518 <_puts_r+0x10>
 8005510:	6983      	ldr	r3, [r0, #24]
 8005512:	b90b      	cbnz	r3, 8005518 <_puts_r+0x10>
 8005514:	f7ff fe88 	bl	8005228 <__sinit>
 8005518:	69ab      	ldr	r3, [r5, #24]
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	b913      	cbnz	r3, 8005524 <_puts_r+0x1c>
 800551e:	4628      	mov	r0, r5
 8005520:	f7ff fe82 	bl	8005228 <__sinit>
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <_puts_r+0xd0>)
 8005526:	429c      	cmp	r4, r3
 8005528:	d120      	bne.n	800556c <_puts_r+0x64>
 800552a:	686c      	ldr	r4, [r5, #4]
 800552c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800552e:	07db      	lsls	r3, r3, #31
 8005530:	d405      	bmi.n	800553e <_puts_r+0x36>
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	0598      	lsls	r0, r3, #22
 8005536:	d402      	bmi.n	800553e <_puts_r+0x36>
 8005538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800553a:	f7ff ff38 	bl	80053ae <__retarget_lock_acquire_recursive>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	0719      	lsls	r1, r3, #28
 8005542:	d51d      	bpl.n	8005580 <_puts_r+0x78>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	b1db      	cbz	r3, 8005580 <_puts_r+0x78>
 8005548:	3e01      	subs	r6, #1
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005550:	3b01      	subs	r3, #1
 8005552:	60a3      	str	r3, [r4, #8]
 8005554:	bb39      	cbnz	r1, 80055a6 <_puts_r+0x9e>
 8005556:	2b00      	cmp	r3, #0
 8005558:	da38      	bge.n	80055cc <_puts_r+0xc4>
 800555a:	4622      	mov	r2, r4
 800555c:	210a      	movs	r1, #10
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f906 	bl	8005770 <__swbuf_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d011      	beq.n	800558c <_puts_r+0x84>
 8005568:	250a      	movs	r5, #10
 800556a:	e011      	b.n	8005590 <_puts_r+0x88>
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <_puts_r+0xd4>)
 800556e:	429c      	cmp	r4, r3
 8005570:	d101      	bne.n	8005576 <_puts_r+0x6e>
 8005572:	68ac      	ldr	r4, [r5, #8]
 8005574:	e7da      	b.n	800552c <_puts_r+0x24>
 8005576:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <_puts_r+0xd8>)
 8005578:	429c      	cmp	r4, r3
 800557a:	bf08      	it	eq
 800557c:	68ec      	ldreq	r4, [r5, #12]
 800557e:	e7d5      	b.n	800552c <_puts_r+0x24>
 8005580:	4621      	mov	r1, r4
 8005582:	4628      	mov	r0, r5
 8005584:	f000 f958 	bl	8005838 <__swsetup_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	d0dd      	beq.n	8005548 <_puts_r+0x40>
 800558c:	f04f 35ff 	mov.w	r5, #4294967295
 8005590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005592:	07da      	lsls	r2, r3, #31
 8005594:	d405      	bmi.n	80055a2 <_puts_r+0x9a>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	059b      	lsls	r3, r3, #22
 800559a:	d402      	bmi.n	80055a2 <_puts_r+0x9a>
 800559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559e:	f7ff ff07 	bl	80053b0 <__retarget_lock_release_recursive>
 80055a2:	4628      	mov	r0, r5
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da04      	bge.n	80055b4 <_puts_r+0xac>
 80055aa:	69a2      	ldr	r2, [r4, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	dc06      	bgt.n	80055be <_puts_r+0xb6>
 80055b0:	290a      	cmp	r1, #10
 80055b2:	d004      	beq.n	80055be <_puts_r+0xb6>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	7019      	strb	r1, [r3, #0]
 80055bc:	e7c5      	b.n	800554a <_puts_r+0x42>
 80055be:	4622      	mov	r2, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f8d5 	bl	8005770 <__swbuf_r>
 80055c6:	3001      	adds	r0, #1
 80055c8:	d1bf      	bne.n	800554a <_puts_r+0x42>
 80055ca:	e7df      	b.n	800558c <_puts_r+0x84>
 80055cc:	250a      	movs	r5, #10
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	701d      	strb	r5, [r3, #0]
 80055d6:	e7db      	b.n	8005590 <_puts_r+0x88>
 80055d8:	08005dc4 	.word	0x08005dc4
 80055dc:	08005de4 	.word	0x08005de4
 80055e0:	08005da4 	.word	0x08005da4

080055e4 <puts>:
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <puts+0xc>)
 80055e6:	4601      	mov	r1, r0
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f7ff bf8d 	b.w	8005508 <_puts_r>
 80055ee:	bf00      	nop
 80055f0:	20000010 	.word	0x20000010

080055f4 <cleanup_glue>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	460c      	mov	r4, r1
 80055f8:	6809      	ldr	r1, [r1, #0]
 80055fa:	4605      	mov	r5, r0
 80055fc:	b109      	cbz	r1, 8005602 <cleanup_glue+0xe>
 80055fe:	f7ff fff9 	bl	80055f4 <cleanup_glue>
 8005602:	4621      	mov	r1, r4
 8005604:	4628      	mov	r0, r5
 8005606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560a:	f000 bad5 	b.w	8005bb8 <_free_r>
	...

08005610 <_reclaim_reent>:
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <_reclaim_reent+0xb4>)
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4604      	mov	r4, r0
 8005618:	4283      	cmp	r3, r0
 800561a:	d051      	beq.n	80056c0 <_reclaim_reent+0xb0>
 800561c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800561e:	b143      	cbz	r3, 8005632 <_reclaim_reent+0x22>
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d14a      	bne.n	80056bc <_reclaim_reent+0xac>
 8005626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	b111      	cbz	r1, 8005632 <_reclaim_reent+0x22>
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fac3 	bl	8005bb8 <_free_r>
 8005632:	6961      	ldr	r1, [r4, #20]
 8005634:	b111      	cbz	r1, 800563c <_reclaim_reent+0x2c>
 8005636:	4620      	mov	r0, r4
 8005638:	f000 fabe 	bl	8005bb8 <_free_r>
 800563c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800563e:	b111      	cbz	r1, 8005646 <_reclaim_reent+0x36>
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fab9 	bl	8005bb8 <_free_r>
 8005646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005648:	b111      	cbz	r1, 8005650 <_reclaim_reent+0x40>
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fab4 	bl	8005bb8 <_free_r>
 8005650:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005652:	b111      	cbz	r1, 800565a <_reclaim_reent+0x4a>
 8005654:	4620      	mov	r0, r4
 8005656:	f000 faaf 	bl	8005bb8 <_free_r>
 800565a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800565c:	b111      	cbz	r1, 8005664 <_reclaim_reent+0x54>
 800565e:	4620      	mov	r0, r4
 8005660:	f000 faaa 	bl	8005bb8 <_free_r>
 8005664:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005666:	b111      	cbz	r1, 800566e <_reclaim_reent+0x5e>
 8005668:	4620      	mov	r0, r4
 800566a:	f000 faa5 	bl	8005bb8 <_free_r>
 800566e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005670:	b111      	cbz	r1, 8005678 <_reclaim_reent+0x68>
 8005672:	4620      	mov	r0, r4
 8005674:	f000 faa0 	bl	8005bb8 <_free_r>
 8005678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800567a:	b111      	cbz	r1, 8005682 <_reclaim_reent+0x72>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fa9b 	bl	8005bb8 <_free_r>
 8005682:	69a3      	ldr	r3, [r4, #24]
 8005684:	b1e3      	cbz	r3, 80056c0 <_reclaim_reent+0xb0>
 8005686:	4620      	mov	r0, r4
 8005688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800568a:	4798      	blx	r3
 800568c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800568e:	b1b9      	cbz	r1, 80056c0 <_reclaim_reent+0xb0>
 8005690:	4620      	mov	r0, r4
 8005692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005696:	f7ff bfad 	b.w	80055f4 <cleanup_glue>
 800569a:	5949      	ldr	r1, [r1, r5]
 800569c:	b941      	cbnz	r1, 80056b0 <_reclaim_reent+0xa0>
 800569e:	3504      	adds	r5, #4
 80056a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a2:	2d80      	cmp	r5, #128	; 0x80
 80056a4:	68d9      	ldr	r1, [r3, #12]
 80056a6:	d1f8      	bne.n	800569a <_reclaim_reent+0x8a>
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 fa85 	bl	8005bb8 <_free_r>
 80056ae:	e7ba      	b.n	8005626 <_reclaim_reent+0x16>
 80056b0:	680e      	ldr	r6, [r1, #0]
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 fa80 	bl	8005bb8 <_free_r>
 80056b8:	4631      	mov	r1, r6
 80056ba:	e7ef      	b.n	800569c <_reclaim_reent+0x8c>
 80056bc:	2500      	movs	r5, #0
 80056be:	e7ef      	b.n	80056a0 <_reclaim_reent+0x90>
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	bf00      	nop
 80056c4:	20000010 	.word	0x20000010

080056c8 <_sbrk_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	2300      	movs	r3, #0
 80056cc:	4d05      	ldr	r5, [pc, #20]	; (80056e4 <_sbrk_r+0x1c>)
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb f8a2 	bl	800081c <_sbrk>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_sbrk_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_sbrk_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20001148 	.word	0x20001148

080056e8 <__sread>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	460c      	mov	r4, r1
 80056ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f0:	f000 faaa 	bl	8005c48 <_read_r>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	bfab      	itete	ge
 80056f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056fa:	89a3      	ldrhlt	r3, [r4, #12]
 80056fc:	181b      	addge	r3, r3, r0
 80056fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005702:	bfac      	ite	ge
 8005704:	6563      	strge	r3, [r4, #84]	; 0x54
 8005706:	81a3      	strhlt	r3, [r4, #12]
 8005708:	bd10      	pop	{r4, pc}

0800570a <__swrite>:
 800570a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570e:	461f      	mov	r7, r3
 8005710:	898b      	ldrh	r3, [r1, #12]
 8005712:	4605      	mov	r5, r0
 8005714:	05db      	lsls	r3, r3, #23
 8005716:	460c      	mov	r4, r1
 8005718:	4616      	mov	r6, r2
 800571a:	d505      	bpl.n	8005728 <__swrite+0x1e>
 800571c:	2302      	movs	r3, #2
 800571e:	2200      	movs	r2, #0
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	f000 f9c4 	bl	8005ab0 <_lseek_r>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	4632      	mov	r2, r6
 800572c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	4628      	mov	r0, r5
 8005734:	463b      	mov	r3, r7
 8005736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	f000 b869 	b.w	8005814 <_write_r>

08005742 <__sseek>:
 8005742:	b510      	push	{r4, lr}
 8005744:	460c      	mov	r4, r1
 8005746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574a:	f000 f9b1 	bl	8005ab0 <_lseek_r>
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	bf15      	itete	ne
 8005754:	6560      	strne	r0, [r4, #84]	; 0x54
 8005756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800575a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800575e:	81a3      	strheq	r3, [r4, #12]
 8005760:	bf18      	it	ne
 8005762:	81a3      	strhne	r3, [r4, #12]
 8005764:	bd10      	pop	{r4, pc}

08005766 <__sclose>:
 8005766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576a:	f000 b8d3 	b.w	8005914 <_close_r>
	...

08005770 <__swbuf_r>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	460e      	mov	r6, r1
 8005774:	4614      	mov	r4, r2
 8005776:	4605      	mov	r5, r0
 8005778:	b118      	cbz	r0, 8005782 <__swbuf_r+0x12>
 800577a:	6983      	ldr	r3, [r0, #24]
 800577c:	b90b      	cbnz	r3, 8005782 <__swbuf_r+0x12>
 800577e:	f7ff fd53 	bl	8005228 <__sinit>
 8005782:	4b21      	ldr	r3, [pc, #132]	; (8005808 <__swbuf_r+0x98>)
 8005784:	429c      	cmp	r4, r3
 8005786:	d12b      	bne.n	80057e0 <__swbuf_r+0x70>
 8005788:	686c      	ldr	r4, [r5, #4]
 800578a:	69a3      	ldr	r3, [r4, #24]
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	071a      	lsls	r2, r3, #28
 8005792:	d52f      	bpl.n	80057f4 <__swbuf_r+0x84>
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	b36b      	cbz	r3, 80057f4 <__swbuf_r+0x84>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	6820      	ldr	r0, [r4, #0]
 800579c:	b2f6      	uxtb	r6, r6
 800579e:	1ac0      	subs	r0, r0, r3
 80057a0:	6963      	ldr	r3, [r4, #20]
 80057a2:	4637      	mov	r7, r6
 80057a4:	4283      	cmp	r3, r0
 80057a6:	dc04      	bgt.n	80057b2 <__swbuf_r+0x42>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f944 	bl	8005a38 <_fflush_r>
 80057b0:	bb30      	cbnz	r0, 8005800 <__swbuf_r+0x90>
 80057b2:	68a3      	ldr	r3, [r4, #8]
 80057b4:	3001      	adds	r0, #1
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	701e      	strb	r6, [r3, #0]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	4283      	cmp	r3, r0
 80057c6:	d004      	beq.n	80057d2 <__swbuf_r+0x62>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	07db      	lsls	r3, r3, #31
 80057cc:	d506      	bpl.n	80057dc <__swbuf_r+0x6c>
 80057ce:	2e0a      	cmp	r6, #10
 80057d0:	d104      	bne.n	80057dc <__swbuf_r+0x6c>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f92f 	bl	8005a38 <_fflush_r>
 80057da:	b988      	cbnz	r0, 8005800 <__swbuf_r+0x90>
 80057dc:	4638      	mov	r0, r7
 80057de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <__swbuf_r+0x9c>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	d101      	bne.n	80057ea <__swbuf_r+0x7a>
 80057e6:	68ac      	ldr	r4, [r5, #8]
 80057e8:	e7cf      	b.n	800578a <__swbuf_r+0x1a>
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <__swbuf_r+0xa0>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	bf08      	it	eq
 80057f0:	68ec      	ldreq	r4, [r5, #12]
 80057f2:	e7ca      	b.n	800578a <__swbuf_r+0x1a>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 f81e 	bl	8005838 <__swsetup_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d0cb      	beq.n	8005798 <__swbuf_r+0x28>
 8005800:	f04f 37ff 	mov.w	r7, #4294967295
 8005804:	e7ea      	b.n	80057dc <__swbuf_r+0x6c>
 8005806:	bf00      	nop
 8005808:	08005dc4 	.word	0x08005dc4
 800580c:	08005de4 	.word	0x08005de4
 8005810:	08005da4 	.word	0x08005da4

08005814 <_write_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	2200      	movs	r2, #0
 800581e:	4d05      	ldr	r5, [pc, #20]	; (8005834 <_write_r+0x20>)
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fa fcac 	bl	8000180 <_write>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_write_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_write_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20001148 	.word	0x20001148

08005838 <__swsetup_r>:
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <__swsetup_r+0xcc>)
 800583a:	b570      	push	{r4, r5, r6, lr}
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	4606      	mov	r6, r0
 8005840:	460c      	mov	r4, r1
 8005842:	b125      	cbz	r5, 800584e <__swsetup_r+0x16>
 8005844:	69ab      	ldr	r3, [r5, #24]
 8005846:	b913      	cbnz	r3, 800584e <__swsetup_r+0x16>
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff fced 	bl	8005228 <__sinit>
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <__swsetup_r+0xd0>)
 8005850:	429c      	cmp	r4, r3
 8005852:	d10f      	bne.n	8005874 <__swsetup_r+0x3c>
 8005854:	686c      	ldr	r4, [r5, #4]
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800585c:	0719      	lsls	r1, r3, #28
 800585e:	d42c      	bmi.n	80058ba <__swsetup_r+0x82>
 8005860:	06dd      	lsls	r5, r3, #27
 8005862:	d411      	bmi.n	8005888 <__swsetup_r+0x50>
 8005864:	2309      	movs	r3, #9
 8005866:	6033      	str	r3, [r6, #0]
 8005868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	e03e      	b.n	80058f2 <__swsetup_r+0xba>
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <__swsetup_r+0xd4>)
 8005876:	429c      	cmp	r4, r3
 8005878:	d101      	bne.n	800587e <__swsetup_r+0x46>
 800587a:	68ac      	ldr	r4, [r5, #8]
 800587c:	e7eb      	b.n	8005856 <__swsetup_r+0x1e>
 800587e:	4b24      	ldr	r3, [pc, #144]	; (8005910 <__swsetup_r+0xd8>)
 8005880:	429c      	cmp	r4, r3
 8005882:	bf08      	it	eq
 8005884:	68ec      	ldreq	r4, [r5, #12]
 8005886:	e7e6      	b.n	8005856 <__swsetup_r+0x1e>
 8005888:	0758      	lsls	r0, r3, #29
 800588a:	d512      	bpl.n	80058b2 <__swsetup_r+0x7a>
 800588c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800588e:	b141      	cbz	r1, 80058a2 <__swsetup_r+0x6a>
 8005890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005894:	4299      	cmp	r1, r3
 8005896:	d002      	beq.n	800589e <__swsetup_r+0x66>
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f98d 	bl	8005bb8 <_free_r>
 800589e:	2300      	movs	r3, #0
 80058a0:	6363      	str	r3, [r4, #52]	; 0x34
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	2300      	movs	r3, #0
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	b94b      	cbnz	r3, 80058d2 <__swsetup_r+0x9a>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c8:	d003      	beq.n	80058d2 <__swsetup_r+0x9a>
 80058ca:	4621      	mov	r1, r4
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 f927 	bl	8005b20 <__smakebuf_r>
 80058d2:	89a0      	ldrh	r0, [r4, #12]
 80058d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058d8:	f010 0301 	ands.w	r3, r0, #1
 80058dc:	d00a      	beq.n	80058f4 <__swsetup_r+0xbc>
 80058de:	2300      	movs	r3, #0
 80058e0:	60a3      	str	r3, [r4, #8]
 80058e2:	6963      	ldr	r3, [r4, #20]
 80058e4:	425b      	negs	r3, r3
 80058e6:	61a3      	str	r3, [r4, #24]
 80058e8:	6923      	ldr	r3, [r4, #16]
 80058ea:	b943      	cbnz	r3, 80058fe <__swsetup_r+0xc6>
 80058ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058f0:	d1ba      	bne.n	8005868 <__swsetup_r+0x30>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	0781      	lsls	r1, r0, #30
 80058f6:	bf58      	it	pl
 80058f8:	6963      	ldrpl	r3, [r4, #20]
 80058fa:	60a3      	str	r3, [r4, #8]
 80058fc:	e7f4      	b.n	80058e8 <__swsetup_r+0xb0>
 80058fe:	2000      	movs	r0, #0
 8005900:	e7f7      	b.n	80058f2 <__swsetup_r+0xba>
 8005902:	bf00      	nop
 8005904:	20000010 	.word	0x20000010
 8005908:	08005dc4 	.word	0x08005dc4
 800590c:	08005de4 	.word	0x08005de4
 8005910:	08005da4 	.word	0x08005da4

08005914 <_close_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	2300      	movs	r3, #0
 8005918:	4d05      	ldr	r5, [pc, #20]	; (8005930 <_close_r+0x1c>)
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	f7fa ff4b 	bl	80007ba <_close>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_close_r+0x1a>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_close_r+0x1a>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20001148 	.word	0x20001148

08005934 <__sflush_r>:
 8005934:	898a      	ldrh	r2, [r1, #12]
 8005936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005938:	4605      	mov	r5, r0
 800593a:	0710      	lsls	r0, r2, #28
 800593c:	460c      	mov	r4, r1
 800593e:	d457      	bmi.n	80059f0 <__sflush_r+0xbc>
 8005940:	684b      	ldr	r3, [r1, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dc04      	bgt.n	8005950 <__sflush_r+0x1c>
 8005946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc01      	bgt.n	8005950 <__sflush_r+0x1c>
 800594c:	2000      	movs	r0, #0
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005952:	2e00      	cmp	r6, #0
 8005954:	d0fa      	beq.n	800594c <__sflush_r+0x18>
 8005956:	2300      	movs	r3, #0
 8005958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800595c:	682f      	ldr	r7, [r5, #0]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	d032      	beq.n	80059c8 <__sflush_r+0x94>
 8005962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	075a      	lsls	r2, r3, #29
 8005968:	d505      	bpl.n	8005976 <__sflush_r+0x42>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	1ac0      	subs	r0, r0, r3
 800596e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005970:	b10b      	cbz	r3, 8005976 <__sflush_r+0x42>
 8005972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005974:	1ac0      	subs	r0, r0, r3
 8005976:	2300      	movs	r3, #0
 8005978:	4602      	mov	r2, r0
 800597a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800597c:	4628      	mov	r0, r5
 800597e:	6a21      	ldr	r1, [r4, #32]
 8005980:	47b0      	blx	r6
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	d106      	bne.n	8005996 <__sflush_r+0x62>
 8005988:	6829      	ldr	r1, [r5, #0]
 800598a:	291d      	cmp	r1, #29
 800598c:	d82c      	bhi.n	80059e8 <__sflush_r+0xb4>
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <__sflush_r+0x100>)
 8005990:	40ca      	lsrs	r2, r1
 8005992:	07d6      	lsls	r6, r2, #31
 8005994:	d528      	bpl.n	80059e8 <__sflush_r+0xb4>
 8005996:	2200      	movs	r2, #0
 8005998:	6062      	str	r2, [r4, #4]
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	04d9      	lsls	r1, r3, #19
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	d504      	bpl.n	80059ac <__sflush_r+0x78>
 80059a2:	1c42      	adds	r2, r0, #1
 80059a4:	d101      	bne.n	80059aa <__sflush_r+0x76>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	b903      	cbnz	r3, 80059ac <__sflush_r+0x78>
 80059aa:	6560      	str	r0, [r4, #84]	; 0x54
 80059ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ae:	602f      	str	r7, [r5, #0]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d0cb      	beq.n	800594c <__sflush_r+0x18>
 80059b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d002      	beq.n	80059c2 <__sflush_r+0x8e>
 80059bc:	4628      	mov	r0, r5
 80059be:	f000 f8fb 	bl	8005bb8 <_free_r>
 80059c2:	2000      	movs	r0, #0
 80059c4:	6360      	str	r0, [r4, #52]	; 0x34
 80059c6:	e7c2      	b.n	800594e <__sflush_r+0x1a>
 80059c8:	6a21      	ldr	r1, [r4, #32]
 80059ca:	2301      	movs	r3, #1
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b0      	blx	r6
 80059d0:	1c41      	adds	r1, r0, #1
 80059d2:	d1c7      	bne.n	8005964 <__sflush_r+0x30>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0c4      	beq.n	8005964 <__sflush_r+0x30>
 80059da:	2b1d      	cmp	r3, #29
 80059dc:	d001      	beq.n	80059e2 <__sflush_r+0xae>
 80059de:	2b16      	cmp	r3, #22
 80059e0:	d101      	bne.n	80059e6 <__sflush_r+0xb2>
 80059e2:	602f      	str	r7, [r5, #0]
 80059e4:	e7b2      	b.n	800594c <__sflush_r+0x18>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	e7ae      	b.n	800594e <__sflush_r+0x1a>
 80059f0:	690f      	ldr	r7, [r1, #16]
 80059f2:	2f00      	cmp	r7, #0
 80059f4:	d0aa      	beq.n	800594c <__sflush_r+0x18>
 80059f6:	0793      	lsls	r3, r2, #30
 80059f8:	bf18      	it	ne
 80059fa:	2300      	movne	r3, #0
 80059fc:	680e      	ldr	r6, [r1, #0]
 80059fe:	bf08      	it	eq
 8005a00:	694b      	ldreq	r3, [r1, #20]
 8005a02:	1bf6      	subs	r6, r6, r7
 8005a04:	600f      	str	r7, [r1, #0]
 8005a06:	608b      	str	r3, [r1, #8]
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	dd9f      	ble.n	800594c <__sflush_r+0x18>
 8005a0c:	4633      	mov	r3, r6
 8005a0e:	463a      	mov	r2, r7
 8005a10:	4628      	mov	r0, r5
 8005a12:	6a21      	ldr	r1, [r4, #32]
 8005a14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a18:	47e0      	blx	ip
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	dc06      	bgt.n	8005a2c <__sflush_r+0xf8>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	e790      	b.n	800594e <__sflush_r+0x1a>
 8005a2c:	4407      	add	r7, r0
 8005a2e:	1a36      	subs	r6, r6, r0
 8005a30:	e7ea      	b.n	8005a08 <__sflush_r+0xd4>
 8005a32:	bf00      	nop
 8005a34:	20400001 	.word	0x20400001

08005a38 <_fflush_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	690b      	ldr	r3, [r1, #16]
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b913      	cbnz	r3, 8005a48 <_fflush_r+0x10>
 8005a42:	2500      	movs	r5, #0
 8005a44:	4628      	mov	r0, r5
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	b118      	cbz	r0, 8005a52 <_fflush_r+0x1a>
 8005a4a:	6983      	ldr	r3, [r0, #24]
 8005a4c:	b90b      	cbnz	r3, 8005a52 <_fflush_r+0x1a>
 8005a4e:	f7ff fbeb 	bl	8005228 <__sinit>
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <_fflush_r+0x6c>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d11b      	bne.n	8005a90 <_fflush_r+0x58>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ef      	beq.n	8005a42 <_fflush_r+0xa>
 8005a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a64:	07d0      	lsls	r0, r2, #31
 8005a66:	d404      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a68:	0599      	lsls	r1, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6e:	f7ff fc9e 	bl	80053ae <__retarget_lock_acquire_recursive>
 8005a72:	4628      	mov	r0, r5
 8005a74:	4621      	mov	r1, r4
 8005a76:	f7ff ff5d 	bl	8005934 <__sflush_r>
 8005a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	07da      	lsls	r2, r3, #31
 8005a80:	d4e0      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d4dd      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8a:	f7ff fc91 	bl	80053b0 <__retarget_lock_release_recursive>
 8005a8e:	e7d9      	b.n	8005a44 <_fflush_r+0xc>
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_fflush_r+0x70>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d101      	bne.n	8005a9a <_fflush_r+0x62>
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	e7df      	b.n	8005a5a <_fflush_r+0x22>
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <_fflush_r+0x74>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf08      	it	eq
 8005aa0:	68ec      	ldreq	r4, [r5, #12]
 8005aa2:	e7da      	b.n	8005a5a <_fflush_r+0x22>
 8005aa4:	08005dc4 	.word	0x08005dc4
 8005aa8:	08005de4 	.word	0x08005de4
 8005aac:	08005da4 	.word	0x08005da4

08005ab0 <_lseek_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4d05      	ldr	r5, [pc, #20]	; (8005ad0 <_lseek_r+0x20>)
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fa fe9f 	bl	8000802 <_lseek>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_lseek_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_lseek_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20001148 	.word	0x20001148

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	4614      	mov	r4, r2
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	b096      	sub	sp, #88	; 0x58
 8005ae4:	da08      	bge.n	8005af8 <__swhatbuf_r+0x24>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	061a      	lsls	r2, r3, #24
 8005af0:	d410      	bmi.n	8005b14 <__swhatbuf_r+0x40>
 8005af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af6:	e00e      	b.n	8005b16 <__swhatbuf_r+0x42>
 8005af8:	466a      	mov	r2, sp
 8005afa:	f000 f8b7 	bl	8005c6c <_fstat_r>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	dbf1      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b02:	9a01      	ldr	r2, [sp, #4]
 8005b04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b0c:	425a      	negs	r2, r3
 8005b0e:	415a      	adcs	r2, r3
 8005b10:	602a      	str	r2, [r5, #0]
 8005b12:	e7ee      	b.n	8005af2 <__swhatbuf_r+0x1e>
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	2000      	movs	r0, #0
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	b016      	add	sp, #88	; 0x58
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b20 <__smakebuf_r>:
 8005b20:	898b      	ldrh	r3, [r1, #12]
 8005b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b24:	079d      	lsls	r5, r3, #30
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	d507      	bpl.n	8005b3c <__smakebuf_r+0x1c>
 8005b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2301      	movs	r3, #1
 8005b36:	6163      	str	r3, [r4, #20]
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	466a      	mov	r2, sp
 8005b3e:	ab01      	add	r3, sp, #4
 8005b40:	f7ff ffc8 	bl	8005ad4 <__swhatbuf_r>
 8005b44:	9900      	ldr	r1, [sp, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff fc69 	bl	8005420 <_malloc_r>
 8005b4e:	b948      	cbnz	r0, 8005b64 <__smakebuf_r+0x44>
 8005b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d4ef      	bmi.n	8005b38 <__smakebuf_r+0x18>
 8005b58:	f023 0303 	bic.w	r3, r3, #3
 8005b5c:	f043 0302 	orr.w	r3, r3, #2
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	e7e3      	b.n	8005b2c <__smakebuf_r+0xc>
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <__smakebuf_r+0x7c>)
 8005b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	6020      	str	r0, [r4, #0]
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	6120      	str	r0, [r4, #16]
 8005b76:	6163      	str	r3, [r4, #20]
 8005b78:	9b01      	ldr	r3, [sp, #4]
 8005b7a:	b15b      	cbz	r3, 8005b94 <__smakebuf_r+0x74>
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b82:	f000 f885 	bl	8005c90 <_isatty_r>
 8005b86:	b128      	cbz	r0, 8005b94 <__smakebuf_r+0x74>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	89a0      	ldrh	r0, [r4, #12]
 8005b96:	4305      	orrs	r5, r0
 8005b98:	81a5      	strh	r5, [r4, #12]
 8005b9a:	e7cd      	b.n	8005b38 <__smakebuf_r+0x18>
 8005b9c:	080051c1 	.word	0x080051c1

08005ba0 <__malloc_lock>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	; (8005ba8 <__malloc_lock+0x8>)
 8005ba2:	f7ff bc04 	b.w	80053ae <__retarget_lock_acquire_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	2000113c 	.word	0x2000113c

08005bac <__malloc_unlock>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__malloc_unlock+0x8>)
 8005bae:	f7ff bbff 	b.w	80053b0 <__retarget_lock_release_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	2000113c 	.word	0x2000113c

08005bb8 <_free_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d040      	beq.n	8005c42 <_free_r+0x8a>
 8005bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc4:	1f0c      	subs	r4, r1, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bfb8      	it	lt
 8005bca:	18e4      	addlt	r4, r4, r3
 8005bcc:	f7ff ffe8 	bl	8005ba0 <__malloc_lock>
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <_free_r+0x8c>)
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	b933      	cbnz	r3, 8005be4 <_free_r+0x2c>
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	6014      	str	r4, [r2, #0]
 8005bda:	4628      	mov	r0, r5
 8005bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be0:	f7ff bfe4 	b.w	8005bac <__malloc_unlock>
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	d908      	bls.n	8005bfa <_free_r+0x42>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf01      	itttt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	1809      	addeq	r1, r1, r0
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	e7ed      	b.n	8005bd6 <_free_r+0x1e>
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b10b      	cbz	r3, 8005c04 <_free_r+0x4c>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d9fa      	bls.n	8005bfa <_free_r+0x42>
 8005c04:	6811      	ldr	r1, [r2, #0]
 8005c06:	1850      	adds	r0, r2, r1
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d10b      	bne.n	8005c24 <_free_r+0x6c>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	4401      	add	r1, r0
 8005c10:	1850      	adds	r0, r2, r1
 8005c12:	4283      	cmp	r3, r0
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	d1e0      	bne.n	8005bda <_free_r+0x22>
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4401      	add	r1, r0
 8005c1e:	6011      	str	r1, [r2, #0]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	e7da      	b.n	8005bda <_free_r+0x22>
 8005c24:	d902      	bls.n	8005c2c <_free_r+0x74>
 8005c26:	230c      	movs	r3, #12
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	e7d6      	b.n	8005bda <_free_r+0x22>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf01      	itttt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	1809      	addeq	r1, r1, r0
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	6054      	str	r4, [r2, #4]
 8005c40:	e7cb      	b.n	8005bda <_free_r+0x22>
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20001140 	.word	0x20001140

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	2200      	movs	r2, #0
 8005c52:	4d05      	ldr	r5, [pc, #20]	; (8005c68 <_read_r+0x20>)
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fa fd92 	bl	8000780 <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20001148 	.word	0x20001148

08005c6c <_fstat_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4d06      	ldr	r5, [pc, #24]	; (8005c8c <_fstat_r+0x20>)
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f7fa fda9 	bl	80007d0 <_fstat>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d102      	bne.n	8005c88 <_fstat_r+0x1c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b103      	cbz	r3, 8005c88 <_fstat_r+0x1c>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20001148 	.word	0x20001148

08005c90 <_isatty_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	2300      	movs	r3, #0
 8005c94:	4d05      	ldr	r5, [pc, #20]	; (8005cac <_isatty_r+0x1c>)
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fa fda7 	bl	80007ee <_isatty>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_isatty_r+0x1a>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_isatty_r+0x1a>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20001148 	.word	0x20001148

08005cb0 <_init>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr

08005cbc <_fini>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr
