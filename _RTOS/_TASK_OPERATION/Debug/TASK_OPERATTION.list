
TASK_OPERATTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  20000074  0800329c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  0800329c  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec1f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002547  00000000  00000000  0002ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f5  00000000  00000000  00032cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7f0  00000000  00000000  0004b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7ca  00000000  00000000  00059bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e937f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  000e93d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003108 	.word	0x08003108

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003108 	.word	0x08003108

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa57 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f849 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f88d 	bl	80002ac <MX_GPIO_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED1 */
  osThreadDef(LED1, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <main+0x88>)
 8000194:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000198:	461d      	mov	r5, r3
 800019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED1Handle = osThreadCreate(osThread(LED1), NULL);
 80001a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fb9f 	bl	80018f0 <osThreadCreate>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <main+0x8c>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED2 */
  osThreadDef(LED2, StartTask02, osPriorityIdle, 0, 128);
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <main+0x90>)
 80001ba:	f107 0420 	add.w	r4, r7, #32
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED2Handle = osThreadCreate(osThread(LED2), NULL);
 80001cc:	f107 0320 	add.w	r3, r7, #32
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fb8c 	bl	80018f0 <osThreadCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <main+0x94>)
 80001dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED3 */
  osThreadDef(LED3, StartTask03, osPriorityIdle, 0, 128);
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <main+0x98>)
 80001e0:	1d3c      	adds	r4, r7, #4
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED3Handle = osThreadCreate(osThread(LED3), NULL);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fb7b 	bl	80018f0 <osThreadCreate>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <main+0x9c>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f001 fb6f 	bl	80018e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000204:	e7fe      	b.n	8000204 <main+0x84>
 8000206:	bf00      	nop
 8000208:	08003138 	.word	0x08003138
 800020c:	20000344 	.word	0x20000344
 8000210:	08003154 	.word	0x08003154
 8000214:	20000348 	.word	0x20000348
 8000218:	08003170 	.word	0x08003170
 800021c:	2000034c 	.word	0x2000034c

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fea4 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fcad 	bl	8000bc8 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f8d8 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ff1a 	bl	80010cc <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029e:	f000 f8c3 	bl	8000428 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c0:	4b28      	ldr	r3, [pc, #160]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a27      	ldr	r2, [pc, #156]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a21      	ldr	r2, [pc, #132]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_GPIO_Init+0xb8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800030e:	4816      	ldr	r0, [pc, #88]	; (8000368 <MX_GPIO_Init+0xbc>)
 8000310:	f000 fc28 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <MX_GPIO_Init+0xc0>)
 800031c:	f000 fc22 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000320:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <MX_GPIO_Init+0xbc>)
 800033a:	f000 fa8f 	bl	800085c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800033e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_GPIO_Init+0xc0>)
 8000358:	f000 fa80 	bl	800085c <HAL_GPIO_Init>

}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800
 800036c:	40010c00 	.word	0x40010c00

08000370 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <StartDefaultTask+0x24>)
 800037c:	f000 fc0a 	bl	8000b94 <HAL_GPIO_TogglePin>
		vTaskResume(LED2Handle);
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <StartDefaultTask+0x28>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f001 fe6f 	bl	8002068 <vTaskResume>
		osDelay(100);
 800038a:	2064      	movs	r0, #100	; 0x64
 800038c:	f001 fafc 	bl	8001988 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000390:	e7f2      	b.n	8000378 <StartDefaultTask+0x8>
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	20000348 	.word	0x20000348

0800039c <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	4806      	ldr	r0, [pc, #24]	; (80003c0 <StartTask02+0x24>)
 80003a8:	f000 fbf4 	bl	8000b94 <HAL_GPIO_TogglePin>
		osThreadSuspend(LED1Handle);
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <StartTask02+0x28>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fafd 	bl	80019b0 <osThreadSuspend>
		osDelay(500);
 80003b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ba:	f001 fae5 	bl	8001988 <osDelay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80003be:	e7f1      	b.n	80003a4 <StartTask02+0x8>
 80003c0:	40010800 	.word	0x40010800
 80003c4:	20000344 	.word	0x20000344

080003c8 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <StartTask03+0x30>)
 80003d6:	f000 fbdd 	bl	8000b94 <HAL_GPIO_TogglePin>
		vTaskResume(LED1Handle);
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <StartTask03+0x34>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fe42 	bl	8002068 <vTaskResume>

		osThreadSuspend(LED2Handle);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <StartTask03+0x38>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fae1 	bl	80019b0 <osThreadSuspend>
		osDelay(1000);
 80003ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f2:	f001 fac9 	bl	8001988 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80003f6:	e7eb      	b.n	80003d0 <StartTask03+0x8>
 80003f8:	40010800 	.word	0x40010800
 80003fc:	20000344 	.word	0x20000344
 8000400:	20000348 	.word	0x20000348

08000404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d101      	bne.n	800041a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000416:	f000 f925 	bl	8000664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40000800 	.word	0x40000800

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <HAL_MspInit+0x68>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a17      	ldr	r2, [pc, #92]	; (800049c <HAL_MspInit+0x68>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x68>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x68>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a11      	ldr	r2, [pc, #68]	; (800049c <HAL_MspInit+0x68>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x68>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	210f      	movs	r1, #15
 800046e:	f06f 0001 	mvn.w	r0, #1
 8000472:	f000 f9c8 	bl	8000806 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x6c>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x6c>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	; 0x38
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004ba:	4b34      	ldr	r3, [pc, #208]	; (800058c <HAL_InitTick+0xe8>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a33      	ldr	r2, [pc, #204]	; (800058c <HAL_InitTick+0xe8>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b31      	ldr	r3, [pc, #196]	; (800058c <HAL_InitTick+0xe8>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d2:	f107 0210 	add.w	r2, r7, #16
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 ff51 	bl	8001384 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004e2:	6a3b      	ldr	r3, [r7, #32]
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004ec:	f000 ff36 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 80004f0:	6378      	str	r0, [r7, #52]	; 0x34
 80004f2:	e004      	b.n	80004fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004f4:	f000 ff32 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 80004f8:	4603      	mov	r3, r0
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000500:	4a23      	ldr	r2, [pc, #140]	; (8000590 <HAL_InitTick+0xec>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3b01      	subs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <HAL_InitTick+0xf0>)
 800050e:	4a22      	ldr	r2, [pc, #136]	; (8000598 <HAL_InitTick+0xf4>)
 8000510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <HAL_InitTick+0xf0>)
 8000514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000518:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800051a:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <HAL_InitTick+0xf0>)
 800051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <HAL_InitTick+0xf0>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_InitTick+0xf0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <HAL_InitTick+0xf0>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <HAL_InitTick+0xf0>)
 8000534:	f000 ff74 	bl	8001420 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800053e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000542:	2b00      	cmp	r3, #0
 8000544:	d11b      	bne.n	800057e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <HAL_InitTick+0xf0>)
 8000548:	f000 ffc2 	bl	80014d0 <HAL_TIM_Base_Start_IT>
 800054c:	4603      	mov	r3, r0
 800054e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000556:	2b00      	cmp	r3, #0
 8000558:	d111      	bne.n	800057e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800055a:	201e      	movs	r0, #30
 800055c:	f000 f96f 	bl	800083e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	d808      	bhi.n	8000578 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000566:	2200      	movs	r2, #0
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	201e      	movs	r0, #30
 800056c:	f000 f94b 	bl	8000806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <HAL_InitTick+0xf8>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e002      	b.n	800057e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800057e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000582:	4618      	mov	r0, r3
 8000584:	3738      	adds	r7, #56	; 0x38
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	431bde83 	.word	0x431bde83
 8000594:	20000350 	.word	0x20000350
 8000598:	40000800 	.word	0x40000800
 800059c:	20000004 	.word	0x20000004

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
	...

080005cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <TIM4_IRQHandler+0x10>)
 80005d2:	f000 ffcf 	bl	8001574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000350 	.word	0x20000350

080005e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ec:	f7ff fff8 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f2:	490c      	ldr	r1, [pc, #48]	; (8000624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000608:	4c09      	ldr	r4, [pc, #36]	; (8000630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000616:	f002 fc8b 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fdb1 	bl	8000180 <main>
  bx lr
 800061e:	4770      	bx	lr
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000628:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 800062c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000630:	200010f0 	.word	0x200010f0

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>
	...

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_Init+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_Init+0x28>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f8d1 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	200f      	movs	r0, #15
 8000650:	f7ff ff28 	bl	80004a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f7ff feee 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40022000 	.word	0x40022000

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000398 	.word	0x20000398

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000398 	.word	0x20000398

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff4f 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff64 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ffb2 	bl	800078c <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff57 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e169      	b.n	8000b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8158 	bne.w	8000b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a9a      	ldr	r2, [pc, #616]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4a98      	ldr	r2, [pc, #608]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a96      	ldr	r2, [pc, #600]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a94      	ldr	r2, [pc, #592]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a90      	ldr	r2, [pc, #576]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a79      	ldr	r2, [pc, #484]	; (8000b10 <HAL_GPIO_Init+0x2b4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3f      	ldr	r2, [pc, #252]	; (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5a:	492f      	ldr	r1, [pc, #188]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	492c      	ldr	r1, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4928      	ldr	r1, [pc, #160]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4922      	ldr	r1, [pc, #136]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	491e      	ldr	r1, [pc, #120]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4918      	ldr	r1, [pc, #96]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4914      	ldr	r1, [pc, #80]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	490e      	ldr	r1, [pc, #56]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]
 8000af8:	e021      	b.n	8000b3e <HAL_GPIO_Init+0x2e2>
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4909      	ldr	r1, [pc, #36]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f ae8e 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	372c      	adds	r7, #44	; 0x2c
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43d9      	mvns	r1, r3
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	611a      	str	r2, [r3, #16]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e272      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8087 	beq.w	8000cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be8:	4b92      	ldr	r3, [pc, #584]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d00c      	beq.n	8000c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf4:	4b8f      	ldr	r3, [pc, #572]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d112      	bne.n	8000c26 <HAL_RCC_OscConfig+0x5e>
 8000c00:	4b8c      	ldr	r3, [pc, #560]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0c:	d10b      	bne.n	8000c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0e:	4b89      	ldr	r3, [pc, #548]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d06c      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x12c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d168      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e24c      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2e:	d106      	bne.n	8000c3e <HAL_RCC_OscConfig+0x76>
 8000c30:	4b80      	ldr	r3, [pc, #512]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a7f      	ldr	r2, [pc, #508]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e02e      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10c      	bne.n	8000c60 <HAL_RCC_OscConfig+0x98>
 8000c46:	4b7b      	ldr	r3, [pc, #492]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b78      	ldr	r3, [pc, #480]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a77      	ldr	r2, [pc, #476]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e01d      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c68:	d10c      	bne.n	8000c84 <HAL_RCC_OscConfig+0xbc>
 8000c6a:	4b72      	ldr	r3, [pc, #456]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a71      	ldr	r2, [pc, #452]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b6f      	ldr	r3, [pc, #444]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a6e      	ldr	r2, [pc, #440]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e00b      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c84:	4b6b      	ldr	r3, [pc, #428]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a6a      	ldr	r2, [pc, #424]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b68      	ldr	r3, [pc, #416]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a67      	ldr	r2, [pc, #412]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d013      	beq.n	8000ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fcf0 	bl	8000688 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fcec 	bl	8000688 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e200      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f0      	beq.n	8000cac <HAL_RCC_OscConfig+0xe4>
 8000cca:	e014      	b.n	8000cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fcdc 	bl	8000688 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fcd8 	bl	8000688 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1ec      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x10c>
 8000cf2:	e000      	b.n	8000cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d063      	beq.n	8000dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00b      	beq.n	8000d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0e:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d11c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x18c>
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d116      	bne.n	8000d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_RCC_OscConfig+0x176>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d001      	beq.n	8000d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e1c0      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4939      	ldr	r1, [pc, #228]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d52:	e03a      	b.n	8000dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d020      	beq.n	8000d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc91 	bl	8000688 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fc8d 	bl	8000688 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e1a1      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	4927      	ldr	r1, [pc, #156]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_RCC_OscConfig+0x270>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc70 	bl	8000688 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc6c 	bl	8000688 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e180      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d03a      	beq.n	8000e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d019      	beq.n	8000e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_RCC_OscConfig+0x274>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc50 	bl	8000688 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc4c 	bl	8000688 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e160      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 faea 	bl	80013e4 <RCC_Delay>
 8000e10:	e01c      	b.n	8000e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_RCC_OscConfig+0x274>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e18:	f7ff fc36 	bl	8000688 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1e:	e00f      	b.n	8000e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fc32 	bl	8000688 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d908      	bls.n	8000e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e146      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	42420000 	.word	0x42420000
 8000e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	4b92      	ldr	r3, [pc, #584]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e9      	bne.n	8000e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80a6 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10d      	bne.n	8000e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a87      	ldr	r2, [pc, #540]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b85      	ldr	r3, [pc, #532]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e82:	2301      	movs	r3, #1
 8000e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e86:	4b82      	ldr	r3, [pc, #520]	; (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d118      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e92:	4b7f      	ldr	r3, [pc, #508]	; (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7e      	ldr	r2, [pc, #504]	; (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fbf3 	bl	8000688 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea6:	f7ff fbef 	bl	8000688 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e103      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	4b75      	ldr	r3, [pc, #468]	; (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x312>
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a6e      	ldr	r2, [pc, #440]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e02d      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10c      	bne.n	8000efc <HAL_RCC_OscConfig+0x334>
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a69      	ldr	r2, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	e01c      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d10c      	bne.n	8000f1e <HAL_RCC_OscConfig+0x356>
 8000f04:	4b61      	ldr	r3, [pc, #388]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a60      	ldr	r2, [pc, #384]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6213      	str	r3, [r2, #32]
 8000f10:	4b5e      	ldr	r3, [pc, #376]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a5d      	ldr	r2, [pc, #372]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	e00b      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a5a      	ldr	r2, [pc, #360]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b58      	ldr	r3, [pc, #352]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a57      	ldr	r2, [pc, #348]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d015      	beq.n	8000f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fba3 	bl	8000688 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fb9f 	bl	8000688 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e0b1      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0ee      	beq.n	8000f46 <HAL_RCC_OscConfig+0x37e>
 8000f68:	e014      	b.n	8000f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb8d 	bl	8000688 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f7ff fb89 	bl	8000688 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e09b      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ee      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d105      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d061      	beq.n	8001080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d146      	bne.n	8001052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc4:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fb5d 	bl	8000688 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fb59 	bl	8000688 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e06d      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff8:	d108      	bne.n	800100c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4921      	ldr	r1, [pc, #132]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a19      	ldr	r1, [r3, #32]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	430b      	orrs	r3, r1
 800101e:	491b      	ldr	r1, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fb2d 	bl	8000688 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001032:	f7ff fb29 	bl	8000688 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e03d      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x46a>
 8001050:	e035      	b.n	80010be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fb16 	bl	8000688 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001060:	f7ff fb12 	bl	8000688 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e026      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x498>
 800107e:	e01e      	b.n	80010be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e019      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
 800108c:	40021000 	.word	0x40021000
 8001090:	40007000 	.word	0x40007000
 8001094:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x500>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0d0      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d910      	bls.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4965      	ldr	r1, [pc, #404]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0b8      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a58      	ldr	r2, [pc, #352]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800114a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	494d      	ldr	r1, [pc, #308]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d040      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d115      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e07f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e073      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 0203 	bic.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4936      	ldr	r1, [pc, #216]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fa64 	bl	8000688 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c4:	f7ff fa60 	bl	8000688 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e053      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d210      	bcs.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e032      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4916      	ldr	r1, [pc, #88]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125a:	f000 f821 	bl	80012a0 <HAL_RCC_GetSysClockFreq>
 800125e:	4602      	mov	r2, r0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	490a      	ldr	r1, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 800126c:	5ccb      	ldrb	r3, [r1, r3]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1cc>)
 8001274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1d0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f912 	bl	80004a4 <HAL_InitTick>

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000
 8001290:	40021000 	.word	0x40021000
 8001294:	08003194 	.word	0x08003194
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x30>
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d003      	beq.n	80012d6 <HAL_RCC_GetSysClockFreq+0x36>
 80012ce:	e027      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	613b      	str	r3, [r7, #16]
      break;
 80012d4:	e027      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_GetSysClockFreq+0x94>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	0c5b      	lsrs	r3, r3, #17
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 8001302:	fb03 f202 	mul.w	r2, r3, r2
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e004      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	613b      	str	r3, [r7, #16]
      break;
 800131e:	e002      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 8001322:	613b      	str	r3, [r7, #16]
      break;
 8001324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001326:	693b      	ldr	r3, [r7, #16]
}
 8001328:	4618      	mov	r0, r3
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200
 800133c:	080031ac 	.word	0x080031ac
 8001340:	080031bc 	.word	0x080031bc
 8001344:	003d0900 	.word	0x003d0900

08001348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_RCC_GetHCLKFreq+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	20000000 	.word	0x20000000

0800135c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001360:	f7ff fff2 	bl	8001348 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	080031a4 	.word	0x080031a4

08001384 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	220f      	movs	r2, #15
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_RCC_GetClockConfig+0x58>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0207 	and.w	r2, r3, #7
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40022000 	.word	0x40022000

080013e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <RCC_Delay+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <RCC_Delay+0x38>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0a5b      	lsrs	r3, r3, #9
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001400:	bf00      	nop
  }
  while (Delay --);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	60fa      	str	r2, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f9      	bne.n	8001400 <RCC_Delay+0x1c>
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000000 	.word	0x20000000
 800141c:	10624dd3 	.word	0x10624dd3

08001420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e041      	b.n	80014b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f839 	bl	80014be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 f9b4 	bl	80017cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d001      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e03a      	b.n	800155e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_TIM_Base_Start_IT+0x98>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00e      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001512:	d009      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_TIM_Base_Start_IT+0x9c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d004      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_TIM_Base_Start_IT+0xa0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d010      	beq.n	800155c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800154a:	e007      	b.n	800155c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40012c00 	.word	0x40012c00
 800156c:	40000400 	.word	0x40000400
 8001570:	40000800 	.word	0x40000800

08001574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d122      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b02      	cmp	r3, #2
 8001596:	d11b      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0202 	mvn.w	r2, #2
 80015a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8ed 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 80015bc:	e005      	b.n	80015ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f8e0 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8ef 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d122      	bne.n	8001624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d11b      	bne.n	8001624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0204 	mvn.w	r2, #4
 80015f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8c3 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 8001610:	e005      	b.n	800161e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f8b6 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f8c5 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b08      	cmp	r3, #8
 8001630:	d122      	bne.n	8001678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	d11b      	bne.n	8001678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0208 	mvn.w	r2, #8
 8001648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2204      	movs	r2, #4
 800164e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f899 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f88c 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f89b 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d122      	bne.n	80016cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b10      	cmp	r3, #16
 8001692:	d11b      	bne.n	80016cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0210 	mvn.w	r2, #16
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2208      	movs	r2, #8
 80016a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f86f 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 80016b8:	e005      	b.n	80016c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f862 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f871 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0201 	mvn.w	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe fe86 	bl	8000404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	2b80      	cmp	r3, #128	; 0x80
 8001704:	d10e      	bne.n	8001724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d107      	bne.n	8001724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8bf 	bl	80018a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	2b40      	cmp	r3, #64	; 0x40
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d107      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f835 	bl	80017ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b20      	cmp	r3, #32
 800175c:	d10e      	bne.n	800177c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d107      	bne.n	800177c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0220 	mvn.w	r2, #32
 8001774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f88a 	bl	8001890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00b      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ea:	d007      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a26      	ldr	r2, [pc, #152]	; (8001888 <TIM_Base_SetConfig+0xbc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d003      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <TIM_Base_SetConfig+0xc0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d108      	bne.n	800180e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00b      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d007      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <TIM_Base_SetConfig+0xbc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d003      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <TIM_Base_SetConfig+0xc0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d103      	bne.n	8001874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	615a      	str	r2, [r3, #20]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	2b84      	cmp	r3, #132	; 0x84
 80018c8:	d005      	beq.n	80018d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80018ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	3303      	adds	r3, #3
 80018d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80018e6:	f000 fc1d 	bl	8002124 <vTaskStartScheduler>
  
  return osOK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d020      	beq.n	8001944 <osThreadCreate+0x54>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685c      	ldr	r4, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681d      	ldr	r5, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691e      	ldr	r6, [r3, #16]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffc9 	bl	80018b4 <makeFreeRtosPriority>
 8001922:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800192c:	9202      	str	r2, [sp, #8]
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	9100      	str	r1, [sp, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4632      	mov	r2, r6
 8001936:	4629      	mov	r1, r5
 8001938:	4620      	mov	r0, r4
 800193a:	f000 f8f4 	bl	8001b26 <xTaskCreateStatic>
 800193e:	4603      	mov	r3, r0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e01c      	b.n	800197e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685c      	ldr	r4, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001950:	b29e      	uxth	r6, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffab 	bl	80018b4 <makeFreeRtosPriority>
 800195e:	4602      	mov	r2, r0
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4632      	mov	r2, r6
 800196c:	4629      	mov	r1, r5
 800196e:	4620      	mov	r0, r4
 8001970:	f000 f935 	bl	8001bde <xTaskCreate>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001988 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <osDelay+0x16>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	e000      	b.n	80019a0 <osDelay+0x18>
 800199e:	2301      	movs	r3, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fa61 	bl	8001e68 <vTaskDelay>
  
  return osOK;
 80019a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fa89 	bl	8001ed0 <vTaskSuspend>
  
  return osOK;
 80019be:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 0208 	add.w	r2, r3, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0208 	add.w	r2, r3, #8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 0208 	add.w	r2, r3, #8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d103      	bne.n	8001a84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e00c      	b.n	8001a9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3308      	adds	r3, #8
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e002      	b.n	8001a92 <vListInsert+0x2e>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d2f6      	bcs.n	8001a8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6892      	ldr	r2, [r2, #8]
 8001aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6852      	ldr	r2, [r2, #4]
 8001af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d103      	bne.n	8001b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b08e      	sub	sp, #56	; 0x38
 8001b2a:	af04      	add	r7, sp, #16
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b4c:	bf00      	nop
 8001b4e:	e7fe      	b.n	8001b4e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <xTaskCreateStatic+0x46>
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	61fb      	str	r3, [r7, #28]
}
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b6c:	23b4      	movs	r3, #180	; 0xb4
 8001b6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2bb4      	cmp	r3, #180	; 0xb4
 8001b74:	d00a      	beq.n	8001b8c <xTaskCreateStatic+0x66>
	__asm volatile
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	61bb      	str	r3, [r7, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	e7fe      	b.n	8001b8a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01e      	beq.n	8001bd0 <xTaskCreateStatic+0xaa>
 8001b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01b      	beq.n	8001bd0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001baa:	2300      	movs	r3, #0
 8001bac:	9303      	str	r3, [sp, #12]
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f850 	bl	8001c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bca:	f000 f8e3 	bl	8001d94 <prvAddNewTaskToReadyList>
 8001bce:	e001      	b.n	8001bd4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001bd4:	697b      	ldr	r3, [r7, #20]
	}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b08c      	sub	sp, #48	; 0x30
 8001be2:	af04      	add	r7, sp, #16
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 ffc4 	bl	8002b80 <pvPortMalloc>
 8001bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00e      	beq.n	8001c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c00:	20b4      	movs	r0, #180	; 0xb4
 8001c02:	f000 ffbd 	bl	8002b80 <pvPortMalloc>
 8001c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
 8001c14:	e005      	b.n	8001c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f001 f876 	bl	8002d08 <vPortFree>
 8001c1c:	e001      	b.n	8001c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	2300      	movs	r3, #0
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f80e 	bl	8001c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c4c:	69f8      	ldr	r0, [r7, #28]
 8001c4e:	f000 f8a1 	bl	8001d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e002      	b.n	8001c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c80:	3b01      	subs	r3, #1
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f023 0307 	bic.w	r3, r3, #7
 8001c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	617b      	str	r3, [r7, #20]
}
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	e012      	b.n	8001cdc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	7819      	ldrb	r1, [r3, #0]
 8001cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3334      	adds	r3, #52	; 0x34
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d9e9      	bls.n	8001cb6 <prvInitialiseNewTask+0x4e>
 8001ce2:	e000      	b.n	8001ce6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001ce4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d901      	bls.n	8001cf8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	2200      	movs	r2, #0
 8001d08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe79 	bl	8001a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	3318      	adds	r3, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe74 	bl	8001a06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	f1c3 0207 	rsb	r2, r3, #7
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	334c      	adds	r3, #76	; 0x4c
 8001d48:	2260      	movs	r2, #96	; 0x60
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f915 	bl	8002f7c <memset>
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <prvInitialiseNewTask+0x120>)
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <prvInitialiseNewTask+0x124>)
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <prvInitialiseNewTask+0x128>)
 8001d62:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	69b8      	ldr	r0, [r7, #24]
 8001d6a:	f000 fd53 	bl	8002814 <pxPortInitialiseStack>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	080031e0 	.word	0x080031e0
 8001d8c:	08003200 	.word	0x08003200
 8001d90:	080031c0 	.word	0x080031c0

08001d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d9c:	f000 fe2e 	bl	80029fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <prvAddNewTaskToReadyList+0xb8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <prvAddNewTaskToReadyList+0xb8>)
 8001da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <prvAddNewTaskToReadyList+0xbc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <prvAddNewTaskToReadyList+0xbc>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <prvAddNewTaskToReadyList+0xb8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d110      	bne.n	8001de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001dc0:	f000 fbfc 	bl	80025bc <prvInitialiseTaskLists>
 8001dc4:	e00d      	b.n	8001de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <prvAddNewTaskToReadyList+0xc0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <prvAddNewTaskToReadyList+0xbc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d802      	bhi.n	8001de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <prvAddNewTaskToReadyList+0xbc>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <prvAddNewTaskToReadyList+0xc4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <prvAddNewTaskToReadyList+0xc4>)
 8001dea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <prvAddNewTaskToReadyList+0xc8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <prvAddNewTaskToReadyList+0xc8>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <prvAddNewTaskToReadyList+0xcc>)
 8001e0c:	441a      	add	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7ff fe02 	bl	8001a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e1a:	f000 fe1f 	bl	8002a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <prvAddNewTaskToReadyList+0xc0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <prvAddNewTaskToReadyList+0xbc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <prvAddNewTaskToReadyList+0xd0>)
 8001e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000049c 	.word	0x2000049c
 8001e50:	2000039c 	.word	0x2000039c
 8001e54:	200004a8 	.word	0x200004a8
 8001e58:	200004b8 	.word	0x200004b8
 8001e5c:	200004a4 	.word	0x200004a4
 8001e60:	200003a0 	.word	0x200003a0
 8001e64:	e000ed04 	.word	0xe000ed04

08001e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d017      	beq.n	8001eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <vTaskDelay+0x60>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <vTaskDelay+0x30>
	__asm volatile
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	60bb      	str	r3, [r7, #8]
}
 8001e94:	bf00      	nop
 8001e96:	e7fe      	b.n	8001e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e98:	f000 f9ae 	bl	80021f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fc52 	bl	8002748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001ea4:	f000 f9b6 	bl	8002214 <xTaskResumeAll>
 8001ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <vTaskDelay+0x64>)
 8001eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200004c4 	.word	0x200004c4
 8001ecc:	e000ed04 	.word	0xe000ed04

08001ed0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001ed8:	f000 fd90 	bl	80029fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <vTaskSuspend+0x18>
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <vTaskSuspend+0x104>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e000      	b.n	8001eea <vTaskSuspend+0x1a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fdef 	bl	8001ad4 <uxListRemove>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d115      	bne.n	8001f28 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <vTaskSuspend+0x108>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <vTaskSuspend+0x58>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	2201      	movs	r2, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <vTaskSuspend+0x10c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4013      	ands	r3, r2
 8001f24:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <vTaskSuspend+0x10c>)
 8001f26:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3318      	adds	r3, #24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fdcd 	bl	8001ad4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <vTaskSuspend+0x110>)
 8001f42:	f7ff fd6c 	bl	8001a1e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d103      	bne.n	8001f5a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001f5a:	f000 fd7f 	bl	8002a5c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <vTaskSuspend+0x114>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001f66:	f000 fd49 	bl	80029fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001f6a:	f000 fbc9 	bl	8002700 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001f6e:	f000 fd75 	bl	8002a5c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <vTaskSuspend+0x104>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d127      	bne.n	8001fcc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <vTaskSuspend+0x114>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d017      	beq.n	8001fb4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <vTaskSuspend+0x118>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <vTaskSuspend+0xd2>
	__asm volatile
 8001f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f90:	f383 8811 	msr	BASEPRI, r3
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	60bb      	str	r3, [r7, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	e7fe      	b.n	8001fa0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <vTaskSuspend+0x11c>)
 8001fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fb2:	e00b      	b.n	8001fcc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <vTaskSuspend+0x110>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <vTaskSuspend+0x120>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d103      	bne.n	8001fc8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <vTaskSuspend+0x104>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
	}
 8001fc6:	e001      	b.n	8001fcc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8001fc8:	f000 fa7e 	bl	80024c8 <vTaskSwitchContext>
	}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000039c 	.word	0x2000039c
 8001fd8:	200003a0 	.word	0x200003a0
 8001fdc:	200004a4 	.word	0x200004a4
 8001fe0:	20000488 	.word	0x20000488
 8001fe4:	200004a8 	.word	0x200004a8
 8001fe8:	200004c4 	.word	0x200004c4
 8001fec:	e000ed04 	.word	0xe000ed04
 8001ff0:	2000049c 	.word	0x2000049c

08001ff4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10a      	bne.n	8002020 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	60fb      	str	r3, [r7, #12]
}
 800201c:	bf00      	nop
 800201e:	e7fe      	b.n	800201e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <prvTaskIsTaskSuspended+0x6c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <prvTaskIsTaskSuspended+0x3a>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <prvTaskIsTaskSuspended+0x3c>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00f      	beq.n	8002054 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <prvTaskIsTaskSuspended+0x70>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <prvTaskIsTaskSuspended+0x56>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <prvTaskIsTaskSuspended+0x58>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8002050:	2301      	movs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002054:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002056:	4618      	mov	r0, r3
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000488 	.word	0x20000488
 8002064:	2000045c 	.word	0x2000045c

08002068 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <vTaskResume+0x28>
	__asm volatile
 800207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207e:	f383 8811 	msr	BASEPRI, r3
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	60bb      	str	r3, [r7, #8]
}
 800208c:	bf00      	nop
 800208e:	e7fe      	b.n	800208e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d039      	beq.n	800210a <vTaskResume+0xa2>
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <vTaskResume+0xac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d034      	beq.n	800210a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80020a0:	f000 fcac 	bl	80029fc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ffa5 	bl	8001ff4 <prvTaskIsTaskSuspended>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02a      	beq.n	8002106 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fd0d 	bl	8001ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	2201      	movs	r2, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <vTaskResume+0xb0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	4a13      	ldr	r2, [pc, #76]	; (8002118 <vTaskResume+0xb0>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <vTaskResume+0xb4>)
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3304      	adds	r3, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f7ff fc9b 	bl	8001a1e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <vTaskResume+0xac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d307      	bcc.n	8002106 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <vTaskResume+0xb8>)
 80020f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002106:	f000 fca9 	bl	8002a5c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000039c 	.word	0x2000039c
 8002118:	200004a4 	.word	0x200004a4
 800211c:	200003a0 	.word	0x200003a0
 8002120:	e000ed04 	.word	0xe000ed04

08002124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002132:	463a      	mov	r2, r7
 8002134:	1d39      	adds	r1, r7, #4
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f808 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	9202      	str	r2, [sp, #8]
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2300      	movs	r3, #0
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	460a      	mov	r2, r1
 8002152:	4921      	ldr	r1, [pc, #132]	; (80021d8 <vTaskStartScheduler+0xb4>)
 8002154:	4821      	ldr	r0, [pc, #132]	; (80021dc <vTaskStartScheduler+0xb8>)
 8002156:	f7ff fce6 	bl	8001b26 <xTaskCreateStatic>
 800215a:	4603      	mov	r3, r0
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <vTaskStartScheduler+0xbc>)
 800215e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <vTaskStartScheduler+0xbc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002168:	2301      	movs	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e001      	b.n	8002172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d11b      	bne.n	80021b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	613b      	str	r3, [r7, #16]
}
 800218a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <vTaskStartScheduler+0xc0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	334c      	adds	r3, #76	; 0x4c
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <vTaskStartScheduler+0xc4>)
 8002194:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <vTaskStartScheduler+0xc8>)
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <vTaskStartScheduler+0xcc>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <vTaskStartScheduler+0xd0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021aa:	f000 fbb5 	bl	8002918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80021ae:	e00e      	b.n	80021ce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d10a      	bne.n	80021ce <vTaskStartScheduler+0xaa>
	__asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	60fb      	str	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <vTaskStartScheduler+0xa8>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	0800318c 	.word	0x0800318c
 80021dc:	0800258d 	.word	0x0800258d
 80021e0:	200004c0 	.word	0x200004c0
 80021e4:	2000039c 	.word	0x2000039c
 80021e8:	20000010 	.word	0x20000010
 80021ec:	200004bc 	.word	0x200004bc
 80021f0:	200004a8 	.word	0x200004a8
 80021f4:	200004a0 	.word	0x200004a0

080021f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <vTaskSuspendAll+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a03      	ldr	r2, [pc, #12]	; (8002210 <vTaskSuspendAll+0x18>)
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200004c4 	.word	0x200004c4

08002214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002222:	4b41      	ldr	r3, [pc, #260]	; (8002328 <xTaskResumeAll+0x114>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <xTaskResumeAll+0x2c>
	__asm volatile
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	603b      	str	r3, [r7, #0]
}
 800223c:	bf00      	nop
 800223e:	e7fe      	b.n	800223e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002240:	f000 fbdc 	bl	80029fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <xTaskResumeAll+0x114>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a37      	ldr	r2, [pc, #220]	; (8002328 <xTaskResumeAll+0x114>)
 800224c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <xTaskResumeAll+0x114>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d161      	bne.n	800231a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <xTaskResumeAll+0x118>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d05d      	beq.n	800231a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800225e:	e02e      	b.n	80022be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <xTaskResumeAll+0x11c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3318      	adds	r3, #24
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fc31 	bl	8001ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3304      	adds	r3, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fc2c 	bl	8001ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2201      	movs	r2, #1
 8002282:	409a      	lsls	r2, r3
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <xTaskResumeAll+0x120>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <xTaskResumeAll+0x120>)
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4a27      	ldr	r2, [pc, #156]	; (8002338 <xTaskResumeAll+0x124>)
 800229c:	441a      	add	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3304      	adds	r3, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff fbba 	bl	8001a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <xTaskResumeAll+0x128>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d302      	bcc.n	80022be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <xTaskResumeAll+0x12c>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <xTaskResumeAll+0x11c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1cc      	bne.n	8002260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022cc:	f000 fa18 	bl	8002700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <xTaskResumeAll+0x130>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80022dc:	f000 f836 	bl	800234c <xTaskIncrementTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <xTaskResumeAll+0x12c>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f1      	bne.n	80022dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <xTaskResumeAll+0x130>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <xTaskResumeAll+0x12c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002306:	2301      	movs	r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <xTaskResumeAll+0x134>)
 800230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800231a:	f000 fb9f 	bl	8002a5c <vPortExitCritical>

	return xAlreadyYielded;
 800231e:	68bb      	ldr	r3, [r7, #8]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200004c4 	.word	0x200004c4
 800232c:	2000049c 	.word	0x2000049c
 8002330:	2000045c 	.word	0x2000045c
 8002334:	200004a4 	.word	0x200004a4
 8002338:	200003a0 	.word	0x200003a0
 800233c:	2000039c 	.word	0x2000039c
 8002340:	200004b0 	.word	0x200004b0
 8002344:	200004ac 	.word	0x200004ac
 8002348:	e000ed04 	.word	0xe000ed04

0800234c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <xTaskIncrementTick+0x150>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 808d 	bne.w	800247a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <xTaskIncrementTick+0x154>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002368:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <xTaskIncrementTick+0x154>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d120      	bne.n	80023b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <xTaskIncrementTick+0x158>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <xTaskIncrementTick+0x48>
	__asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	603b      	str	r3, [r7, #0]
}
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <xTaskIncrementTick+0x46>
 8002394:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <xTaskIncrementTick+0x158>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <xTaskIncrementTick+0x15c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a41      	ldr	r2, [pc, #260]	; (80024a4 <xTaskIncrementTick+0x158>)
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <xTaskIncrementTick+0x15c>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <xTaskIncrementTick+0x160>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <xTaskIncrementTick+0x160>)
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	f000 f9a5 	bl	8002700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <xTaskIncrementTick+0x164>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d34d      	bcc.n	800245c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <xTaskIncrementTick+0x158>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <xTaskIncrementTick+0x82>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <xTaskIncrementTick+0x84>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <xTaskIncrementTick+0x164>)
 80023d6:	f04f 32ff 	mov.w	r2, #4294967295
 80023da:	601a      	str	r2, [r3, #0]
					break;
 80023dc:	e03e      	b.n	800245c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <xTaskIncrementTick+0x158>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d203      	bcs.n	80023fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023f6:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <xTaskIncrementTick+0x164>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6013      	str	r3, [r2, #0]
						break;
 80023fc:	e02e      	b.n	800245c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3304      	adds	r3, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fb66 	bl	8001ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3318      	adds	r3, #24
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb5d 	bl	8001ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	2201      	movs	r2, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <xTaskIncrementTick+0x168>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <xTaskIncrementTick+0x168>)
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <xTaskIncrementTick+0x16c>)
 800243a:	441a      	add	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff faeb 	bl	8001a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <xTaskIncrementTick+0x170>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	429a      	cmp	r2, r3
 8002454:	d3b4      	bcc.n	80023c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002456:	2301      	movs	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800245a:	e7b1      	b.n	80023c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <xTaskIncrementTick+0x170>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4915      	ldr	r1, [pc, #84]	; (80024b8 <xTaskIncrementTick+0x16c>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d907      	bls.n	8002484 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e004      	b.n	8002484 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <xTaskIncrementTick+0x174>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <xTaskIncrementTick+0x174>)
 8002482:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <xTaskIncrementTick+0x178>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800248c:	2301      	movs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002490:	697b      	ldr	r3, [r7, #20]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200004c4 	.word	0x200004c4
 80024a0:	200004a0 	.word	0x200004a0
 80024a4:	20000454 	.word	0x20000454
 80024a8:	20000458 	.word	0x20000458
 80024ac:	200004b4 	.word	0x200004b4
 80024b0:	200004bc 	.word	0x200004bc
 80024b4:	200004a4 	.word	0x200004a4
 80024b8:	200003a0 	.word	0x200003a0
 80024bc:	2000039c 	.word	0x2000039c
 80024c0:	200004ac 	.word	0x200004ac
 80024c4:	200004b0 	.word	0x200004b0

080024c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <vTaskSwitchContext+0xac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <vTaskSwitchContext+0xb0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024dc:	e044      	b.n	8002568 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <vTaskSwitchContext+0xb0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <vTaskSwitchContext+0xb4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	f1c3 031f 	rsb	r3, r3, #31
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	4921      	ldr	r1, [pc, #132]	; (8002580 <vTaskSwitchContext+0xb8>)
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <vTaskSwitchContext+0x5c>
	__asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	607b      	str	r3, [r7, #4]
}
 8002520:	bf00      	nop
 8002522:	e7fe      	b.n	8002522 <vTaskSwitchContext+0x5a>
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <vTaskSwitchContext+0xb8>)
 8002530:	4413      	add	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3308      	adds	r3, #8
 8002546:	429a      	cmp	r2, r3
 8002548:	d104      	bne.n	8002554 <vTaskSwitchContext+0x8c>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <vTaskSwitchContext+0xbc>)
 800255c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <vTaskSwitchContext+0xbc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	334c      	adds	r3, #76	; 0x4c
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <vTaskSwitchContext+0xc0>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200004c4 	.word	0x200004c4
 8002578:	200004b0 	.word	0x200004b0
 800257c:	200004a4 	.word	0x200004a4
 8002580:	200003a0 	.word	0x200003a0
 8002584:	2000039c 	.word	0x2000039c
 8002588:	20000010 	.word	0x20000010

0800258c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002594:	f000 f852 	bl	800263c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <prvIdleTask+0x28>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d9f9      	bls.n	8002594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <prvIdleTask+0x2c>)
 80025a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80025b0:	e7f0      	b.n	8002594 <prvIdleTask+0x8>
 80025b2:	bf00      	nop
 80025b4:	200003a0 	.word	0x200003a0
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	e00c      	b.n	80025e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <prvInitialiseTaskLists+0x60>)
 80025d4:	4413      	add	r3, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f9f6 	bl	80019c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d9ef      	bls.n	80025c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <prvInitialiseTaskLists+0x64>)
 80025ea:	f7ff f9ed 	bl	80019c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <prvInitialiseTaskLists+0x68>)
 80025f0:	f7ff f9ea 	bl	80019c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <prvInitialiseTaskLists+0x6c>)
 80025f6:	f7ff f9e7 	bl	80019c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025fa:	480c      	ldr	r0, [pc, #48]	; (800262c <prvInitialiseTaskLists+0x70>)
 80025fc:	f7ff f9e4 	bl	80019c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <prvInitialiseTaskLists+0x74>)
 8002602:	f7ff f9e1 	bl	80019c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <prvInitialiseTaskLists+0x78>)
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <prvInitialiseTaskLists+0x64>)
 800260a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <prvInitialiseTaskLists+0x7c>)
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <prvInitialiseTaskLists+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200003a0 	.word	0x200003a0
 8002620:	2000042c 	.word	0x2000042c
 8002624:	20000440 	.word	0x20000440
 8002628:	2000045c 	.word	0x2000045c
 800262c:	20000470 	.word	0x20000470
 8002630:	20000488 	.word	0x20000488
 8002634:	20000454 	.word	0x20000454
 8002638:	20000458 	.word	0x20000458

0800263c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002642:	e019      	b.n	8002678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002644:	f000 f9da 	bl	80029fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <prvCheckTasksWaitingTermination+0x50>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fa3d 	bl	8001ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <prvCheckTasksWaitingTermination+0x54>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3b01      	subs	r3, #1
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <prvCheckTasksWaitingTermination+0x54>)
 8002662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <prvCheckTasksWaitingTermination+0x58>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <prvCheckTasksWaitingTermination+0x58>)
 800266c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800266e:	f000 f9f5 	bl	8002a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f810 	bl	8002698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <prvCheckTasksWaitingTermination+0x58>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e1      	bne.n	8002644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000470 	.word	0x20000470
 8002690:	2000049c 	.word	0x2000049c
 8002694:	20000484 	.word	0x20000484

08002698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	334c      	adds	r3, #76	; 0x4c
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fc7f 	bl	8002fa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d108      	bne.n	80026c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fb25 	bl	8002d08 <vPortFree>
				vPortFree( pxTCB );
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb22 	bl	8002d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026c4:	e018      	b.n	80026f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d103      	bne.n	80026d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fb19 	bl	8002d08 <vPortFree>
	}
 80026d6:	e00f      	b.n	80026f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d00a      	beq.n	80026f8 <prvDeleteTCB+0x60>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	60fb      	str	r3, [r7, #12]
}
 80026f4:	bf00      	nop
 80026f6:	e7fe      	b.n	80026f6 <prvDeleteTCB+0x5e>
	}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <prvResetNextTaskUnblockTime+0x40>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <prvResetNextTaskUnblockTime+0x14>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <prvResetNextTaskUnblockTime+0x16>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <prvResetNextTaskUnblockTime+0x44>)
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002722:	e008      	b.n	8002736 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <prvResetNextTaskUnblockTime+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <prvResetNextTaskUnblockTime+0x44>)
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000454 	.word	0x20000454
 8002744:	200004bc 	.word	0x200004bc

08002748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002752:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3304      	adds	r3, #4
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff f9b8 	bl	8001ad4 <uxListRemove>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2201      	movs	r2, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4013      	ands	r3, r2
 800277e:	4a20      	ldr	r2, [pc, #128]	; (8002800 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d10a      	bne.n	80027a0 <prvAddCurrentTaskToDelayedList+0x58>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3304      	adds	r3, #4
 8002796:	4619      	mov	r1, r3
 8002798:	481a      	ldr	r0, [pc, #104]	; (8002804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800279a:	f7ff f940 	bl	8001a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800279e:	e026      	b.n	80027ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d209      	bcs.n	80027cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3304      	adds	r3, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7ff f94d 	bl	8001a64 <vListInsert>
}
 80027ca:	e010      	b.n	80027ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <prvAddCurrentTaskToDelayedList+0xc4>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff f943 	bl	8001a64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d202      	bcs.n	80027ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200004a0 	.word	0x200004a0
 80027fc:	2000039c 	.word	0x2000039c
 8002800:	200004a4 	.word	0x200004a4
 8002804:	20000488 	.word	0x20000488
 8002808:	20000458 	.word	0x20000458
 800280c:	20000454 	.word	0x20000454
 8002810:	200004bc 	.word	0x200004bc

08002814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b04      	subs	r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800282c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3b04      	subs	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f023 0201 	bic.w	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3b04      	subs	r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <pxPortInitialiseStack+0x54>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b14      	subs	r3, #20
 800284e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b20      	subs	r3, #32
 800285a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	0800286d 	.word	0x0800286d

0800286c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <prvTaskExitError+0x54>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d00a      	beq.n	8002896 <prvTaskExitError+0x2a>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	60fb      	str	r3, [r7, #12]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <prvTaskExitError+0x28>
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	60bb      	str	r3, [r7, #8]
}
 80028a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80028aa:	bf00      	nop
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0fc      	beq.n	80028ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000000c 	.word	0x2000000c
	...

080028d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <pxCurrentTCBConst2>)
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	6808      	ldr	r0, [r1, #0]
 80028d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028da:	f380 8809 	msr	PSP, r0
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f380 8811 	msr	BASEPRI, r0
 80028ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80028ee:	4770      	bx	lr

080028f0 <pxCurrentTCBConst2>:
 80028f0:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop

080028f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <prvPortStartFirstTask+0x1c>)
 80028fa:	6800      	ldr	r0, [r0, #0]
 80028fc:	6800      	ldr	r0, [r0, #0]
 80028fe:	f380 8808 	msr	MSP, r0
 8002902:	b662      	cpsie	i
 8002904:	b661      	cpsie	f
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	df00      	svc	0
 8002910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002912:	bf00      	nop
 8002914:	e000ed08 	.word	0xe000ed08

08002918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <xPortStartScheduler+0xd0>)
 8002920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <xPortStartScheduler+0xd4>)
 8002944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800294c:	e009      	b.n	8002962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3b01      	subs	r3, #1
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d0ef      	beq.n	800294e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00a      	beq.n	8002990 <xPortStartScheduler+0x78>
	__asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	60bb      	str	r3, [r7, #8]
}
 800298c:	bf00      	nop
 800298e:	e7fe      	b.n	800298e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <xPortStartScheduler+0xd8>)
 8002998:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <xPortStartScheduler+0xd8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <xPortStartScheduler+0xd8>)
 80029a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <xPortStartScheduler+0xdc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <xPortStartScheduler+0xdc>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <xPortStartScheduler+0xdc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <xPortStartScheduler+0xdc>)
 80029c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80029c6:	f000 f8b9 	bl	8002b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <xPortStartScheduler+0xe0>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80029d0:	f7ff ff92 	bl	80028f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80029d4:	f7ff fd78 	bl	80024c8 <vTaskSwitchContext>
	prvTaskExitError();
 80029d8:	f7ff ff48 	bl	800286c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e400 	.word	0xe000e400
 80029ec:	200004c8 	.word	0x200004c8
 80029f0:	200004cc 	.word	0x200004cc
 80029f4:	e000ed20 	.word	0xe000ed20
 80029f8:	2000000c 	.word	0x2000000c

080029fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	607b      	str	r3, [r7, #4]
}
 8002a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <vPortEnterCritical+0x58>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <vPortEnterCritical+0x58>)
 8002a1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <vPortEnterCritical+0x58>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10f      	bne.n	8002a48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <vPortEnterCritical+0x5c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <vPortEnterCritical+0x4c>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	603b      	str	r3, [r7, #0]
}
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <vPortEnterCritical+0x4a>
	}
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	e000ed04 	.word	0xe000ed04

08002a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <vPortExitCritical+0x4c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <vPortExitCritical+0x24>
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	607b      	str	r3, [r7, #4]
}
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <vPortExitCritical+0x4c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <vPortExitCritical+0x4c>)
 8002a88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <vPortExitCritical+0x4c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <vPortExitCritical+0x42>
 8002a92:	2300      	movs	r3, #0
 8002a94:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	00000000 	.word	0x00000000

08002ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ab0:	f3ef 8009 	mrs	r0, PSP
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <pxCurrentTCBConst>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ac0:	6010      	str	r0, [r2, #0]
 8002ac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002ac6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aca:	f380 8811 	msr	BASEPRI, r0
 8002ace:	f7ff fcfb 	bl	80024c8 <vTaskSwitchContext>
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8811 	msr	BASEPRI, r0
 8002ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	6808      	ldr	r0, [r1, #0]
 8002ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ae6:	f380 8809 	msr	PSP, r0
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	4770      	bx	lr

08002af0 <pxCurrentTCBConst>:
 8002af0:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop

08002af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
}
 8002b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b12:	f7ff fc1b 	bl	800234c <xTaskIncrementTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SysTick_Handler+0x40>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f383 8811 	msr	BASEPRI, r3
}
 8002b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <vPortSetupTimerInterrupt+0x30>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <vPortSetupTimerInterrupt+0x34>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <vPortSetupTimerInterrupt+0x38>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <vPortSetupTimerInterrupt+0x3c>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <vPortSetupTimerInterrupt+0x40>)
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b5e:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <vPortSetupTimerInterrupt+0x30>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e010 	.word	0xe000e010
 8002b70:	e000e018 	.word	0xe000e018
 8002b74:	20000000 	.word	0x20000000
 8002b78:	10624dd3 	.word	0x10624dd3
 8002b7c:	e000e014 	.word	0xe000e014

08002b80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002b8c:	f7ff fb34 	bl	80021f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002b90:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <pvPortMalloc+0x174>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002b98:	f000 f910 	bl	8002dbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b9c:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <pvPortMalloc+0x178>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 808e 	bne.w	8002cc6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01d      	beq.n	8002bec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d014      	beq.n	8002bec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
 8002bc8:	3308      	adds	r3, #8
 8002bca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <pvPortMalloc+0x6c>
	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	617b      	str	r3, [r7, #20]
}
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d069      	beq.n	8002cc6 <pvPortMalloc+0x146>
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <pvPortMalloc+0x17c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d864      	bhi.n	8002cc6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <pvPortMalloc+0x180>)
 8002bfe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <pvPortMalloc+0x180>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c06:	e004      	b.n	8002c12 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d903      	bls.n	8002c24 <pvPortMalloc+0xa4>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f1      	bne.n	8002c08 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <pvPortMalloc+0x174>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d04b      	beq.n	8002cc6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	4413      	add	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	2308      	movs	r3, #8
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d91f      	bls.n	8002c90 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <pvPortMalloc+0xf8>
	__asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	613b      	str	r3, [r7, #16]
}
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c8a:	69b8      	ldr	r0, [r7, #24]
 8002c8c:	f000 f8f8 	bl	8002e80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <pvPortMalloc+0x17c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <pvPortMalloc+0x17c>)
 8002c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <pvPortMalloc+0x17c>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <pvPortMalloc+0x184>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d203      	bcs.n	8002cb2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <pvPortMalloc+0x17c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <pvPortMalloc+0x184>)
 8002cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <pvPortMalloc+0x178>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002cc6:	f7ff faa5 	bl	8002214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <pvPortMalloc+0x16a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60fb      	str	r3, [r7, #12]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <pvPortMalloc+0x168>
	return pvReturn;
 8002cea:	69fb      	ldr	r3, [r7, #28]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200010d8 	.word	0x200010d8
 8002cf8:	200010e4 	.word	0x200010e4
 8002cfc:	200010dc 	.word	0x200010dc
 8002d00:	200010d0 	.word	0x200010d0
 8002d04:	200010e0 	.word	0x200010e0

08002d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d048      	beq.n	8002dac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4413      	add	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <vPortFree+0xac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <vPortFree+0x44>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60fb      	str	r3, [r7, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <vPortFree+0x62>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	60bb      	str	r3, [r7, #8]
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <vPortFree+0xac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d019      	beq.n	8002dac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d115      	bne.n	8002dac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <vPortFree+0xac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002d90:	f7ff fa32 	bl	80021f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <vPortFree+0xb0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <vPortFree+0xb0>)
 8002da0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002da2:	6938      	ldr	r0, [r7, #16]
 8002da4:	f000 f86c 	bl	8002e80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002da8:	f7ff fa34 	bl	8002214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200010e4 	.word	0x200010e4
 8002db8:	200010dc 	.word	0x200010dc

08002dbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <prvHeapInit+0xac>)
 8002dca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00c      	beq.n	8002df0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3307      	adds	r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0307 	bic.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <prvHeapInit+0xac>)
 8002dec:	4413      	add	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <prvHeapInit+0xb0>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <prvHeapInit+0xb0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	4413      	add	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e08:	2208      	movs	r2, #8
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <prvHeapInit+0xb4>)
 8002e1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <prvHeapInit+0xb4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <prvHeapInit+0xb4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <prvHeapInit+0xb4>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <prvHeapInit+0xb8>)
 8002e4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <prvHeapInit+0xbc>)
 8002e52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <prvHeapInit+0xc0>)
 8002e56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200004d0 	.word	0x200004d0
 8002e6c:	200010d0 	.word	0x200010d0
 8002e70:	200010d8 	.word	0x200010d8
 8002e74:	200010e0 	.word	0x200010e0
 8002e78:	200010dc 	.word	0x200010dc
 8002e7c:	200010e4 	.word	0x200010e4

08002e80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <prvInsertBlockIntoFreeList+0xa8>)
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e002      	b.n	8002e94 <prvInsertBlockIntoFreeList+0x14>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d8f7      	bhi.n	8002e8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d108      	bne.n	8002ec2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	441a      	add	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d118      	bne.n	8002f08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <prvInsertBlockIntoFreeList+0xac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d00d      	beq.n	8002efe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e008      	b.n	8002f10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <prvInsertBlockIntoFreeList+0xac>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e003      	b.n	8002f10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d002      	beq.n	8002f1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	200010d0 	.word	0x200010d0
 8002f2c:	200010d8 	.word	0x200010d8

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2600      	movs	r6, #0
 8002f34:	4d0c      	ldr	r5, [pc, #48]	; (8002f68 <__libc_init_array+0x38>)
 8002f36:	4c0d      	ldr	r4, [pc, #52]	; (8002f6c <__libc_init_array+0x3c>)
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	42a6      	cmp	r6, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	f000 f8e2 	bl	8003108 <_init>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4d0a      	ldr	r5, [pc, #40]	; (8002f70 <__libc_init_array+0x40>)
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <__libc_init_array+0x44>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	42a6      	cmp	r6, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f58:	4798      	blx	r3
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f62:	4798      	blx	r3
 8002f64:	3601      	adds	r6, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08003220 	.word	0x08003220
 8002f6c:	08003220 	.word	0x08003220
 8002f70:	08003220 	.word	0x08003220
 8002f74:	08003224 	.word	0x08003224

08002f78 <__retarget_lock_acquire_recursive>:
 8002f78:	4770      	bx	lr

08002f7a <__retarget_lock_release_recursive>:
 8002f7a:	4770      	bx	lr

08002f7c <memset>:
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4402      	add	r2, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <cleanup_glue>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	460c      	mov	r4, r1
 8002f90:	6809      	ldr	r1, [r1, #0]
 8002f92:	4605      	mov	r5, r0
 8002f94:	b109      	cbz	r1, 8002f9a <cleanup_glue+0xe>
 8002f96:	f7ff fff9 	bl	8002f8c <cleanup_glue>
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa2:	f000 b869 	b.w	8003078 <_free_r>
	...

08002fa8 <_reclaim_reent>:
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <_reclaim_reent+0xb4>)
 8002faa:	b570      	push	{r4, r5, r6, lr}
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4283      	cmp	r3, r0
 8002fb2:	d051      	beq.n	8003058 <_reclaim_reent+0xb0>
 8002fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fb6:	b143      	cbz	r3, 8002fca <_reclaim_reent+0x22>
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d14a      	bne.n	8003054 <_reclaim_reent+0xac>
 8002fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	b111      	cbz	r1, 8002fca <_reclaim_reent+0x22>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 f857 	bl	8003078 <_free_r>
 8002fca:	6961      	ldr	r1, [r4, #20]
 8002fcc:	b111      	cbz	r1, 8002fd4 <_reclaim_reent+0x2c>
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 f852 	bl	8003078 <_free_r>
 8002fd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fd6:	b111      	cbz	r1, 8002fde <_reclaim_reent+0x36>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 f84d 	bl	8003078 <_free_r>
 8002fde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fe0:	b111      	cbz	r1, 8002fe8 <_reclaim_reent+0x40>
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f000 f848 	bl	8003078 <_free_r>
 8002fe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fea:	b111      	cbz	r1, 8002ff2 <_reclaim_reent+0x4a>
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 f843 	bl	8003078 <_free_r>
 8002ff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ff4:	b111      	cbz	r1, 8002ffc <_reclaim_reent+0x54>
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 f83e 	bl	8003078 <_free_r>
 8002ffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002ffe:	b111      	cbz	r1, 8003006 <_reclaim_reent+0x5e>
 8003000:	4620      	mov	r0, r4
 8003002:	f000 f839 	bl	8003078 <_free_r>
 8003006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003008:	b111      	cbz	r1, 8003010 <_reclaim_reent+0x68>
 800300a:	4620      	mov	r0, r4
 800300c:	f000 f834 	bl	8003078 <_free_r>
 8003010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003012:	b111      	cbz	r1, 800301a <_reclaim_reent+0x72>
 8003014:	4620      	mov	r0, r4
 8003016:	f000 f82f 	bl	8003078 <_free_r>
 800301a:	69a3      	ldr	r3, [r4, #24]
 800301c:	b1e3      	cbz	r3, 8003058 <_reclaim_reent+0xb0>
 800301e:	4620      	mov	r0, r4
 8003020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003022:	4798      	blx	r3
 8003024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003026:	b1b9      	cbz	r1, 8003058 <_reclaim_reent+0xb0>
 8003028:	4620      	mov	r0, r4
 800302a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800302e:	f7ff bfad 	b.w	8002f8c <cleanup_glue>
 8003032:	5949      	ldr	r1, [r1, r5]
 8003034:	b941      	cbnz	r1, 8003048 <_reclaim_reent+0xa0>
 8003036:	3504      	adds	r5, #4
 8003038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800303a:	2d80      	cmp	r5, #128	; 0x80
 800303c:	68d9      	ldr	r1, [r3, #12]
 800303e:	d1f8      	bne.n	8003032 <_reclaim_reent+0x8a>
 8003040:	4620      	mov	r0, r4
 8003042:	f000 f819 	bl	8003078 <_free_r>
 8003046:	e7ba      	b.n	8002fbe <_reclaim_reent+0x16>
 8003048:	680e      	ldr	r6, [r1, #0]
 800304a:	4620      	mov	r0, r4
 800304c:	f000 f814 	bl	8003078 <_free_r>
 8003050:	4631      	mov	r1, r6
 8003052:	e7ef      	b.n	8003034 <_reclaim_reent+0x8c>
 8003054:	2500      	movs	r5, #0
 8003056:	e7ef      	b.n	8003038 <_reclaim_reent+0x90>
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	bf00      	nop
 800305c:	20000010 	.word	0x20000010

08003060 <__malloc_lock>:
 8003060:	4801      	ldr	r0, [pc, #4]	; (8003068 <__malloc_lock+0x8>)
 8003062:	f7ff bf89 	b.w	8002f78 <__retarget_lock_acquire_recursive>
 8003066:	bf00      	nop
 8003068:	200010e8 	.word	0x200010e8

0800306c <__malloc_unlock>:
 800306c:	4801      	ldr	r0, [pc, #4]	; (8003074 <__malloc_unlock+0x8>)
 800306e:	f7ff bf84 	b.w	8002f7a <__retarget_lock_release_recursive>
 8003072:	bf00      	nop
 8003074:	200010e8 	.word	0x200010e8

08003078 <_free_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4605      	mov	r5, r0
 800307c:	2900      	cmp	r1, #0
 800307e:	d040      	beq.n	8003102 <_free_r+0x8a>
 8003080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003084:	1f0c      	subs	r4, r1, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	bfb8      	it	lt
 800308a:	18e4      	addlt	r4, r4, r3
 800308c:	f7ff ffe8 	bl	8003060 <__malloc_lock>
 8003090:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <_free_r+0x8c>)
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	b933      	cbnz	r3, 80030a4 <_free_r+0x2c>
 8003096:	6063      	str	r3, [r4, #4]
 8003098:	6014      	str	r4, [r2, #0]
 800309a:	4628      	mov	r0, r5
 800309c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a0:	f7ff bfe4 	b.w	800306c <__malloc_unlock>
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d908      	bls.n	80030ba <_free_r+0x42>
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	1821      	adds	r1, r4, r0
 80030ac:	428b      	cmp	r3, r1
 80030ae:	bf01      	itttt	eq
 80030b0:	6819      	ldreq	r1, [r3, #0]
 80030b2:	685b      	ldreq	r3, [r3, #4]
 80030b4:	1809      	addeq	r1, r1, r0
 80030b6:	6021      	streq	r1, [r4, #0]
 80030b8:	e7ed      	b.n	8003096 <_free_r+0x1e>
 80030ba:	461a      	mov	r2, r3
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b10b      	cbz	r3, 80030c4 <_free_r+0x4c>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d9fa      	bls.n	80030ba <_free_r+0x42>
 80030c4:	6811      	ldr	r1, [r2, #0]
 80030c6:	1850      	adds	r0, r2, r1
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d10b      	bne.n	80030e4 <_free_r+0x6c>
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	4401      	add	r1, r0
 80030d0:	1850      	adds	r0, r2, r1
 80030d2:	4283      	cmp	r3, r0
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	d1e0      	bne.n	800309a <_free_r+0x22>
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4401      	add	r1, r0
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	6053      	str	r3, [r2, #4]
 80030e2:	e7da      	b.n	800309a <_free_r+0x22>
 80030e4:	d902      	bls.n	80030ec <_free_r+0x74>
 80030e6:	230c      	movs	r3, #12
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	e7d6      	b.n	800309a <_free_r+0x22>
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	1821      	adds	r1, r4, r0
 80030f0:	428b      	cmp	r3, r1
 80030f2:	bf01      	itttt	eq
 80030f4:	6819      	ldreq	r1, [r3, #0]
 80030f6:	685b      	ldreq	r3, [r3, #4]
 80030f8:	1809      	addeq	r1, r1, r0
 80030fa:	6021      	streq	r1, [r4, #0]
 80030fc:	6063      	str	r3, [r4, #4]
 80030fe:	6054      	str	r4, [r2, #4]
 8003100:	e7cb      	b.n	800309a <_free_r+0x22>
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	200010ec 	.word	0x200010ec

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
