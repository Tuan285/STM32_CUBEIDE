
MAIL_QUEUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080062f8  080062f8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062f8  080062f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  08006374  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08006374  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015576  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317a  00000000  00000000  00035613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00038790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4cb  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014201  00000000  00000000  00055003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948dd  00000000  00000000  00069204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005474  00000000  00000000  000fdb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006148 	.word	0x08006148

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006148 	.word	0x08006148

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//--------------PRINTF-------------------------//
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	68b9      	ldr	r1, [r7, #8]
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <_write+0x28>)
 8000198:	f001 fdf8 	bl	8001d8c <HAL_UART_Transmit>
	return len;
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000344 	.word	0x20000344

080001ac <HAL_UART_RxCpltCallback>:
}
#endif

//-------------------- UART RECV -------------------
uint8_t DataRx;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	4912      	ldr	r1, [pc, #72]	; (8000200 <HAL_UART_RxCpltCallback+0x54>)
 80001b8:	4812      	ldr	r0, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x58>)
 80001ba:	f001 fe6a 	bl	8001e92 <HAL_UART_Receive_IT>
	char DataFromISR[15] = "hello nha !";
 80001be:	4a12      	ldr	r2, [pc, #72]	; (8000208 <HAL_UART_RxCpltCallback+0x5c>)
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80001ca:	f107 0314 	add.w	r3, r7, #20
 80001ce:	2100      	movs	r1, #0
 80001d0:	460a      	mov	r2, r1
 80001d2:	801a      	strh	r2, [r3, #0]
 80001d4:	460a      	mov	r2, r1
 80001d6:	709a      	strb	r2, [r3, #2]
	if (DataRx == 'a') {
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <HAL_UART_RxCpltCallback+0x54>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b61      	cmp	r3, #97	; 0x61
 80001de:	d10a      	bne.n	80001f6 <HAL_UART_RxCpltCallback+0x4a>
		printf("Send data from ISR !\n");
 80001e0:	480a      	ldr	r0, [pc, #40]	; (800020c <HAL_UART_RxCpltCallback+0x60>)
 80001e2:	f005 f94f 	bl	8005484 <puts>
		xQueueSendFromISR(QueueTask02Handle, (void* )&DataFromISR, NULL);
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <HAL_UART_RxCpltCallback+0x64>)
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	f107 0108 	add.w	r1, r7, #8
 80001ee:	2300      	movs	r3, #0
 80001f0:	2200      	movs	r2, #0
 80001f2:	f003 f929 	bl	8003448 <xQueueGenericSendFromISR>
	}
}
 80001f6:	bf00      	nop
 80001f8:	3718      	adds	r7, #24
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000039c 	.word	0x2000039c
 8000204:	20000344 	.word	0x20000344
 8000208:	08006184 	.word	0x08006184
 800020c:	0800616c 	.word	0x0800616c
 8000210:	20000398 	.word	0x20000398

08000214 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b08e      	sub	sp, #56	; 0x38
 8000218:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021a:	f000 fb63 	bl	80008e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021e:	f000 f857 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000222:	f000 f8bb 	bl	800039c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000226:	f000 f88f 	bl	8000348 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Begin Program !!!");
 800022a:	481f      	ldr	r0, [pc, #124]	; (80002a8 <main+0x94>)
 800022c:	f005 f8a4 	bl	8005378 <iprintf>
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	491e      	ldr	r1, [pc, #120]	; (80002ac <main+0x98>)
 8000234:	481e      	ldr	r0, [pc, #120]	; (80002b0 <main+0x9c>)
 8000236:	f001 fe2c 	bl	8001e92 <HAL_UART_Receive_IT>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of Queue01 */
	osMailQDef(Queue01, 16, infor_t);		// cap phat bo nho vaf kieu du lieu
 800023a:	2310      	movs	r3, #16
 800023c:	623b      	str	r3, [r7, #32]
 800023e:	230c      	movs	r3, #12
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
 8000242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
	Queue01Handle = osMailCreate(osMailQ(Queue01), NULL);// khoi tao mail queue
 8000248:	f107 0320 	add.w	r3, r7, #32
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fd52 	bl	8002cf8 <osMailCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <main+0xa0>)
 8000258:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */

	QueueTask02Handle = xQueueCreate(12, 15);
 800025a:	2200      	movs	r2, #0
 800025c:	210f      	movs	r1, #15
 800025e:	200c      	movs	r0, #12
 8000260:	f002 ff96 	bl	8003190 <xQueueGenericCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <main+0xa4>)
 8000268:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0xa8>)
 800026c:	1d3c      	adds	r4, r7, #4
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fbda 	bl	8002a3a <osThreadCreate>
 8000286:	4603      	mov	r3, r0
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <main+0xac>)
 800028a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(Task2, "Task2", 128, NULL, osPriorityAboveNormal + 3,
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xb0>)
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2304      	movs	r3, #4
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	490b      	ldr	r1, [pc, #44]	; (80002c8 <main+0xb4>)
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <main+0xb8>)
 800029c:	f003 fc38 	bl	8003b10 <xTaskCreate>
			&Task2Handle);
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002a0:	f002 fbc4 	bl	8002a2c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002a4:	e7fe      	b.n	80002a4 <main+0x90>
 80002a6:	bf00      	nop
 80002a8:	08006194 	.word	0x08006194
 80002ac:	2000039c 	.word	0x2000039c
 80002b0:	20000344 	.word	0x20000344
 80002b4:	20000390 	.word	0x20000390
 80002b8:	20000398 	.word	0x20000398
 80002bc:	080061b0 	.word	0x080061b0
 80002c0:	2000038c 	.word	0x2000038c
 80002c4:	20000394 	.word	0x20000394
 80002c8:	080061a8 	.word	0x080061a8
 80002cc:	08000435 	.word	0x08000435

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	; 0x40
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 ffad 	bl	800523e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fe66 	bl	8000fd8 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x46>
		Error_Handler();
 8000312:	f000 f8fd 	bl	8000510 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f8d4 	bl	80014dc <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
		Error_Handler();
 800033a:	f000 f8e9 	bl	8000510 <Error_Handler>
	}
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <MX_USART1_UART_Init+0x50>)
 8000350:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000358:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000380:	f001 fcb4 	bl	8001cec <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800038a:	f000 f8c1 	bl	8000510 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000344 	.word	0x20000344
 8000398:	40013800 	.word	0x40013800

0800039c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0x90>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x90>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0x90>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0x94>)
 8000400:	f000 fdb8 	bl	8000f74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0x94>)
 800041e:	f000 fc25 	bl	8000c6c <HAL_GPIO_Init>

}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000

08000434 <Task2>:

/* USER CODE BEGIN 4 */
void Task2(void *parameter) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	; 0x28
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	char RecvDataISR[15];
	osEvent RecvDataTask;
	while (1) {
		printf("Waiting Data From Task\n");
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <Task2+0x4c>)
 800043e:	f005 f821 	bl	8005484 <puts>
		RecvDataTask = osMailGet(Queue01Handle, 100);// lay giu lieu tu QUEUE01
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <Task2+0x50>)
 8000444:	6819      	ldr	r1, [r3, #0]
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2264      	movs	r2, #100	; 0x64
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fcff 	bl	8002e50 <osMailGet>
		infor_t *data = RecvDataTask.value.p;		// LAY GIA TRI TU CON TRO
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
		printf("Name : %s\nAge : %d\nSalary : %d\n", data->name, data->age,
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	6819      	ldr	r1, [r3, #0]
 800045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	461a      	mov	r2, r3
 8000460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4808      	ldr	r0, [pc, #32]	; (8000488 <Task2+0x54>)
 8000466:	f004 ff87 	bl	8005378 <iprintf>
				data->salary);

		osMailFree(Queue01Handle, data);		// ****GIAI PHONG BO NHO
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <Task2+0x50>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000470:	4618      	mov	r0, r3
 8000472:	f002 fd61 	bl	8002f38 <osMailFree>
//		printf("Waiting Data From ISR\n");
//		xQueueReceive(QueueTask02Handle, &RecvDataISR, osWaitForever);
//		printf("Data From ISR : %s\n", RecvDataISR);
		vTaskDelay(1000);
 8000476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047a:	f003 fc8f 	bl	8003d9c <vTaskDelay>
	while (1) {
 800047e:	e7dd      	b.n	800043c <Task2+0x8>
 8000480:	080061cc 	.word	0x080061cc
 8000484:	20000390 	.word	0x20000390
 8000488:	080061e4 	.word	0x080061e4

0800048c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	infor_t *TaskData = osMailAlloc(Queue01Handle, 100);// CAP PHAT BO NHO CHO MAIL QUEUE
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <StartDefaultTask+0x50>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2164      	movs	r1, #100	; 0x64
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fc84 	bl	8002da8 <osMailAlloc>
 80004a0:	60f8      	str	r0, [r7, #12]
	TaskData->name = "Tuan";
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <StartDefaultTask+0x54>)
 80004a6:	601a      	str	r2, [r3, #0]
	TaskData->age = 21;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2215      	movs	r2, #21
 80004ac:	711a      	strb	r2, [r3, #4]
	TaskData->salary = 0;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	480a      	ldr	r0, [pc, #40]	; (80004e4 <StartDefaultTask+0x58>)
 80004ba:	f000 fd73 	bl	8000fa4 <HAL_GPIO_TogglePin>
		osMailPut(Queue01Handle, TaskData);	// TRUYEN GIA GIA TRI VAO MAIL QUEUE
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <StartDefaultTask+0x50>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68f9      	ldr	r1, [r7, #12]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 fc85 	bl	8002dd4 <osMailPut>
		printf("Send Data From Task Defaul !\n");
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <StartDefaultTask+0x5c>)
 80004cc:	f004 ffda 	bl	8005484 <puts>
		osDelay(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f002 fafd 	bl	8002ad2 <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004d8:	e7ec      	b.n	80004b4 <StartDefaultTask+0x28>
 80004da:	bf00      	nop
 80004dc:	20000390 	.word	0x20000390
 80004e0:	08006204 	.word	0x08006204
 80004e4:	40011000 	.word	0x40011000
 80004e8:	0800620c 	.word	0x0800620c

080004ec <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004fe:	f000 fa07 	bl	8000910 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40000800 	.word	0x40000800

08000510 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_MspInit+0x68>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <HAL_MspInit+0x68>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x68>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x68>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <HAL_MspInit+0x68>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x68>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	210f      	movs	r1, #15
 8000556:	f06f 0001 	mvn.w	r0, #1
 800055a:	f000 faaa 	bl	8000ab2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x6c>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x6c>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_UART_MspInit+0x9c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d139      	bne.n	8000620 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_UART_MspInit+0xa4>)
 80005f2:	f000 fb3b 	bl	8000c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_UART_MspInit+0xa4>)
 800060c:	f000 fb2e 	bl	8000c6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2105      	movs	r1, #5
 8000614:	2025      	movs	r0, #37	; 0x25
 8000616:	f000 fa4c 	bl	8000ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800061a:	2025      	movs	r0, #37	; 0x25
 800061c:	f000 fa65 	bl	8000aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40013800 	.word	0x40013800
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800

08000634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800064a:	4b34      	ldr	r3, [pc, #208]	; (800071c <HAL_InitTick+0xe8>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a33      	ldr	r2, [pc, #204]	; (800071c <HAL_InitTick+0xe8>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <HAL_InitTick+0xe8>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000662:	f107 0210 	add.w	r2, r7, #16
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f8a5 	bl	80017bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000672:	6a3b      	ldr	r3, [r7, #32]
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800067c:	f001 f876 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8000680:	6378      	str	r0, [r7, #52]	; 0x34
 8000682:	e004      	b.n	800068e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000684:	f001 f872 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8000688:	4603      	mov	r3, r0
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800068e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000690:	4a23      	ldr	r2, [pc, #140]	; (8000720 <HAL_InitTick+0xec>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	0c9b      	lsrs	r3, r3, #18
 8000698:	3b01      	subs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_InitTick+0xf0>)
 800069e:	4a22      	ldr	r2, [pc, #136]	; (8000728 <HAL_InitTick+0xf4>)
 80006a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <HAL_InitTick+0xf0>)
 80006a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006aa:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <HAL_InitTick+0xf0>)
 80006ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <HAL_InitTick+0xf0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_InitTick+0xf0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_InitTick+0xf0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <HAL_InitTick+0xf0>)
 80006c4:	f001 f8c8 	bl	8001858 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d11b      	bne.n	800070e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <HAL_InitTick+0xf0>)
 80006d8:	f001 f916 	bl	8001908 <HAL_TIM_Base_Start_IT>
 80006dc:	4603      	mov	r3, r0
 80006de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d111      	bne.n	800070e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006ea:	201e      	movs	r0, #30
 80006ec:	f000 f9fd 	bl	8000aea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d808      	bhi.n	8000708 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006f6:	2200      	movs	r2, #0
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	201e      	movs	r0, #30
 80006fc:	f000 f9d9 	bl	8000ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_InitTick+0xf8>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e002      	b.n	800070e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800070e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000712:	4618      	mov	r0, r3
 8000714:	3738      	adds	r7, #56	; 0x38
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	431bde83 	.word	0x431bde83
 8000724:	200003a0 	.word	0x200003a0
 8000728:	40000800 	.word	0x40000800
 800072c:	20000004 	.word	0x20000004

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <TIM4_IRQHandler+0x10>)
 8000762:	f001 f923 	bl	80019ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200003a0 	.word	0x200003a0

08000770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <USART1_IRQHandler+0x10>)
 8000776:	f001 fbb1 	bl	8001edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000344 	.word	0x20000344

08000784 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e00a      	b.n	80007ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000796:	f3af 8000 	nop.w
 800079a:	4601      	mov	r1, r0
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbf0      	blt.n	8000796 <_read+0x12>
	}

return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_close>:
	}
	return len;
}

int _close(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
	return -1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e4:	605a      	str	r2, [r3, #4]
	return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <_isatty>:

int _isatty(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return 1;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr

08000806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
	return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f004 fbc4 	bl	8004fdc <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20005000 	.word	0x20005000
 8000880:	00000400 	.word	0x00000400
 8000884:	200003e8 	.word	0x200003e8
 8000888:	20001150 	.word	0x20001150

0800088c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff fff8 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b4:	4c09      	ldr	r4, [pc, #36]	; (80008dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f004 fc87 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff fca5 	bl	8000214 <main>
  bx lr
 80008ca:	4770      	bx	lr
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d4:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 80008d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008dc:	2000114c 	.word	0x2000114c

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_Init+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_Init+0x28>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f8d1 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f7ff fe9a 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fe0c 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000008 	.word	0x20000008
 8000930:	200003ec 	.word	0x200003ec

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	200003ec 	.word	0x200003ec

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	; (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff4f 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff64 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ffb2 	bl	8000a38 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff81 	bl	80009e4 <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff57 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d008      	beq.n	8000b30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2204      	movs	r2, #4
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e020      	b.n	8000b72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 020e 	bic.w	r2, r2, #14
 8000b3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0201 	bic.w	r2, r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d005      	beq.n	8000ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2204      	movs	r2, #4
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e051      	b.n	8000c44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 020e 	bic.w	r2, r2, #14
 8000bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0201 	bic.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_DMA_Abort_IT+0xd4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d029      	beq.n	8000c1e <HAL_DMA_Abort_IT+0xa2>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_DMA_Abort_IT+0xd8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d022      	beq.n	8000c1a <HAL_DMA_Abort_IT+0x9e>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <HAL_DMA_Abort_IT+0xdc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d01a      	beq.n	8000c14 <HAL_DMA_Abort_IT+0x98>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <HAL_DMA_Abort_IT+0xe0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d012      	beq.n	8000c0e <HAL_DMA_Abort_IT+0x92>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_DMA_Abort_IT+0xe4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00a      	beq.n	8000c08 <HAL_DMA_Abort_IT+0x8c>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_DMA_Abort_IT+0xe8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d102      	bne.n	8000c02 <HAL_DMA_Abort_IT+0x86>
 8000bfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c00:	e00e      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c06:	e00b      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	e008      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	e005      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	e002      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	e000      	b.n	8000c20 <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_DMA_Abort_IT+0xec>)
 8000c22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4798      	blx	r3
    } 
  }
  return status;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40020008 	.word	0x40020008
 8000c54:	4002001c 	.word	0x4002001c
 8000c58:	40020030 	.word	0x40020030
 8000c5c:	40020044 	.word	0x40020044
 8000c60:	40020058 	.word	0x40020058
 8000c64:	4002006c 	.word	0x4002006c
 8000c68:	40020000 	.word	0x40020000

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b08b      	sub	sp, #44	; 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	e169      	b.n	8000f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c80:	2201      	movs	r2, #1
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8158 	bne.w	8000f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a9a      	ldr	r2, [pc, #616]	; (8000f0c <HAL_GPIO_Init+0x2a0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d05e      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
 8000ca8:	4a98      	ldr	r2, [pc, #608]	; (8000f0c <HAL_GPIO_Init+0x2a0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d875      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000cae:	4a98      	ldr	r2, [pc, #608]	; (8000f10 <HAL_GPIO_Init+0x2a4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d058      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
 8000cb4:	4a96      	ldr	r2, [pc, #600]	; (8000f10 <HAL_GPIO_Init+0x2a4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d86f      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000cba:	4a96      	ldr	r2, [pc, #600]	; (8000f14 <HAL_GPIO_Init+0x2a8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d052      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
 8000cc0:	4a94      	ldr	r2, [pc, #592]	; (8000f14 <HAL_GPIO_Init+0x2a8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d869      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000cc6:	4a94      	ldr	r2, [pc, #592]	; (8000f18 <HAL_GPIO_Init+0x2ac>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d04c      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
 8000ccc:	4a92      	ldr	r2, [pc, #584]	; (8000f18 <HAL_GPIO_Init+0x2ac>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d863      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000cd2:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <HAL_GPIO_Init+0x2b0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d046      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
 8000cd8:	4a90      	ldr	r2, [pc, #576]	; (8000f1c <HAL_GPIO_Init+0x2b0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d85d      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d82a      	bhi.n	8000d38 <HAL_GPIO_Init+0xcc>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d859      	bhi.n	8000d9a <HAL_GPIO_Init+0x12e>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <HAL_GPIO_Init+0x80>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d67 	.word	0x08000d67
 8000cf0:	08000d41 	.word	0x08000d41
 8000cf4:	08000d53 	.word	0x08000d53
 8000cf8:	08000d95 	.word	0x08000d95
 8000cfc:	08000d9b 	.word	0x08000d9b
 8000d00:	08000d9b 	.word	0x08000d9b
 8000d04:	08000d9b 	.word	0x08000d9b
 8000d08:	08000d9b 	.word	0x08000d9b
 8000d0c:	08000d9b 	.word	0x08000d9b
 8000d10:	08000d9b 	.word	0x08000d9b
 8000d14:	08000d9b 	.word	0x08000d9b
 8000d18:	08000d9b 	.word	0x08000d9b
 8000d1c:	08000d9b 	.word	0x08000d9b
 8000d20:	08000d9b 	.word	0x08000d9b
 8000d24:	08000d9b 	.word	0x08000d9b
 8000d28:	08000d9b 	.word	0x08000d9b
 8000d2c:	08000d9b 	.word	0x08000d9b
 8000d30:	08000d49 	.word	0x08000d49
 8000d34:	08000d5d 	.word	0x08000d5d
 8000d38:	4a79      	ldr	r2, [pc, #484]	; (8000f20 <HAL_GPIO_Init+0x2b4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d013      	beq.n	8000d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3e:	e02c      	b.n	8000d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e029      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e024      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	3308      	adds	r3, #8
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e01f      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	330c      	adds	r3, #12
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e01a      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e013      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d105      	bne.n	8000d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	611a      	str	r2, [r3, #16]
          break;
 8000d86:	e009      	b.n	8000d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	615a      	str	r2, [r3, #20]
          break;
 8000d92:	e003      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x130>
          break;
 8000d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2bff      	cmp	r3, #255	; 0xff
 8000da0:	d801      	bhi.n	8000da6 <HAL_GPIO_Init+0x13a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	e001      	b.n	8000daa <HAL_GPIO_Init+0x13e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3304      	adds	r3, #4
 8000daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d802      	bhi.n	8000db8 <HAL_GPIO_Init+0x14c>
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x152>
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	3b08      	subs	r3, #8
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	401a      	ands	r2, r3
 8000dd0:	6a39      	ldr	r1, [r7, #32]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 80b1 	beq.w	8000f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dec:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e04:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <HAL_GPIO_Init+0x2bc>)
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <HAL_GPIO_Init+0x2c0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d013      	beq.n	8000e58 <HAL_GPIO_Init+0x1ec>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <HAL_GPIO_Init+0x2c4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d00d      	beq.n	8000e54 <HAL_GPIO_Init+0x1e8>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <HAL_GPIO_Init+0x2c8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d007      	beq.n	8000e50 <HAL_GPIO_Init+0x1e4>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <HAL_GPIO_Init+0x2cc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d101      	bne.n	8000e4c <HAL_GPIO_Init+0x1e0>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e004      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e6a:	492f      	ldr	r1, [pc, #188]	; (8000f28 <HAL_GPIO_Init+0x2bc>)
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	492c      	ldr	r1, [pc, #176]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4928      	ldr	r1, [pc, #160]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	4922      	ldr	r1, [pc, #136]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	60cb      	str	r3, [r1, #12]
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	491e      	ldr	r1, [pc, #120]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4918      	ldr	r1, [pc, #96]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4914      	ldr	r1, [pc, #80]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d021      	beq.n	8000f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	490e      	ldr	r1, [pc, #56]	; (8000f3c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e021      	b.n	8000f4e <HAL_GPIO_Init+0x2e2>
 8000f0a:	bf00      	nop
 8000f0c:	10320000 	.word	0x10320000
 8000f10:	10310000 	.word	0x10310000
 8000f14:	10220000 	.word	0x10220000
 8000f18:	10210000 	.word	0x10210000
 8000f1c:	10120000 	.word	0x10120000
 8000f20:	10110000 	.word	0x10110000
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40011400 	.word	0x40011400
 8000f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_GPIO_Init+0x304>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4909      	ldr	r1, [pc, #36]	; (8000f70 <HAL_GPIO_Init+0x304>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3301      	adds	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f47f ae8e 	bne.w	8000c80 <HAL_GPIO_Init+0x14>
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	372c      	adds	r7, #44	; 0x2c
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	041a      	lsls	r2, r3, #16
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	611a      	str	r2, [r3, #16]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43d9      	mvns	r1, r3
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e272      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8087 	beq.w	8001106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff8:	4b92      	ldr	r3, [pc, #584]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b04      	cmp	r3, #4
 8001002:	d00c      	beq.n	800101e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001004:	4b8f      	ldr	r3, [pc, #572]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b08      	cmp	r3, #8
 800100e:	d112      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
 8001010:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101c:	d10b      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4b89      	ldr	r3, [pc, #548]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d06c      	beq.n	8001104 <HAL_RCC_OscConfig+0x12c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d168      	bne.n	8001104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e24c      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x76>
 8001040:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a7f      	ldr	r2, [pc, #508]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b78      	ldr	r3, [pc, #480]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a77      	ldr	r2, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e01d      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0xbc>
 800107a:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6e      	ldr	r2, [pc, #440]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e00b      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a67      	ldr	r2, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fc3e 	bl	8000934 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fc3a 	bl	8000934 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e200      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0xe4>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc2a 	bl	8000934 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fc26 	bl	8000934 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e1ec      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x10c>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d063      	beq.n	80011da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b08      	cmp	r3, #8
 8001128:	d11c      	bne.n	8001164 <HAL_RCC_OscConfig+0x18c>
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_RCC_OscConfig+0x176>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e1c0      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4939      	ldr	r1, [pc, #228]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	e03a      	b.n	80011da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d020      	beq.n	80011ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <HAL_RCC_OscConfig+0x270>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fbdf 	bl	8000934 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fbdb 	bl	8000934 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1a1      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
 80011ac:	e015      	b.n	80011da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_RCC_OscConfig+0x270>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fbbe 	bl	8000934 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fbba 	bl	8000934 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e180      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d03a      	beq.n	800125c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_RCC_OscConfig+0x274>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fb9e 	bl	8000934 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fb9a 	bl	8000934 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e160      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fafe 	bl	800181c <RCC_Delay>
 8001220:	e01c      	b.n	800125c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_RCC_OscConfig+0x274>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fb84 	bl	8000934 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122e:	e00f      	b.n	8001250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fb80 	bl	8000934 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d908      	bls.n	8001250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e146      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	42420000 	.word	0x42420000
 800124c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b92      	ldr	r3, [pc, #584]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e9      	bne.n	8001230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a6 	beq.w	80013b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10d      	bne.n	8001296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a87      	ldr	r2, [pc, #540]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <HAL_RCC_OscConfig+0x4c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d118      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <HAL_RCC_OscConfig+0x4c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a7e      	ldr	r2, [pc, #504]	; (80014a0 <HAL_RCC_OscConfig+0x4c8>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fb41 	bl	8000934 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fb3d 	bl	8000934 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e103      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x4c8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x312>
 80012dc:	4b6f      	ldr	r3, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6213      	str	r3, [r2, #32]
 80012e8:	e02d      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x334>
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a69      	ldr	r2, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a66      	ldr	r2, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0304 	bic.w	r3, r3, #4
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	e01c      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x356>
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a60      	ldr	r2, [pc, #384]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6213      	str	r3, [r2, #32]
 8001320:	4b5e      	ldr	r3, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a5d      	ldr	r2, [pc, #372]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 800132e:	4b5b      	ldr	r3, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a5a      	ldr	r2, [pc, #360]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b58      	ldr	r3, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d015      	beq.n	800137a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff faf1 	bl	8000934 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff faed 	bl	8000934 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0b1      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ee      	beq.n	8001356 <HAL_RCC_OscConfig+0x37e>
 8001378:	e014      	b.n	80013a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fadb 	bl	8000934 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fad7 	bl	8000934 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e09b      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ee      	bne.n	8001382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8087 	beq.w	80014ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d061      	beq.n	8001490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d146      	bne.n	8001462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d4:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x4cc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff faab 	bl	8000934 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff faa7 	bl	8000934 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e06d      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d108      	bne.n	800141c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4921      	ldr	r1, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a19      	ldr	r1, [r3, #32]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	430b      	orrs	r3, r1
 800142e:	491b      	ldr	r1, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x4cc>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fa7b 	bl	8000934 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fa77 	bl	8000934 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e03d      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x46a>
 8001460:	e035      	b.n	80014ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x4cc>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fa64 	bl	8000934 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fa60 	bl	8000934 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e026      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x4c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x498>
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e019      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
 80014a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x500>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0d0      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d910      	bls.n	8001520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4965      	ldr	r1, [pc, #404]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0b8      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	494d      	ldr	r1, [pc, #308]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d040      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d115      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e07f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e073      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06b      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4936      	ldr	r1, [pc, #216]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff f9b2 	bl	8000934 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff f9ae 	bl	8000934 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e053      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d210      	bcs.n	800162c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4922      	ldr	r1, [pc, #136]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e032      	b.n	8001692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4916      	ldr	r1, [pc, #88]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166a:	f000 f821 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800166e:	4602      	mov	r2, r0
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 800167c:	5ccb      	ldrb	r3, [r1, r3]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ffd2 	bl	8000634 <HAL_InitTick>

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	08006234 	.word	0x08006234
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_GetSysClockFreq+0x94>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x30>
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x36>
 80016de:	e027      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_GetSysClockFreq+0x98>)
 80016e2:	613b      	str	r3, [r7, #16]
      break;
 80016e4:	e027      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d010      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_GetSysClockFreq+0x94>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0c5b      	lsrs	r3, r3, #17
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_RCC_GetSysClockFreq+0xa0>)
 800170a:	5cd3      	ldrb	r3, [r2, r3]
 800170c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_RCC_GetSysClockFreq+0x98>)
 8001712:	fb03 f202 	mul.w	r2, r3, r2
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e004      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	613b      	str	r3, [r7, #16]
      break;
 800172e:	e002      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_GetSysClockFreq+0x98>)
 8001732:	613b      	str	r3, [r7, #16]
      break;
 8001734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001736:	693b      	ldr	r3, [r7, #16]
}
 8001738:	4618      	mov	r0, r3
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	007a1200 	.word	0x007a1200
 800174c:	0800624c 	.word	0x0800624c
 8001750:	0800625c 	.word	0x0800625c
 8001754:	003d0900 	.word	0x003d0900

08001758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_RCC_GetHCLKFreq+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001770:	f7ff fff2 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	08006244 	.word	0x08006244

08001794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001798:	f7ff ffde 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0adb      	lsrs	r3, r3, #11
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	4903      	ldr	r1, [pc, #12]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08006244 	.word	0x08006244

080017bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	220f      	movs	r2, #15
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_GetClockConfig+0x58>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_RCC_GetClockConfig+0x58>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_GetClockConfig+0x58>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_RCC_GetClockConfig+0x58>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0207 	and.w	r2, r3, #7
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	40022000 	.word	0x40022000

0800181c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <RCC_Delay+0x34>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <RCC_Delay+0x38>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0a5b      	lsrs	r3, r3, #9
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001838:	bf00      	nop
  }
  while (Delay --);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e5a      	subs	r2, r3, #1
 800183e:	60fa      	str	r2, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f9      	bne.n	8001838 <RCC_Delay+0x1c>
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000000 	.word	0x20000000
 8001854:	10624dd3 	.word	0x10624dd3

08001858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e041      	b.n	80018ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f839 	bl	80018f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f000 f9b4 	bl	8001c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d001      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e03a      	b.n	8001996 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_TIM_Base_Start_IT+0x98>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00e      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x58>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d009      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x58>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x58>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d010      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001982:	e007      	b.n	8001994 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40000800 	.word	0x40000800

080019ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d122      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d11b      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0202 	mvn.w	r2, #2
 80019d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8ed 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 80019f4:	e005      	b.n	8001a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8e0 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8ef 	bl	8001be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d122      	bne.n	8001a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d11b      	bne.n	8001a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0204 	mvn.w	r2, #4
 8001a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8c3 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8b6 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8c5 	bl	8001be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0208 	mvn.w	r2, #8
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2204      	movs	r2, #4
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f899 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f88c 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f89b 	bl	8001be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0210 	mvn.w	r2, #16
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f86f 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f862 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f871 	bl	8001be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0201 	mvn.w	r2, #1
 8001b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fcde 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b80      	cmp	r3, #128	; 0x80
 8001b3c:	d10e      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b80      	cmp	r3, #128	; 0x80
 8001b4a:	d107      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8bf 	bl	8001cda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	2b40      	cmp	r3, #64	; 0x40
 8001b68:	d10e      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d107      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f835 	bl	8001bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d10e      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d107      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0220 	mvn.w	r2, #32
 8001bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f88a 	bl	8001cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00b      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d007      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <TIM_Base_SetConfig+0xbc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <TIM_Base_SetConfig+0xc0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00b      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d007      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <TIM_Base_SetConfig+0xbc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <TIM_Base_SetConfig+0xc0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d108      	bne.n	8001c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d103      	bne.n	8001cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	615a      	str	r2, [r3, #20]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e042      	b.n	8001d84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fc3a 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fdc5 	bl	80028c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d16d      	bne.n	8001e88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_UART_Transmit+0x2c>
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e066      	b.n	8001e8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2221      	movs	r2, #33	; 0x21
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dca:	f7fe fdb3 	bl	8000934 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de4:	d108      	bne.n	8001df8 <HAL_UART_Transmit+0x6c>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d104      	bne.n	8001df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e003      	b.n	8001e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e00:	e02a      	b.n	8001e58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fb14 	bl	800243a <UART_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e036      	b.n	8001e8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10b      	bne.n	8001e3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	3302      	adds	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e007      	b.n	8001e4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1cf      	bne.n	8001e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 fae4 	bl	800243a <UART_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e006      	b.n	8001e8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d112      	bne.n	8001ed2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_UART_Receive_IT+0x26>
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00b      	b.n	8001ed4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fb24 	bl	8002516 <UART_Start_Receive_IT>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	e000      	b.n	8001ed4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ba      	sub	sp, #232	; 0xe8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_UART_IRQHandler+0x66>
 8001f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fc01 	bl	8002742 <UART_Receive_IT>
      return;
 8001f40:	e25b      	b.n	80023fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80de 	beq.w	8002108 <HAL_UART_IRQHandler+0x22c>
 8001f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80d1 	beq.w	8002108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_UART_IRQHandler+0xae>
 8001f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_UART_IRQHandler+0xd2>
 8001f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf6>
 8001fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f043 0204 	orr.w	r2, r3, #4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d011      	beq.n	8002002 <HAL_UART_IRQHandler+0x126>
 8001fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f043 0208 	orr.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 81f2 	beq.w	80023f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800200c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_UART_IRQHandler+0x14e>
 8002018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fb8c 	bl	8002742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_UART_IRQHandler+0x17a>
 800204e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04f      	beq.n	80020f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa96 	bl	8002588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d041      	beq.n	80020ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3314      	adds	r3, #20
 8002070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002078:	e853 3f00 	ldrex	r3, [r3]
 800207c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3314      	adds	r3, #20
 8002092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020a6:	e841 2300 	strex	r3, r2, [r1]
 80020aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1d9      	bne.n	800206a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d013      	beq.n	80020e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	4a7e      	ldr	r2, [pc, #504]	; (80022bc <HAL_UART_IRQHandler+0x3e0>)
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd56 	bl	8000b7c <HAL_DMA_Abort_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020e0:	4610      	mov	r0, r2
 80020e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e4:	e00e      	b.n	8002104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f993 	bl	8002412 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ec:	e00a      	b.n	8002104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f98f 	bl	8002412 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f4:	e006      	b.n	8002104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f98b 	bl	8002412 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002102:	e175      	b.n	80023f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002104:	bf00      	nop
    return;
 8002106:	e173      	b.n	80023f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 814f 	bne.w	80023b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8148 	beq.w	80023b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8141 	beq.w	80023b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80b6 	beq.w	80022c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8145 	beq.w	80023f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800216e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002172:	429a      	cmp	r2, r3
 8002174:	f080 813e 	bcs.w	80023f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800217e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b20      	cmp	r3, #32
 8002188:	f000 8088 	beq.w	800229c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800219a:	e853 3f00 	ldrex	r3, [r3]
 800219e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021c8:	e841 2300 	strex	r3, r2, [r1]
 80021cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1d9      	bne.n	800218c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3314      	adds	r3, #20
 80021de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e2:	e853 3f00 	ldrex	r3, [r3]
 80021e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002200:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002204:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002208:	e841 2300 	strex	r3, r2, [r1]
 800220c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800220e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e1      	bne.n	80021d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3314      	adds	r3, #20
 800221a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800221e:	e853 3f00 	ldrex	r3, [r3]
 8002222:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3314      	adds	r3, #20
 8002234:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002238:	66fa      	str	r2, [r7, #108]	; 0x6c
 800223a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800223e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002240:	e841 2300 	strex	r3, r2, [r1]
 8002244:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e3      	bne.n	8002214 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002264:	e853 3f00 	ldrex	r3, [r3]
 8002268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800226a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800227e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002280:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002286:	e841 2300 	strex	r3, r2, [r1]
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800228c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e3      	bne.n	800225a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc35 	bl	8000b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8b6 	bl	8002424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022b8:	e09c      	b.n	80023f4 <HAL_UART_IRQHandler+0x518>
 80022ba:	bf00      	nop
 80022bc:	0800264d 	.word	0x0800264d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 808e 	beq.w	80023f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8089 	beq.w	80023f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	330c      	adds	r3, #12
 80022ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	e853 3f00 	ldrex	r3, [r3]
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	330c      	adds	r3, #12
 8002306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800230a:	647a      	str	r2, [r7, #68]	; 0x44
 800230c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e3      	bne.n	80022e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3314      	adds	r3, #20
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	623b      	str	r3, [r7, #32]
   return(result);
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3314      	adds	r3, #20
 800233e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002342:	633a      	str	r2, [r7, #48]	; 0x30
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e3      	bne.n	800231e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	e853 3f00 	ldrex	r3, [r3]
 8002372:	60fb      	str	r3, [r7, #12]
   return(result);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0310 	bic.w	r3, r3, #16
 800237a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002388:	61fa      	str	r2, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238c:	69b9      	ldr	r1, [r7, #24]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	e841 2300 	strex	r3, r2, [r1]
 8002394:	617b      	str	r3, [r7, #20]
   return(result);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e3      	bne.n	8002364 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f83b 	bl	8002424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023ae:	e023      	b.n	80023f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_UART_IRQHandler+0x4f4>
 80023bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f953 	bl	8002674 <UART_Transmit_IT>
    return;
 80023ce:	e014      	b.n	80023fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <HAL_UART_IRQHandler+0x51e>
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f992 	bl	8002712 <UART_EndTransmit_IT>
    return;
 80023ee:	e004      	b.n	80023fa <HAL_UART_IRQHandler+0x51e>
    return;
 80023f0:	bf00      	nop
 80023f2:	e002      	b.n	80023fa <HAL_UART_IRQHandler+0x51e>
      return;
 80023f4:	bf00      	nop
 80023f6:	e000      	b.n	80023fa <HAL_UART_IRQHandler+0x51e>
      return;
 80023f8:	bf00      	nop
  }
}
 80023fa:	37e8      	adds	r7, #232	; 0xe8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b090      	sub	sp, #64	; 0x40
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244a:	e050      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d04c      	beq.n	80024ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <UART_WaitOnFlagUntilTimeout+0x30>
 800245a:	f7fe fa6b 	bl	8000934 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002466:	429a      	cmp	r2, r3
 8002468:	d241      	bcs.n	80024ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800248a:	637a      	str	r2, [r7, #52]	; 0x34
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e5      	bne.n	800246a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	e853 3f00 	ldrex	r3, [r3]
 80024ac:	613b      	str	r3, [r7, #16]
   return(result);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024be:	623a      	str	r2, [r7, #32]
 80024c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c2:	69f9      	ldr	r1, [r7, #28]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	e841 2300 	strex	r3, r2, [r1]
 80024ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e5      	bne.n	800249e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e00f      	b.n	800250e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4013      	ands	r3, r2
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	429a      	cmp	r2, r3
 800250a:	d09f      	beq.n	800244c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3740      	adds	r7, #64	; 0x40
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	4613      	mov	r3, r2
 8002522:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2222      	movs	r2, #34	; 0x22
 8002540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0220 	orr.w	r2, r2, #32
 800257a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b095      	sub	sp, #84	; 0x54
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	e853 3f00 	ldrex	r3, [r3]
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b0:	643a      	str	r2, [r7, #64]	; 0x40
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e5      	bne.n	8002590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3314      	adds	r3, #20
 80025ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	e853 3f00 	ldrex	r3, [r3]
 80025d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3314      	adds	r3, #20
 80025e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e5      	bne.n	80025c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d119      	bne.n	8002634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002620:	61ba      	str	r2, [r7, #24]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002624:	6979      	ldr	r1, [r7, #20]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	e841 2300 	strex	r3, r2, [r1]
 800262c:	613b      	str	r3, [r7, #16]
   return(result);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e5      	bne.n	8002600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002642:	bf00      	nop
 8002644:	3754      	adds	r7, #84	; 0x54
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff fed3 	bl	8002412 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b21      	cmp	r3, #33	; 0x21
 8002686:	d13e      	bne.n	8002706 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d114      	bne.n	80026bc <UART_Transmit_IT+0x48>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d110      	bne.n	80026bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e008      	b.n	80026ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6211      	str	r1, [r2, #32]
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4619      	mov	r1, r3
 80026dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff fe64 	bl	8002400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b08c      	sub	sp, #48	; 0x30
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b22      	cmp	r3, #34	; 0x22
 8002754:	f040 80ae 	bne.w	80028b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d117      	bne.n	8002792 <UART_Receive_IT+0x50>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d113      	bne.n	8002792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002780:	b29a      	uxth	r2, r3
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
 8002790:	e026      	b.n	80027e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a4:	d007      	beq.n	80027b6 <UART_Receive_IT+0x74>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <UART_Receive_IT+0x82>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e008      	b.n	80027d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4619      	mov	r1, r3
 80027ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d15d      	bne.n	80028b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0220 	bic.w	r2, r2, #32
 8002802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	2b01      	cmp	r3, #1
 8002838:	d135      	bne.n	80028a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	613b      	str	r3, [r7, #16]
   return(result);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	623a      	str	r2, [r7, #32]
 8002862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	69f9      	ldr	r1, [r7, #28]
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	61bb      	str	r3, [r7, #24]
   return(result);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e5      	bne.n	8002840 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b10      	cmp	r3, #16
 8002880:	d10a      	bne.n	8002898 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fdc0 	bl	8002424 <HAL_UARTEx_RxEventCallback>
 80028a4:	e002      	b.n	80028ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fd fc80 	bl	80001ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e002      	b.n	80028b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3730      	adds	r7, #48	; 0x30
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028fa:	f023 030c 	bic.w	r3, r3, #12
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	430b      	orrs	r3, r1
 8002906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <UART_SetConfig+0x114>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002928:	f7fe ff34 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	e002      	b.n	8002936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002930:	f7fe ff1c 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <UART_SetConfig+0x118>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	0119      	lsls	r1, r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <UART_SetConfig+0x118>)
 800296e:	fba3 0302 	umull	r0, r3, r3, r2
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	fb00 f303 	mul.w	r3, r0, r3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <UART_SetConfig+0x118>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298c:	4419      	add	r1, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009a      	lsls	r2, r3, #2
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <UART_SetConfig+0x118>)
 80029a6:	fba3 0302 	umull	r0, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <UART_SetConfig+0x118>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	440a      	add	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40013800 	.word	0x40013800
 80029d8:	51eb851f 	.word	0x51eb851f

080029dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ee:	2b84      	cmp	r3, #132	; 0x84
 80029f0:	d005      	beq.n	80029fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	3303      	adds	r3, #3
 80029fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a10:	f3ef 8305 	mrs	r3, IPSR
 8002a14:	607b      	str	r3, [r7, #4]
  return(result);
 8002a16:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a30:	f001 f9e8 	bl	8003e04 <vTaskStartScheduler>
  
  return osOK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3c:	b089      	sub	sp, #36	; 0x24
 8002a3e:	af04      	add	r7, sp, #16
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <osThreadCreate+0x54>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01c      	beq.n	8002a8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685c      	ldr	r4, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681d      	ldr	r5, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691e      	ldr	r6, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffb8 	bl	80029dc <makeFreeRtosPriority>
 8002a6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a76:	9202      	str	r2, [sp, #8]
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4632      	mov	r2, r6
 8002a80:	4629      	mov	r1, r5
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 ffe8 	bl	8003a58 <xTaskCreateStatic>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e01c      	b.n	8002ac8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685c      	ldr	r4, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9a:	b29e      	uxth	r6, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff9a 	bl	80029dc <makeFreeRtosPriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	9200      	str	r2, [sp, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f001 f829 	bl	8003b10 <xTaskCreate>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d001      	beq.n	8002ac8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <osDelay+0x16>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	e000      	b.n	8002aea <osDelay+0x18>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 f956 	bl	8003d9c <vTaskDelay>
  
  return osOK;
 8002af0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	3303      	adds	r3, #3
 8002b08:	f023 0303 	bic.w	r3, r3, #3
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002b0e:	2014      	movs	r0, #20
 8002b10:	f002 f88c 	bl	8004c2c <pvPortMalloc>
 8002b14:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d046      	beq.n	8002baa <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 f879 	bl	8004c2c <pvPortMalloc>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02b      	beq.n	8002ba0 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 f86a 	bl	8004c2c <pvPortMalloc>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e008      	b.n	8002b7e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d3f1      	bcc.n	8002b6c <osPoolCreate+0x72>
 8002b88:	e00f      	b.n	8002baa <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f910 	bl	8004db4 <vPortFree>
        vPortFree(thePool);
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f002 f90d 	bl	8004db4 <vPortFree>
        thePool = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e004      	b.n	8002baa <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f002 f907 	bl	8004db4 <vPortFree>
      thePool = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002baa:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002bc4:	f7ff ff21 	bl	8002a0a <inHandlerMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00e      	beq.n	8002bec <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bce:	f3ef 8211 	mrs	r2, BASEPRI
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	617a      	str	r2, [r7, #20]
 8002be4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002be6:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e001      	b.n	8002bf0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002bec:	f001 ff1e 	bl	8004a2c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e029      	b.n	8002c4a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c06:	fb01 f202 	mul.w	r2, r1, r2
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d113      	bne.n	8002c44 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4413      	add	r3, r2
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	440b      	add	r3, r1
 8002c3a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	611a      	str	r2, [r3, #16]
      break;
 8002c42:	e007      	b.n	8002c54 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3d0      	bcc.n	8002bf6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002c54:	f7ff fed9 	bl	8002a0a <inHandlerMode>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c68:	e001      	b.n	8002c6e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002c6a:	f001 ff0f 	bl	8004a8c <vPortExitCritical>
  }
  
  return p;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <osPoolFree+0x14>
    return osErrorParameter;
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	e030      	b.n	8002cee <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <osPoolFree+0x1e>
    return osErrorParameter;
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	e02b      	b.n	8002cee <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d201      	bcs.n	8002ca4 <osPoolFree+0x2c>
    return osErrorParameter;
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	e024      	b.n	8002cee <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cb8:	fb01 f202 	mul.w	r2, r1, r2
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <osPoolFree+0x4e>
    return osErrorParameter;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	e013      	b.n	8002cee <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d301      	bcc.n	8002ce0 <osPoolFree+0x68>
    return osErrorParameter;
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	e006      	b.n	8002cee <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689c      	ldr	r4, [r3, #8]
 8002d16:	200c      	movs	r0, #12
 8002d18:	f001 ff88 	bl	8004c2c <pvPortMalloc>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <osMailCreate+0x36>
    return NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e038      	b.n	8002da0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	681c      	ldr	r4, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2104      	movs	r1, #4
 8002d46:	f000 fa23 	bl	8003190 <xQueueGenericCreate>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 f827 	bl	8004db4 <vPortFree>
    return NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e01a      	b.n	8002da0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	681c      	ldr	r4, [r3, #0]
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fec0 	bl	8002afa <osPoolCreate>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 f80f 	bl	8004db4 <vPortFree>
    return NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e002      	b.n	8002da0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}

08002da8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <osMailAlloc+0x14>
    return NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e006      	b.n	8002dca <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fef7 	bl	8002bb4 <osPoolAlloc>
 8002dc6:	60f8      	str	r0, [r7, #12]
  
  return p;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <osMailPut+0x14>
    return osErrorParameter;
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	e02c      	b.n	8002e42 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002dec:	f7ff fe0d 	bl	8002a0a <inHandlerMode>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6858      	ldr	r0, [r3, #4]
 8002dfa:	f107 020c 	add.w	r2, r7, #12
 8002dfe:	4639      	mov	r1, r7
 8002e00:	2300      	movs	r3, #0
 8002e02:	f000 fb21 	bl	8003448 <xQueueGenericSendFromISR>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d001      	beq.n	8002e10 <osMailPut+0x3c>
      return osErrorOS;
 8002e0c:	23ff      	movs	r3, #255	; 0xff
 8002e0e:	e018      	b.n	8002e42 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d014      	beq.n	8002e40 <osMailPut+0x6c>
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <osMailPut+0x78>)
 8002e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	e00b      	b.n	8002e40 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6858      	ldr	r0, [r3, #4]
 8002e2c:	4639      	mov	r1, r7
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2200      	movs	r2, #0
 8002e32:	f000 fa0b 	bl	800324c <xQueueGenericSend>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <osMailPut+0x6c>
      return osErrorOS;
 8002e3c:	23ff      	movs	r3, #255	; 0xff
 8002e3e:	e000      	b.n	8002e42 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b08b      	sub	sp, #44	; 0x2c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	617b      	str	r3, [r7, #20]
    return event;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e7a:	e056      	b.n	8002f2a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d103      	bne.n	8002e94 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	e009      	b.n	8002ea8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <osMailGet+0x58>
      ticks = 1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002ea8:	f7ff fdaf 	bl	8002a0a <inHandlerMode>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6858      	ldr	r0, [r3, #4]
 8002eb6:	f107 0220 	add.w	r2, r7, #32
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f000 fc39 	bl	8003738 <xQueueReceiveFromISR>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e001      	b.n	8002ed6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01e      	beq.n	8002f1a <osMailGet+0xca>
 8002edc:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <osMailGet+0xe4>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	e015      	b.n	8002f1a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6858      	ldr	r0, [r3, #4]
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	f000 fb3c 	bl	8003578 <xQueueReceive>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8002f06:	2320      	movs	r3, #32
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e006      	b.n	8002f1a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <osMailGet+0xc6>
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <osMailGet+0xc8>
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	372c      	adds	r7, #44	; 0x2c
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <osMailFree+0x14>
    return osErrorParameter;
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	e006      	b.n	8002f5a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe90 	bl	8002c78 <osPoolFree>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 0208 	add.w	r2, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f103 0208 	add.w	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f103 0208 	add.w	r2, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d103      	bne.n	800301e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e00c      	b.n	8003038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3308      	adds	r3, #8
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e002      	b.n	800302c <vListInsert+0x2e>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d2f6      	bcs.n	8003026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d103      	bne.n	80030a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <xQueueGenericReset+0x2a>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	60bb      	str	r3, [r7, #8]
}
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030ea:	f001 fc9f 	bl	8004a2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	68f9      	ldr	r1, [r7, #12]
 80030f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	3b01      	subs	r3, #1
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	441a      	add	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	22ff      	movs	r2, #255	; 0xff
 800312e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d114      	bne.n	800316a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01a      	beq.n	800317e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3310      	adds	r3, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f8b1 	bl	80042b4 <xTaskRemoveFromEventList>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <xQueueGenericReset+0xcc>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	e009      	b.n	800317e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3310      	adds	r3, #16
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fef7 	bl	8002f62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fef2 	bl	8002f62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800317e:	f001 fc85 	bl	8004a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	613b      	str	r3, [r7, #16]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e004      	b.n	80031d0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3348      	adds	r3, #72	; 0x48
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fd29 	bl	8004c2c <pvPortMalloc>
 80031da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00f      	beq.n	8003202 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	3348      	adds	r3, #72	; 0x48
 80031e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f805 	bl	800320c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003202:	69bb      	ldr	r3, [r7, #24]
	}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e002      	b.n	800322e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800323a:	2101      	movs	r1, #1
 800323c:	69b8      	ldr	r0, [r7, #24]
 800323e:	f7ff ff3f 	bl	80030c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08e      	sub	sp, #56	; 0x38
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xQueueGenericSend+0x32>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <xQueueGenericSend+0x40>
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <xQueueGenericSend+0x44>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <xQueueGenericSend+0x46>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <xQueueGenericSend+0x60>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d103      	bne.n	80032ba <xQueueGenericSend+0x6e>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <xQueueGenericSend+0x72>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <xQueueGenericSend+0x74>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xQueueGenericSend+0x8e>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032da:	f001 f9af 	bl	800463c <xTaskGetSchedulerState>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <xQueueGenericSend+0x9e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <xQueueGenericSend+0xa2>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericSend+0xa4>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGenericSend+0xbe>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	61fb      	str	r3, [r7, #28]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800330a:	f001 fb8f 	bl	8004a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <xQueueGenericSend+0xd4>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d129      	bne.n	8003374 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003326:	f000 fa87 	bl	8003838 <prvCopyDataToQueue>
 800332a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	4618      	mov	r0, r3
 800333a:	f000 ffbb 	bl	80042b4 <xTaskRemoveFromEventList>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003344:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <xQueueGenericSend+0x1f8>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	e00a      	b.n	800336c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <xQueueGenericSend+0x1f8>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800336c:	f001 fb8e 	bl	8004a8c <vPortExitCritical>
				return pdPASS;
 8003370:	2301      	movs	r3, #1
 8003372:	e063      	b.n	800343c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800337a:	f001 fb87 	bl	8004a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800337e:	2300      	movs	r3, #0
 8003380:	e05c      	b.n	800343c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fff3 	bl	8004378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003392:	2301      	movs	r3, #1
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003396:	f001 fb79 	bl	8004a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800339a:	f000 fd9d 	bl	8003ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800339e:	f001 fb45 	bl	8004a2c <vPortEnterCritical>
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d103      	bne.n	80033b8 <xQueueGenericSend+0x16c>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSend+0x182>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ce:	f001 fb5d 	bl	8004a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d2:	1d3a      	adds	r2, r7, #4
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 ffe2 	bl	80043a4 <xTaskCheckForTimeOut>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d124      	bne.n	8003430 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033e8:	f000 fb1e 	bl	8003a28 <prvIsQueueFull>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	3310      	adds	r3, #16
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff36 	bl	800426c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003402:	f000 faa9 	bl	8003958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003406:	f000 fd75 	bl	8003ef4 <xTaskResumeAll>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f af7c 	bne.w	800330a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <xQueueGenericSend+0x1f8>)
 8003414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	e772      	b.n	800330a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003426:	f000 fa97 	bl	8003958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800342a:	f000 fd63 	bl	8003ef4 <xTaskResumeAll>
 800342e:	e76c      	b.n	800330a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003432:	f000 fa91 	bl	8003958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003436:	f000 fd5d 	bl	8003ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800343a:	2300      	movs	r3, #0
		}
	}
}
 800343c:	4618      	mov	r0, r3
 800343e:	3738      	adds	r7, #56	; 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	; 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueGenericSendFromISR+0x3c>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <xQueueGenericSendFromISR+0x40>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueGenericSendFromISR+0x42>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	623b      	str	r3, [r7, #32]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSendFromISR+0x6a>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <xQueueGenericSendFromISR+0x6e>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericSendFromISR+0x70>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	61fb      	str	r3, [r7, #28]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034d2:	f001 fb6d 	bl	8004bb0 <vPortValidateInterruptPriority>
	__asm volatile
 80034d6:	f3ef 8211 	mrs	r2, BASEPRI
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	61ba      	str	r2, [r7, #24]
 80034ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <xQueueGenericSendFromISR+0xbc>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d12c      	bne.n	800355e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003514:	f000 f990 	bl	8003838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003518:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d112      	bne.n	8003548 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3324      	adds	r3, #36	; 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fec0 	bl	80042b4 <xTaskRemoveFromEventList>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003548:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800354c:	3301      	adds	r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b25a      	sxtb	r2, r3
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003558:	2301      	movs	r3, #1
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800355c:	e001      	b.n	8003562 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800355e:	2300      	movs	r3, #0
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f383 8811 	msr	BASEPRI, r3
}
 800356c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003570:	4618      	mov	r0, r3
 8003572:	3738      	adds	r7, #56	; 0x38
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <xQueueReceive+0x30>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	623b      	str	r3, [r7, #32]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <xQueueReceive+0x3e>
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <xQueueReceive+0x42>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <xQueueReceive+0x44>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueReceive+0x5e>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	61fb      	str	r3, [r7, #28]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035d6:	f001 f831 	bl	800463c <xTaskGetSchedulerState>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <xQueueReceive+0x6e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <xQueueReceive+0x72>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xQueueReceive+0x74>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xQueueReceive+0x8e>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61bb      	str	r3, [r7, #24]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003606:	f001 fa11 	bl	8004a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01f      	beq.n	8003656 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 f977 	bl	800390c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	3310      	adds	r3, #16
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fe3e 	bl	80042b4 <xTaskRemoveFromEventList>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <xQueueReceive+0x1bc>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800364e:	f001 fa1d 	bl	8004a8c <vPortExitCritical>
				return pdPASS;
 8003652:	2301      	movs	r3, #1
 8003654:	e069      	b.n	800372a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800365c:	f001 fa16 	bl	8004a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
 8003662:	e062      	b.n	800372a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800366a:	f107 0310 	add.w	r3, r7, #16
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fe82 	bl	8004378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003678:	f001 fa08 	bl	8004a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800367c:	f000 fc2c 	bl	8003ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003680:	f001 f9d4 	bl	8004a2c <vPortEnterCritical>
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368a:	b25b      	sxtb	r3, r3
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d103      	bne.n	800369a <xQueueReceive+0x122>
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <xQueueReceive+0x138>
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	f001 f9ec 	bl	8004a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036b4:	1d3a      	adds	r2, r7, #4
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fe71 	bl	80043a4 <xTaskCheckForTimeOut>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d123      	bne.n	8003710 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ca:	f000 f997 	bl	80039fc <prvIsQueueEmpty>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d017      	beq.n	8003704 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fdc5 	bl	800426c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e4:	f000 f938 	bl	8003958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036e8:	f000 fc04 	bl	8003ef4 <xTaskResumeAll>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d189      	bne.n	8003606 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xQueueReceive+0x1bc>)
 80036f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	e780      	b.n	8003606 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003706:	f000 f927 	bl	8003958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800370a:	f000 fbf3 	bl	8003ef4 <xTaskResumeAll>
 800370e:	e77a      	b.n	8003606 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003712:	f000 f921 	bl	8003958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003716:	f000 fbed 	bl	8003ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800371a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800371c:	f000 f96e 	bl	80039fc <prvIsQueueEmpty>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f43f af6f 	beq.w	8003606 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800372a:	4618      	mov	r0, r3
 800372c:	3730      	adds	r7, #48	; 0x30
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	623b      	str	r3, [r7, #32]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueReceiveFromISR+0x3a>
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <xQueueReceiveFromISR+0x3e>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <xQueueReceiveFromISR+0x40>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	61fb      	str	r3, [r7, #28]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003792:	f001 fa0d 	bl	8004bb0 <vPortValidateInterruptPriority>
	__asm volatile
 8003796:	f3ef 8211 	mrs	r2, BASEPRI
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	61ba      	str	r2, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02f      	beq.n	800381e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037cc:	f000 f89e 	bl	800390c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80037d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d112      	bne.n	8003808 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fd60 	bl	80042b4 <xTaskRemoveFromEventList>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e007      	b.n	8003818 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800380c:	3301      	adds	r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	b25a      	sxtb	r2, r3
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003818:	2301      	movs	r3, #1
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
 800381c:	e001      	b.n	8003822 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f383 8811 	msr	BASEPRI, r3
}
 800382c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003830:	4618      	mov	r0, r3
 8003832:	3738      	adds	r7, #56	; 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14d      	bne.n	80038fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ff08 	bl	8004678 <xTaskPriorityDisinherit>
 8003868:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	e043      	b.n	80038fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d119      	bne.n	80038ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6898      	ldr	r0, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	461a      	mov	r2, r3
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	f001 fccd 	bl	8005222 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d32b      	bcc.n	80038fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	e026      	b.n	80038fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68d8      	ldr	r0, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	461a      	mov	r2, r3
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	f001 fcb3 	bl	8005222 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	441a      	add	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	425b      	negs	r3, r3
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d105      	bne.n	80038fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003902:	697b      	ldr	r3, [r7, #20]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d303      	bcc.n	8003940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	461a      	mov	r2, r3
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	f001 fc69 	bl	8005222 <memcpy>
	}
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003960:	f001 f864 	bl	8004a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800396a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800396c:	e011      	b.n	8003992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3324      	adds	r3, #36	; 0x24
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fc9a 	bl	80042b4 <xTaskRemoveFromEventList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003986:	f000 fd6f 	bl	8004468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	3b01      	subs	r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dce9      	bgt.n	800396e <prvUnlockQueue+0x16>
 800399a:	e000      	b.n	800399e <prvUnlockQueue+0x46>
					break;
 800399c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039a6:	f001 f871 	bl	8004a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039aa:	f001 f83f 	bl	8004a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039b6:	e011      	b.n	80039dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3310      	adds	r3, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fc75 	bl	80042b4 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039d0:	f000 fd4a 	bl	8004468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	dce9      	bgt.n	80039b8 <prvUnlockQueue+0x60>
 80039e4:	e000      	b.n	80039e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039f0:	f001 f84c 	bl	8004a8c <vPortExitCritical>
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a04:	f001 f812 	bl	8004a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e001      	b.n	8003a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a1a:	f001 f837 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a30:	f000 fffc 	bl	8004a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d102      	bne.n	8003a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e001      	b.n	8003a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a4a:	f001 f81f 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08e      	sub	sp, #56	; 0x38
 8003a5c:	af04      	add	r7, sp, #16
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xTaskCreateStatic+0x46>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61fb      	str	r3, [r7, #28]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a9e:	23b4      	movs	r3, #180	; 0xb4
 8003aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2bb4      	cmp	r3, #180	; 0xb4
 8003aa6:	d00a      	beq.n	8003abe <xTaskCreateStatic+0x66>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	61bb      	str	r3, [r7, #24]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01e      	beq.n	8003b02 <xTaskCreateStatic+0xaa>
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01b      	beq.n	8003b02 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003adc:	2300      	movs	r3, #0
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f851 	bl	8003b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003afc:	f000 f8e4 	bl	8003cc8 <prvAddNewTaskToReadyList>
 8003b00:	e001      	b.n	8003b06 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b06:	697b      	ldr	r3, [r7, #20]
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af04      	add	r7, sp, #16
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f881 	bl	8004c2c <pvPortMalloc>
 8003b2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b32:	20b4      	movs	r0, #180	; 0xb4
 8003b34:	f001 f87a 	bl	8004c2c <pvPortMalloc>
 8003b38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
 8003b46:	e005      	b.n	8003b54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b48:	6978      	ldr	r0, [r7, #20]
 8003b4a:	f001 f933 	bl	8004db4 <vPortFree>
 8003b4e:	e001      	b.n	8003b54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f80f 	bl	8003b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7e:	69f8      	ldr	r0, [r7, #28]
 8003b80:	f000 f8a2 	bl	8003cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e002      	b.n	8003b90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b90:	69bb      	ldr	r3, [r7, #24]
	}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f023 0307 	bic.w	r3, r3, #7
 8003bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	617b      	str	r3, [r7, #20]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e012      	b.n	8003c10 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	7819      	ldrb	r1, [r3, #0]
 8003bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3334      	adds	r3, #52	; 0x34
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	d9e9      	bls.n	8003bea <prvInitialiseNewTask+0x4e>
 8003c16:	e000      	b.n	8003c1a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003c18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d901      	bls.n	8003c2c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c28:	2306      	movs	r3, #6
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	3304      	adds	r3, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f9ac 	bl	8002fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	3318      	adds	r3, #24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff f9a7 	bl	8002fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	f1c3 0207 	rsb	r2, r3, #7
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	334c      	adds	r3, #76	; 0x4c
 8003c7c:	2260      	movs	r2, #96	; 0x60
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fadc 	bl	800523e <memset>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <prvInitialiseNewTask+0x120>)
 8003c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <prvInitialiseNewTask+0x124>)
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <prvInitialiseNewTask+0x128>)
 8003c96:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	69b8      	ldr	r0, [r7, #24]
 8003c9e:	f000 fdd7 	bl	8004850 <pxPortInitialiseStack>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08006280 	.word	0x08006280
 8003cc0:	080062a0 	.word	0x080062a0
 8003cc4:	08006260 	.word	0x08006260

08003cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cd0:	f000 feac 	bl	8004a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <prvAddNewTaskToReadyList+0xb8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <prvAddNewTaskToReadyList+0xb8>)
 8003cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <prvAddNewTaskToReadyList+0xbc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <prvAddNewTaskToReadyList+0xbc>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <prvAddNewTaskToReadyList+0xb8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d110      	bne.n	8003d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cf4:	f000 fbdc 	bl	80044b0 <prvInitialiseTaskLists>
 8003cf8:	e00d      	b.n	8003d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <prvAddNewTaskToReadyList+0xc0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <prvAddNewTaskToReadyList+0xbc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d802      	bhi.n	8003d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <prvAddNewTaskToReadyList+0xbc>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d16:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <prvAddNewTaskToReadyList+0xc4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <prvAddNewTaskToReadyList+0xc4>)
 8003d1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <prvAddNewTaskToReadyList+0xc8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <prvAddNewTaskToReadyList+0xc8>)
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <prvAddNewTaskToReadyList+0xcc>)
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f7ff f935 	bl	8002fb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d4e:	f000 fe9d 	bl	8004a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <prvAddNewTaskToReadyList+0xc0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <prvAddNewTaskToReadyList+0xbc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d207      	bcs.n	8003d78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvAddNewTaskToReadyList+0xd0>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	200004f0 	.word	0x200004f0
 8003d84:	200003f0 	.word	0x200003f0
 8003d88:	200004fc 	.word	0x200004fc
 8003d8c:	2000050c 	.word	0x2000050c
 8003d90:	200004f8 	.word	0x200004f8
 8003d94:	200003f4 	.word	0x200003f4
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <vTaskDelay+0x60>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <vTaskDelay+0x30>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dcc:	f000 f884 	bl	8003ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fcd6 	bl	8004784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dd8:	f000 f88c 	bl	8003ef4 <xTaskResumeAll>
 8003ddc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <vTaskDelay+0x64>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000518 	.word	0x20000518
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e12:	463a      	mov	r2, r7
 8003e14:	1d39      	adds	r1, r7, #4
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc f998 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	9202      	str	r2, [sp, #8]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	460a      	mov	r2, r1
 8003e32:	4921      	ldr	r1, [pc, #132]	; (8003eb8 <vTaskStartScheduler+0xb4>)
 8003e34:	4821      	ldr	r0, [pc, #132]	; (8003ebc <vTaskStartScheduler+0xb8>)
 8003e36:	f7ff fe0f 	bl	8003a58 <xTaskCreateStatic>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <vTaskStartScheduler+0xbc>)
 8003e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e40:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <vTaskStartScheduler+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e001      	b.n	8003e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d11b      	bne.n	8003e90 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	613b      	str	r3, [r7, #16]
}
 8003e6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <vTaskStartScheduler+0xc0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	334c      	adds	r3, #76	; 0x4c
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <vTaskStartScheduler+0xc4>)
 8003e74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <vTaskStartScheduler+0xc8>)
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <vTaskStartScheduler+0xcc>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <vTaskStartScheduler+0xd0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e8a:	f000 fd5d 	bl	8004948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e8e:	e00e      	b.n	8003eae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d10a      	bne.n	8003eae <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <vTaskStartScheduler+0xa8>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	0800622c 	.word	0x0800622c
 8003ebc:	08004481 	.word	0x08004481
 8003ec0:	20000514 	.word	0x20000514
 8003ec4:	200003f0 	.word	0x200003f0
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	20000510 	.word	0x20000510
 8003ed0:	200004fc 	.word	0x200004fc
 8003ed4:	200004f4 	.word	0x200004f4

08003ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <vTaskSuspendAll+0x18>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a03      	ldr	r2, [pc, #12]	; (8003ef0 <vTaskSuspendAll+0x18>)
 8003ee4:	6013      	str	r3, [r2, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000518 	.word	0x20000518

08003ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f02:	4b41      	ldr	r3, [pc, #260]	; (8004008 <xTaskResumeAll+0x114>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	603b      	str	r3, [r7, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f20:	f000 fd84 	bl	8004a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f24:	4b38      	ldr	r3, [pc, #224]	; (8004008 <xTaskResumeAll+0x114>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	4a37      	ldr	r2, [pc, #220]	; (8004008 <xTaskResumeAll+0x114>)
 8003f2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <xTaskResumeAll+0x114>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d161      	bne.n	8003ffa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f36:	4b35      	ldr	r3, [pc, #212]	; (800400c <xTaskResumeAll+0x118>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d05d      	beq.n	8003ffa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f3e:	e02e      	b.n	8003f9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f40:	4b33      	ldr	r3, [pc, #204]	; (8004010 <xTaskResumeAll+0x11c>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff f88e 	bl	800306e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f889 	bl	800306e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <xTaskResumeAll+0x120>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <xTaskResumeAll+0x120>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a27      	ldr	r2, [pc, #156]	; (8004018 <xTaskResumeAll+0x124>)
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7ff f817 	bl	8002fb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <xTaskResumeAll+0x128>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <xTaskResumeAll+0x12c>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <xTaskResumeAll+0x11c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1cc      	bne.n	8003f40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fac:	f000 fb22 	bl	80045f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <xTaskResumeAll+0x130>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fbc:	f000 f836 	bl	800402c <xTaskIncrementTick>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <xTaskResumeAll+0x12c>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f1      	bne.n	8003fbc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <xTaskResumeAll+0x130>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xTaskResumeAll+0x12c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <xTaskResumeAll+0x134>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ffa:	f000 fd47 	bl	8004a8c <vPortExitCritical>

	return xAlreadyYielded;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000518 	.word	0x20000518
 800400c:	200004f0 	.word	0x200004f0
 8004010:	200004b0 	.word	0x200004b0
 8004014:	200004f8 	.word	0x200004f8
 8004018:	200003f4 	.word	0x200003f4
 800401c:	200003f0 	.word	0x200003f0
 8004020:	20000504 	.word	0x20000504
 8004024:	20000500 	.word	0x20000500
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004036:	4b51      	ldr	r3, [pc, #324]	; (800417c <xTaskIncrementTick+0x150>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 808d 	bne.w	800415a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004040:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <xTaskIncrementTick+0x154>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004048:	4a4d      	ldr	r2, [pc, #308]	; (8004180 <xTaskIncrementTick+0x154>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d120      	bne.n	8004096 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <xTaskIncrementTick+0x158>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <xTaskIncrementTick+0x48>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	603b      	str	r3, [r7, #0]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <xTaskIncrementTick+0x46>
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <xTaskIncrementTick+0x158>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <xTaskIncrementTick+0x15c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <xTaskIncrementTick+0x158>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4a41      	ldr	r2, [pc, #260]	; (8004188 <xTaskIncrementTick+0x15c>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <xTaskIncrementTick+0x160>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <xTaskIncrementTick+0x160>)
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	f000 faaf 	bl	80045f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004096:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <xTaskIncrementTick+0x164>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d34d      	bcc.n	800413c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <xTaskIncrementTick+0x158>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <xTaskIncrementTick+0x82>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xTaskIncrementTick+0x84>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <xTaskIncrementTick+0x164>)
 80040b6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ba:	601a      	str	r2, [r3, #0]
					break;
 80040bc:	e03e      	b.n	800413c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040be:	4b31      	ldr	r3, [pc, #196]	; (8004184 <xTaskIncrementTick+0x158>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d203      	bcs.n	80040de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040d6:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <xTaskIncrementTick+0x164>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6013      	str	r3, [r2, #0]
						break;
 80040dc:	e02e      	b.n	800413c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe ffc3 	bl	800306e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3318      	adds	r3, #24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe ffba 	bl	800306e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <xTaskIncrementTick+0x168>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <xTaskIncrementTick+0x168>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <xTaskIncrementTick+0x16c>)
 800411a:	441a      	add	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7fe ff48 	bl	8002fb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <xTaskIncrementTick+0x170>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d3b4      	bcc.n	80040a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	e7b1      	b.n	80040a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <xTaskIncrementTick+0x170>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	4915      	ldr	r1, [pc, #84]	; (8004198 <xTaskIncrementTick+0x16c>)
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d907      	bls.n	8004164 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e004      	b.n	8004164 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <xTaskIncrementTick+0x174>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <xTaskIncrementTick+0x174>)
 8004162:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <xTaskIncrementTick+0x178>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004170:	697b      	ldr	r3, [r7, #20]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000518 	.word	0x20000518
 8004180:	200004f4 	.word	0x200004f4
 8004184:	200004a8 	.word	0x200004a8
 8004188:	200004ac 	.word	0x200004ac
 800418c:	20000508 	.word	0x20000508
 8004190:	20000510 	.word	0x20000510
 8004194:	200004f8 	.word	0x200004f8
 8004198:	200003f4 	.word	0x200003f4
 800419c:	200003f0 	.word	0x200003f0
 80041a0:	20000500 	.word	0x20000500
 80041a4:	20000504 	.word	0x20000504

080041a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <vTaskSwitchContext+0xac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <vTaskSwitchContext+0xb0>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041bc:	e044      	b.n	8004248 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <vTaskSwitchContext+0xb0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <vTaskSwitchContext+0xb4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	f1c3 031f 	rsb	r3, r3, #31
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	4921      	ldr	r1, [pc, #132]	; (8004260 <vTaskSwitchContext+0xb8>)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <vTaskSwitchContext+0x5c>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <vTaskSwitchContext+0x5a>
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4a14      	ldr	r2, [pc, #80]	; (8004260 <vTaskSwitchContext+0xb8>)
 8004210:	4413      	add	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3308      	adds	r3, #8
 8004226:	429a      	cmp	r2, r3
 8004228:	d104      	bne.n	8004234 <vTaskSwitchContext+0x8c>
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <vTaskSwitchContext+0xbc>)
 800423c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <vTaskSwitchContext+0xbc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	334c      	adds	r3, #76	; 0x4c
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <vTaskSwitchContext+0xc0>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000518 	.word	0x20000518
 8004258:	20000504 	.word	0x20000504
 800425c:	200004f8 	.word	0x200004f8
 8004260:	200003f4 	.word	0x200003f4
 8004264:	200003f0 	.word	0x200003f0
 8004268:	20000010 	.word	0x20000010

0800426c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <vTaskPlaceOnEventList+0x44>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3318      	adds	r3, #24
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe feaf 	bl	8002ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042a0:	2101      	movs	r1, #1
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f000 fa6e 	bl	8004784 <prvAddCurrentTaskToDelayedList>
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200003f0 	.word	0x200003f0

080042b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60fb      	str	r3, [r7, #12]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fec2 	bl	800306e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <xTaskRemoveFromEventList+0xac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11c      	bne.n	800432c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe feb9 	bl	800306e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	409a      	lsls	r2, r3
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <xTaskRemoveFromEventList+0xb0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <xTaskRemoveFromEventList+0xb0>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a13      	ldr	r2, [pc, #76]	; (8004368 <xTaskRemoveFromEventList+0xb4>)
 800431c:	441a      	add	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fe fe47 	bl	8002fb8 <vListInsertEnd>
 800432a:	e005      	b.n	8004338 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3318      	adds	r3, #24
 8004330:	4619      	mov	r1, r3
 8004332:	480e      	ldr	r0, [pc, #56]	; (800436c <xTaskRemoveFromEventList+0xb8>)
 8004334:	f7fe fe40 	bl	8002fb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <xTaskRemoveFromEventList+0xbc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	429a      	cmp	r2, r3
 8004344:	d905      	bls.n	8004352 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <xTaskRemoveFromEventList+0xc0>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e001      	b.n	8004356 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004356:	697b      	ldr	r3, [r7, #20]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000518 	.word	0x20000518
 8004364:	200004f8 	.word	0x200004f8
 8004368:	200003f4 	.word	0x200003f4
 800436c:	200004b0 	.word	0x200004b0
 8004370:	200003f0 	.word	0x200003f0
 8004374:	20000504 	.word	0x20000504

08004378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <vTaskInternalSetTimeOutState+0x24>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <vTaskInternalSetTimeOutState+0x28>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	605a      	str	r2, [r3, #4]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000508 	.word	0x20000508
 80043a0:	200004f4 	.word	0x200004f4

080043a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043e6:	f000 fb21 	bl	8004a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <xTaskCheckForTimeOut+0xbc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d102      	bne.n	800440a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	e023      	b.n	8004452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <xTaskCheckForTimeOut+0xc0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d007      	beq.n	8004426 <xTaskCheckForTimeOut+0x82>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e015      	b.n	8004452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	d20b      	bcs.n	8004448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff9b 	bl	8004378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	e004      	b.n	8004452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004452:	f000 fb1b 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8004456:	69fb      	ldr	r3, [r7, #28]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200004f4 	.word	0x200004f4
 8004464:	20000508 	.word	0x20000508

08004468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <vTaskMissedYield+0x14>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000504 	.word	0x20000504

08004480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004488:	f000 f852 	bl	8004530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <prvIdleTask+0x28>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d9f9      	bls.n	8004488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <prvIdleTask+0x2c>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044a4:	e7f0      	b.n	8004488 <prvIdleTask+0x8>
 80044a6:	bf00      	nop
 80044a8:	200003f4 	.word	0x200003f4
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	e00c      	b.n	80044d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <prvInitialiseTaskLists+0x60>)
 80044c8:	4413      	add	r3, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fd49 	bl	8002f62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d9ef      	bls.n	80044bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044dc:	480d      	ldr	r0, [pc, #52]	; (8004514 <prvInitialiseTaskLists+0x64>)
 80044de:	f7fe fd40 	bl	8002f62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044e2:	480d      	ldr	r0, [pc, #52]	; (8004518 <prvInitialiseTaskLists+0x68>)
 80044e4:	f7fe fd3d 	bl	8002f62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044e8:	480c      	ldr	r0, [pc, #48]	; (800451c <prvInitialiseTaskLists+0x6c>)
 80044ea:	f7fe fd3a 	bl	8002f62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ee:	480c      	ldr	r0, [pc, #48]	; (8004520 <prvInitialiseTaskLists+0x70>)
 80044f0:	f7fe fd37 	bl	8002f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044f4:	480b      	ldr	r0, [pc, #44]	; (8004524 <prvInitialiseTaskLists+0x74>)
 80044f6:	f7fe fd34 	bl	8002f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <prvInitialiseTaskLists+0x78>)
 80044fc:	4a05      	ldr	r2, [pc, #20]	; (8004514 <prvInitialiseTaskLists+0x64>)
 80044fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvInitialiseTaskLists+0x7c>)
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <prvInitialiseTaskLists+0x68>)
 8004504:	601a      	str	r2, [r3, #0]
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200003f4 	.word	0x200003f4
 8004514:	20000480 	.word	0x20000480
 8004518:	20000494 	.word	0x20000494
 800451c:	200004b0 	.word	0x200004b0
 8004520:	200004c4 	.word	0x200004c4
 8004524:	200004dc 	.word	0x200004dc
 8004528:	200004a8 	.word	0x200004a8
 800452c:	200004ac 	.word	0x200004ac

08004530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004536:	e019      	b.n	800456c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004538:	f000 fa78 	bl	8004a2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <prvCheckTasksWaitingTermination+0x50>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fd90 	bl	800306e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <prvCheckTasksWaitingTermination+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3b01      	subs	r3, #1
 8004554:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <prvCheckTasksWaitingTermination+0x54>)
 8004556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <prvCheckTasksWaitingTermination+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <prvCheckTasksWaitingTermination+0x58>)
 8004560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004562:	f000 fa93 	bl	8004a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f810 	bl	800458c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <prvCheckTasksWaitingTermination+0x58>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e1      	bne.n	8004538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200004c4 	.word	0x200004c4
 8004584:	200004f0 	.word	0x200004f0
 8004588:	200004d8 	.word	0x200004d8

0800458c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	334c      	adds	r3, #76	; 0x4c
 8004598:	4618      	mov	r0, r3
 800459a:	f000 ff89 	bl	80054b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fc01 	bl	8004db4 <vPortFree>
				vPortFree( pxTCB );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fbfe 	bl	8004db4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045b8:	e018      	b.n	80045ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d103      	bne.n	80045cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fbf5 	bl	8004db4 <vPortFree>
	}
 80045ca:	e00f      	b.n	80045ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d00a      	beq.n	80045ec <prvDeleteTCB+0x60>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60fb      	str	r3, [r7, #12]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <prvDeleteTCB+0x5e>
	}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <prvResetNextTaskUnblockTime+0x40>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <prvResetNextTaskUnblockTime+0x14>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <prvResetNextTaskUnblockTime+0x16>
 8004608:	2300      	movs	r3, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvResetNextTaskUnblockTime+0x44>)
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004616:	e008      	b.n	800462a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <prvResetNextTaskUnblockTime+0x40>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <prvResetNextTaskUnblockTime+0x44>)
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	200004a8 	.word	0x200004a8
 8004638:	20000510 	.word	0x20000510

0800463c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <xTaskGetSchedulerState+0x34>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800464a:	2301      	movs	r3, #1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	e008      	b.n	8004662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <xTaskGetSchedulerState+0x38>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004658:	2302      	movs	r3, #2
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	e001      	b.n	8004662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004662:	687b      	ldr	r3, [r7, #4]
	}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200004fc 	.word	0x200004fc
 8004674:	20000518 	.word	0x20000518

08004678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d06e      	beq.n	800476c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <xTaskPriorityDisinherit+0x100>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d00a      	beq.n	80046ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	429a      	cmp	r2, r3
 80046e0:	d044      	beq.n	800476c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d140      	bne.n	800476c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fcbd 	bl	800306e <uxListRemove>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d115      	bne.n	8004726 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	491f      	ldr	r1, [pc, #124]	; (800477c <xTaskPriorityDisinherit+0x104>)
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xTaskPriorityDisinherit+0xae>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	2201      	movs	r2, #1
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <xTaskPriorityDisinherit+0x108>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4013      	ands	r3, r2
 8004722:	4a17      	ldr	r2, [pc, #92]	; (8004780 <xTaskPriorityDisinherit+0x108>)
 8004724:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f1c3 0207 	rsb	r2, r3, #7
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	2201      	movs	r2, #1
 8004740:	409a      	lsls	r2, r3
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <xTaskPriorityDisinherit+0x108>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <xTaskPriorityDisinherit+0x108>)
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4a08      	ldr	r2, [pc, #32]	; (800477c <xTaskPriorityDisinherit+0x104>)
 800475a:	441a      	add	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fe fc28 	bl	8002fb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800476c:	697b      	ldr	r3, [r7, #20]
	}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200003f0 	.word	0x200003f0
 800477c:	200003f4 	.word	0x200003f4
 8004780:	200004f8 	.word	0x200004f8

08004784 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fc67 	bl	800306e <uxListRemove>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <prvAddCurrentTaskToDelayedList+0xb8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4013      	ands	r3, r2
 80047ba:	4a20      	ldr	r2, [pc, #128]	; (800483c <prvAddCurrentTaskToDelayedList+0xb8>)
 80047bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d10a      	bne.n	80047dc <prvAddCurrentTaskToDelayedList+0x58>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	481a      	ldr	r0, [pc, #104]	; (8004840 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047d6:	f7fe fbef 	bl	8002fb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047da:	e026      	b.n	800482a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d209      	bcs.n	8004808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe fbfc 	bl	8002ffe <vListInsert>
}
 8004806:	e010      	b.n	800482a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <prvAddCurrentTaskToDelayedList+0xc4>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe fbf2 	bl	8002ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <prvAddCurrentTaskToDelayedList+0xc8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	d202      	bcs.n	800482a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6013      	str	r3, [r2, #0]
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200004f4 	.word	0x200004f4
 8004838:	200003f0 	.word	0x200003f0
 800483c:	200004f8 	.word	0x200004f8
 8004840:	200004dc 	.word	0x200004dc
 8004844:	200004ac 	.word	0x200004ac
 8004848:	200004a8 	.word	0x200004a8
 800484c:	20000510 	.word	0x20000510

08004850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3b04      	subs	r3, #4
 8004860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3b04      	subs	r3, #4
 800486e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b04      	subs	r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <pxPortInitialiseStack+0x54>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b14      	subs	r3, #20
 800488a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b20      	subs	r3, #32
 8004896:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	080048a9 	.word	0x080048a9

080048a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvTaskExitError+0x54>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d00a      	beq.n	80048d2 <prvTaskExitError+0x2a>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60fb      	str	r3, [r7, #12]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <prvTaskExitError+0x28>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60bb      	str	r3, [r7, #8]
}
 80048e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048e6:	bf00      	nop
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0fc      	beq.n	80048e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000000c 	.word	0x2000000c

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	f04e 0e0d 	orr.w	lr, lr, #13
 800491e:	4770      	bx	lr

08004920 <pxCurrentTCBConst2>:
 8004920:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004928:	4806      	ldr	r0, [pc, #24]	; (8004944 <prvPortStartFirstTask+0x1c>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	b662      	cpsie	i
 8004934:	b661      	cpsie	f
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	df00      	svc	0
 8004940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004942:	bf00      	nop
 8004944:	e000ed08 	.word	0xe000ed08

08004948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800494e:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <xPortStartScheduler+0xd0>)
 8004950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004970:	b2da      	uxtb	r2, r3
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <xPortStartScheduler+0xd4>)
 8004974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <xPortStartScheduler+0xd8>)
 8004978:	2207      	movs	r2, #7
 800497a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800497c:	e009      	b.n	8004992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <xPortStartScheduler+0xd8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <xPortStartScheduler+0xd8>)
 8004986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d0ef      	beq.n	800497e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <xPortStartScheduler+0xd8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d00a      	beq.n	80049c0 <xPortStartScheduler+0x78>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60bb      	str	r3, [r7, #8]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <xPortStartScheduler+0xd8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <xPortStartScheduler+0xd8>)
 80049c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <xPortStartScheduler+0xd8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <xPortStartScheduler+0xd8>)
 80049d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xPortStartScheduler+0xdc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <xPortStartScheduler+0xdc>)
 80049e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <xPortStartScheduler+0xdc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <xPortStartScheduler+0xdc>)
 80049f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049f6:	f000 f8b9 	bl	8004b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <xPortStartScheduler+0xe0>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a00:	f7ff ff92 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a04:	f7ff fbd0 	bl	80041a8 <vTaskSwitchContext>
	prvTaskExitError();
 8004a08:	f7ff ff4e 	bl	80048a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	e000e400 	.word	0xe000e400
 8004a1c:	2000051c 	.word	0x2000051c
 8004a20:	20000520 	.word	0x20000520
 8004a24:	e000ed20 	.word	0xe000ed20
 8004a28:	2000000c 	.word	0x2000000c

08004a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
}
 8004a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <vPortEnterCritical+0x58>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <vPortEnterCritical+0x58>)
 8004a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <vPortEnterCritical+0x58>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10f      	bne.n	8004a78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <vPortEnterCritical+0x5c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	603b      	str	r3, [r7, #0]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vPortEnterCritical+0x4a>
	}
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000000c 	.word	0x2000000c
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <vPortExitCritical+0x4c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <vPortExitCritical+0x24>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ab0:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <vPortExitCritical+0x4c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <vPortExitCritical+0x4c>)
 8004ab8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <vPortExitCritical+0x4c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <vPortExitCritical+0x42>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
}
 8004acc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	00000000 	.word	0x00000000

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <pxCurrentTCBConst>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004af0:	6010      	str	r0, [r2, #0]
 8004af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004af6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004afa:	f380 8811 	msr	BASEPRI, r0
 8004afe:	f7ff fb53 	bl	80041a8 <vTaskSwitchContext>
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8811 	msr	BASEPRI, r0
 8004b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b16:	f380 8809 	msr	PSP, r0
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	4770      	bx	lr

08004b20 <pxCurrentTCBConst>:
 8004b20:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
}
 8004b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b42:	f7ff fa73 	bl	800402c <xTaskIncrementTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <SysTick_Handler+0x40>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f383 8811 	msr	BASEPRI, r3
}
 8004b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <vPortSetupTimerInterrupt+0x30>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <vPortSetupTimerInterrupt+0x34>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <vPortSetupTimerInterrupt+0x38>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <vPortSetupTimerInterrupt+0x3c>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <vPortSetupTimerInterrupt+0x40>)
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <vPortSetupTimerInterrupt+0x30>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	e000e010 	.word	0xe000e010
 8004ba0:	e000e018 	.word	0xe000e018
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	10624dd3 	.word	0x10624dd3
 8004bac:	e000e014 	.word	0xe000e014

08004bb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bb6:	f3ef 8305 	mrs	r3, IPSR
 8004bba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b0f      	cmp	r3, #15
 8004bc0:	d914      	bls.n	8004bec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bc2:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <vPortValidateInterruptPriority+0x6c>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <vPortValidateInterruptPriority+0x70>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	7afa      	ldrb	r2, [r7, #11]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d20a      	bcs.n	8004bec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	607b      	str	r3, [r7, #4]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <vPortValidateInterruptPriority+0x74>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <vPortValidateInterruptPriority+0x78>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d90a      	bls.n	8004c12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	603b      	str	r3, [r7, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <vPortValidateInterruptPriority+0x60>
	}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e3f0 	.word	0xe000e3f0
 8004c20:	2000051c 	.word	0x2000051c
 8004c24:	e000ed0c 	.word	0xe000ed0c
 8004c28:	20000520 	.word	0x20000520

08004c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c38:	f7ff f94e 	bl	8003ed8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c3c:	4b58      	ldr	r3, [pc, #352]	; (8004da0 <pvPortMalloc+0x174>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c44:	f000 f910 	bl	8004e68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c48:	4b56      	ldr	r3, [pc, #344]	; (8004da4 <pvPortMalloc+0x178>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 808e 	bne.w	8004d72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01d      	beq.n	8004c98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d014      	beq.n	8004c98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	3308      	adds	r3, #8
 8004c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <pvPortMalloc+0x6c>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	617b      	str	r3, [r7, #20]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d069      	beq.n	8004d72 <pvPortMalloc+0x146>
 8004c9e:	4b42      	ldr	r3, [pc, #264]	; (8004da8 <pvPortMalloc+0x17c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d864      	bhi.n	8004d72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ca8:	4b40      	ldr	r3, [pc, #256]	; (8004dac <pvPortMalloc+0x180>)
 8004caa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cac:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <pvPortMalloc+0x180>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb2:	e004      	b.n	8004cbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d903      	bls.n	8004cd0 <pvPortMalloc+0xa4>
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f1      	bne.n	8004cb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cd0:	4b33      	ldr	r3, [pc, #204]	; (8004da0 <pvPortMalloc+0x174>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d04b      	beq.n	8004d72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d91f      	bls.n	8004d3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <pvPortMalloc+0xf8>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	613b      	str	r3, [r7, #16]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d36:	69b8      	ldr	r0, [r7, #24]
 8004d38:	f000 f8f8 	bl	8004f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <pvPortMalloc+0x17c>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <pvPortMalloc+0x17c>)
 8004d48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <pvPortMalloc+0x17c>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <pvPortMalloc+0x184>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d203      	bcs.n	8004d5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <pvPortMalloc+0x17c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <pvPortMalloc+0x184>)
 8004d5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <pvPortMalloc+0x178>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d72:	f7ff f8bf 	bl	8003ef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <pvPortMalloc+0x16a>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <pvPortMalloc+0x168>
	return pvReturn;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	2000112c 	.word	0x2000112c
 8004da4:	20001138 	.word	0x20001138
 8004da8:	20001130 	.word	0x20001130
 8004dac:	20001124 	.word	0x20001124
 8004db0:	20001134 	.word	0x20001134

08004db4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d048      	beq.n	8004e58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	425b      	negs	r3, r3
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <vPortFree+0xac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <vPortFree+0x44>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60fb      	str	r3, [r7, #12]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <vPortFree+0x62>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60bb      	str	r3, [r7, #8]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <vPortFree+0xac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d019      	beq.n	8004e58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d115      	bne.n	8004e58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <vPortFree+0xac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	401a      	ands	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e3c:	f7ff f84c 	bl	8003ed8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <vPortFree+0xb0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	4a06      	ldr	r2, [pc, #24]	; (8004e64 <vPortFree+0xb0>)
 8004e4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f000 f86c 	bl	8004f2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e54:	f7ff f84e 	bl	8003ef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20001138 	.word	0x20001138
 8004e64:	20001130 	.word	0x20001130

08004e68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <prvHeapInit+0xac>)
 8004e76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3307      	adds	r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <prvHeapInit+0xac>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <prvHeapInit+0xb0>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <prvHeapInit+0xb0>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <prvHeapInit+0xb4>)
 8004ec8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <prvHeapInit+0xb4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <prvHeapInit+0xb4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <prvHeapInit+0xb4>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <prvHeapInit+0xb8>)
 8004ef6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <prvHeapInit+0xbc>)
 8004efe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <prvHeapInit+0xc0>)
 8004f02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f06:	601a      	str	r2, [r3, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000524 	.word	0x20000524
 8004f18:	20001124 	.word	0x20001124
 8004f1c:	2000112c 	.word	0x2000112c
 8004f20:	20001134 	.word	0x20001134
 8004f24:	20001130 	.word	0x20001130
 8004f28:	20001138 	.word	0x20001138

08004f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f34:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e002      	b.n	8004f40 <prvInsertBlockIntoFreeList+0x14>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d8f7      	bhi.n	8004f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4413      	add	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d108      	bne.n	8004f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	441a      	add	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	441a      	add	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d118      	bne.n	8004fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <prvInsertBlockIntoFreeList+0xac>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d00d      	beq.n	8004faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e008      	b.n	8004fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <prvInsertBlockIntoFreeList+0xac>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e003      	b.n	8004fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d002      	beq.n	8004fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	20001124 	.word	0x20001124
 8004fd8:	2000112c 	.word	0x2000112c

08004fdc <__errno>:
 8004fdc:	4b01      	ldr	r3, [pc, #4]	; (8004fe4 <__errno+0x8>)
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000010 	.word	0x20000010

08004fe8 <std>:
 8004fe8:	2300      	movs	r3, #0
 8004fea:	b510      	push	{r4, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	e9c0 3300 	strd	r3, r3, [r0]
 8004ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ff6:	6083      	str	r3, [r0, #8]
 8004ff8:	8181      	strh	r1, [r0, #12]
 8004ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8004ffc:	81c2      	strh	r2, [r0, #14]
 8004ffe:	6183      	str	r3, [r0, #24]
 8005000:	4619      	mov	r1, r3
 8005002:	2208      	movs	r2, #8
 8005004:	305c      	adds	r0, #92	; 0x5c
 8005006:	f000 f91a 	bl	800523e <memset>
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <std+0x38>)
 800500c:	6224      	str	r4, [r4, #32]
 800500e:	6263      	str	r3, [r4, #36]	; 0x24
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <std+0x3c>)
 8005012:	62a3      	str	r3, [r4, #40]	; 0x28
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <std+0x40>)
 8005016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <std+0x44>)
 800501a:	6323      	str	r3, [r4, #48]	; 0x30
 800501c:	bd10      	pop	{r4, pc}
 800501e:	bf00      	nop
 8005020:	08005589 	.word	0x08005589
 8005024:	080055ab 	.word	0x080055ab
 8005028:	080055e3 	.word	0x080055e3
 800502c:	08005607 	.word	0x08005607

08005030 <_cleanup_r>:
 8005030:	4901      	ldr	r1, [pc, #4]	; (8005038 <_cleanup_r+0x8>)
 8005032:	f000 b8af 	b.w	8005194 <_fwalk_reent>
 8005036:	bf00      	nop
 8005038:	080058d9 	.word	0x080058d9

0800503c <__sfmoreglue>:
 800503c:	2268      	movs	r2, #104	; 0x68
 800503e:	b570      	push	{r4, r5, r6, lr}
 8005040:	1e4d      	subs	r5, r1, #1
 8005042:	4355      	muls	r5, r2
 8005044:	460e      	mov	r6, r1
 8005046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800504a:	f000 f921 	bl	8005290 <_malloc_r>
 800504e:	4604      	mov	r4, r0
 8005050:	b140      	cbz	r0, 8005064 <__sfmoreglue+0x28>
 8005052:	2100      	movs	r1, #0
 8005054:	e9c0 1600 	strd	r1, r6, [r0]
 8005058:	300c      	adds	r0, #12
 800505a:	60a0      	str	r0, [r4, #8]
 800505c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005060:	f000 f8ed 	bl	800523e <memset>
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}

08005068 <__sfp_lock_acquire>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__sfp_lock_acquire+0x8>)
 800506a:	f000 b8d8 	b.w	800521e <__retarget_lock_acquire_recursive>
 800506e:	bf00      	nop
 8005070:	2000113d 	.word	0x2000113d

08005074 <__sfp_lock_release>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sfp_lock_release+0x8>)
 8005076:	f000 b8d3 	b.w	8005220 <__retarget_lock_release_recursive>
 800507a:	bf00      	nop
 800507c:	2000113d 	.word	0x2000113d

08005080 <__sinit_lock_acquire>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sinit_lock_acquire+0x8>)
 8005082:	f000 b8cc 	b.w	800521e <__retarget_lock_acquire_recursive>
 8005086:	bf00      	nop
 8005088:	2000113e 	.word	0x2000113e

0800508c <__sinit_lock_release>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__sinit_lock_release+0x8>)
 800508e:	f000 b8c7 	b.w	8005220 <__retarget_lock_release_recursive>
 8005092:	bf00      	nop
 8005094:	2000113e 	.word	0x2000113e

08005098 <__sinit>:
 8005098:	b510      	push	{r4, lr}
 800509a:	4604      	mov	r4, r0
 800509c:	f7ff fff0 	bl	8005080 <__sinit_lock_acquire>
 80050a0:	69a3      	ldr	r3, [r4, #24]
 80050a2:	b11b      	cbz	r3, 80050ac <__sinit+0x14>
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f7ff bff0 	b.w	800508c <__sinit_lock_release>
 80050ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050b0:	6523      	str	r3, [r4, #80]	; 0x50
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <__sinit+0x68>)
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <__sinit+0x6c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	bf08      	it	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	4620      	mov	r0, r4
 80050c2:	bf08      	it	eq
 80050c4:	61a3      	streq	r3, [r4, #24]
 80050c6:	f000 f81f 	bl	8005108 <__sfp>
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f81b 	bl	8005108 <__sfp>
 80050d2:	60a0      	str	r0, [r4, #8]
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 f817 	bl	8005108 <__sfp>
 80050da:	2200      	movs	r2, #0
 80050dc:	2104      	movs	r1, #4
 80050de:	60e0      	str	r0, [r4, #12]
 80050e0:	6860      	ldr	r0, [r4, #4]
 80050e2:	f7ff ff81 	bl	8004fe8 <std>
 80050e6:	2201      	movs	r2, #1
 80050e8:	2109      	movs	r1, #9
 80050ea:	68a0      	ldr	r0, [r4, #8]
 80050ec:	f7ff ff7c 	bl	8004fe8 <std>
 80050f0:	2202      	movs	r2, #2
 80050f2:	2112      	movs	r1, #18
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	f7ff ff77 	bl	8004fe8 <std>
 80050fa:	2301      	movs	r3, #1
 80050fc:	61a3      	str	r3, [r4, #24]
 80050fe:	e7d1      	b.n	80050a4 <__sinit+0xc>
 8005100:	080062c0 	.word	0x080062c0
 8005104:	08005031 	.word	0x08005031

08005108 <__sfp>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	4607      	mov	r7, r0
 800510c:	f7ff ffac 	bl	8005068 <__sfp_lock_acquire>
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <__sfp+0x84>)
 8005112:	681e      	ldr	r6, [r3, #0]
 8005114:	69b3      	ldr	r3, [r6, #24]
 8005116:	b913      	cbnz	r3, 800511e <__sfp+0x16>
 8005118:	4630      	mov	r0, r6
 800511a:	f7ff ffbd 	bl	8005098 <__sinit>
 800511e:	3648      	adds	r6, #72	; 0x48
 8005120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005124:	3b01      	subs	r3, #1
 8005126:	d503      	bpl.n	8005130 <__sfp+0x28>
 8005128:	6833      	ldr	r3, [r6, #0]
 800512a:	b30b      	cbz	r3, 8005170 <__sfp+0x68>
 800512c:	6836      	ldr	r6, [r6, #0]
 800512e:	e7f7      	b.n	8005120 <__sfp+0x18>
 8005130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005134:	b9d5      	cbnz	r5, 800516c <__sfp+0x64>
 8005136:	4b16      	ldr	r3, [pc, #88]	; (8005190 <__sfp+0x88>)
 8005138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800513c:	60e3      	str	r3, [r4, #12]
 800513e:	6665      	str	r5, [r4, #100]	; 0x64
 8005140:	f000 f86c 	bl	800521c <__retarget_lock_init_recursive>
 8005144:	f7ff ff96 	bl	8005074 <__sfp_lock_release>
 8005148:	2208      	movs	r2, #8
 800514a:	4629      	mov	r1, r5
 800514c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005154:	6025      	str	r5, [r4, #0]
 8005156:	61a5      	str	r5, [r4, #24]
 8005158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800515c:	f000 f86f 	bl	800523e <memset>
 8005160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005168:	4620      	mov	r0, r4
 800516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516c:	3468      	adds	r4, #104	; 0x68
 800516e:	e7d9      	b.n	8005124 <__sfp+0x1c>
 8005170:	2104      	movs	r1, #4
 8005172:	4638      	mov	r0, r7
 8005174:	f7ff ff62 	bl	800503c <__sfmoreglue>
 8005178:	4604      	mov	r4, r0
 800517a:	6030      	str	r0, [r6, #0]
 800517c:	2800      	cmp	r0, #0
 800517e:	d1d5      	bne.n	800512c <__sfp+0x24>
 8005180:	f7ff ff78 	bl	8005074 <__sfp_lock_release>
 8005184:	230c      	movs	r3, #12
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	e7ee      	b.n	8005168 <__sfp+0x60>
 800518a:	bf00      	nop
 800518c:	080062c0 	.word	0x080062c0
 8005190:	ffff0001 	.word	0xffff0001

08005194 <_fwalk_reent>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	4606      	mov	r6, r0
 800519a:	4688      	mov	r8, r1
 800519c:	2700      	movs	r7, #0
 800519e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a6:	f1b9 0901 	subs.w	r9, r9, #1
 80051aa:	d505      	bpl.n	80051b8 <_fwalk_reent+0x24>
 80051ac:	6824      	ldr	r4, [r4, #0]
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d1f7      	bne.n	80051a2 <_fwalk_reent+0xe>
 80051b2:	4638      	mov	r0, r7
 80051b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b8:	89ab      	ldrh	r3, [r5, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d907      	bls.n	80051ce <_fwalk_reent+0x3a>
 80051be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c2:	3301      	adds	r3, #1
 80051c4:	d003      	beq.n	80051ce <_fwalk_reent+0x3a>
 80051c6:	4629      	mov	r1, r5
 80051c8:	4630      	mov	r0, r6
 80051ca:	47c0      	blx	r8
 80051cc:	4307      	orrs	r7, r0
 80051ce:	3568      	adds	r5, #104	; 0x68
 80051d0:	e7e9      	b.n	80051a6 <_fwalk_reent+0x12>
	...

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	2600      	movs	r6, #0
 80051d8:	4d0c      	ldr	r5, [pc, #48]	; (800520c <__libc_init_array+0x38>)
 80051da:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051dc:	1b64      	subs	r4, r4, r5
 80051de:	10a4      	asrs	r4, r4, #2
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	f000 ffb0 	bl	8006148 <_init>
 80051e8:	2600      	movs	r6, #0
 80051ea:	4d0a      	ldr	r5, [pc, #40]	; (8005214 <__libc_init_array+0x40>)
 80051ec:	4c0a      	ldr	r4, [pc, #40]	; (8005218 <__libc_init_array+0x44>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	080062f8 	.word	0x080062f8
 8005210:	080062f8 	.word	0x080062f8
 8005214:	080062f8 	.word	0x080062f8
 8005218:	080062fc 	.word	0x080062fc

0800521c <__retarget_lock_init_recursive>:
 800521c:	4770      	bx	lr

0800521e <__retarget_lock_acquire_recursive>:
 800521e:	4770      	bx	lr

08005220 <__retarget_lock_release_recursive>:
 8005220:	4770      	bx	lr

08005222 <memcpy>:
 8005222:	440a      	add	r2, r1
 8005224:	4291      	cmp	r1, r2
 8005226:	f100 33ff 	add.w	r3, r0, #4294967295
 800522a:	d100      	bne.n	800522e <memcpy+0xc>
 800522c:	4770      	bx	lr
 800522e:	b510      	push	{r4, lr}
 8005230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005234:	4291      	cmp	r1, r2
 8005236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800523a:	d1f9      	bne.n	8005230 <memcpy+0xe>
 800523c:	bd10      	pop	{r4, pc}

0800523e <memset>:
 800523e:	4603      	mov	r3, r0
 8005240:	4402      	add	r2, r0
 8005242:	4293      	cmp	r3, r2
 8005244:	d100      	bne.n	8005248 <memset+0xa>
 8005246:	4770      	bx	lr
 8005248:	f803 1b01 	strb.w	r1, [r3], #1
 800524c:	e7f9      	b.n	8005242 <memset+0x4>
	...

08005250 <sbrk_aligned>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4e0e      	ldr	r6, [pc, #56]	; (800528c <sbrk_aligned+0x3c>)
 8005254:	460c      	mov	r4, r1
 8005256:	6831      	ldr	r1, [r6, #0]
 8005258:	4605      	mov	r5, r0
 800525a:	b911      	cbnz	r1, 8005262 <sbrk_aligned+0x12>
 800525c:	f000 f984 	bl	8005568 <_sbrk_r>
 8005260:	6030      	str	r0, [r6, #0]
 8005262:	4621      	mov	r1, r4
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f97f 	bl	8005568 <_sbrk_r>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d00a      	beq.n	8005284 <sbrk_aligned+0x34>
 800526e:	1cc4      	adds	r4, r0, #3
 8005270:	f024 0403 	bic.w	r4, r4, #3
 8005274:	42a0      	cmp	r0, r4
 8005276:	d007      	beq.n	8005288 <sbrk_aligned+0x38>
 8005278:	1a21      	subs	r1, r4, r0
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f974 	bl	8005568 <_sbrk_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d101      	bne.n	8005288 <sbrk_aligned+0x38>
 8005284:	f04f 34ff 	mov.w	r4, #4294967295
 8005288:	4620      	mov	r0, r4
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	20001144 	.word	0x20001144

08005290 <_malloc_r>:
 8005290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	1ccd      	adds	r5, r1, #3
 8005296:	f025 0503 	bic.w	r5, r5, #3
 800529a:	3508      	adds	r5, #8
 800529c:	2d0c      	cmp	r5, #12
 800529e:	bf38      	it	cc
 80052a0:	250c      	movcc	r5, #12
 80052a2:	2d00      	cmp	r5, #0
 80052a4:	4607      	mov	r7, r0
 80052a6:	db01      	blt.n	80052ac <_malloc_r+0x1c>
 80052a8:	42a9      	cmp	r1, r5
 80052aa:	d905      	bls.n	80052b8 <_malloc_r+0x28>
 80052ac:	230c      	movs	r3, #12
 80052ae:	2600      	movs	r6, #0
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4630      	mov	r0, r6
 80052b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b8:	4e2e      	ldr	r6, [pc, #184]	; (8005374 <_malloc_r+0xe4>)
 80052ba:	f000 fbc1 	bl	8005a40 <__malloc_lock>
 80052be:	6833      	ldr	r3, [r6, #0]
 80052c0:	461c      	mov	r4, r3
 80052c2:	bb34      	cbnz	r4, 8005312 <_malloc_r+0x82>
 80052c4:	4629      	mov	r1, r5
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ffc2 	bl	8005250 <sbrk_aligned>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	4604      	mov	r4, r0
 80052d0:	d14d      	bne.n	800536e <_malloc_r+0xde>
 80052d2:	6834      	ldr	r4, [r6, #0]
 80052d4:	4626      	mov	r6, r4
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d140      	bne.n	800535c <_malloc_r+0xcc>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4631      	mov	r1, r6
 80052de:	4638      	mov	r0, r7
 80052e0:	eb04 0803 	add.w	r8, r4, r3
 80052e4:	f000 f940 	bl	8005568 <_sbrk_r>
 80052e8:	4580      	cmp	r8, r0
 80052ea:	d13a      	bne.n	8005362 <_malloc_r+0xd2>
 80052ec:	6821      	ldr	r1, [r4, #0]
 80052ee:	3503      	adds	r5, #3
 80052f0:	1a6d      	subs	r5, r5, r1
 80052f2:	f025 0503 	bic.w	r5, r5, #3
 80052f6:	3508      	adds	r5, #8
 80052f8:	2d0c      	cmp	r5, #12
 80052fa:	bf38      	it	cc
 80052fc:	250c      	movcc	r5, #12
 80052fe:	4638      	mov	r0, r7
 8005300:	4629      	mov	r1, r5
 8005302:	f7ff ffa5 	bl	8005250 <sbrk_aligned>
 8005306:	3001      	adds	r0, #1
 8005308:	d02b      	beq.n	8005362 <_malloc_r+0xd2>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	442b      	add	r3, r5
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	e00e      	b.n	8005330 <_malloc_r+0xa0>
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	1b52      	subs	r2, r2, r5
 8005316:	d41e      	bmi.n	8005356 <_malloc_r+0xc6>
 8005318:	2a0b      	cmp	r2, #11
 800531a:	d916      	bls.n	800534a <_malloc_r+0xba>
 800531c:	1961      	adds	r1, r4, r5
 800531e:	42a3      	cmp	r3, r4
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	bf18      	it	ne
 8005324:	6059      	strne	r1, [r3, #4]
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	bf08      	it	eq
 800532a:	6031      	streq	r1, [r6, #0]
 800532c:	5162      	str	r2, [r4, r5]
 800532e:	604b      	str	r3, [r1, #4]
 8005330:	4638      	mov	r0, r7
 8005332:	f104 060b 	add.w	r6, r4, #11
 8005336:	f000 fb89 	bl	8005a4c <__malloc_unlock>
 800533a:	f026 0607 	bic.w	r6, r6, #7
 800533e:	1d23      	adds	r3, r4, #4
 8005340:	1af2      	subs	r2, r6, r3
 8005342:	d0b6      	beq.n	80052b2 <_malloc_r+0x22>
 8005344:	1b9b      	subs	r3, r3, r6
 8005346:	50a3      	str	r3, [r4, r2]
 8005348:	e7b3      	b.n	80052b2 <_malloc_r+0x22>
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	42a3      	cmp	r3, r4
 800534e:	bf0c      	ite	eq
 8005350:	6032      	streq	r2, [r6, #0]
 8005352:	605a      	strne	r2, [r3, #4]
 8005354:	e7ec      	b.n	8005330 <_malloc_r+0xa0>
 8005356:	4623      	mov	r3, r4
 8005358:	6864      	ldr	r4, [r4, #4]
 800535a:	e7b2      	b.n	80052c2 <_malloc_r+0x32>
 800535c:	4634      	mov	r4, r6
 800535e:	6876      	ldr	r6, [r6, #4]
 8005360:	e7b9      	b.n	80052d6 <_malloc_r+0x46>
 8005362:	230c      	movs	r3, #12
 8005364:	4638      	mov	r0, r7
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	f000 fb70 	bl	8005a4c <__malloc_unlock>
 800536c:	e7a1      	b.n	80052b2 <_malloc_r+0x22>
 800536e:	6025      	str	r5, [r4, #0]
 8005370:	e7de      	b.n	8005330 <_malloc_r+0xa0>
 8005372:	bf00      	nop
 8005374:	20001140 	.word	0x20001140

08005378 <iprintf>:
 8005378:	b40f      	push	{r0, r1, r2, r3}
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <iprintf+0x2c>)
 800537c:	b513      	push	{r0, r1, r4, lr}
 800537e:	681c      	ldr	r4, [r3, #0]
 8005380:	b124      	cbz	r4, 800538c <iprintf+0x14>
 8005382:	69a3      	ldr	r3, [r4, #24]
 8005384:	b913      	cbnz	r3, 800538c <iprintf+0x14>
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff fe86 	bl	8005098 <__sinit>
 800538c:	ab05      	add	r3, sp, #20
 800538e:	4620      	mov	r0, r4
 8005390:	9a04      	ldr	r2, [sp, #16]
 8005392:	68a1      	ldr	r1, [r4, #8]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f000 fbcf 	bl	8005b38 <_vfiprintf_r>
 800539a:	b002      	add	sp, #8
 800539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	20000010 	.word	0x20000010

080053a8 <_puts_r>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	460e      	mov	r6, r1
 80053ac:	4605      	mov	r5, r0
 80053ae:	b118      	cbz	r0, 80053b8 <_puts_r+0x10>
 80053b0:	6983      	ldr	r3, [r0, #24]
 80053b2:	b90b      	cbnz	r3, 80053b8 <_puts_r+0x10>
 80053b4:	f7ff fe70 	bl	8005098 <__sinit>
 80053b8:	69ab      	ldr	r3, [r5, #24]
 80053ba:	68ac      	ldr	r4, [r5, #8]
 80053bc:	b913      	cbnz	r3, 80053c4 <_puts_r+0x1c>
 80053be:	4628      	mov	r0, r5
 80053c0:	f7ff fe6a 	bl	8005098 <__sinit>
 80053c4:	4b2c      	ldr	r3, [pc, #176]	; (8005478 <_puts_r+0xd0>)
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d120      	bne.n	800540c <_puts_r+0x64>
 80053ca:	686c      	ldr	r4, [r5, #4]
 80053cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ce:	07db      	lsls	r3, r3, #31
 80053d0:	d405      	bmi.n	80053de <_puts_r+0x36>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	0598      	lsls	r0, r3, #22
 80053d6:	d402      	bmi.n	80053de <_puts_r+0x36>
 80053d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053da:	f7ff ff20 	bl	800521e <__retarget_lock_acquire_recursive>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	0719      	lsls	r1, r3, #28
 80053e2:	d51d      	bpl.n	8005420 <_puts_r+0x78>
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	b1db      	cbz	r3, 8005420 <_puts_r+0x78>
 80053e8:	3e01      	subs	r6, #1
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053f0:	3b01      	subs	r3, #1
 80053f2:	60a3      	str	r3, [r4, #8]
 80053f4:	bb39      	cbnz	r1, 8005446 <_puts_r+0x9e>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da38      	bge.n	800546c <_puts_r+0xc4>
 80053fa:	4622      	mov	r2, r4
 80053fc:	210a      	movs	r1, #10
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f906 	bl	8005610 <__swbuf_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d011      	beq.n	800542c <_puts_r+0x84>
 8005408:	250a      	movs	r5, #10
 800540a:	e011      	b.n	8005430 <_puts_r+0x88>
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <_puts_r+0xd4>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d101      	bne.n	8005416 <_puts_r+0x6e>
 8005412:	68ac      	ldr	r4, [r5, #8]
 8005414:	e7da      	b.n	80053cc <_puts_r+0x24>
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <_puts_r+0xd8>)
 8005418:	429c      	cmp	r4, r3
 800541a:	bf08      	it	eq
 800541c:	68ec      	ldreq	r4, [r5, #12]
 800541e:	e7d5      	b.n	80053cc <_puts_r+0x24>
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f958 	bl	80056d8 <__swsetup_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	d0dd      	beq.n	80053e8 <_puts_r+0x40>
 800542c:	f04f 35ff 	mov.w	r5, #4294967295
 8005430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d405      	bmi.n	8005442 <_puts_r+0x9a>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	059b      	lsls	r3, r3, #22
 800543a:	d402      	bmi.n	8005442 <_puts_r+0x9a>
 800543c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543e:	f7ff feef 	bl	8005220 <__retarget_lock_release_recursive>
 8005442:	4628      	mov	r0, r5
 8005444:	bd70      	pop	{r4, r5, r6, pc}
 8005446:	2b00      	cmp	r3, #0
 8005448:	da04      	bge.n	8005454 <_puts_r+0xac>
 800544a:	69a2      	ldr	r2, [r4, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	dc06      	bgt.n	800545e <_puts_r+0xb6>
 8005450:	290a      	cmp	r1, #10
 8005452:	d004      	beq.n	800545e <_puts_r+0xb6>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	7019      	strb	r1, [r3, #0]
 800545c:	e7c5      	b.n	80053ea <_puts_r+0x42>
 800545e:	4622      	mov	r2, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 f8d5 	bl	8005610 <__swbuf_r>
 8005466:	3001      	adds	r0, #1
 8005468:	d1bf      	bne.n	80053ea <_puts_r+0x42>
 800546a:	e7df      	b.n	800542c <_puts_r+0x84>
 800546c:	250a      	movs	r5, #10
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	701d      	strb	r5, [r3, #0]
 8005476:	e7db      	b.n	8005430 <_puts_r+0x88>
 8005478:	08006280 	.word	0x08006280
 800547c:	080062a0 	.word	0x080062a0
 8005480:	08006260 	.word	0x08006260

08005484 <puts>:
 8005484:	4b02      	ldr	r3, [pc, #8]	; (8005490 <puts+0xc>)
 8005486:	4601      	mov	r1, r0
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	f7ff bf8d 	b.w	80053a8 <_puts_r>
 800548e:	bf00      	nop
 8005490:	20000010 	.word	0x20000010

08005494 <cleanup_glue>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	460c      	mov	r4, r1
 8005498:	6809      	ldr	r1, [r1, #0]
 800549a:	4605      	mov	r5, r0
 800549c:	b109      	cbz	r1, 80054a2 <cleanup_glue+0xe>
 800549e:	f7ff fff9 	bl	8005494 <cleanup_glue>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054aa:	f000 bad5 	b.w	8005a58 <_free_r>
	...

080054b0 <_reclaim_reent>:
 80054b0:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <_reclaim_reent+0xb4>)
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4604      	mov	r4, r0
 80054b8:	4283      	cmp	r3, r0
 80054ba:	d051      	beq.n	8005560 <_reclaim_reent+0xb0>
 80054bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054be:	b143      	cbz	r3, 80054d2 <_reclaim_reent+0x22>
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d14a      	bne.n	800555c <_reclaim_reent+0xac>
 80054c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	b111      	cbz	r1, 80054d2 <_reclaim_reent+0x22>
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 fac3 	bl	8005a58 <_free_r>
 80054d2:	6961      	ldr	r1, [r4, #20]
 80054d4:	b111      	cbz	r1, 80054dc <_reclaim_reent+0x2c>
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fabe 	bl	8005a58 <_free_r>
 80054dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054de:	b111      	cbz	r1, 80054e6 <_reclaim_reent+0x36>
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fab9 	bl	8005a58 <_free_r>
 80054e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054e8:	b111      	cbz	r1, 80054f0 <_reclaim_reent+0x40>
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fab4 	bl	8005a58 <_free_r>
 80054f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054f2:	b111      	cbz	r1, 80054fa <_reclaim_reent+0x4a>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 faaf 	bl	8005a58 <_free_r>
 80054fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054fc:	b111      	cbz	r1, 8005504 <_reclaim_reent+0x54>
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 faaa 	bl	8005a58 <_free_r>
 8005504:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005506:	b111      	cbz	r1, 800550e <_reclaim_reent+0x5e>
 8005508:	4620      	mov	r0, r4
 800550a:	f000 faa5 	bl	8005a58 <_free_r>
 800550e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005510:	b111      	cbz	r1, 8005518 <_reclaim_reent+0x68>
 8005512:	4620      	mov	r0, r4
 8005514:	f000 faa0 	bl	8005a58 <_free_r>
 8005518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800551a:	b111      	cbz	r1, 8005522 <_reclaim_reent+0x72>
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fa9b 	bl	8005a58 <_free_r>
 8005522:	69a3      	ldr	r3, [r4, #24]
 8005524:	b1e3      	cbz	r3, 8005560 <_reclaim_reent+0xb0>
 8005526:	4620      	mov	r0, r4
 8005528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800552a:	4798      	blx	r3
 800552c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800552e:	b1b9      	cbz	r1, 8005560 <_reclaim_reent+0xb0>
 8005530:	4620      	mov	r0, r4
 8005532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005536:	f7ff bfad 	b.w	8005494 <cleanup_glue>
 800553a:	5949      	ldr	r1, [r1, r5]
 800553c:	b941      	cbnz	r1, 8005550 <_reclaim_reent+0xa0>
 800553e:	3504      	adds	r5, #4
 8005540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005542:	2d80      	cmp	r5, #128	; 0x80
 8005544:	68d9      	ldr	r1, [r3, #12]
 8005546:	d1f8      	bne.n	800553a <_reclaim_reent+0x8a>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fa85 	bl	8005a58 <_free_r>
 800554e:	e7ba      	b.n	80054c6 <_reclaim_reent+0x16>
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fa80 	bl	8005a58 <_free_r>
 8005558:	4631      	mov	r1, r6
 800555a:	e7ef      	b.n	800553c <_reclaim_reent+0x8c>
 800555c:	2500      	movs	r5, #0
 800555e:	e7ef      	b.n	8005540 <_reclaim_reent+0x90>
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	bf00      	nop
 8005564:	20000010 	.word	0x20000010

08005568 <_sbrk_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	2300      	movs	r3, #0
 800556c:	4d05      	ldr	r5, [pc, #20]	; (8005584 <_sbrk_r+0x1c>)
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fb f954 	bl	8000820 <_sbrk>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_sbrk_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_sbrk_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20001148 	.word	0x20001148

08005588 <__sread>:
 8005588:	b510      	push	{r4, lr}
 800558a:	460c      	mov	r4, r1
 800558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005590:	f000 fd98 	bl	80060c4 <_read_r>
 8005594:	2800      	cmp	r0, #0
 8005596:	bfab      	itete	ge
 8005598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800559a:	89a3      	ldrhlt	r3, [r4, #12]
 800559c:	181b      	addge	r3, r3, r0
 800559e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055a2:	bfac      	ite	ge
 80055a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055a6:	81a3      	strhlt	r3, [r4, #12]
 80055a8:	bd10      	pop	{r4, pc}

080055aa <__swrite>:
 80055aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	461f      	mov	r7, r3
 80055b0:	898b      	ldrh	r3, [r1, #12]
 80055b2:	4605      	mov	r5, r0
 80055b4:	05db      	lsls	r3, r3, #23
 80055b6:	460c      	mov	r4, r1
 80055b8:	4616      	mov	r6, r2
 80055ba:	d505      	bpl.n	80055c8 <__swrite+0x1e>
 80055bc:	2302      	movs	r3, #2
 80055be:	2200      	movs	r2, #0
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	f000 f9c4 	bl	8005950 <_lseek_r>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	4632      	mov	r2, r6
 80055cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	4628      	mov	r0, r5
 80055d4:	463b      	mov	r3, r7
 80055d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	f000 b869 	b.w	80056b4 <_write_r>

080055e2 <__sseek>:
 80055e2:	b510      	push	{r4, lr}
 80055e4:	460c      	mov	r4, r1
 80055e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ea:	f000 f9b1 	bl	8005950 <_lseek_r>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	bf15      	itete	ne
 80055f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055fe:	81a3      	strheq	r3, [r4, #12]
 8005600:	bf18      	it	ne
 8005602:	81a3      	strhne	r3, [r4, #12]
 8005604:	bd10      	pop	{r4, pc}

08005606 <__sclose>:
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 b8d3 	b.w	80057b4 <_close_r>
	...

08005610 <__swbuf_r>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	460e      	mov	r6, r1
 8005614:	4614      	mov	r4, r2
 8005616:	4605      	mov	r5, r0
 8005618:	b118      	cbz	r0, 8005622 <__swbuf_r+0x12>
 800561a:	6983      	ldr	r3, [r0, #24]
 800561c:	b90b      	cbnz	r3, 8005622 <__swbuf_r+0x12>
 800561e:	f7ff fd3b 	bl	8005098 <__sinit>
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <__swbuf_r+0x98>)
 8005624:	429c      	cmp	r4, r3
 8005626:	d12b      	bne.n	8005680 <__swbuf_r+0x70>
 8005628:	686c      	ldr	r4, [r5, #4]
 800562a:	69a3      	ldr	r3, [r4, #24]
 800562c:	60a3      	str	r3, [r4, #8]
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	071a      	lsls	r2, r3, #28
 8005632:	d52f      	bpl.n	8005694 <__swbuf_r+0x84>
 8005634:	6923      	ldr	r3, [r4, #16]
 8005636:	b36b      	cbz	r3, 8005694 <__swbuf_r+0x84>
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	b2f6      	uxtb	r6, r6
 800563e:	1ac0      	subs	r0, r0, r3
 8005640:	6963      	ldr	r3, [r4, #20]
 8005642:	4637      	mov	r7, r6
 8005644:	4283      	cmp	r3, r0
 8005646:	dc04      	bgt.n	8005652 <__swbuf_r+0x42>
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f944 	bl	80058d8 <_fflush_r>
 8005650:	bb30      	cbnz	r0, 80056a0 <__swbuf_r+0x90>
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	3001      	adds	r0, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	701e      	strb	r6, [r3, #0]
 8005662:	6963      	ldr	r3, [r4, #20]
 8005664:	4283      	cmp	r3, r0
 8005666:	d004      	beq.n	8005672 <__swbuf_r+0x62>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	07db      	lsls	r3, r3, #31
 800566c:	d506      	bpl.n	800567c <__swbuf_r+0x6c>
 800566e:	2e0a      	cmp	r6, #10
 8005670:	d104      	bne.n	800567c <__swbuf_r+0x6c>
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f92f 	bl	80058d8 <_fflush_r>
 800567a:	b988      	cbnz	r0, 80056a0 <__swbuf_r+0x90>
 800567c:	4638      	mov	r0, r7
 800567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <__swbuf_r+0x9c>)
 8005682:	429c      	cmp	r4, r3
 8005684:	d101      	bne.n	800568a <__swbuf_r+0x7a>
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	e7cf      	b.n	800562a <__swbuf_r+0x1a>
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <__swbuf_r+0xa0>)
 800568c:	429c      	cmp	r4, r3
 800568e:	bf08      	it	eq
 8005690:	68ec      	ldreq	r4, [r5, #12]
 8005692:	e7ca      	b.n	800562a <__swbuf_r+0x1a>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f81e 	bl	80056d8 <__swsetup_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	d0cb      	beq.n	8005638 <__swbuf_r+0x28>
 80056a0:	f04f 37ff 	mov.w	r7, #4294967295
 80056a4:	e7ea      	b.n	800567c <__swbuf_r+0x6c>
 80056a6:	bf00      	nop
 80056a8:	08006280 	.word	0x08006280
 80056ac:	080062a0 	.word	0x080062a0
 80056b0:	08006260 	.word	0x08006260

080056b4 <_write_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	2200      	movs	r2, #0
 80056be:	4d05      	ldr	r5, [pc, #20]	; (80056d4 <_write_r+0x20>)
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f7fa fd5c 	bl	8000180 <_write>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_write_r+0x1e>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_write_r+0x1e>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20001148 	.word	0x20001148

080056d8 <__swsetup_r>:
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <__swsetup_r+0xcc>)
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	4606      	mov	r6, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	b125      	cbz	r5, 80056ee <__swsetup_r+0x16>
 80056e4:	69ab      	ldr	r3, [r5, #24]
 80056e6:	b913      	cbnz	r3, 80056ee <__swsetup_r+0x16>
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff fcd5 	bl	8005098 <__sinit>
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <__swsetup_r+0xd0>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d10f      	bne.n	8005714 <__swsetup_r+0x3c>
 80056f4:	686c      	ldr	r4, [r5, #4]
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fc:	0719      	lsls	r1, r3, #28
 80056fe:	d42c      	bmi.n	800575a <__swsetup_r+0x82>
 8005700:	06dd      	lsls	r5, r3, #27
 8005702:	d411      	bmi.n	8005728 <__swsetup_r+0x50>
 8005704:	2309      	movs	r3, #9
 8005706:	6033      	str	r3, [r6, #0]
 8005708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	e03e      	b.n	8005792 <__swsetup_r+0xba>
 8005714:	4b25      	ldr	r3, [pc, #148]	; (80057ac <__swsetup_r+0xd4>)
 8005716:	429c      	cmp	r4, r3
 8005718:	d101      	bne.n	800571e <__swsetup_r+0x46>
 800571a:	68ac      	ldr	r4, [r5, #8]
 800571c:	e7eb      	b.n	80056f6 <__swsetup_r+0x1e>
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <__swsetup_r+0xd8>)
 8005720:	429c      	cmp	r4, r3
 8005722:	bf08      	it	eq
 8005724:	68ec      	ldreq	r4, [r5, #12]
 8005726:	e7e6      	b.n	80056f6 <__swsetup_r+0x1e>
 8005728:	0758      	lsls	r0, r3, #29
 800572a:	d512      	bpl.n	8005752 <__swsetup_r+0x7a>
 800572c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800572e:	b141      	cbz	r1, 8005742 <__swsetup_r+0x6a>
 8005730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005734:	4299      	cmp	r1, r3
 8005736:	d002      	beq.n	800573e <__swsetup_r+0x66>
 8005738:	4630      	mov	r0, r6
 800573a:	f000 f98d 	bl	8005a58 <_free_r>
 800573e:	2300      	movs	r3, #0
 8005740:	6363      	str	r3, [r4, #52]	; 0x34
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	2300      	movs	r3, #0
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	b94b      	cbnz	r3, 8005772 <__swsetup_r+0x9a>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005768:	d003      	beq.n	8005772 <__swsetup_r+0x9a>
 800576a:	4621      	mov	r1, r4
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f927 	bl	80059c0 <__smakebuf_r>
 8005772:	89a0      	ldrh	r0, [r4, #12]
 8005774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005778:	f010 0301 	ands.w	r3, r0, #1
 800577c:	d00a      	beq.n	8005794 <__swsetup_r+0xbc>
 800577e:	2300      	movs	r3, #0
 8005780:	60a3      	str	r3, [r4, #8]
 8005782:	6963      	ldr	r3, [r4, #20]
 8005784:	425b      	negs	r3, r3
 8005786:	61a3      	str	r3, [r4, #24]
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	b943      	cbnz	r3, 800579e <__swsetup_r+0xc6>
 800578c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005790:	d1ba      	bne.n	8005708 <__swsetup_r+0x30>
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	0781      	lsls	r1, r0, #30
 8005796:	bf58      	it	pl
 8005798:	6963      	ldrpl	r3, [r4, #20]
 800579a:	60a3      	str	r3, [r4, #8]
 800579c:	e7f4      	b.n	8005788 <__swsetup_r+0xb0>
 800579e:	2000      	movs	r0, #0
 80057a0:	e7f7      	b.n	8005792 <__swsetup_r+0xba>
 80057a2:	bf00      	nop
 80057a4:	20000010 	.word	0x20000010
 80057a8:	08006280 	.word	0x08006280
 80057ac:	080062a0 	.word	0x080062a0
 80057b0:	08006260 	.word	0x08006260

080057b4 <_close_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	2300      	movs	r3, #0
 80057b8:	4d05      	ldr	r5, [pc, #20]	; (80057d0 <_close_r+0x1c>)
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fa fffd 	bl	80007be <_close>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_close_r+0x1a>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_close_r+0x1a>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20001148 	.word	0x20001148

080057d4 <__sflush_r>:
 80057d4:	898a      	ldrh	r2, [r1, #12]
 80057d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d8:	4605      	mov	r5, r0
 80057da:	0710      	lsls	r0, r2, #28
 80057dc:	460c      	mov	r4, r1
 80057de:	d457      	bmi.n	8005890 <__sflush_r+0xbc>
 80057e0:	684b      	ldr	r3, [r1, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc04      	bgt.n	80057f0 <__sflush_r+0x1c>
 80057e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc01      	bgt.n	80057f0 <__sflush_r+0x1c>
 80057ec:	2000      	movs	r0, #0
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d0fa      	beq.n	80057ec <__sflush_r+0x18>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057fc:	682f      	ldr	r7, [r5, #0]
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	d032      	beq.n	8005868 <__sflush_r+0x94>
 8005802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	075a      	lsls	r2, r3, #29
 8005808:	d505      	bpl.n	8005816 <__sflush_r+0x42>
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	1ac0      	subs	r0, r0, r3
 800580e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005810:	b10b      	cbz	r3, 8005816 <__sflush_r+0x42>
 8005812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005814:	1ac0      	subs	r0, r0, r3
 8005816:	2300      	movs	r3, #0
 8005818:	4602      	mov	r2, r0
 800581a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581c:	4628      	mov	r0, r5
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	47b0      	blx	r6
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	d106      	bne.n	8005836 <__sflush_r+0x62>
 8005828:	6829      	ldr	r1, [r5, #0]
 800582a:	291d      	cmp	r1, #29
 800582c:	d82c      	bhi.n	8005888 <__sflush_r+0xb4>
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <__sflush_r+0x100>)
 8005830:	40ca      	lsrs	r2, r1
 8005832:	07d6      	lsls	r6, r2, #31
 8005834:	d528      	bpl.n	8005888 <__sflush_r+0xb4>
 8005836:	2200      	movs	r2, #0
 8005838:	6062      	str	r2, [r4, #4]
 800583a:	6922      	ldr	r2, [r4, #16]
 800583c:	04d9      	lsls	r1, r3, #19
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	d504      	bpl.n	800584c <__sflush_r+0x78>
 8005842:	1c42      	adds	r2, r0, #1
 8005844:	d101      	bne.n	800584a <__sflush_r+0x76>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	b903      	cbnz	r3, 800584c <__sflush_r+0x78>
 800584a:	6560      	str	r0, [r4, #84]	; 0x54
 800584c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584e:	602f      	str	r7, [r5, #0]
 8005850:	2900      	cmp	r1, #0
 8005852:	d0cb      	beq.n	80057ec <__sflush_r+0x18>
 8005854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005858:	4299      	cmp	r1, r3
 800585a:	d002      	beq.n	8005862 <__sflush_r+0x8e>
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f8fb 	bl	8005a58 <_free_r>
 8005862:	2000      	movs	r0, #0
 8005864:	6360      	str	r0, [r4, #52]	; 0x34
 8005866:	e7c2      	b.n	80057ee <__sflush_r+0x1a>
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	2301      	movs	r3, #1
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c41      	adds	r1, r0, #1
 8005872:	d1c7      	bne.n	8005804 <__sflush_r+0x30>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c4      	beq.n	8005804 <__sflush_r+0x30>
 800587a:	2b1d      	cmp	r3, #29
 800587c:	d001      	beq.n	8005882 <__sflush_r+0xae>
 800587e:	2b16      	cmp	r3, #22
 8005880:	d101      	bne.n	8005886 <__sflush_r+0xb2>
 8005882:	602f      	str	r7, [r5, #0]
 8005884:	e7b2      	b.n	80057ec <__sflush_r+0x18>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7ae      	b.n	80057ee <__sflush_r+0x1a>
 8005890:	690f      	ldr	r7, [r1, #16]
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0aa      	beq.n	80057ec <__sflush_r+0x18>
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	bf18      	it	ne
 800589a:	2300      	movne	r3, #0
 800589c:	680e      	ldr	r6, [r1, #0]
 800589e:	bf08      	it	eq
 80058a0:	694b      	ldreq	r3, [r1, #20]
 80058a2:	1bf6      	subs	r6, r6, r7
 80058a4:	600f      	str	r7, [r1, #0]
 80058a6:	608b      	str	r3, [r1, #8]
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	dd9f      	ble.n	80057ec <__sflush_r+0x18>
 80058ac:	4633      	mov	r3, r6
 80058ae:	463a      	mov	r2, r7
 80058b0:	4628      	mov	r0, r5
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80058b8:	47e0      	blx	ip
 80058ba:	2800      	cmp	r0, #0
 80058bc:	dc06      	bgt.n	80058cc <__sflush_r+0xf8>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	e790      	b.n	80057ee <__sflush_r+0x1a>
 80058cc:	4407      	add	r7, r0
 80058ce:	1a36      	subs	r6, r6, r0
 80058d0:	e7ea      	b.n	80058a8 <__sflush_r+0xd4>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b913      	cbnz	r3, 80058e8 <_fflush_r+0x10>
 80058e2:	2500      	movs	r5, #0
 80058e4:	4628      	mov	r0, r5
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	b118      	cbz	r0, 80058f2 <_fflush_r+0x1a>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fflush_r+0x1a>
 80058ee:	f7ff fbd3 	bl	8005098 <__sinit>
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <_fflush_r+0x6c>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d11b      	bne.n	8005930 <_fflush_r+0x58>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ef      	beq.n	80058e2 <_fflush_r+0xa>
 8005902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005904:	07d0      	lsls	r0, r2, #31
 8005906:	d404      	bmi.n	8005912 <_fflush_r+0x3a>
 8005908:	0599      	lsls	r1, r3, #22
 800590a:	d402      	bmi.n	8005912 <_fflush_r+0x3a>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f7ff fc86 	bl	800521e <__retarget_lock_acquire_recursive>
 8005912:	4628      	mov	r0, r5
 8005914:	4621      	mov	r1, r4
 8005916:	f7ff ff5d 	bl	80057d4 <__sflush_r>
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	4605      	mov	r5, r0
 800591e:	07da      	lsls	r2, r3, #31
 8005920:	d4e0      	bmi.n	80058e4 <_fflush_r+0xc>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	059b      	lsls	r3, r3, #22
 8005926:	d4dd      	bmi.n	80058e4 <_fflush_r+0xc>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f7ff fc79 	bl	8005220 <__retarget_lock_release_recursive>
 800592e:	e7d9      	b.n	80058e4 <_fflush_r+0xc>
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_fflush_r+0x70>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <_fflush_r+0x62>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7df      	b.n	80058fa <_fflush_r+0x22>
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <_fflush_r+0x74>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7da      	b.n	80058fa <_fflush_r+0x22>
 8005944:	08006280 	.word	0x08006280
 8005948:	080062a0 	.word	0x080062a0
 800594c:	08006260 	.word	0x08006260

08005950 <_lseek_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	2200      	movs	r2, #0
 800595a:	4d05      	ldr	r5, [pc, #20]	; (8005970 <_lseek_r+0x20>)
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fa ff51 	bl	8000806 <_lseek>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_lseek_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_lseek_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20001148 	.word	0x20001148

08005974 <__swhatbuf_r>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	460e      	mov	r6, r1
 8005978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597c:	4614      	mov	r4, r2
 800597e:	2900      	cmp	r1, #0
 8005980:	461d      	mov	r5, r3
 8005982:	b096      	sub	sp, #88	; 0x58
 8005984:	da08      	bge.n	8005998 <__swhatbuf_r+0x24>
 8005986:	2200      	movs	r2, #0
 8005988:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	061a      	lsls	r2, r3, #24
 8005990:	d410      	bmi.n	80059b4 <__swhatbuf_r+0x40>
 8005992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005996:	e00e      	b.n	80059b6 <__swhatbuf_r+0x42>
 8005998:	466a      	mov	r2, sp
 800599a:	f000 fba5 	bl	80060e8 <_fstat_r>
 800599e:	2800      	cmp	r0, #0
 80059a0:	dbf1      	blt.n	8005986 <__swhatbuf_r+0x12>
 80059a2:	9a01      	ldr	r2, [sp, #4]
 80059a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059ac:	425a      	negs	r2, r3
 80059ae:	415a      	adcs	r2, r3
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	e7ee      	b.n	8005992 <__swhatbuf_r+0x1e>
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	2000      	movs	r0, #0
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	b016      	add	sp, #88	; 0x58
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080059c0 <__smakebuf_r>:
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059c4:	079d      	lsls	r5, r3, #30
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	d507      	bpl.n	80059dc <__smakebuf_r+0x1c>
 80059cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	6123      	str	r3, [r4, #16]
 80059d4:	2301      	movs	r3, #1
 80059d6:	6163      	str	r3, [r4, #20]
 80059d8:	b002      	add	sp, #8
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	466a      	mov	r2, sp
 80059de:	ab01      	add	r3, sp, #4
 80059e0:	f7ff ffc8 	bl	8005974 <__swhatbuf_r>
 80059e4:	9900      	ldr	r1, [sp, #0]
 80059e6:	4605      	mov	r5, r0
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff fc51 	bl	8005290 <_malloc_r>
 80059ee:	b948      	cbnz	r0, 8005a04 <__smakebuf_r+0x44>
 80059f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f4:	059a      	lsls	r2, r3, #22
 80059f6:	d4ef      	bmi.n	80059d8 <__smakebuf_r+0x18>
 80059f8:	f023 0303 	bic.w	r3, r3, #3
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e7e3      	b.n	80059cc <__smakebuf_r+0xc>
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <__smakebuf_r+0x7c>)
 8005a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	9b00      	ldr	r3, [sp, #0]
 8005a14:	6120      	str	r0, [r4, #16]
 8005a16:	6163      	str	r3, [r4, #20]
 8005a18:	9b01      	ldr	r3, [sp, #4]
 8005a1a:	b15b      	cbz	r3, 8005a34 <__smakebuf_r+0x74>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a22:	f000 fb73 	bl	800610c <_isatty_r>
 8005a26:	b128      	cbz	r0, 8005a34 <__smakebuf_r+0x74>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	89a0      	ldrh	r0, [r4, #12]
 8005a36:	4305      	orrs	r5, r0
 8005a38:	81a5      	strh	r5, [r4, #12]
 8005a3a:	e7cd      	b.n	80059d8 <__smakebuf_r+0x18>
 8005a3c:	08005031 	.word	0x08005031

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_lock+0x8>)
 8005a42:	f7ff bbec 	b.w	800521e <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	2000113c 	.word	0x2000113c

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f7ff bbe7 	b.w	8005220 <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	2000113c 	.word	0x2000113c

08005a58 <_free_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	d040      	beq.n	8005ae2 <_free_r+0x8a>
 8005a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a64:	1f0c      	subs	r4, r1, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfb8      	it	lt
 8005a6a:	18e4      	addlt	r4, r4, r3
 8005a6c:	f7ff ffe8 	bl	8005a40 <__malloc_lock>
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <_free_r+0x8c>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	b933      	cbnz	r3, 8005a84 <_free_r+0x2c>
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	6014      	str	r4, [r2, #0]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a80:	f7ff bfe4 	b.w	8005a4c <__malloc_unlock>
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	d908      	bls.n	8005a9a <_free_r+0x42>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	1821      	adds	r1, r4, r0
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	bf01      	itttt	eq
 8005a90:	6819      	ldreq	r1, [r3, #0]
 8005a92:	685b      	ldreq	r3, [r3, #4]
 8005a94:	1809      	addeq	r1, r1, r0
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	e7ed      	b.n	8005a76 <_free_r+0x1e>
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b10b      	cbz	r3, 8005aa4 <_free_r+0x4c>
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d9fa      	bls.n	8005a9a <_free_r+0x42>
 8005aa4:	6811      	ldr	r1, [r2, #0]
 8005aa6:	1850      	adds	r0, r2, r1
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d10b      	bne.n	8005ac4 <_free_r+0x6c>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	4401      	add	r1, r0
 8005ab0:	1850      	adds	r0, r2, r1
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	d1e0      	bne.n	8005a7a <_free_r+0x22>
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4401      	add	r1, r0
 8005abe:	6011      	str	r1, [r2, #0]
 8005ac0:	6053      	str	r3, [r2, #4]
 8005ac2:	e7da      	b.n	8005a7a <_free_r+0x22>
 8005ac4:	d902      	bls.n	8005acc <_free_r+0x74>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	e7d6      	b.n	8005a7a <_free_r+0x22>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	1821      	adds	r1, r4, r0
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	bf01      	itttt	eq
 8005ad4:	6819      	ldreq	r1, [r3, #0]
 8005ad6:	685b      	ldreq	r3, [r3, #4]
 8005ad8:	1809      	addeq	r1, r1, r0
 8005ada:	6021      	streq	r1, [r4, #0]
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	6054      	str	r4, [r2, #4]
 8005ae0:	e7cb      	b.n	8005a7a <_free_r+0x22>
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20001140 	.word	0x20001140

08005ae8 <__sfputc_r>:
 8005ae8:	6893      	ldr	r3, [r2, #8]
 8005aea:	b410      	push	{r4}
 8005aec:	3b01      	subs	r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	6093      	str	r3, [r2, #8]
 8005af2:	da07      	bge.n	8005b04 <__sfputc_r+0x1c>
 8005af4:	6994      	ldr	r4, [r2, #24]
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	db01      	blt.n	8005afe <__sfputc_r+0x16>
 8005afa:	290a      	cmp	r1, #10
 8005afc:	d102      	bne.n	8005b04 <__sfputc_r+0x1c>
 8005afe:	bc10      	pop	{r4}
 8005b00:	f7ff bd86 	b.w	8005610 <__swbuf_r>
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	1c58      	adds	r0, r3, #1
 8005b08:	6010      	str	r0, [r2, #0]
 8005b0a:	7019      	strb	r1, [r3, #0]
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	bc10      	pop	{r4}
 8005b10:	4770      	bx	lr

08005b12 <__sfputs_r>:
 8005b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b14:	4606      	mov	r6, r0
 8005b16:	460f      	mov	r7, r1
 8005b18:	4614      	mov	r4, r2
 8005b1a:	18d5      	adds	r5, r2, r3
 8005b1c:	42ac      	cmp	r4, r5
 8005b1e:	d101      	bne.n	8005b24 <__sfputs_r+0x12>
 8005b20:	2000      	movs	r0, #0
 8005b22:	e007      	b.n	8005b34 <__sfputs_r+0x22>
 8005b24:	463a      	mov	r2, r7
 8005b26:	4630      	mov	r0, r6
 8005b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2c:	f7ff ffdc 	bl	8005ae8 <__sfputc_r>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d1f3      	bne.n	8005b1c <__sfputs_r+0xa>
 8005b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b38 <_vfiprintf_r>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	4614      	mov	r4, r2
 8005b40:	4698      	mov	r8, r3
 8005b42:	4606      	mov	r6, r0
 8005b44:	b09d      	sub	sp, #116	; 0x74
 8005b46:	b118      	cbz	r0, 8005b50 <_vfiprintf_r+0x18>
 8005b48:	6983      	ldr	r3, [r0, #24]
 8005b4a:	b90b      	cbnz	r3, 8005b50 <_vfiprintf_r+0x18>
 8005b4c:	f7ff faa4 	bl	8005098 <__sinit>
 8005b50:	4b89      	ldr	r3, [pc, #548]	; (8005d78 <_vfiprintf_r+0x240>)
 8005b52:	429d      	cmp	r5, r3
 8005b54:	d11b      	bne.n	8005b8e <_vfiprintf_r+0x56>
 8005b56:	6875      	ldr	r5, [r6, #4]
 8005b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_vfiprintf_r+0x32>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	059a      	lsls	r2, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_vfiprintf_r+0x32>
 8005b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b66:	f7ff fb5a 	bl	800521e <__retarget_lock_acquire_recursive>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	071b      	lsls	r3, r3, #28
 8005b6e:	d501      	bpl.n	8005b74 <_vfiprintf_r+0x3c>
 8005b70:	692b      	ldr	r3, [r5, #16]
 8005b72:	b9eb      	cbnz	r3, 8005bb0 <_vfiprintf_r+0x78>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7ff fdae 	bl	80056d8 <__swsetup_r>
 8005b7c:	b1c0      	cbz	r0, 8005bb0 <_vfiprintf_r+0x78>
 8005b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b80:	07dc      	lsls	r4, r3, #31
 8005b82:	d50e      	bpl.n	8005ba2 <_vfiprintf_r+0x6a>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	b01d      	add	sp, #116	; 0x74
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	4b7b      	ldr	r3, [pc, #492]	; (8005d7c <_vfiprintf_r+0x244>)
 8005b90:	429d      	cmp	r5, r3
 8005b92:	d101      	bne.n	8005b98 <_vfiprintf_r+0x60>
 8005b94:	68b5      	ldr	r5, [r6, #8]
 8005b96:	e7df      	b.n	8005b58 <_vfiprintf_r+0x20>
 8005b98:	4b79      	ldr	r3, [pc, #484]	; (8005d80 <_vfiprintf_r+0x248>)
 8005b9a:	429d      	cmp	r5, r3
 8005b9c:	bf08      	it	eq
 8005b9e:	68f5      	ldreq	r5, [r6, #12]
 8005ba0:	e7da      	b.n	8005b58 <_vfiprintf_r+0x20>
 8005ba2:	89ab      	ldrh	r3, [r5, #12]
 8005ba4:	0598      	lsls	r0, r3, #22
 8005ba6:	d4ed      	bmi.n	8005b84 <_vfiprintf_r+0x4c>
 8005ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005baa:	f7ff fb39 	bl	8005220 <__retarget_lock_release_recursive>
 8005bae:	e7e9      	b.n	8005b84 <_vfiprintf_r+0x4c>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bba:	2330      	movs	r3, #48	; 0x30
 8005bbc:	f04f 0901 	mov.w	r9, #1
 8005bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d84 <_vfiprintf_r+0x24c>
 8005bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bcc:	4623      	mov	r3, r4
 8005bce:	469a      	mov	sl, r3
 8005bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd4:	b10a      	cbz	r2, 8005bda <_vfiprintf_r+0xa2>
 8005bd6:	2a25      	cmp	r2, #37	; 0x25
 8005bd8:	d1f9      	bne.n	8005bce <_vfiprintf_r+0x96>
 8005bda:	ebba 0b04 	subs.w	fp, sl, r4
 8005bde:	d00b      	beq.n	8005bf8 <_vfiprintf_r+0xc0>
 8005be0:	465b      	mov	r3, fp
 8005be2:	4622      	mov	r2, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ff93 	bl	8005b12 <__sfputs_r>
 8005bec:	3001      	adds	r0, #1
 8005bee:	f000 80aa 	beq.w	8005d46 <_vfiprintf_r+0x20e>
 8005bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf4:	445a      	add	r2, fp
 8005bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80a2 	beq.w	8005d46 <_vfiprintf_r+0x20e>
 8005c02:	2300      	movs	r3, #0
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295
 8005c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0c:	f10a 0a01 	add.w	sl, sl, #1
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	9307      	str	r3, [sp, #28]
 8005c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c18:	931a      	str	r3, [sp, #104]	; 0x68
 8005c1a:	4654      	mov	r4, sl
 8005c1c:	2205      	movs	r2, #5
 8005c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c22:	4858      	ldr	r0, [pc, #352]	; (8005d84 <_vfiprintf_r+0x24c>)
 8005c24:	f000 fa82 	bl	800612c <memchr>
 8005c28:	9a04      	ldr	r2, [sp, #16]
 8005c2a:	b9d8      	cbnz	r0, 8005c64 <_vfiprintf_r+0x12c>
 8005c2c:	06d1      	lsls	r1, r2, #27
 8005c2e:	bf44      	itt	mi
 8005c30:	2320      	movmi	r3, #32
 8005c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c36:	0713      	lsls	r3, r2, #28
 8005c38:	bf44      	itt	mi
 8005c3a:	232b      	movmi	r3, #43	; 0x2b
 8005c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c40:	f89a 3000 	ldrb.w	r3, [sl]
 8005c44:	2b2a      	cmp	r3, #42	; 0x2a
 8005c46:	d015      	beq.n	8005c74 <_vfiprintf_r+0x13c>
 8005c48:	4654      	mov	r4, sl
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f04f 0c0a 	mov.w	ip, #10
 8005c50:	9a07      	ldr	r2, [sp, #28]
 8005c52:	4621      	mov	r1, r4
 8005c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c58:	3b30      	subs	r3, #48	; 0x30
 8005c5a:	2b09      	cmp	r3, #9
 8005c5c:	d94e      	bls.n	8005cfc <_vfiprintf_r+0x1c4>
 8005c5e:	b1b0      	cbz	r0, 8005c8e <_vfiprintf_r+0x156>
 8005c60:	9207      	str	r2, [sp, #28]
 8005c62:	e014      	b.n	8005c8e <_vfiprintf_r+0x156>
 8005c64:	eba0 0308 	sub.w	r3, r0, r8
 8005c68:	fa09 f303 	lsl.w	r3, r9, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	46a2      	mov	sl, r4
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	e7d2      	b.n	8005c1a <_vfiprintf_r+0xe2>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	1d19      	adds	r1, r3, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	9103      	str	r1, [sp, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bfbb      	ittet	lt
 8005c80:	425b      	neglt	r3, r3
 8005c82:	f042 0202 	orrlt.w	r2, r2, #2
 8005c86:	9307      	strge	r3, [sp, #28]
 8005c88:	9307      	strlt	r3, [sp, #28]
 8005c8a:	bfb8      	it	lt
 8005c8c:	9204      	strlt	r2, [sp, #16]
 8005c8e:	7823      	ldrb	r3, [r4, #0]
 8005c90:	2b2e      	cmp	r3, #46	; 0x2e
 8005c92:	d10c      	bne.n	8005cae <_vfiprintf_r+0x176>
 8005c94:	7863      	ldrb	r3, [r4, #1]
 8005c96:	2b2a      	cmp	r3, #42	; 0x2a
 8005c98:	d135      	bne.n	8005d06 <_vfiprintf_r+0x1ce>
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	3402      	adds	r4, #2
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	9203      	str	r2, [sp, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cac:	9305      	str	r3, [sp, #20]
 8005cae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d88 <_vfiprintf_r+0x250>
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	7821      	ldrb	r1, [r4, #0]
 8005cb8:	f000 fa38 	bl	800612c <memchr>
 8005cbc:	b140      	cbz	r0, 8005cd0 <_vfiprintf_r+0x198>
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	eba0 000a 	sub.w	r0, r0, sl
 8005cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8005cc8:	9b04      	ldr	r3, [sp, #16]
 8005cca:	3401      	adds	r4, #1
 8005ccc:	4303      	orrs	r3, r0
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd4:	2206      	movs	r2, #6
 8005cd6:	482d      	ldr	r0, [pc, #180]	; (8005d8c <_vfiprintf_r+0x254>)
 8005cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cdc:	f000 fa26 	bl	800612c <memchr>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d03f      	beq.n	8005d64 <_vfiprintf_r+0x22c>
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <_vfiprintf_r+0x258>)
 8005ce6:	bb1b      	cbnz	r3, 8005d30 <_vfiprintf_r+0x1f8>
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf6:	443b      	add	r3, r7
 8005cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfa:	e767      	b.n	8005bcc <_vfiprintf_r+0x94>
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	2001      	movs	r0, #1
 8005d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d04:	e7a5      	b.n	8005c52 <_vfiprintf_r+0x11a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f04f 0c0a 	mov.w	ip, #10
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	3401      	adds	r4, #1
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	4620      	mov	r0, r4
 8005d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d18:	3a30      	subs	r2, #48	; 0x30
 8005d1a:	2a09      	cmp	r2, #9
 8005d1c:	d903      	bls.n	8005d26 <_vfiprintf_r+0x1ee>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0c5      	beq.n	8005cae <_vfiprintf_r+0x176>
 8005d22:	9105      	str	r1, [sp, #20]
 8005d24:	e7c3      	b.n	8005cae <_vfiprintf_r+0x176>
 8005d26:	4604      	mov	r4, r0
 8005d28:	2301      	movs	r3, #1
 8005d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d2e:	e7f0      	b.n	8005d12 <_vfiprintf_r+0x1da>
 8005d30:	ab03      	add	r3, sp, #12
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	462a      	mov	r2, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <_vfiprintf_r+0x25c>)
 8005d3a:	a904      	add	r1, sp, #16
 8005d3c:	f3af 8000 	nop.w
 8005d40:	4607      	mov	r7, r0
 8005d42:	1c78      	adds	r0, r7, #1
 8005d44:	d1d6      	bne.n	8005cf4 <_vfiprintf_r+0x1bc>
 8005d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d48:	07d9      	lsls	r1, r3, #31
 8005d4a:	d405      	bmi.n	8005d58 <_vfiprintf_r+0x220>
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	059a      	lsls	r2, r3, #22
 8005d50:	d402      	bmi.n	8005d58 <_vfiprintf_r+0x220>
 8005d52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d54:	f7ff fa64 	bl	8005220 <__retarget_lock_release_recursive>
 8005d58:	89ab      	ldrh	r3, [r5, #12]
 8005d5a:	065b      	lsls	r3, r3, #25
 8005d5c:	f53f af12 	bmi.w	8005b84 <_vfiprintf_r+0x4c>
 8005d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d62:	e711      	b.n	8005b88 <_vfiprintf_r+0x50>
 8005d64:	ab03      	add	r3, sp, #12
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <_vfiprintf_r+0x25c>)
 8005d6e:	a904      	add	r1, sp, #16
 8005d70:	f000 f882 	bl	8005e78 <_printf_i>
 8005d74:	e7e4      	b.n	8005d40 <_vfiprintf_r+0x208>
 8005d76:	bf00      	nop
 8005d78:	08006280 	.word	0x08006280
 8005d7c:	080062a0 	.word	0x080062a0
 8005d80:	08006260 	.word	0x08006260
 8005d84:	080062c4 	.word	0x080062c4
 8005d88:	080062ca 	.word	0x080062ca
 8005d8c:	080062ce 	.word	0x080062ce
 8005d90:	00000000 	.word	0x00000000
 8005d94:	08005b13 	.word	0x08005b13

08005d98 <_printf_common>:
 8005d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	4699      	mov	r9, r3
 8005da0:	688a      	ldr	r2, [r1, #8]
 8005da2:	690b      	ldr	r3, [r1, #16]
 8005da4:	4607      	mov	r7, r0
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bfb8      	it	lt
 8005daa:	4613      	movlt	r3, r2
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db2:	460c      	mov	r4, r1
 8005db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db8:	b10a      	cbz	r2, 8005dbe <_printf_common+0x26>
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	0699      	lsls	r1, r3, #26
 8005dc2:	bf42      	ittt	mi
 8005dc4:	6833      	ldrmi	r3, [r6, #0]
 8005dc6:	3302      	addmi	r3, #2
 8005dc8:	6033      	strmi	r3, [r6, #0]
 8005dca:	6825      	ldr	r5, [r4, #0]
 8005dcc:	f015 0506 	ands.w	r5, r5, #6
 8005dd0:	d106      	bne.n	8005de0 <_printf_common+0x48>
 8005dd2:	f104 0a19 	add.w	sl, r4, #25
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	6832      	ldr	r2, [r6, #0]
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dc28      	bgt.n	8005e32 <_printf_common+0x9a>
 8005de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de4:	1e13      	subs	r3, r2, #0
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	bf18      	it	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	0692      	lsls	r2, r2, #26
 8005dee:	d42d      	bmi.n	8005e4c <_printf_common+0xb4>
 8005df0:	4649      	mov	r1, r9
 8005df2:	4638      	mov	r0, r7
 8005df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d020      	beq.n	8005e40 <_printf_common+0xa8>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	68e5      	ldr	r5, [r4, #12]
 8005e02:	f003 0306 	and.w	r3, r3, #6
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	bf18      	it	ne
 8005e0a:	2500      	movne	r5, #0
 8005e0c:	6832      	ldr	r2, [r6, #0]
 8005e0e:	f04f 0600 	mov.w	r6, #0
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	bf08      	it	eq
 8005e16:	1aad      	subeq	r5, r5, r2
 8005e18:	6922      	ldr	r2, [r4, #16]
 8005e1a:	bf08      	it	eq
 8005e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bfc4      	itt	gt
 8005e24:	1a9b      	subgt	r3, r3, r2
 8005e26:	18ed      	addgt	r5, r5, r3
 8005e28:	341a      	adds	r4, #26
 8005e2a:	42b5      	cmp	r5, r6
 8005e2c:	d11a      	bne.n	8005e64 <_printf_common+0xcc>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e008      	b.n	8005e44 <_printf_common+0xac>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4652      	mov	r2, sl
 8005e36:	4649      	mov	r1, r9
 8005e38:	4638      	mov	r0, r7
 8005e3a:	47c0      	blx	r8
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d103      	bne.n	8005e48 <_printf_common+0xb0>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	3501      	adds	r5, #1
 8005e4a:	e7c4      	b.n	8005dd6 <_printf_common+0x3e>
 8005e4c:	2030      	movs	r0, #48	; 0x30
 8005e4e:	18e1      	adds	r1, r4, r3
 8005e50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e5a:	4422      	add	r2, r4
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e62:	e7c5      	b.n	8005df0 <_printf_common+0x58>
 8005e64:	2301      	movs	r3, #1
 8005e66:	4622      	mov	r2, r4
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d0e6      	beq.n	8005e40 <_printf_common+0xa8>
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7d9      	b.n	8005e2a <_printf_common+0x92>
	...

08005e78 <_printf_i>:
 8005e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	7e0f      	ldrb	r7, [r1, #24]
 8005e7e:	4691      	mov	r9, r2
 8005e80:	2f78      	cmp	r7, #120	; 0x78
 8005e82:	4680      	mov	r8, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	469a      	mov	sl, r3
 8005e88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e8e:	d807      	bhi.n	8005ea0 <_printf_i+0x28>
 8005e90:	2f62      	cmp	r7, #98	; 0x62
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x32>
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	f000 80d9 	beq.w	800604c <_printf_i+0x1d4>
 8005e9a:	2f58      	cmp	r7, #88	; 0x58
 8005e9c:	f000 80a4 	beq.w	8005fe8 <_printf_i+0x170>
 8005ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea8:	e03a      	b.n	8005f20 <_printf_i+0xa8>
 8005eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eae:	2b15      	cmp	r3, #21
 8005eb0:	d8f6      	bhi.n	8005ea0 <_printf_i+0x28>
 8005eb2:	a101      	add	r1, pc, #4	; (adr r1, 8005eb8 <_printf_i+0x40>)
 8005eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005ea1 	.word	0x08005ea1
 8005ec4:	08005ea1 	.word	0x08005ea1
 8005ec8:	08005ea1 	.word	0x08005ea1
 8005ecc:	08005ea1 	.word	0x08005ea1
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005ea1 	.word	0x08005ea1
 8005ed8:	08005ea1 	.word	0x08005ea1
 8005edc:	08005ea1 	.word	0x08005ea1
 8005ee0:	08005ea1 	.word	0x08005ea1
 8005ee4:	08006033 	.word	0x08006033
 8005ee8:	08005f55 	.word	0x08005f55
 8005eec:	08006015 	.word	0x08006015
 8005ef0:	08005ea1 	.word	0x08005ea1
 8005ef4:	08005ea1 	.word	0x08005ea1
 8005ef8:	08006055 	.word	0x08006055
 8005efc:	08005ea1 	.word	0x08005ea1
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005ea1 	.word	0x08005ea1
 8005f08:	08005ea1 	.word	0x08005ea1
 8005f0c:	0800601d 	.word	0x0800601d
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	602a      	str	r2, [r5, #0]
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0a4      	b.n	800606e <_printf_i+0x1f6>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	6829      	ldr	r1, [r5, #0]
 8005f28:	0606      	lsls	r6, r0, #24
 8005f2a:	f101 0304 	add.w	r3, r1, #4
 8005f2e:	d50a      	bpl.n	8005f46 <_printf_i+0xce>
 8005f30:	680e      	ldr	r6, [r1, #0]
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	da03      	bge.n	8005f40 <_printf_i+0xc8>
 8005f38:	232d      	movs	r3, #45	; 0x2d
 8005f3a:	4276      	negs	r6, r6
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f40:	230a      	movs	r3, #10
 8005f42:	485e      	ldr	r0, [pc, #376]	; (80060bc <_printf_i+0x244>)
 8005f44:	e019      	b.n	8005f7a <_printf_i+0x102>
 8005f46:	680e      	ldr	r6, [r1, #0]
 8005f48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	bf18      	it	ne
 8005f50:	b236      	sxthne	r6, r6
 8005f52:	e7ef      	b.n	8005f34 <_printf_i+0xbc>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	1d19      	adds	r1, r3, #4
 8005f5a:	6029      	str	r1, [r5, #0]
 8005f5c:	0601      	lsls	r1, r0, #24
 8005f5e:	d501      	bpl.n	8005f64 <_printf_i+0xec>
 8005f60:	681e      	ldr	r6, [r3, #0]
 8005f62:	e002      	b.n	8005f6a <_printf_i+0xf2>
 8005f64:	0646      	lsls	r6, r0, #25
 8005f66:	d5fb      	bpl.n	8005f60 <_printf_i+0xe8>
 8005f68:	881e      	ldrh	r6, [r3, #0]
 8005f6a:	2f6f      	cmp	r7, #111	; 0x6f
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2308      	moveq	r3, #8
 8005f70:	230a      	movne	r3, #10
 8005f72:	4852      	ldr	r0, [pc, #328]	; (80060bc <_printf_i+0x244>)
 8005f74:	2100      	movs	r1, #0
 8005f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f7a:	6865      	ldr	r5, [r4, #4]
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	bfa8      	it	ge
 8005f80:	6821      	ldrge	r1, [r4, #0]
 8005f82:	60a5      	str	r5, [r4, #8]
 8005f84:	bfa4      	itt	ge
 8005f86:	f021 0104 	bicge.w	r1, r1, #4
 8005f8a:	6021      	strge	r1, [r4, #0]
 8005f8c:	b90e      	cbnz	r6, 8005f92 <_printf_i+0x11a>
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	d04d      	beq.n	800602e <_printf_i+0x1b6>
 8005f92:	4615      	mov	r5, r2
 8005f94:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f98:	fb03 6711 	mls	r7, r3, r1, r6
 8005f9c:	5dc7      	ldrb	r7, [r0, r7]
 8005f9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fa2:	4637      	mov	r7, r6
 8005fa4:	42bb      	cmp	r3, r7
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	d9f4      	bls.n	8005f94 <_printf_i+0x11c>
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d10b      	bne.n	8005fc6 <_printf_i+0x14e>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	07de      	lsls	r6, r3, #31
 8005fb2:	d508      	bpl.n	8005fc6 <_printf_i+0x14e>
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	bfde      	ittt	le
 8005fbc:	2330      	movle	r3, #48	; 0x30
 8005fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fc6:	1b52      	subs	r2, r2, r5
 8005fc8:	6122      	str	r2, [r4, #16]
 8005fca:	464b      	mov	r3, r9
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4640      	mov	r0, r8
 8005fd0:	f8cd a000 	str.w	sl, [sp]
 8005fd4:	aa03      	add	r2, sp, #12
 8005fd6:	f7ff fedf 	bl	8005d98 <_printf_common>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d14c      	bne.n	8006078 <_printf_i+0x200>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	b004      	add	sp, #16
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	4834      	ldr	r0, [pc, #208]	; (80060bc <_printf_i+0x244>)
 8005fea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fee:	6829      	ldr	r1, [r5, #0]
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff6:	6029      	str	r1, [r5, #0]
 8005ff8:	061d      	lsls	r5, r3, #24
 8005ffa:	d514      	bpl.n	8006026 <_printf_i+0x1ae>
 8005ffc:	07df      	lsls	r7, r3, #31
 8005ffe:	bf44      	itt	mi
 8006000:	f043 0320 	orrmi.w	r3, r3, #32
 8006004:	6023      	strmi	r3, [r4, #0]
 8006006:	b91e      	cbnz	r6, 8006010 <_printf_i+0x198>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f023 0320 	bic.w	r3, r3, #32
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	2310      	movs	r3, #16
 8006012:	e7af      	b.n	8005f74 <_printf_i+0xfc>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	f043 0320 	orr.w	r3, r3, #32
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	2378      	movs	r3, #120	; 0x78
 800601e:	4828      	ldr	r0, [pc, #160]	; (80060c0 <_printf_i+0x248>)
 8006020:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006024:	e7e3      	b.n	8005fee <_printf_i+0x176>
 8006026:	0659      	lsls	r1, r3, #25
 8006028:	bf48      	it	mi
 800602a:	b2b6      	uxthmi	r6, r6
 800602c:	e7e6      	b.n	8005ffc <_printf_i+0x184>
 800602e:	4615      	mov	r5, r2
 8006030:	e7bb      	b.n	8005faa <_printf_i+0x132>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	6826      	ldr	r6, [r4, #0]
 8006036:	1d18      	adds	r0, r3, #4
 8006038:	6961      	ldr	r1, [r4, #20]
 800603a:	6028      	str	r0, [r5, #0]
 800603c:	0635      	lsls	r5, r6, #24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	d501      	bpl.n	8006046 <_printf_i+0x1ce>
 8006042:	6019      	str	r1, [r3, #0]
 8006044:	e002      	b.n	800604c <_printf_i+0x1d4>
 8006046:	0670      	lsls	r0, r6, #25
 8006048:	d5fb      	bpl.n	8006042 <_printf_i+0x1ca>
 800604a:	8019      	strh	r1, [r3, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	4615      	mov	r5, r2
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	e7ba      	b.n	8005fca <_printf_i+0x152>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	2100      	movs	r1, #0
 8006058:	1d1a      	adds	r2, r3, #4
 800605a:	602a      	str	r2, [r5, #0]
 800605c:	681d      	ldr	r5, [r3, #0]
 800605e:	6862      	ldr	r2, [r4, #4]
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f863 	bl	800612c <memchr>
 8006066:	b108      	cbz	r0, 800606c <_printf_i+0x1f4>
 8006068:	1b40      	subs	r0, r0, r5
 800606a:	6060      	str	r0, [r4, #4]
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	2300      	movs	r3, #0
 8006072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006076:	e7a8      	b.n	8005fca <_printf_i+0x152>
 8006078:	462a      	mov	r2, r5
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	47d0      	blx	sl
 8006082:	3001      	adds	r0, #1
 8006084:	d0ab      	beq.n	8005fde <_printf_i+0x166>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	079b      	lsls	r3, r3, #30
 800608a:	d413      	bmi.n	80060b4 <_printf_i+0x23c>
 800608c:	68e0      	ldr	r0, [r4, #12]
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	4298      	cmp	r0, r3
 8006092:	bfb8      	it	lt
 8006094:	4618      	movlt	r0, r3
 8006096:	e7a4      	b.n	8005fe2 <_printf_i+0x16a>
 8006098:	2301      	movs	r3, #1
 800609a:	4632      	mov	r2, r6
 800609c:	4649      	mov	r1, r9
 800609e:	4640      	mov	r0, r8
 80060a0:	47d0      	blx	sl
 80060a2:	3001      	adds	r0, #1
 80060a4:	d09b      	beq.n	8005fde <_printf_i+0x166>
 80060a6:	3501      	adds	r5, #1
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	9903      	ldr	r1, [sp, #12]
 80060ac:	1a5b      	subs	r3, r3, r1
 80060ae:	42ab      	cmp	r3, r5
 80060b0:	dcf2      	bgt.n	8006098 <_printf_i+0x220>
 80060b2:	e7eb      	b.n	800608c <_printf_i+0x214>
 80060b4:	2500      	movs	r5, #0
 80060b6:	f104 0619 	add.w	r6, r4, #25
 80060ba:	e7f5      	b.n	80060a8 <_printf_i+0x230>
 80060bc:	080062d5 	.word	0x080062d5
 80060c0:	080062e6 	.word	0x080062e6

080060c4 <_read_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	2200      	movs	r2, #0
 80060ce:	4d05      	ldr	r5, [pc, #20]	; (80060e4 <_read_r+0x20>)
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fa fb56 	bl	8000784 <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_read_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_read_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20001148 	.word	0x20001148

080060e8 <_fstat_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	2300      	movs	r3, #0
 80060ec:	4d06      	ldr	r5, [pc, #24]	; (8006108 <_fstat_r+0x20>)
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	f7fa fb6d 	bl	80007d4 <_fstat>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d102      	bne.n	8006104 <_fstat_r+0x1c>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	b103      	cbz	r3, 8006104 <_fstat_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd38      	pop	{r3, r4, r5, pc}
 8006106:	bf00      	nop
 8006108:	20001148 	.word	0x20001148

0800610c <_isatty_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	2300      	movs	r3, #0
 8006110:	4d05      	ldr	r5, [pc, #20]	; (8006128 <_isatty_r+0x1c>)
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fa fb6b 	bl	80007f2 <_isatty>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_isatty_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_isatty_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20001148 	.word	0x20001148

0800612c <memchr>:
 800612c:	4603      	mov	r3, r0
 800612e:	b510      	push	{r4, lr}
 8006130:	b2c9      	uxtb	r1, r1
 8006132:	4402      	add	r2, r0
 8006134:	4293      	cmp	r3, r2
 8006136:	4618      	mov	r0, r3
 8006138:	d101      	bne.n	800613e <memchr+0x12>
 800613a:	2000      	movs	r0, #0
 800613c:	e003      	b.n	8006146 <memchr+0x1a>
 800613e:	7804      	ldrb	r4, [r0, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	428c      	cmp	r4, r1
 8006144:	d1f6      	bne.n	8006134 <memchr+0x8>
 8006146:	bd10      	pop	{r4, pc}

08006148 <_init>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	bf00      	nop
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr

08006154 <_fini>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr
