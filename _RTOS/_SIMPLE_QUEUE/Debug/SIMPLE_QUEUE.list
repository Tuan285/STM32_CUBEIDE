
SIMPLE_QUEUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005d8c  08005d8c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d8c  08005d8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  08005e08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08005e08  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015402  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003156  00000000  00000000  0003549f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  000385f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ad  00000000  00000000  0003a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141dd  00000000  00000000  00054e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094883  00000000  00000000  0006902a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd8ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005478  00000000  00000000  000fd900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bf8 	.word	0x08005bf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005bf8 	.word	0x08005bf8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <_write>:
uint8_t DataRx;
//void SendData(char *data) {
//	HAL_UART_Transmit(&huart1, (uint8_t*) data, strlen(data), 1000);
//}
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	68b9      	ldr	r1, [r7, #8]
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <_write+0x28>)
 8000198:	f001 fd8a 	bl	8001cb0 <HAL_UART_Transmit>
	return len;
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000344 	.word	0x20000344

080001ac <HAL_UART_RxCpltCallback>:
int fputc(int ch, FILE * f) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) & ch, 1, HAL_MAX_DELAY);
  return ch;
}
#endif
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	uint32_t DataISR = 10;
 80001b4:	230a      	movs	r3, #10
 80001b6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	490b      	ldr	r1, [pc, #44]	; (80001e8 <HAL_UART_RxCpltCallback+0x3c>)
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <HAL_UART_RxCpltCallback+0x40>)
 80001be:	f001 fdfa 	bl	8001db6 <HAL_UART_Receive_IT>
	if (DataRx == 'k') {
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <HAL_UART_RxCpltCallback+0x3c>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b6b      	cmp	r3, #107	; 0x6b
 80001c8:	d10a      	bne.n	80001e0 <HAL_UART_RxCpltCallback+0x34>
		printf("Data From ISR\n");
 80001ca:	4809      	ldr	r0, [pc, #36]	; (80001f0 <HAL_UART_RxCpltCallback+0x44>)
 80001cc:	f004 feb2 	bl	8004f34 <puts>
		xQueueSendFromISR(Queue2Handle, &DataISR, NULL);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <HAL_UART_RxCpltCallback+0x48>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	f107 010c 	add.w	r1, r7, #12
 80001d8:	2300      	movs	r3, #0
 80001da:	2200      	movs	r2, #0
 80001dc:	f002 ff0c 	bl	8002ff8 <xQueueGenericSendFromISR>
	}
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	2000039c 	.word	0x2000039c
 80001ec:	20000344 	.word	0x20000344
 80001f0:	08005c1c 	.word	0x08005c1c
 80001f4:	20000398 	.word	0x20000398

080001f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b08e      	sub	sp, #56	; 0x38
 80001fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001fe:	f000 fb35 	bl	800086c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000202:	f000 f857 	bl	80002b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000206:	f000 f8c5 	bl	8000394 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800020a:	f000 f899 	bl	8000340 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("xin chao nha\n");
 800020e:	481e      	ldr	r0, [pc, #120]	; (8000288 <main+0x90>)
 8000210:	f004 fe90 	bl	8004f34 <puts>
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	491d      	ldr	r1, [pc, #116]	; (800028c <main+0x94>)
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <main+0x98>)
 800021a:	f001 fdcc 	bl	8001db6 <HAL_UART_Receive_IT>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 10, uint32_t);
 800021e:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <main+0x9c>)
 8000220:	f107 0420 	add.w	r4, r7, #32
 8000224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800022a:	f107 0320 	add.w	r3, r7, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fbcf 	bl	80029d4 <osMessageCreate>
 8000236:	4603      	mov	r3, r0
 8000238:	4a17      	ldr	r2, [pc, #92]	; (8000298 <main+0xa0>)
 800023a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	Queue2Handle = xQueueCreate(10, sizeof(uint32_t));
 800023c:	2200      	movs	r2, #0
 800023e:	2104      	movs	r1, #4
 8000240:	200a      	movs	r0, #10
 8000242:	f002 fd7e 	bl	8002d42 <xQueueGenericCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a14      	ldr	r2, [pc, #80]	; (800029c <main+0xa4>)
 800024a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <main+0xa8>)
 800024e:	1d3c      	adds	r4, r7, #4
 8000250:	461d      	mov	r5, r3
 8000252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fb6a 	bl	800293c <osThreadCreate>
 8000268:	4603      	mov	r3, r0
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <main+0xac>)
 800026c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(Task2, "Task02", 128, NULL, osPriorityAboveNormal + 3,
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <main+0xb0>)
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2304      	movs	r3, #4
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	490c      	ldr	r1, [pc, #48]	; (80002ac <main+0xb4>)
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0xb8>)
 800027e:	f003 f99f 	bl	80035c0 <xTaskCreate>
			&Task2Handle);
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000282:	f002 fb54 	bl	800292e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000286:	e7fe      	b.n	8000286 <main+0x8e>
 8000288:	08005c2c 	.word	0x08005c2c
 800028c:	2000039c 	.word	0x2000039c
 8000290:	20000344 	.word	0x20000344
 8000294:	08005c44 	.word	0x08005c44
 8000298:	20000390 	.word	0x20000390
 800029c:	20000398 	.word	0x20000398
 80002a0:	08005c54 	.word	0x08005c54
 80002a4:	2000038c 	.word	0x2000038c
 80002a8:	20000394 	.word	0x20000394
 80002ac:	08005c3c 	.word	0x08005c3c
 80002b0:	080003d9 	.word	0x080003d9

080002b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	; 0x40
 80002b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f004 fd13 	bl	8004cee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d6:	2301      	movs	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fdfd 	bl	8000efc <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x58>
		Error_Handler();
 8000308:	f000 f8c6 	bl	8000498 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f86a 	bl	8001400 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x82>
		Error_Handler();
 8000332:	f000 f8b1 	bl	8000498 <Error_Handler>
	}
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_USART1_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800034c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000350:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000378:	f001 fc4a 	bl	8001c10 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000382:	f000 f889 	bl	8000498 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000344 	.word	0x20000344
 8000390:	40013800 	.word	0x40013800

08000394 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <MX_GPIO_Init+0x40>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <MX_GPIO_Init+0x40>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_GPIO_Init+0x40>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000

080003d8 <Task2>:

/* USER CODE BEGIN 4 */
void Task2(void *parameter) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint8_t Recv_ISR;
	uint16_t Recv_Task;
	while (1) {
		printf("Recieve Data Task \n");
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <Task2+0x54>)
 80003e2:	f004 fda7 	bl	8004f34 <puts>
		xQueueReceive(myQueue01Handle, &Recv_Task, osWaitForever);
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <Task2+0x58>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f107 010c 	add.w	r1, r7, #12
 80003ee:	f04f 32ff 	mov.w	r2, #4294967295
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fe98 	bl	8003128 <xQueueReceive>
		printf("Data Task is : %d\n", Recv_Task);
 80003f8:	89bb      	ldrh	r3, [r7, #12]
 80003fa:	4619      	mov	r1, r3
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <Task2+0x5c>)
 80003fe:	f004 fd13 	bl	8004e28 <iprintf>

		printf("Recieve Data ISR \n");
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <Task2+0x60>)
 8000404:	f004 fd96 	bl	8004f34 <puts>
		xQueueReceive(Queue2Handle, &Recv_ISR, osWaitForever);
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <Task2+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f107 010f 	add.w	r1, r7, #15
 8000410:	f04f 32ff 	mov.w	r2, #4294967295
 8000414:	4618      	mov	r0, r3
 8000416:	f002 fe87 	bl	8003128 <xQueueReceive>
		printf("Data ISR is : %d\n", Recv_ISR);
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	4619      	mov	r1, r3
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <Task2+0x68>)
 8000420:	f004 fd02 	bl	8004e28 <iprintf>
		vTaskDelay(10);
 8000424:	200a      	movs	r0, #10
 8000426:	f003 fa11 	bl	800384c <vTaskDelay>
		printf("Recieve Data Task \n");
 800042a:	e7d9      	b.n	80003e0 <Task2+0x8>
 800042c:	08005c70 	.word	0x08005c70
 8000430:	20000390 	.word	0x20000390
 8000434:	08005c84 	.word	0x08005c84
 8000438:	08005c98 	.word	0x08005c98
 800043c:	20000398 	.word	0x20000398
 8000440:	08005cac 	.word	0x08005cac

08000444 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	uint32_t data = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		data++;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
		xQueueSend(myQueue01Handle, &data, 100);
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <StartDefaultTask+0x2c>)
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f107 010c 	add.w	r1, r7, #12
 800045e:	2300      	movs	r3, #0
 8000460:	2264      	movs	r2, #100	; 0x64
 8000462:	f002 fccb 	bl	8002dfc <xQueueGenericSend>
		vTaskDelay(1000);
 8000466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046a:	f003 f9ef 	bl	800384c <vTaskDelay>
		data++;
 800046e:	e7ef      	b.n	8000450 <StartDefaultTask+0xc>
 8000470:	20000390 	.word	0x20000390

08000474 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d101      	bne.n	800048a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000486:	f000 fa07 	bl	8000898 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40000800 	.word	0x40000800

08000498 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004a0:	e7fe      	b.n	80004a0 <Error_Handler+0x8>
	...

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <HAL_MspInit+0x68>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a17      	ldr	r2, [pc, #92]	; (800050c <HAL_MspInit+0x68>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x68>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <HAL_MspInit+0x68>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x68>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	210f      	movs	r1, #15
 80004de:	f06f 0001 	mvn.w	r0, #1
 80004e2:	f000 faaa 	bl	8000a3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x6c>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x6c>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <HAL_UART_MspInit+0x9c>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d139      	bne.n	80005a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_UART_MspInit+0xa0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4619      	mov	r1, r3
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <HAL_UART_MspInit+0xa4>)
 800057a:	f000 fb3b 	bl	8000bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800057e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <HAL_UART_MspInit+0xa4>)
 8000594:	f000 fb2e 	bl	8000bf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2105      	movs	r1, #5
 800059c:	2025      	movs	r0, #37	; 0x25
 800059e:	f000 fa4c 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005a2:	2025      	movs	r0, #37	; 0x25
 80005a4:	f000 fa65 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40013800 	.word	0x40013800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005d2:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <HAL_InitTick+0xe8>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <HAL_InitTick+0xe8>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <HAL_InitTick+0xe8>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ea:	f107 0210 	add.w	r2, r7, #16
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f873 	bl	80016e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000600:	2b00      	cmp	r3, #0
 8000602:	d103      	bne.n	800060c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000604:	f001 f844 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8000608:	6378      	str	r0, [r7, #52]	; 0x34
 800060a:	e004      	b.n	8000616 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800060c:	f001 f840 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8000610:	4603      	mov	r3, r0
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <HAL_InitTick+0xec>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9b      	lsrs	r3, r3, #18
 8000620:	3b01      	subs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <HAL_InitTick+0xf0>)
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <HAL_InitTick+0xf4>)
 8000628:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <HAL_InitTick+0xf0>)
 800062c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000630:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <HAL_InitTick+0xf0>)
 8000634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000636:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_InitTick+0xf0>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_InitTick+0xf0>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_InitTick+0xf0>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800064a:	4818      	ldr	r0, [pc, #96]	; (80006ac <HAL_InitTick+0xf0>)
 800064c:	f001 f896 	bl	800177c <HAL_TIM_Base_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800065a:	2b00      	cmp	r3, #0
 800065c:	d11b      	bne.n	8000696 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <HAL_InitTick+0xf0>)
 8000660:	f001 f8e4 	bl	800182c <HAL_TIM_Base_Start_IT>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800066a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800066e:	2b00      	cmp	r3, #0
 8000670:	d111      	bne.n	8000696 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000672:	201e      	movs	r0, #30
 8000674:	f000 f9fd 	bl	8000a72 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b0f      	cmp	r3, #15
 800067c:	d808      	bhi.n	8000690 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800067e:	2200      	movs	r2, #0
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	201e      	movs	r0, #30
 8000684:	f000 f9d9 	bl	8000a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <HAL_InitTick+0xf8>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e002      	b.n	8000696 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800069a:	4618      	mov	r0, r3
 800069c:	3738      	adds	r7, #56	; 0x38
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	431bde83 	.word	0x431bde83
 80006ac:	200003a0 	.word	0x200003a0
 80006b0:	40000800 	.word	0x40000800
 80006b4:	20000004 	.word	0x20000004

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
	...

080006e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <TIM4_IRQHandler+0x10>)
 80006ea:	f001 f8f1 	bl	80018d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200003a0 	.word	0x200003a0

080006f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <USART1_IRQHandler+0x10>)
 80006fe:	f001 fb7f 	bl	8001e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000344 	.word	0x20000344

0800070c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e00a      	b.n	8000734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800071e:	f3af 8000 	nop.w
 8000722:	4601      	mov	r1, r0
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	b2ca      	uxtb	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbf0      	blt.n	800071e <_read+0x12>
	}

return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return -1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	605a      	str	r2, [r3, #4]
	return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_isatty>:

int _isatty(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f004 f958 	bl	8004a8c <__errno>
 80007dc:	4603      	mov	r3, r0
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005000 	.word	0x20005000
 8000808:	00000400 	.word	0x00000400
 800080c:	200003e8 	.word	0x200003e8
 8000810:	20001150 	.word	0x20001150

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff fff8 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <LoopFillZerobss+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800083c:	4c09      	ldr	r4, [pc, #36]	; (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f004 fa1b 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fcd3 	bl	80001f8 <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800085c:	08005d94 	.word	0x08005d94
  ldr r2, =_sbss
 8000860:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000864:	2000114c 	.word	0x2000114c

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x28>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x28>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f8d1 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	200f      	movs	r0, #15
 8000884:	f7ff fe9a 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff fe0c 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <HAL_IncTick+0x20>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000008 	.word	0x20000008
 80008b8:	200003ec 	.word	0x200003ec

080008bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	200003ec 	.word	0x200003ec

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <__NVIC_EnableIRQ+0x34>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff4f 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff64 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ffb2 	bl	80009c0 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff81 	bl	800096c <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff57 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d008      	beq.n	8000ab8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e020      	b.n	8000afa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 020e 	bic.w	r2, r2, #14
 8000ac6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0201 	bic.w	r2, r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d005      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2204      	movs	r2, #4
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e051      	b.n	8000bcc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 020e 	bic.w	r2, r2, #14
 8000b36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0201 	bic.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_DMA_Abort_IT+0xd4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d029      	beq.n	8000ba6 <HAL_DMA_Abort_IT+0xa2>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <HAL_DMA_Abort_IT+0xd8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d022      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x9e>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_DMA_Abort_IT+0xdc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01a      	beq.n	8000b9c <HAL_DMA_Abort_IT+0x98>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_DMA_Abort_IT+0xe0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d012      	beq.n	8000b96 <HAL_DMA_Abort_IT+0x92>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_DMA_Abort_IT+0xe4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d00a      	beq.n	8000b90 <HAL_DMA_Abort_IT+0x8c>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <HAL_DMA_Abort_IT+0xe8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d102      	bne.n	8000b8a <HAL_DMA_Abort_IT+0x86>
 8000b84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b88:	e00e      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8e:	e00b      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b94:	e008      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	e005      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	e002      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	e000      	b.n	8000ba8 <HAL_DMA_Abort_IT+0xa4>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_DMA_Abort_IT+0xec>)
 8000baa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	4798      	blx	r3
    } 
  }
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020008 	.word	0x40020008
 8000bdc:	4002001c 	.word	0x4002001c
 8000be0:	40020030 	.word	0x40020030
 8000be4:	40020044 	.word	0x40020044
 8000be8:	40020058 	.word	0x40020058
 8000bec:	4002006c 	.word	0x4002006c
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e169      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8158 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a9a      	ldr	r2, [pc, #616]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a90      	ldr	r2, [pc, #576]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <HAL_GPIO_Init+0x2b4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_GPIO_Init+0x1ec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00d      	beq.n	8000ddc <HAL_GPIO_Init+0x1e8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df2:	492f      	ldr	r1, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4928      	ldr	r1, [pc, #160]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60cb      	str	r3, [r1, #12]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d021      	beq.n	8000ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
 8000e90:	e021      	b.n	8000ed6 <HAL_GPIO_Init+0x2e2>
 8000e92:	bf00      	nop
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10310000 	.word	0x10310000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	10210000 	.word	0x10210000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae8e 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e272      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8087 	beq.w	800102a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1c:	4b92      	ldr	r3, [pc, #584]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d00c      	beq.n	8000f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f28:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d112      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
 8000f34:	4b8c      	ldr	r3, [pc, #560]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f40:	d10b      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f42:	4b89      	ldr	r3, [pc, #548]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d06c      	beq.n	8001028 <HAL_RCC_OscConfig+0x12c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d168      	bne.n	8001028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e24c      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x76>
 8000f64:	4b80      	ldr	r3, [pc, #512]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a7f      	ldr	r2, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e02e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x98>
 8000f7a:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b78      	ldr	r3, [pc, #480]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a77      	ldr	r2, [pc, #476]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xbc>
 8000f9e:	4b72      	ldr	r3, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a71      	ldr	r2, [pc, #452]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a6a      	ldr	r2, [pc, #424]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a67      	ldr	r2, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc70 	bl	80008bc <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fc6c 	bl	80008bc <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e200      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xe4>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc5c 	bl	80008bc <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fc58 	bl	80008bc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ec      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x10c>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b08      	cmp	r3, #8
 800104c:	d11c      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d116      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e1c0      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4939      	ldr	r1, [pc, #228]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	e03a      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_RCC_OscConfig+0x270>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fc11 	bl	80008bc <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff fc0d 	bl	80008bc <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1a1      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4927      	ldr	r1, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x270>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fbf0 	bl	80008bc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fbec 	bl	80008bc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e180      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03a      	beq.n	8001180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d019      	beq.n	8001146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fbd0 	bl	80008bc <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fbcc 	bl	80008bc <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e160      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fafe 	bl	8001740 <RCC_Delay>
 8001144:	e01c      	b.n	8001180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fbb6 	bl	80008bc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001152:	e00f      	b.n	8001174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fbb2 	bl	80008bc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d908      	bls.n	8001174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e146      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	42420000 	.word	0x42420000
 8001170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b92      	ldr	r3, [pc, #584]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e9      	bne.n	8001154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a6 	beq.w	80012da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <HAL_RCC_OscConfig+0x4c8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c6:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x4c8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7e      	ldr	r2, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x4c8>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fb73 	bl	80008bc <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fb6f 	bl	80008bc <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e103      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x4c8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x312>
 8001200:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a6e      	ldr	r2, [pc, #440]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6213      	str	r3, [r2, #32]
 800120c:	e02d      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x334>
 8001216:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]
 8001222:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a66      	ldr	r2, [pc, #408]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	e01c      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x356>
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a60      	ldr	r2, [pc, #384]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6213      	str	r3, [r2, #32]
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001252:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a5a      	ldr	r2, [pc, #360]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d015      	beq.n	800129e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fb23 	bl	80008bc <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fb1f 	bl	80008bc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0b1      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ee      	beq.n	800127a <HAL_RCC_OscConfig+0x37e>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fb0d 	bl	80008bc <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb09 	bl	80008bc <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e09b      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8087 	beq.w	80013f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d061      	beq.n	80013b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d146      	bne.n	8001386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <HAL_RCC_OscConfig+0x4cc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fadd 	bl	80008bc <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fad9 	bl	80008bc <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e06d      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d108      	bne.n	8001340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	4921      	ldr	r1, [pc, #132]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a19      	ldr	r1, [r3, #32]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	430b      	orrs	r3, r1
 8001352:	491b      	ldr	r1, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x4cc>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff faad 	bl	80008bc <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff faa9 	bl	80008bc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e03d      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x46a>
 8001384:	e035      	b.n	80013f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_RCC_OscConfig+0x4cc>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fa96 	bl	80008bc <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fa92 	bl	80008bc <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e026      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x498>
 80013b2:	e01e      	b.n	80013f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e019      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40007000 	.word	0x40007000
 80013c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RCC_OscConfig+0x500>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0d0      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d910      	bls.n	8001444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 0207 	bic.w	r2, r3, #7
 800142a:	4965      	ldr	r1, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800147e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d040      	beq.n	8001520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d115      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e073      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06b      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f023 0203 	bic.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4936      	ldr	r1, [pc, #216]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff f9e4 	bl	80008bc <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	e00a      	b.n	800150e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff f9e0 	bl	80008bc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e053      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 020c 	and.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	429a      	cmp	r2, r3
 800151e:	d1eb      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d210      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4922      	ldr	r1, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f821 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001592:	4602      	mov	r2, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	5ccb      	ldrb	r3, [r1, r3]
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1cc>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1d0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f804 	bl	80005bc <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08005cc8 	.word	0x08005cc8
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x30>
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d003      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x36>
 8001602:	e027      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_RCC_GetSysClockFreq+0x98>)
 8001606:	613b      	str	r3, [r7, #16]
      break;
 8001608:	e027      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d010      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_RCC_GetSysClockFreq+0x94>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	0c5b      	lsrs	r3, r3, #17
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_RCC_GetSysClockFreq+0xa0>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_RCC_GetSysClockFreq+0x98>)
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e004      	b.n	800164e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	613b      	str	r3, [r7, #16]
      break;
 8001652:	e002      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetSysClockFreq+0x98>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165a:	693b      	ldr	r3, [r7, #16]
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	007a1200 	.word	0x007a1200
 8001670:	08005ce0 	.word	0x08005ce0
 8001674:	08005cf0 	.word	0x08005cf0
 8001678:	003d0900 	.word	0x003d0900

0800167c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_RCC_GetHCLKFreq+0x10>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001694:	f7ff fff2 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08005cd8 	.word	0x08005cd8

080016b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016bc:	f7ff ffde 	bl	800167c <HAL_RCC_GetHCLKFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0adb      	lsrs	r3, r3, #11
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08005cd8 	.word	0x08005cd8

080016e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	220f      	movs	r2, #15
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_GetClockConfig+0x58>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_RCC_GetClockConfig+0x58>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_GetClockConfig+0x58>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_RCC_GetClockConfig+0x58>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0207 	and.w	r2, r3, #7
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40022000 	.word	0x40022000

08001740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <RCC_Delay+0x34>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <RCC_Delay+0x38>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a5b      	lsrs	r3, r3, #9
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800175c:	bf00      	nop
  }
  while (Delay --);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f9      	bne.n	800175c <RCC_Delay+0x1c>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e041      	b.n	8001812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f839 	bl	800181a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f000 f9b4 	bl	8001b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d001      	beq.n	8001844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e03a      	b.n	80018ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_TIM_Base_Start_IT+0x98>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00e      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x58>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186e:	d009      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x58>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x58>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <HAL_TIM_Base_Start_IT+0xa0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d111      	bne.n	80018a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b06      	cmp	r3, #6
 8001894:	d010      	beq.n	80018b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a6:	e007      	b.n	80018b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40000800 	.word	0x40000800

080018d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d122      	bne.n	800192c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d11b      	bne.n	800192c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0202 	mvn.w	r2, #2
 80018fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8ed 	bl	8001af2 <HAL_TIM_IC_CaptureCallback>
 8001918:	e005      	b.n	8001926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f8e0 	bl	8001ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8ef 	bl	8001b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b04      	cmp	r3, #4
 8001938:	d122      	bne.n	8001980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b04      	cmp	r3, #4
 8001946:	d11b      	bne.n	8001980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0204 	mvn.w	r2, #4
 8001950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f8c3 	bl	8001af2 <HAL_TIM_IC_CaptureCallback>
 800196c:	e005      	b.n	800197a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f8b6 	bl	8001ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f8c5 	bl	8001b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b08      	cmp	r3, #8
 800198c:	d122      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d11b      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0208 	mvn.w	r2, #8
 80019a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f899 	bl	8001af2 <HAL_TIM_IC_CaptureCallback>
 80019c0:	e005      	b.n	80019ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f88c 	bl	8001ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f89b 	bl	8001b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d122      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d11b      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0210 	mvn.w	r2, #16
 80019f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2208      	movs	r2, #8
 80019fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f86f 	bl	8001af2 <HAL_TIM_IC_CaptureCallback>
 8001a14:	e005      	b.n	8001a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f862 	bl	8001ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f871 	bl	8001b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10e      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0201 	mvn.w	r2, #1
 8001a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fd10 	bl	8000474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	2b80      	cmp	r3, #128	; 0x80
 8001a60:	d10e      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d107      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8bf 	bl	8001bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b40      	cmp	r3, #64	; 0x40
 8001a8c:	d10e      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a98:	2b40      	cmp	r3, #64	; 0x40
 8001a9a:	d107      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f835 	bl	8001b16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d107      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0220 	mvn.w	r2, #32
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f88a 	bl	8001bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <TIM_Base_SetConfig+0xb8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00b      	beq.n	8001b58 <TIM_Base_SetConfig+0x30>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b46:	d007      	beq.n	8001b58 <TIM_Base_SetConfig+0x30>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <TIM_Base_SetConfig+0xbc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <TIM_Base_SetConfig+0x30>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <TIM_Base_SetConfig+0xc0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d108      	bne.n	8001b6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <TIM_Base_SetConfig+0xb8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00b      	beq.n	8001b8a <TIM_Base_SetConfig+0x62>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d007      	beq.n	8001b8a <TIM_Base_SetConfig+0x62>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <TIM_Base_SetConfig+0xbc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d003      	beq.n	8001b8a <TIM_Base_SetConfig+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <TIM_Base_SetConfig+0xc0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d108      	bne.n	8001b9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <TIM_Base_SetConfig+0xb8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d103      	bne.n	8001bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800

08001bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e042      	b.n	8001ca8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fc6c 	bl	8000514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	; 0x24
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fdc5 	bl	80027e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d16d      	bne.n	8001dac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_UART_Transmit+0x2c>
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e066      	b.n	8001dae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2221      	movs	r2, #33	; 0x21
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cee:	f7fe fde5 	bl	80008bc <HAL_GetTick>
 8001cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d08:	d108      	bne.n	8001d1c <HAL_UART_Transmit+0x6c>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d104      	bne.n	8001d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e003      	b.n	8001d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d24:	e02a      	b.n	8001d7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fb14 	bl	800235e <UART_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e036      	b.n	8001dae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10b      	bne.n	8001d5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e007      	b.n	8001d6e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1cf      	bne.n	8001d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fae4 	bl	800235e <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d112      	bne.n	8001df6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_UART_Receive_IT+0x26>
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e00b      	b.n	8001df8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	461a      	mov	r2, r3
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fb24 	bl	800243a <UART_Start_Receive_IT>
 8001df2:	4603      	mov	r3, r0
 8001df4:	e000      	b.n	8001df8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ba      	sub	sp, #232	; 0xe8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_UART_IRQHandler+0x66>
 8001e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fc01 	bl	8002666 <UART_Receive_IT>
      return;
 8001e64:	e25b      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80de 	beq.w	800202c <HAL_UART_IRQHandler+0x22c>
 8001e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80d1 	beq.w	800202c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_UART_IRQHandler+0xae>
 8001e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xd2>
 8001eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xf6>
 8001ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d011      	beq.n	8001f26 <HAL_UART_IRQHandler+0x126>
 8001f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f043 0208 	orr.w	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 81f2 	beq.w	8002314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_UART_IRQHandler+0x14e>
 8001f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fb8c 	bl	8002666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_UART_IRQHandler+0x17a>
 8001f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04f      	beq.n	800201a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa96 	bl	80024ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d041      	beq.n	8002012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3314      	adds	r3, #20
 8001f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3314      	adds	r3, #20
 8001fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fca:	e841 2300 	strex	r3, r2, [r1]
 8001fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1d9      	bne.n	8001f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d013      	beq.n	800200a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_UART_IRQHandler+0x3e0>)
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fd88 	bl	8000b04 <HAL_DMA_Abort_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002004:	4610      	mov	r0, r2
 8002006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002008:	e00e      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f993 	bl	8002336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	e00a      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f98f 	bl	8002336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	e006      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f98b 	bl	8002336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002026:	e175      	b.n	8002314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	bf00      	nop
    return;
 800202a:	e173      	b.n	8002314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 814f 	bne.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8148 	beq.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8141 	beq.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80b6 	beq.w	80021e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8145 	beq.w	8002318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002096:	429a      	cmp	r2, r3
 8002098:	f080 813e 	bcs.w	8002318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	f000 8088 	beq.w	80021c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020be:	e853 3f00 	ldrex	r3, [r3]
 80020c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80020c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ec:	e841 2300 	strex	r3, r2, [r1]
 80020f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1d9      	bne.n	80020b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3314      	adds	r3, #20
 8002102:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002106:	e853 3f00 	ldrex	r3, [r3]
 800210a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800210c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3314      	adds	r3, #20
 800211c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002120:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002124:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002128:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800212c:	e841 2300 	strex	r3, r2, [r1]
 8002130:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e1      	bne.n	80020fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3314      	adds	r3, #20
 800213e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002142:	e853 3f00 	ldrex	r3, [r3]
 8002146:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800214e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3314      	adds	r3, #20
 8002158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800215c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800215e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002162:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e3      	bne.n	8002138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	330c      	adds	r3, #12
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800218e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002190:	f023 0310 	bic.w	r3, r3, #16
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80021a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021aa:	e841 2300 	strex	r3, r2, [r1]
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80021b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e3      	bne.n	800217e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fc67 	bl	8000a8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8b6 	bl	8002348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021dc:	e09c      	b.n	8002318 <HAL_UART_IRQHandler+0x518>
 80021de:	bf00      	nop
 80021e0:	08002571 	.word	0x08002571
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 808e 	beq.w	800231c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8089 	beq.w	800231c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	330c      	adds	r3, #12
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	330c      	adds	r3, #12
 800222a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800222e:	647a      	str	r2, [r7, #68]	; 0x44
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800223c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e3      	bne.n	800220a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3314      	adds	r3, #20
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	623b      	str	r3, [r7, #32]
   return(result);
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3314      	adds	r3, #20
 8002262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002266:	633a      	str	r2, [r7, #48]	; 0x30
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e3      	bne.n	8002242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	e853 3f00 	ldrex	r3, [r3]
 8002296:	60fb      	str	r3, [r7, #12]
   return(result);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022ac:	61fa      	str	r2, [r7, #28]
 80022ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	e841 2300 	strex	r3, r2, [r1]
 80022b8:	617b      	str	r3, [r7, #20]
   return(result);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e3      	bne.n	8002288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f83b 	bl	8002348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022d2:	e023      	b.n	800231c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_UART_IRQHandler+0x4f4>
 80022e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f953 	bl	8002598 <UART_Transmit_IT>
    return;
 80022f2:	e014      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_UART_IRQHandler+0x51e>
 8002300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f992 	bl	8002636 <UART_EndTransmit_IT>
    return;
 8002312:	e004      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
    return;
 8002314:	bf00      	nop
 8002316:	e002      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
      return;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
      return;
 800231c:	bf00      	nop
  }
}
 800231e:	37e8      	adds	r7, #232	; 0xe8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b090      	sub	sp, #64	; 0x40
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236e:	e050      	b.n	8002412 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d04c      	beq.n	8002412 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <UART_WaitOnFlagUntilTimeout+0x30>
 800237e:	f7fe fa9d 	bl	80008bc <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800238a:	429a      	cmp	r2, r3
 800238c:	d241      	bcs.n	8002412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ae:	637a      	str	r2, [r7, #52]	; 0x34
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e5      	bne.n	800238e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	613b      	str	r3, [r7, #16]
   return(result);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e2:	623a      	str	r2, [r7, #32]
 80023e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	69f9      	ldr	r1, [r7, #28]
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e00f      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	429a      	cmp	r2, r3
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d09f      	beq.n	8002370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3740      	adds	r7, #64	; 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2222      	movs	r2, #34	; 0x22
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0220 	orr.w	r2, r2, #32
 800249e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b095      	sub	sp, #84	; 0x54
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	e853 3f00 	ldrex	r3, [r3]
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024d4:	643a      	str	r2, [r7, #64]	; 0x40
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e5      	bne.n	80024b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002510:	e841 2300 	strex	r3, r2, [r1]
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2b01      	cmp	r3, #1
 8002522:	d119      	bne.n	8002558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	60bb      	str	r3, [r7, #8]
   return(result);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f023 0310 	bic.w	r3, r3, #16
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002544:	61ba      	str	r2, [r7, #24]
 8002546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	613b      	str	r3, [r7, #16]
   return(result);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e5      	bne.n	8002524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002566:	bf00      	nop
 8002568:	3754      	adds	r7, #84	; 0x54
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff fed3 	bl	8002336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b21      	cmp	r3, #33	; 0x21
 80025aa:	d13e      	bne.n	800262a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b4:	d114      	bne.n	80025e0 <UART_Transmit_IT+0x48>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d110      	bne.n	80025e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	621a      	str	r2, [r3, #32]
 80025de:	e008      	b.n	80025f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	1c59      	adds	r1, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6211      	str	r1, [r2, #32]
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4619      	mov	r1, r3
 8002600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe64 	bl	8002324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b08c      	sub	sp, #48	; 0x30
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b22      	cmp	r3, #34	; 0x22
 8002678:	f040 80ae 	bne.w	80027d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d117      	bne.n	80026b6 <UART_Receive_IT+0x50>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d113      	bne.n	80026b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	1c9a      	adds	r2, r3, #2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
 80026b4:	e026      	b.n	8002704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d007      	beq.n	80026da <UART_Receive_IT+0x74>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <UART_Receive_IT+0x82>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e008      	b.n	80026fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4619      	mov	r1, r3
 8002712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002714:	2b00      	cmp	r3, #0
 8002716:	d15d      	bne.n	80027d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0220 	bic.w	r2, r2, #32
 8002726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	2b01      	cmp	r3, #1
 800275c:	d135      	bne.n	80027ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	613b      	str	r3, [r7, #16]
   return(result);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f023 0310 	bic.w	r3, r3, #16
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	623a      	str	r2, [r7, #32]
 8002786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002788:	69f9      	ldr	r1, [r7, #28]
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	61bb      	str	r3, [r7, #24]
   return(result);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e5      	bne.n	8002764 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d10a      	bne.n	80027bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fdc0 	bl	8002348 <HAL_UARTEx_RxEventCallback>
 80027c8:	e002      	b.n	80027d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fd fcee 	bl	80001ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e002      	b.n	80027da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3730      	adds	r7, #48	; 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800281e:	f023 030c 	bic.w	r3, r3, #12
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	430b      	orrs	r3, r1
 800282a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <UART_SetConfig+0x114>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7fe ff34 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	e002      	b.n	800285a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002854:	f7fe ff1c 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009a      	lsls	r2, r3, #2
 8002864:	441a      	add	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <UART_SetConfig+0x118>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	0119      	lsls	r1, r3, #4
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <UART_SetConfig+0x118>)
 8002892:	fba3 0302 	umull	r0, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2064      	movs	r0, #100	; 0x64
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	; 0x32
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <UART_SetConfig+0x118>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b0:	4419      	add	r1, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <UART_SetConfig+0x118>)
 80028ca:	fba3 0302 	umull	r0, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	fb00 f303 	mul.w	r3, r0, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	3332      	adds	r3, #50	; 0x32
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <UART_SetConfig+0x118>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	440a      	add	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013800 	.word	0x40013800
 80028fc:	51eb851f 	.word	0x51eb851f

08002900 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800290e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002912:	2b84      	cmp	r3, #132	; 0x84
 8002914:	d005      	beq.n	8002922 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4413      	add	r3, r2
 800291e:	3303      	adds	r3, #3
 8002920:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002932:	f000 ffbf 	bl	80038b4 <vTaskStartScheduler>
  
  return osOK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}

0800293c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af04      	add	r7, sp, #16
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d020      	beq.n	8002990 <osThreadCreate+0x54>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01c      	beq.n	8002990 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685c      	ldr	r4, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681d      	ldr	r5, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691e      	ldr	r6, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ffc9 	bl	8002900 <makeFreeRtosPriority>
 800296e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002978:	9202      	str	r2, [sp, #8]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	9100      	str	r1, [sp, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	4632      	mov	r2, r6
 8002982:	4629      	mov	r1, r5
 8002984:	4620      	mov	r0, r4
 8002986:	f000 fdbf 	bl	8003508 <xTaskCreateStatic>
 800298a:	4603      	mov	r3, r0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e01c      	b.n	80029ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685c      	ldr	r4, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800299c:	b29e      	uxth	r6, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffab 	bl	8002900 <makeFreeRtosPriority>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	9200      	str	r2, [sp, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4632      	mov	r2, r6
 80029b8:	4629      	mov	r1, r5
 80029ba:	4620      	mov	r0, r4
 80029bc:	f000 fe00 	bl	80035c0 <xTaskCreate>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d011      	beq.n	8002a0a <osMessageCreate+0x36>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2400      	movs	r4, #0
 8002a00:	9400      	str	r4, [sp, #0]
 8002a02:	f000 f927 	bl	8002c54 <xQueueGenericCreateStatic>
 8002a06:	4603      	mov	r3, r0
 8002a08:	e008      	b.n	8002a1c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	4619      	mov	r1, r3
 8002a16:	f000 f994 	bl	8002d42 <xQueueGenericCreate>
 8002a1a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 0208 	add.w	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0208 	add.w	r2, r3, #8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0208 	add.w	r2, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d103      	bne.n	8002ae0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e00c      	b.n	8002afa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	e002      	b.n	8002aee <vListInsert+0x2e>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d2f6      	bcs.n	8002ae8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6852      	ldr	r2, [r2, #4]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d103      	bne.n	8002b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
	...

08002b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bae:	f001 fc95 	bl	80044dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	441a      	add	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d114      	bne.n	8002c2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01a      	beq.n	8002c42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f8a7 	bl	8003d64 <xTaskRemoveFromEventList>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <xQueueGenericReset+0xcc>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	e009      	b.n	8002c42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3310      	adds	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fef6 	bl	8002a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fef1 	bl	8002a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c42:	f001 fc7b 	bl	800453c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <xQueueGenericCreateStatic+0x52>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <xQueueGenericCreateStatic+0x56>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <xQueueGenericCreateStatic+0x58>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	623b      	str	r3, [r7, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x7e>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x82>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericCreateStatic+0x84>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61fb      	str	r3, [r7, #28]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cf2:	2348      	movs	r3, #72	; 0x48
 8002cf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b48      	cmp	r3, #72	; 0x48
 8002cfa:	d00a      	beq.n	8002d12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61bb      	str	r3, [r7, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d24:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f843 	bl	8002dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3730      	adds	r7, #48	; 0x30
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	; 0x28
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	613b      	str	r3, [r7, #16]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e004      	b.n	8002d82 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3348      	adds	r3, #72	; 0x48
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fca8 	bl	80046dc <pvPortMalloc>
 8002d8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00f      	beq.n	8002db4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3348      	adds	r3, #72	; 0x48
 8002d98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002da2:	79fa      	ldrb	r2, [r7, #7]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f805 	bl	8002dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002db4:	69bb      	ldr	r3, [r7, #24]
	}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e002      	b.n	8002de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dec:	2101      	movs	r1, #1
 8002dee:	69b8      	ldr	r0, [r7, #24]
 8002df0:	f7ff fec8 	bl	8002b84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueGenericSend+0x32>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <xQueueGenericSend+0x40>
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <xQueueGenericSend+0x44>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <xQueueGenericSend+0x46>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xQueueGenericSend+0x60>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x6e>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0x72>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <xQueueGenericSend+0x74>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	623b      	str	r3, [r7, #32]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e8a:	f001 f92f 	bl	80040ec <xTaskGetSchedulerState>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <xQueueGenericSend+0x9e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <xQueueGenericSend+0xa2>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericSend+0xa4>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <xQueueGenericSend+0xbe>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	61fb      	str	r3, [r7, #28]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eba:	f001 fb0f 	bl	80044dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <xQueueGenericSend+0xd4>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d129      	bne.n	8002f24 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fa07 	bl	80032e8 <prvCopyDataToQueue>
 8002eda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d010      	beq.n	8002f06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 ff3b 	bl	8003d64 <xTaskRemoveFromEventList>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	e00a      	b.n	8002f1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f1c:	f001 fb0e 	bl	800453c <vPortExitCritical>
				return pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e063      	b.n	8002fec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2a:	f001 fb07 	bl	800453c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e05c      	b.n	8002fec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ff73 	bl	8003e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f46:	f001 faf9 	bl	800453c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4a:	f000 fd1d 	bl	8003988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4e:	f001 fac5 	bl	80044dc <vPortEnterCritical>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <xQueueGenericSend+0x16c>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <xQueueGenericSend+0x182>
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f7e:	f001 fadd 	bl	800453c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f82:	1d3a      	adds	r2, r7, #4
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ff62 	bl	8003e54 <xTaskCheckForTimeOut>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d124      	bne.n	8002fe0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f98:	f000 fa9e 	bl	80034d8 <prvIsQueueFull>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 feb6 	bl	8003d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb2:	f000 fa29 	bl	8003408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fb6:	f000 fcf5 	bl	80039a4 <xTaskResumeAll>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f af7c 	bne.w	8002eba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	e772      	b.n	8002eba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd6:	f000 fa17 	bl	8003408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fda:	f000 fce3 	bl	80039a4 <xTaskResumeAll>
 8002fde:	e76c      	b.n	8002eba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe2:	f000 fa11 	bl	8003408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe6:	f000 fcdd 	bl	80039a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fea:	2300      	movs	r3, #0
		}
	}
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3738      	adds	r7, #56	; 0x38
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueGenericSendFromISR+0x3c>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueGenericSendFromISR+0x40>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueGenericSendFromISR+0x42>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	623b      	str	r3, [r7, #32]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d103      	bne.n	8003062 <xQueueGenericSendFromISR+0x6a>
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <xQueueGenericSendFromISR+0x6e>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <xQueueGenericSendFromISR+0x70>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61fb      	str	r3, [r7, #28]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003082:	f001 faed 	bl	8004660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003086:	f3ef 8211 	mrs	r2, BASEPRI
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61ba      	str	r2, [r7, #24]
 800309c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800309e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xQueueGenericSendFromISR+0xbc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d12c      	bne.n	800310e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c4:	f000 f910 	bl	80032e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d112      	bne.n	80030f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe40 	bl	8003d64 <xTaskRemoveFromEventList>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e007      	b.n	8003108 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b25a      	sxtb	r2, r3
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003108:	2301      	movs	r3, #1
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800310c:	e001      	b.n	8003112 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800311c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003120:	4618      	mov	r0, r3
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xQueueReceive+0x30>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	623b      	str	r3, [r7, #32]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueReceive+0x3e>
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueReceive+0x42>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueReceive+0x44>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueReceive+0x5e>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	61fb      	str	r3, [r7, #28]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003186:	f000 ffb1 	bl	80040ec <xTaskGetSchedulerState>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <xQueueReceive+0x6e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <xQueueReceive+0x72>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueReceive+0x74>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueReceive+0x8e>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	61bb      	str	r3, [r7, #24]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b6:	f001 f991 	bl	80044dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01f      	beq.n	8003206 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ca:	f000 f8f7 	bl	80033bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00f      	beq.n	80031fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	3310      	adds	r3, #16
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdbe 	bl	8003d64 <xTaskRemoveFromEventList>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <xQueueReceive+0x1bc>)
 80031f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031fe:	f001 f99d 	bl	800453c <vPortExitCritical>
				return pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	e069      	b.n	80032da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800320c:	f001 f996 	bl	800453c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003210:	2300      	movs	r3, #0
 8003212:	e062      	b.n	80032da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fe02 	bl	8003e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003228:	f001 f988 	bl	800453c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800322c:	f000 fbac 	bl	8003988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003230:	f001 f954 	bl	80044dc <vPortEnterCritical>
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800323a:	b25b      	sxtb	r3, r3
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d103      	bne.n	800324a <xQueueReceive+0x122>
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003250:	b25b      	sxtb	r3, r3
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d103      	bne.n	8003260 <xQueueReceive+0x138>
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003260:	f001 f96c 	bl	800453c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003264:	1d3a      	adds	r2, r7, #4
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fdf1 	bl	8003e54 <xTaskCheckForTimeOut>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d123      	bne.n	80032c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800327a:	f000 f917 	bl	80034ac <prvIsQueueEmpty>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd45 	bl	8003d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003294:	f000 f8b8 	bl	8003408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003298:	f000 fb84 	bl	80039a4 <xTaskResumeAll>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d189      	bne.n	80031b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <xQueueReceive+0x1bc>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	e780      	b.n	80031b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b6:	f000 f8a7 	bl	8003408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ba:	f000 fb73 	bl	80039a4 <xTaskResumeAll>
 80032be:	e77a      	b.n	80031b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c2:	f000 f8a1 	bl	8003408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c6:	f000 fb6d 	bl	80039a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032cc:	f000 f8ee 	bl	80034ac <prvIsQueueEmpty>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af6f 	beq.w	80031b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3730      	adds	r7, #48	; 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14d      	bne.n	80033aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 ff08 	bl	8004128 <xTaskPriorityDisinherit>
 8003318:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e043      	b.n	80033aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d119      	bne.n	800335c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6898      	ldr	r0, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	461a      	mov	r2, r3
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	f001 fccd 	bl	8004cd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d32b      	bcc.n	80033aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	e026      	b.n	80033aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68d8      	ldr	r0, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	461a      	mov	r2, r3
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	f001 fcb3 	bl	8004cd2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	425b      	negs	r3, r3
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d207      	bcs.n	8003398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	425b      	negs	r3, r3
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d105      	bne.n	80033aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033b2:	697b      	ldr	r3, [r7, #20]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d303      	bcc.n	80033f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	461a      	mov	r2, r3
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f001 fc69 	bl	8004cd2 <memcpy>
	}
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003410:	f001 f864 	bl	80044dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800341c:	e011      	b.n	8003442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fc9a 	bl	8003d64 <xTaskRemoveFromEventList>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003436:	f000 fd6f 	bl	8003f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3b01      	subs	r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	dce9      	bgt.n	800341e <prvUnlockQueue+0x16>
 800344a:	e000      	b.n	800344e <prvUnlockQueue+0x46>
					break;
 800344c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003456:	f001 f871 	bl	800453c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800345a:	f001 f83f 	bl	80044dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003466:	e011      	b.n	800348c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3310      	adds	r3, #16
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc75 	bl	8003d64 <xTaskRemoveFromEventList>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003480:	f000 fd4a 	bl	8003f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	3b01      	subs	r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003490:	2b00      	cmp	r3, #0
 8003492:	dce9      	bgt.n	8003468 <prvUnlockQueue+0x60>
 8003494:	e000      	b.n	8003498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034a0:	f001 f84c 	bl	800453c <vPortExitCritical>
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b4:	f001 f812 	bl	80044dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e001      	b.n	80034ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 f837 	bl	800453c <vPortExitCritical>

	return xReturn;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e0:	f000 fffc 	bl	80044dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d102      	bne.n	80034f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e001      	b.n	80034fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fa:	f001 f81f 	bl	800453c <vPortExitCritical>

	return xReturn;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	; 0x38
 800350c:	af04      	add	r7, sp, #16
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xTaskCreateStatic+0x2a>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	623b      	str	r3, [r7, #32]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xTaskCreateStatic+0x46>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	61fb      	str	r3, [r7, #28]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800354e:	23b4      	movs	r3, #180	; 0xb4
 8003550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2bb4      	cmp	r3, #180	; 0xb4
 8003556:	d00a      	beq.n	800356e <xTaskCreateStatic+0x66>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61bb      	str	r3, [r7, #24]
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01e      	beq.n	80035b2 <xTaskCreateStatic+0xaa>
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01b      	beq.n	80035b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003582:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	2202      	movs	r2, #2
 8003588:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800358c:	2300      	movs	r3, #0
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f851 	bl	800364c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035ac:	f000 f8e4 	bl	8003778 <prvAddNewTaskToReadyList>
 80035b0:	e001      	b.n	80035b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035b6:	697b      	ldr	r3, [r7, #20]
	}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08c      	sub	sp, #48	; 0x30
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 f881 	bl	80046dc <pvPortMalloc>
 80035da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035e2:	20b4      	movs	r0, #180	; 0xb4
 80035e4:	f001 f87a 	bl	80046dc <pvPortMalloc>
 80035e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
 80035f6:	e005      	b.n	8003604 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f001 f933 	bl	8004864 <vPortFree>
 80035fe:	e001      	b.n	8003604 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d017      	beq.n	800363a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	2300      	movs	r3, #0
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f80f 	bl	800364c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800362e:	69f8      	ldr	r0, [r7, #28]
 8003630:	f000 f8a2 	bl	8003778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003634:	2301      	movs	r3, #1
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e002      	b.n	8003640 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003640:	69bb      	ldr	r3, [r7, #24]
	}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003664:	3b01      	subs	r3, #1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <prvInitialiseNewTask+0x48>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	617b      	str	r3, [r7, #20]
}
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e012      	b.n	80036c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	7819      	ldrb	r1, [r3, #0]
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	3334      	adds	r3, #52	; 0x34
 80036aa:	460a      	mov	r2, r1
 80036ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d9e9      	bls.n	800369a <prvInitialiseNewTask+0x4e>
 80036c6:	e000      	b.n	80036ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80036c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d901      	bls.n	80036dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d8:	2306      	movs	r3, #6
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	2200      	movs	r2, #0
 80036ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	3304      	adds	r3, #4
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f9b5 	bl	8002a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	3318      	adds	r3, #24
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f9b0 	bl	8002a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	f1c3 0207 	rsb	r2, r3, #7
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	2200      	movs	r2, #0
 8003724:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	334c      	adds	r3, #76	; 0x4c
 800372c:	2260      	movs	r2, #96	; 0x60
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fadc 	bl	8004cee <memset>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <prvInitialiseNewTask+0x120>)
 800373a:	651a      	str	r2, [r3, #80]	; 0x50
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <prvInitialiseNewTask+0x124>)
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <prvInitialiseNewTask+0x128>)
 8003746:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	69b8      	ldr	r0, [r7, #24]
 800374e:	f000 fdd7 	bl	8004300 <pxPortInitialiseStack>
 8003752:	4602      	mov	r2, r0
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003764:	bf00      	nop
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	08005d14 	.word	0x08005d14
 8003770:	08005d34 	.word	0x08005d34
 8003774:	08005cf4 	.word	0x08005cf4

08003778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003780:	f000 feac 	bl	80044dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003784:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <prvAddNewTaskToReadyList+0xb8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <prvAddNewTaskToReadyList+0xb8>)
 800378c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <prvAddNewTaskToReadyList+0xbc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003796:	4a27      	ldr	r2, [pc, #156]	; (8003834 <prvAddNewTaskToReadyList+0xbc>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <prvAddNewTaskToReadyList+0xb8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d110      	bne.n	80037c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037a4:	f000 fbdc 	bl	8003f60 <prvInitialiseTaskLists>
 80037a8:	e00d      	b.n	80037c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <prvAddNewTaskToReadyList+0xc0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <prvAddNewTaskToReadyList+0xbc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d802      	bhi.n	80037c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <prvAddNewTaskToReadyList+0xbc>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <prvAddNewTaskToReadyList+0xc4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <prvAddNewTaskToReadyList+0xc4>)
 80037ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2201      	movs	r2, #1
 80037d6:	409a      	lsls	r2, r3
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <prvAddNewTaskToReadyList+0xc8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <prvAddNewTaskToReadyList+0xc8>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <prvAddNewTaskToReadyList+0xcc>)
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7ff f93e 	bl	8002a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037fe:	f000 fe9d 	bl	800453c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <prvAddNewTaskToReadyList+0xc0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <prvAddNewTaskToReadyList+0xbc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <prvAddNewTaskToReadyList+0xd0>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200004f0 	.word	0x200004f0
 8003834:	200003f0 	.word	0x200003f0
 8003838:	200004fc 	.word	0x200004fc
 800383c:	2000050c 	.word	0x2000050c
 8003840:	200004f8 	.word	0x200004f8
 8003844:	200003f4 	.word	0x200003f4
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <vTaskDelay+0x60>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <vTaskDelay+0x30>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60bb      	str	r3, [r7, #8]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800387c:	f000 f884 	bl	8003988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003880:	2100      	movs	r1, #0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fcd6 	bl	8004234 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003888:	f000 f88c 	bl	80039a4 <xTaskResumeAll>
 800388c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <vTaskDelay+0x64>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000518 	.word	0x20000518
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038c2:	463a      	mov	r2, r7
 80038c4:	1d39      	adds	r1, r7, #4
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fc40 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	9202      	str	r2, [sp, #8]
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	460a      	mov	r2, r1
 80038e2:	4921      	ldr	r1, [pc, #132]	; (8003968 <vTaskStartScheduler+0xb4>)
 80038e4:	4821      	ldr	r0, [pc, #132]	; (800396c <vTaskStartScheduler+0xb8>)
 80038e6:	f7ff fe0f 	bl	8003508 <xTaskCreateStatic>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <vTaskStartScheduler+0xbc>)
 80038ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <vTaskStartScheduler+0xbc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038f8:	2301      	movs	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e001      	b.n	8003902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d11b      	bne.n	8003940 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	613b      	str	r3, [r7, #16]
}
 800391a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <vTaskStartScheduler+0xc0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	334c      	adds	r3, #76	; 0x4c
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <vTaskStartScheduler+0xc4>)
 8003924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <vTaskStartScheduler+0xc8>)
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <vTaskStartScheduler+0xcc>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <vTaskStartScheduler+0xd0>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800393a:	f000 fd5d 	bl	80043f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800393e:	e00e      	b.n	800395e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d10a      	bne.n	800395e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <vTaskStartScheduler+0xa8>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	08005cc0 	.word	0x08005cc0
 800396c:	08003f31 	.word	0x08003f31
 8003970:	20000514 	.word	0x20000514
 8003974:	200003f0 	.word	0x200003f0
 8003978:	20000010 	.word	0x20000010
 800397c:	20000510 	.word	0x20000510
 8003980:	200004fc 	.word	0x200004fc
 8003984:	200004f4 	.word	0x200004f4

08003988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <vTaskSuspendAll+0x18>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <vTaskSuspendAll+0x18>)
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000518 	.word	0x20000518

080039a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039b2:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <xTaskResumeAll+0x114>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	603b      	str	r3, [r7, #0]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039d0:	f000 fd84 	bl	80044dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <xTaskResumeAll+0x114>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3b01      	subs	r3, #1
 80039da:	4a37      	ldr	r2, [pc, #220]	; (8003ab8 <xTaskResumeAll+0x114>)
 80039dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <xTaskResumeAll+0x114>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d161      	bne.n	8003aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <xTaskResumeAll+0x118>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d05d      	beq.n	8003aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ee:	e02e      	b.n	8003a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <xTaskResumeAll+0x11c>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3318      	adds	r3, #24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f897 	bl	8002b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f892 	bl	8002b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <xTaskResumeAll+0x120>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <xTaskResumeAll+0x120>)
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <xTaskResumeAll+0x124>)
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7ff f820 	bl	8002a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <xTaskResumeAll+0x128>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d302      	bcc.n	8003a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a48:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <xTaskResumeAll+0x12c>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <xTaskResumeAll+0x11c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1cc      	bne.n	80039f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a5c:	f000 fb22 	bl	80040a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <xTaskResumeAll+0x130>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a6c:	f000 f836 	bl	8003adc <xTaskIncrementTick>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <xTaskResumeAll+0x12c>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f1      	bne.n	8003a6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <xTaskResumeAll+0x130>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <xTaskResumeAll+0x12c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <xTaskResumeAll+0x134>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aaa:	f000 fd47 	bl	800453c <vPortExitCritical>

	return xAlreadyYielded;
 8003aae:	68bb      	ldr	r3, [r7, #8]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000518 	.word	0x20000518
 8003abc:	200004f0 	.word	0x200004f0
 8003ac0:	200004b0 	.word	0x200004b0
 8003ac4:	200004f8 	.word	0x200004f8
 8003ac8:	200003f4 	.word	0x200003f4
 8003acc:	200003f0 	.word	0x200003f0
 8003ad0:	20000504 	.word	0x20000504
 8003ad4:	20000500 	.word	0x20000500
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <xTaskIncrementTick+0x150>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 808d 	bne.w	8003c0a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003af0:	4b4f      	ldr	r3, [pc, #316]	; (8003c30 <xTaskIncrementTick+0x154>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003af8:	4a4d      	ldr	r2, [pc, #308]	; (8003c30 <xTaskIncrementTick+0x154>)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d120      	bne.n	8003b46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <xTaskIncrementTick+0x158>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	603b      	str	r3, [r7, #0]
}
 8003b20:	bf00      	nop
 8003b22:	e7fe      	b.n	8003b22 <xTaskIncrementTick+0x46>
 8003b24:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <xTaskIncrementTick+0x158>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <xTaskIncrementTick+0x15c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	; (8003c34 <xTaskIncrementTick+0x158>)
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4a41      	ldr	r2, [pc, #260]	; (8003c38 <xTaskIncrementTick+0x15c>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <xTaskIncrementTick+0x160>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4a3f      	ldr	r2, [pc, #252]	; (8003c3c <xTaskIncrementTick+0x160>)
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	f000 faaf 	bl	80040a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <xTaskIncrementTick+0x164>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d34d      	bcc.n	8003bec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b50:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <xTaskIncrementTick+0x158>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <xTaskIncrementTick+0x82>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xTaskIncrementTick+0x84>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <xTaskIncrementTick+0x164>)
 8003b66:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6a:	601a      	str	r2, [r3, #0]
					break;
 8003b6c:	e03e      	b.n	8003bec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <xTaskIncrementTick+0x158>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d203      	bcs.n	8003b8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b86:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <xTaskIncrementTick+0x164>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6013      	str	r3, [r2, #0]
						break;
 8003b8c:	e02e      	b.n	8003bec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe ffcc 	bl	8002b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3318      	adds	r3, #24
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe ffc3 	bl	8002b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <xTaskIncrementTick+0x168>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <xTaskIncrementTick+0x168>)
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <xTaskIncrementTick+0x16c>)
 8003bca:	441a      	add	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7fe ff51 	bl	8002a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <xTaskIncrementTick+0x170>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3b4      	bcc.n	8003b50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bea:	e7b1      	b.n	8003b50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bec:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <xTaskIncrementTick+0x170>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	4915      	ldr	r1, [pc, #84]	; (8003c48 <xTaskIncrementTick+0x16c>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d907      	bls.n	8003c14 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e004      	b.n	8003c14 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <xTaskIncrementTick+0x174>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <xTaskIncrementTick+0x174>)
 8003c12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <xTaskIncrementTick+0x178>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c20:	697b      	ldr	r3, [r7, #20]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000518 	.word	0x20000518
 8003c30:	200004f4 	.word	0x200004f4
 8003c34:	200004a8 	.word	0x200004a8
 8003c38:	200004ac 	.word	0x200004ac
 8003c3c:	20000508 	.word	0x20000508
 8003c40:	20000510 	.word	0x20000510
 8003c44:	200004f8 	.word	0x200004f8
 8003c48:	200003f4 	.word	0x200003f4
 8003c4c:	200003f0 	.word	0x200003f0
 8003c50:	20000500 	.word	0x20000500
 8003c54:	20000504 	.word	0x20000504

08003c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c5e:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <vTaskSwitchContext+0xac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <vTaskSwitchContext+0xb0>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c6c:	e044      	b.n	8003cf8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <vTaskSwitchContext+0xb0>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <vTaskSwitchContext+0xb4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f1c3 031f 	rsb	r3, r3, #31
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	4921      	ldr	r1, [pc, #132]	; (8003d10 <vTaskSwitchContext+0xb8>)
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vTaskSwitchContext+0x5a>
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <vTaskSwitchContext+0xb8>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d104      	bne.n	8003ce4 <vTaskSwitchContext+0x8c>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <vTaskSwitchContext+0xbc>)
 8003cec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <vTaskSwitchContext+0xbc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	334c      	adds	r3, #76	; 0x4c
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <vTaskSwitchContext+0xc0>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000518 	.word	0x20000518
 8003d08:	20000504 	.word	0x20000504
 8003d0c:	200004f8 	.word	0x200004f8
 8003d10:	200003f4 	.word	0x200003f4
 8003d14:	200003f0 	.word	0x200003f0
 8003d18:	20000010 	.word	0x20000010

08003d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <vTaskPlaceOnEventList+0x44>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3318      	adds	r3, #24
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe feb8 	bl	8002ac0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d50:	2101      	movs	r1, #1
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f000 fa6e 	bl	8004234 <prvAddCurrentTaskToDelayedList>
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200003f0 	.word	0x200003f0

08003d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60fb      	str	r3, [r7, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	3318      	adds	r3, #24
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fecb 	bl	8002b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <xTaskRemoveFromEventList+0xac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11c      	bne.n	8003ddc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fec2 	bl	8002b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <xTaskRemoveFromEventList+0xb0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <xTaskRemoveFromEventList+0xb0>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <xTaskRemoveFromEventList+0xb4>)
 8003dcc:	441a      	add	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7fe fe50 	bl	8002a7a <vListInsertEnd>
 8003dda:	e005      	b.n	8003de8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4619      	mov	r1, r3
 8003de2:	480e      	ldr	r0, [pc, #56]	; (8003e1c <xTaskRemoveFromEventList+0xb8>)
 8003de4:	f7fe fe49 	bl	8002a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <xTaskRemoveFromEventList+0xbc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d905      	bls.n	8003e02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003df6:	2301      	movs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <xTaskRemoveFromEventList+0xc0>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e001      	b.n	8003e06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e06:	697b      	ldr	r3, [r7, #20]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000518 	.word	0x20000518
 8003e14:	200004f8 	.word	0x200004f8
 8003e18:	200003f4 	.word	0x200003f4
 8003e1c:	200004b0 	.word	0x200004b0
 8003e20:	200003f0 	.word	0x200003f0
 8003e24:	20000504 	.word	0x20000504

08003e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <vTaskInternalSetTimeOutState+0x24>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <vTaskInternalSetTimeOutState+0x28>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000508 	.word	0x20000508
 8003e50:	200004f4 	.word	0x200004f4

08003e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	613b      	str	r3, [r7, #16]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e96:	f000 fb21 	bl	80044dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <xTaskCheckForTimeOut+0xbc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d102      	bne.n	8003eba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e023      	b.n	8003f02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <xTaskCheckForTimeOut+0xc0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d007      	beq.n	8003ed6 <xTaskCheckForTimeOut+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e015      	b.n	8003f02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20b      	bcs.n	8003ef8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff9b 	bl	8003e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e004      	b.n	8003f02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f000 fb1b 	bl	800453c <vPortExitCritical>

	return xReturn;
 8003f06:	69fb      	ldr	r3, [r7, #28]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	200004f4 	.word	0x200004f4
 8003f14:	20000508 	.word	0x20000508

08003f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <vTaskMissedYield+0x14>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000504 	.word	0x20000504

08003f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f38:	f000 f852 	bl	8003fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvIdleTask+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d9f9      	bls.n	8003f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <prvIdleTask+0x2c>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f54:	e7f0      	b.n	8003f38 <prvIdleTask+0x8>
 8003f56:	bf00      	nop
 8003f58:	200003f4 	.word	0x200003f4
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	e00c      	b.n	8003f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <prvInitialiseTaskLists+0x60>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fd52 	bl	8002a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d9ef      	bls.n	8003f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003f8e:	f7fe fd49 	bl	8002a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f92:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003f94:	f7fe fd46 	bl	8002a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f98:	480c      	ldr	r0, [pc, #48]	; (8003fcc <prvInitialiseTaskLists+0x6c>)
 8003f9a:	f7fe fd43 	bl	8002a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <prvInitialiseTaskLists+0x70>)
 8003fa0:	f7fe fd40 	bl	8002a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fa4:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <prvInitialiseTaskLists+0x74>)
 8003fa6:	f7fe fd3d 	bl	8002a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvInitialiseTaskLists+0x78>)
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <prvInitialiseTaskLists+0x7c>)
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200003f4 	.word	0x200003f4
 8003fc4:	20000480 	.word	0x20000480
 8003fc8:	20000494 	.word	0x20000494
 8003fcc:	200004b0 	.word	0x200004b0
 8003fd0:	200004c4 	.word	0x200004c4
 8003fd4:	200004dc 	.word	0x200004dc
 8003fd8:	200004a8 	.word	0x200004a8
 8003fdc:	200004ac 	.word	0x200004ac

08003fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe6:	e019      	b.n	800401c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fe8:	f000 fa78 	bl	80044dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <prvCheckTasksWaitingTermination+0x50>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fd99 	bl	8002b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 8004006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <prvCheckTasksWaitingTermination+0x58>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <prvCheckTasksWaitingTermination+0x58>)
 8004010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004012:	f000 fa93 	bl	800453c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f810 	bl	800403c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <prvCheckTasksWaitingTermination+0x58>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e1      	bne.n	8003fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200004c4 	.word	0x200004c4
 8004034:	200004f0 	.word	0x200004f0
 8004038:	200004d8 	.word	0x200004d8

0800403c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	334c      	adds	r3, #76	; 0x4c
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ff89 	bl	8004f60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fc01 	bl	8004864 <vPortFree>
				vPortFree( pxTCB );
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fbfe 	bl	8004864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004068:	e018      	b.n	800409c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d103      	bne.n	800407c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fbf5 	bl	8004864 <vPortFree>
	}
 800407a:	e00f      	b.n	800409c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004082:	2b02      	cmp	r3, #2
 8004084:	d00a      	beq.n	800409c <prvDeleteTCB+0x60>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60fb      	str	r3, [r7, #12]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <prvDeleteTCB+0x5e>
	}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <prvResetNextTaskUnblockTime+0x40>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <prvResetNextTaskUnblockTime+0x14>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <prvResetNextTaskUnblockTime+0x16>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <prvResetNextTaskUnblockTime+0x44>)
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040c6:	e008      	b.n	80040da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <prvResetNextTaskUnblockTime+0x40>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <prvResetNextTaskUnblockTime+0x44>)
 80040d8:	6013      	str	r3, [r2, #0]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	200004a8 	.word	0x200004a8
 80040e8:	20000510 	.word	0x20000510

080040ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <xTaskGetSchedulerState+0x34>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040fa:	2301      	movs	r3, #1
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	e008      	b.n	8004112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <xTaskGetSchedulerState+0x38>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004108:	2302      	movs	r3, #2
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	e001      	b.n	8004112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004112:	687b      	ldr	r3, [r7, #4]
	}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	200004fc 	.word	0x200004fc
 8004124:	20000518 	.word	0x20000518

08004128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d06e      	beq.n	800421c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800413e:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <xTaskPriorityDisinherit+0x100>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d00a      	beq.n	800415e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	1e5a      	subs	r2, r3, #1
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	429a      	cmp	r2, r3
 8004190:	d044      	beq.n	800421c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d140      	bne.n	800421c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fcc6 	bl	8002b30 <uxListRemove>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d115      	bne.n	80041d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ae:	491f      	ldr	r1, [pc, #124]	; (800422c <xTaskPriorityDisinherit+0x104>)
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xTaskPriorityDisinherit+0xae>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	2201      	movs	r2, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43da      	mvns	r2, r3
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <xTaskPriorityDisinherit+0x108>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4013      	ands	r3, r2
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <xTaskPriorityDisinherit+0x108>)
 80041d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f1c3 0207 	rsb	r2, r3, #7
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <xTaskPriorityDisinherit+0x108>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <xTaskPriorityDisinherit+0x108>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <xTaskPriorityDisinherit+0x104>)
 800420a:	441a      	add	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f7fe fc31 	bl	8002a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800421c:	697b      	ldr	r3, [r7, #20]
	}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200003f0 	.word	0x200003f0
 800422c:	200003f4 	.word	0x200003f4
 8004230:	200004f8 	.word	0x200004f8

08004234 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004244:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fc70 	bl	8002b30 <uxListRemove>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	2201      	movs	r2, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	4b21      	ldr	r3, [pc, #132]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4013      	ands	r3, r2
 800426a:	4a20      	ldr	r2, [pc, #128]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800426c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d10a      	bne.n	800428c <prvAddCurrentTaskToDelayedList+0x58>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	481a      	ldr	r0, [pc, #104]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004286:	f7fe fbf8 	bl	8002a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800428a:	e026      	b.n	80042da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d209      	bcs.n	80042b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fe fc05 	bl	8002ac0 <vListInsert>
}
 80042b6:	e010      	b.n	80042da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fe fbfb 	bl	8002ac0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d202      	bcs.n	80042da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042d4:	4a09      	ldr	r2, [pc, #36]	; (80042fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6013      	str	r3, [r2, #0]
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200004f4 	.word	0x200004f4
 80042e8:	200003f0 	.word	0x200003f0
 80042ec:	200004f8 	.word	0x200004f8
 80042f0:	200004dc 	.word	0x200004dc
 80042f4:	200004ac 	.word	0x200004ac
 80042f8:	200004a8 	.word	0x200004a8
 80042fc:	20000510 	.word	0x20000510

08004300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b04      	subs	r3, #4
 8004310:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3b04      	subs	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3b04      	subs	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004330:	4a08      	ldr	r2, [pc, #32]	; (8004354 <pxPortInitialiseStack+0x54>)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b14      	subs	r3, #20
 800433a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3b20      	subs	r3, #32
 8004346:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004348:	68fb      	ldr	r3, [r7, #12]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	08004359 	.word	0x08004359

08004358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <prvTaskExitError+0x54>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d00a      	beq.n	8004382 <prvTaskExitError+0x2a>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <prvTaskExitError+0x28>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60bb      	str	r3, [r7, #8]
}
 8004394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004396:	bf00      	nop
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0fc      	beq.n	8004398 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <pxCurrentTCBConst2>)
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	6808      	ldr	r0, [r1, #0]
 80043b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043ba:	f380 8809 	msr	PSP, r0
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8811 	msr	BASEPRI, r0
 80043ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80043ce:	4770      	bx	lr

080043d0 <pxCurrentTCBConst2>:
 80043d0:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043d8:	4806      	ldr	r0, [pc, #24]	; (80043f4 <prvPortStartFirstTask+0x1c>)
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	6800      	ldr	r0, [r0, #0]
 80043de:	f380 8808 	msr	MSP, r0
 80043e2:	b662      	cpsie	i
 80043e4:	b661      	cpsie	f
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	df00      	svc	0
 80043f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043f2:	bf00      	nop
 80043f4:	e000ed08 	.word	0xe000ed08

080043f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043fe:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <xPortStartScheduler+0xd0>)
 8004400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <xPortStartScheduler+0xd4>)
 8004424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442c:	e009      	b.n	8004442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b80      	cmp	r3, #128	; 0x80
 800444c:	d0ef      	beq.n	800442e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00a      	beq.n	8004470 <xPortStartScheduler+0x78>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <xPortStartScheduler+0xd8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <xPortStartScheduler+0xd8>)
 8004484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <xPortStartScheduler+0xdc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <xPortStartScheduler+0xdc>)
 8004494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <xPortStartScheduler+0xdc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <xPortStartScheduler+0xdc>)
 80044a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044a6:	f000 f8b9 	bl	800461c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <xPortStartScheduler+0xe0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044b0:	f7ff ff92 	bl	80043d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044b4:	f7ff fbd0 	bl	8003c58 <vTaskSwitchContext>
	prvTaskExitError();
 80044b8:	f7ff ff4e 	bl	8004358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000e400 	.word	0xe000e400
 80044cc:	2000051c 	.word	0x2000051c
 80044d0:	20000520 	.word	0x20000520
 80044d4:	e000ed20 	.word	0xe000ed20
 80044d8:	2000000c 	.word	0x2000000c

080044dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	607b      	str	r3, [r7, #4]
}
 80044f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <vPortEnterCritical+0x58>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a0d      	ldr	r2, [pc, #52]	; (8004534 <vPortEnterCritical+0x58>)
 80044fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <vPortEnterCritical+0x58>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10f      	bne.n	8004528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <vPortEnterCritical+0x5c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <vPortEnterCritical+0x4c>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	603b      	str	r3, [r7, #0]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vPortEnterCritical+0x4a>
	}
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <vPortExitCritical+0x4c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <vPortExitCritical+0x24>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	607b      	str	r3, [r7, #4]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <vPortExitCritical+0x4c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3b01      	subs	r3, #1
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <vPortExitCritical+0x4c>)
 8004568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <vPortExitCritical+0x4c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <vPortExitCritical+0x42>
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f383 8811 	msr	BASEPRI, r3
}
 800457c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	2000000c 	.word	0x2000000c
 800458c:	00000000 	.word	0x00000000

08004590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004590:	f3ef 8009 	mrs	r0, PSP
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <pxCurrentTCBConst>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045a0:	6010      	str	r0, [r2, #0]
 80045a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045aa:	f380 8811 	msr	BASEPRI, r0
 80045ae:	f7ff fb53 	bl	8003c58 <vTaskSwitchContext>
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045c6:	f380 8809 	msr	PSP, r0
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	4770      	bx	lr

080045d0 <pxCurrentTCBConst>:
 80045d0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045f2:	f7ff fa73 	bl	8003adc <xTaskIncrementTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <SysTick_Handler+0x40>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
}
 800460e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <vPortSetupTimerInterrupt+0x30>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <vPortSetupTimerInterrupt+0x38>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <vPortSetupTimerInterrupt+0x3c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <vPortSetupTimerInterrupt+0x40>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <vPortSetupTimerInterrupt+0x30>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	e000e010 	.word	0xe000e010
 8004650:	e000e018 	.word	0xe000e018
 8004654:	20000000 	.word	0x20000000
 8004658:	10624dd3 	.word	0x10624dd3
 800465c:	e000e014 	.word	0xe000e014

08004660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004666:	f3ef 8305 	mrs	r3, IPSR
 800466a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d914      	bls.n	800469c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004672:	4a16      	ldr	r2, [pc, #88]	; (80046cc <vPortValidateInterruptPriority+0x6c>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <vPortValidateInterruptPriority+0x70>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	7afa      	ldrb	r2, [r7, #11]
 8004682:	429a      	cmp	r2, r3
 8004684:	d20a      	bcs.n	800469c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	607b      	str	r3, [r7, #4]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <vPortValidateInterruptPriority+0x74>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <vPortValidateInterruptPriority+0x78>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d90a      	bls.n	80046c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	603b      	str	r3, [r7, #0]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <vPortValidateInterruptPriority+0x60>
	}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	e000e3f0 	.word	0xe000e3f0
 80046d0:	2000051c 	.word	0x2000051c
 80046d4:	e000ed0c 	.word	0xe000ed0c
 80046d8:	20000520 	.word	0x20000520

080046dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046e8:	f7ff f94e 	bl	8003988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046ec:	4b58      	ldr	r3, [pc, #352]	; (8004850 <pvPortMalloc+0x174>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046f4:	f000 f910 	bl	8004918 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046f8:	4b56      	ldr	r3, [pc, #344]	; (8004854 <pvPortMalloc+0x178>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 808e 	bne.w	8004822 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01d      	beq.n	8004748 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800470c:	2208      	movs	r2, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d014      	beq.n	8004748 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f023 0307 	bic.w	r3, r3, #7
 8004724:	3308      	adds	r3, #8
 8004726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <pvPortMalloc+0x6c>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	617b      	str	r3, [r7, #20]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d069      	beq.n	8004822 <pvPortMalloc+0x146>
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <pvPortMalloc+0x17c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d864      	bhi.n	8004822 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004758:	4b40      	ldr	r3, [pc, #256]	; (800485c <pvPortMalloc+0x180>)
 800475a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <pvPortMalloc+0x180>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004762:	e004      	b.n	800476e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <pvPortMalloc+0xa4>
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f1      	bne.n	8004764 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <pvPortMalloc+0x174>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	429a      	cmp	r2, r3
 8004788:	d04b      	beq.n	8004822 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2208      	movs	r2, #8
 8004790:	4413      	add	r3, r2
 8004792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	2308      	movs	r3, #8
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d91f      	bls.n	80047ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <pvPortMalloc+0xf8>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	613b      	str	r3, [r7, #16]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047e6:	69b8      	ldr	r0, [r7, #24]
 80047e8:	f000 f8f8 	bl	80049dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <pvPortMalloc+0x17c>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <pvPortMalloc+0x17c>)
 80047f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <pvPortMalloc+0x17c>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b18      	ldr	r3, [pc, #96]	; (8004860 <pvPortMalloc+0x184>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d203      	bcs.n	800480e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <pvPortMalloc+0x17c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <pvPortMalloc+0x184>)
 800480c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <pvPortMalloc+0x178>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	431a      	orrs	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004822:	f7ff f8bf 	bl	80039a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <pvPortMalloc+0x16a>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60fb      	str	r3, [r7, #12]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <pvPortMalloc+0x168>
	return pvReturn;
 8004846:	69fb      	ldr	r3, [r7, #28]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	; 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	2000112c 	.word	0x2000112c
 8004854:	20001138 	.word	0x20001138
 8004858:	20001130 	.word	0x20001130
 800485c:	20001124 	.word	0x20001124
 8004860:	20001134 	.word	0x20001134

08004864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d048      	beq.n	8004908 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004876:	2308      	movs	r3, #8
 8004878:	425b      	negs	r3, r3
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <vPortFree+0xac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <vPortFree+0x44>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <vPortFree+0x62>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60bb      	str	r3, [r7, #8]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <vPortFree+0xac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d019      	beq.n	8004908 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortFree+0xac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048ec:	f7ff f84c 	bl	8003988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <vPortFree+0xb0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a06      	ldr	r2, [pc, #24]	; (8004914 <vPortFree+0xb0>)
 80048fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048fe:	6938      	ldr	r0, [r7, #16]
 8004900:	f000 f86c 	bl	80049dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004904:	f7ff f84e 	bl	80039a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20001138 	.word	0x20001138
 8004914:	20001130 	.word	0x20001130

08004918 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800491e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004922:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <prvHeapInit+0xac>)
 8004926:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3307      	adds	r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <prvHeapInit+0xac>)
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <prvHeapInit+0xb0>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <prvHeapInit+0xb0>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004964:	2208      	movs	r2, #8
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a15      	ldr	r2, [pc, #84]	; (80049cc <prvHeapInit+0xb4>)
 8004978:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <prvHeapInit+0xb4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <prvHeapInit+0xb4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <prvHeapInit+0xb4>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <prvHeapInit+0xb8>)
 80049a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <prvHeapInit+0xbc>)
 80049ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <prvHeapInit+0xc0>)
 80049b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049b6:	601a      	str	r2, [r3, #0]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000524 	.word	0x20000524
 80049c8:	20001124 	.word	0x20001124
 80049cc:	2000112c 	.word	0x2000112c
 80049d0:	20001134 	.word	0x20001134
 80049d4:	20001130 	.word	0x20001130
 80049d8:	20001138 	.word	0x20001138

080049dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <prvInsertBlockIntoFreeList+0xa8>)
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x14>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d8f7      	bhi.n	80049ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d108      	bne.n	8004a1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d118      	bne.n	8004a64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <prvInsertBlockIntoFreeList+0xac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d00d      	beq.n	8004a5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e008      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <prvInsertBlockIntoFreeList+0xac>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e003      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d002      	beq.n	8004a7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	20001124 	.word	0x20001124
 8004a88:	2000112c 	.word	0x2000112c

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000010 	.word	0x20000010

08004a98 <std>:
 8004a98:	2300      	movs	r3, #0
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aa6:	6083      	str	r3, [r0, #8]
 8004aa8:	8181      	strh	r1, [r0, #12]
 8004aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8004aac:	81c2      	strh	r2, [r0, #14]
 8004aae:	6183      	str	r3, [r0, #24]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	305c      	adds	r0, #92	; 0x5c
 8004ab6:	f000 f91a 	bl	8004cee <memset>
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <std+0x38>)
 8004abc:	6224      	str	r4, [r4, #32]
 8004abe:	6263      	str	r3, [r4, #36]	; 0x24
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <std+0x3c>)
 8004ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <std+0x40>)
 8004ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <std+0x44>)
 8004aca:	6323      	str	r3, [r4, #48]	; 0x30
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	08005039 	.word	0x08005039
 8004ad4:	0800505b 	.word	0x0800505b
 8004ad8:	08005093 	.word	0x08005093
 8004adc:	080050b7 	.word	0x080050b7

08004ae0 <_cleanup_r>:
 8004ae0:	4901      	ldr	r1, [pc, #4]	; (8004ae8 <_cleanup_r+0x8>)
 8004ae2:	f000 b8af 	b.w	8004c44 <_fwalk_reent>
 8004ae6:	bf00      	nop
 8004ae8:	08005389 	.word	0x08005389

08004aec <__sfmoreglue>:
 8004aec:	2268      	movs	r2, #104	; 0x68
 8004aee:	b570      	push	{r4, r5, r6, lr}
 8004af0:	1e4d      	subs	r5, r1, #1
 8004af2:	4355      	muls	r5, r2
 8004af4:	460e      	mov	r6, r1
 8004af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004afa:	f000 f921 	bl	8004d40 <_malloc_r>
 8004afe:	4604      	mov	r4, r0
 8004b00:	b140      	cbz	r0, 8004b14 <__sfmoreglue+0x28>
 8004b02:	2100      	movs	r1, #0
 8004b04:	e9c0 1600 	strd	r1, r6, [r0]
 8004b08:	300c      	adds	r0, #12
 8004b0a:	60a0      	str	r0, [r4, #8]
 8004b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b10:	f000 f8ed 	bl	8004cee <memset>
 8004b14:	4620      	mov	r0, r4
 8004b16:	bd70      	pop	{r4, r5, r6, pc}

08004b18 <__sfp_lock_acquire>:
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <__sfp_lock_acquire+0x8>)
 8004b1a:	f000 b8d8 	b.w	8004cce <__retarget_lock_acquire_recursive>
 8004b1e:	bf00      	nop
 8004b20:	2000113d 	.word	0x2000113d

08004b24 <__sfp_lock_release>:
 8004b24:	4801      	ldr	r0, [pc, #4]	; (8004b2c <__sfp_lock_release+0x8>)
 8004b26:	f000 b8d3 	b.w	8004cd0 <__retarget_lock_release_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	2000113d 	.word	0x2000113d

08004b30 <__sinit_lock_acquire>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sinit_lock_acquire+0x8>)
 8004b32:	f000 b8cc 	b.w	8004cce <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	2000113e 	.word	0x2000113e

08004b3c <__sinit_lock_release>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__sinit_lock_release+0x8>)
 8004b3e:	f000 b8c7 	b.w	8004cd0 <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	2000113e 	.word	0x2000113e

08004b48 <__sinit>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	f7ff fff0 	bl	8004b30 <__sinit_lock_acquire>
 8004b50:	69a3      	ldr	r3, [r4, #24]
 8004b52:	b11b      	cbz	r3, 8004b5c <__sinit+0x14>
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b58:	f7ff bff0 	b.w	8004b3c <__sinit_lock_release>
 8004b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b60:	6523      	str	r3, [r4, #80]	; 0x50
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <__sinit+0x68>)
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <__sinit+0x6c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	bf08      	it	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	4620      	mov	r0, r4
 8004b72:	bf08      	it	eq
 8004b74:	61a3      	streq	r3, [r4, #24]
 8004b76:	f000 f81f 	bl	8004bb8 <__sfp>
 8004b7a:	6060      	str	r0, [r4, #4]
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 f81b 	bl	8004bb8 <__sfp>
 8004b82:	60a0      	str	r0, [r4, #8]
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 f817 	bl	8004bb8 <__sfp>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	60e0      	str	r0, [r4, #12]
 8004b90:	6860      	ldr	r0, [r4, #4]
 8004b92:	f7ff ff81 	bl	8004a98 <std>
 8004b96:	2201      	movs	r2, #1
 8004b98:	2109      	movs	r1, #9
 8004b9a:	68a0      	ldr	r0, [r4, #8]
 8004b9c:	f7ff ff7c 	bl	8004a98 <std>
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	2112      	movs	r1, #18
 8004ba4:	68e0      	ldr	r0, [r4, #12]
 8004ba6:	f7ff ff77 	bl	8004a98 <std>
 8004baa:	2301      	movs	r3, #1
 8004bac:	61a3      	str	r3, [r4, #24]
 8004bae:	e7d1      	b.n	8004b54 <__sinit+0xc>
 8004bb0:	08005d54 	.word	0x08005d54
 8004bb4:	08004ae1 	.word	0x08004ae1

08004bb8 <__sfp>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	4607      	mov	r7, r0
 8004bbc:	f7ff ffac 	bl	8004b18 <__sfp_lock_acquire>
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <__sfp+0x84>)
 8004bc2:	681e      	ldr	r6, [r3, #0]
 8004bc4:	69b3      	ldr	r3, [r6, #24]
 8004bc6:	b913      	cbnz	r3, 8004bce <__sfp+0x16>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f7ff ffbd 	bl	8004b48 <__sinit>
 8004bce:	3648      	adds	r6, #72	; 0x48
 8004bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	d503      	bpl.n	8004be0 <__sfp+0x28>
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	b30b      	cbz	r3, 8004c20 <__sfp+0x68>
 8004bdc:	6836      	ldr	r6, [r6, #0]
 8004bde:	e7f7      	b.n	8004bd0 <__sfp+0x18>
 8004be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004be4:	b9d5      	cbnz	r5, 8004c1c <__sfp+0x64>
 8004be6:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <__sfp+0x88>)
 8004be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bec:	60e3      	str	r3, [r4, #12]
 8004bee:	6665      	str	r5, [r4, #100]	; 0x64
 8004bf0:	f000 f86c 	bl	8004ccc <__retarget_lock_init_recursive>
 8004bf4:	f7ff ff96 	bl	8004b24 <__sfp_lock_release>
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c04:	6025      	str	r5, [r4, #0]
 8004c06:	61a5      	str	r5, [r4, #24]
 8004c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c0c:	f000 f86f 	bl	8004cee <memset>
 8004c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c18:	4620      	mov	r0, r4
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1c:	3468      	adds	r4, #104	; 0x68
 8004c1e:	e7d9      	b.n	8004bd4 <__sfp+0x1c>
 8004c20:	2104      	movs	r1, #4
 8004c22:	4638      	mov	r0, r7
 8004c24:	f7ff ff62 	bl	8004aec <__sfmoreglue>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	6030      	str	r0, [r6, #0]
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d1d5      	bne.n	8004bdc <__sfp+0x24>
 8004c30:	f7ff ff78 	bl	8004b24 <__sfp_lock_release>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	e7ee      	b.n	8004c18 <__sfp+0x60>
 8004c3a:	bf00      	nop
 8004c3c:	08005d54 	.word	0x08005d54
 8004c40:	ffff0001 	.word	0xffff0001

08004c44 <_fwalk_reent>:
 8004c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c48:	4606      	mov	r6, r0
 8004c4a:	4688      	mov	r8, r1
 8004c4c:	2700      	movs	r7, #0
 8004c4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c56:	f1b9 0901 	subs.w	r9, r9, #1
 8004c5a:	d505      	bpl.n	8004c68 <_fwalk_reent+0x24>
 8004c5c:	6824      	ldr	r4, [r4, #0]
 8004c5e:	2c00      	cmp	r4, #0
 8004c60:	d1f7      	bne.n	8004c52 <_fwalk_reent+0xe>
 8004c62:	4638      	mov	r0, r7
 8004c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c68:	89ab      	ldrh	r3, [r5, #12]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d907      	bls.n	8004c7e <_fwalk_reent+0x3a>
 8004c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c72:	3301      	adds	r3, #1
 8004c74:	d003      	beq.n	8004c7e <_fwalk_reent+0x3a>
 8004c76:	4629      	mov	r1, r5
 8004c78:	4630      	mov	r0, r6
 8004c7a:	47c0      	blx	r8
 8004c7c:	4307      	orrs	r7, r0
 8004c7e:	3568      	adds	r5, #104	; 0x68
 8004c80:	e7e9      	b.n	8004c56 <_fwalk_reent+0x12>
	...

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	2600      	movs	r6, #0
 8004c88:	4d0c      	ldr	r5, [pc, #48]	; (8004cbc <__libc_init_array+0x38>)
 8004c8a:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8c:	1b64      	subs	r4, r4, r5
 8004c8e:	10a4      	asrs	r4, r4, #2
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	f000 ffb0 	bl	8005bf8 <_init>
 8004c98:	2600      	movs	r6, #0
 8004c9a:	4d0a      	ldr	r5, [pc, #40]	; (8004cc4 <__libc_init_array+0x40>)
 8004c9c:	4c0a      	ldr	r4, [pc, #40]	; (8004cc8 <__libc_init_array+0x44>)
 8004c9e:	1b64      	subs	r4, r4, r5
 8004ca0:	10a4      	asrs	r4, r4, #2
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08005d8c 	.word	0x08005d8c
 8004cc0:	08005d8c 	.word	0x08005d8c
 8004cc4:	08005d8c 	.word	0x08005d8c
 8004cc8:	08005d90 	.word	0x08005d90

08004ccc <__retarget_lock_init_recursive>:
 8004ccc:	4770      	bx	lr

08004cce <__retarget_lock_acquire_recursive>:
 8004cce:	4770      	bx	lr

08004cd0 <__retarget_lock_release_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <memcpy>:
 8004cd2:	440a      	add	r2, r1
 8004cd4:	4291      	cmp	r1, r2
 8004cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cda:	d100      	bne.n	8004cde <memcpy+0xc>
 8004cdc:	4770      	bx	lr
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce4:	4291      	cmp	r1, r2
 8004ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cea:	d1f9      	bne.n	8004ce0 <memcpy+0xe>
 8004cec:	bd10      	pop	{r4, pc}

08004cee <memset>:
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4402      	add	r2, r0
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d100      	bne.n	8004cf8 <memset+0xa>
 8004cf6:	4770      	bx	lr
 8004cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfc:	e7f9      	b.n	8004cf2 <memset+0x4>
	...

08004d00 <sbrk_aligned>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4e0e      	ldr	r6, [pc, #56]	; (8004d3c <sbrk_aligned+0x3c>)
 8004d04:	460c      	mov	r4, r1
 8004d06:	6831      	ldr	r1, [r6, #0]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	b911      	cbnz	r1, 8004d12 <sbrk_aligned+0x12>
 8004d0c:	f000 f984 	bl	8005018 <_sbrk_r>
 8004d10:	6030      	str	r0, [r6, #0]
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f97f 	bl	8005018 <_sbrk_r>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d00a      	beq.n	8004d34 <sbrk_aligned+0x34>
 8004d1e:	1cc4      	adds	r4, r0, #3
 8004d20:	f024 0403 	bic.w	r4, r4, #3
 8004d24:	42a0      	cmp	r0, r4
 8004d26:	d007      	beq.n	8004d38 <sbrk_aligned+0x38>
 8004d28:	1a21      	subs	r1, r4, r0
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f974 	bl	8005018 <_sbrk_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d101      	bne.n	8004d38 <sbrk_aligned+0x38>
 8004d34:	f04f 34ff 	mov.w	r4, #4294967295
 8004d38:	4620      	mov	r0, r4
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	20001144 	.word	0x20001144

08004d40 <_malloc_r>:
 8004d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d44:	1ccd      	adds	r5, r1, #3
 8004d46:	f025 0503 	bic.w	r5, r5, #3
 8004d4a:	3508      	adds	r5, #8
 8004d4c:	2d0c      	cmp	r5, #12
 8004d4e:	bf38      	it	cc
 8004d50:	250c      	movcc	r5, #12
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	4607      	mov	r7, r0
 8004d56:	db01      	blt.n	8004d5c <_malloc_r+0x1c>
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d905      	bls.n	8004d68 <_malloc_r+0x28>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	2600      	movs	r6, #0
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4630      	mov	r0, r6
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	4e2e      	ldr	r6, [pc, #184]	; (8004e24 <_malloc_r+0xe4>)
 8004d6a:	f000 fbc1 	bl	80054f0 <__malloc_lock>
 8004d6e:	6833      	ldr	r3, [r6, #0]
 8004d70:	461c      	mov	r4, r3
 8004d72:	bb34      	cbnz	r4, 8004dc2 <_malloc_r+0x82>
 8004d74:	4629      	mov	r1, r5
 8004d76:	4638      	mov	r0, r7
 8004d78:	f7ff ffc2 	bl	8004d00 <sbrk_aligned>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	4604      	mov	r4, r0
 8004d80:	d14d      	bne.n	8004e1e <_malloc_r+0xde>
 8004d82:	6834      	ldr	r4, [r6, #0]
 8004d84:	4626      	mov	r6, r4
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	d140      	bne.n	8004e0c <_malloc_r+0xcc>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4638      	mov	r0, r7
 8004d90:	eb04 0803 	add.w	r8, r4, r3
 8004d94:	f000 f940 	bl	8005018 <_sbrk_r>
 8004d98:	4580      	cmp	r8, r0
 8004d9a:	d13a      	bne.n	8004e12 <_malloc_r+0xd2>
 8004d9c:	6821      	ldr	r1, [r4, #0]
 8004d9e:	3503      	adds	r5, #3
 8004da0:	1a6d      	subs	r5, r5, r1
 8004da2:	f025 0503 	bic.w	r5, r5, #3
 8004da6:	3508      	adds	r5, #8
 8004da8:	2d0c      	cmp	r5, #12
 8004daa:	bf38      	it	cc
 8004dac:	250c      	movcc	r5, #12
 8004dae:	4638      	mov	r0, r7
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7ff ffa5 	bl	8004d00 <sbrk_aligned>
 8004db6:	3001      	adds	r0, #1
 8004db8:	d02b      	beq.n	8004e12 <_malloc_r+0xd2>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	442b      	add	r3, r5
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	e00e      	b.n	8004de0 <_malloc_r+0xa0>
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	1b52      	subs	r2, r2, r5
 8004dc6:	d41e      	bmi.n	8004e06 <_malloc_r+0xc6>
 8004dc8:	2a0b      	cmp	r2, #11
 8004dca:	d916      	bls.n	8004dfa <_malloc_r+0xba>
 8004dcc:	1961      	adds	r1, r4, r5
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	6025      	str	r5, [r4, #0]
 8004dd2:	bf18      	it	ne
 8004dd4:	6059      	strne	r1, [r3, #4]
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	bf08      	it	eq
 8004dda:	6031      	streq	r1, [r6, #0]
 8004ddc:	5162      	str	r2, [r4, r5]
 8004dde:	604b      	str	r3, [r1, #4]
 8004de0:	4638      	mov	r0, r7
 8004de2:	f104 060b 	add.w	r6, r4, #11
 8004de6:	f000 fb89 	bl	80054fc <__malloc_unlock>
 8004dea:	f026 0607 	bic.w	r6, r6, #7
 8004dee:	1d23      	adds	r3, r4, #4
 8004df0:	1af2      	subs	r2, r6, r3
 8004df2:	d0b6      	beq.n	8004d62 <_malloc_r+0x22>
 8004df4:	1b9b      	subs	r3, r3, r6
 8004df6:	50a3      	str	r3, [r4, r2]
 8004df8:	e7b3      	b.n	8004d62 <_malloc_r+0x22>
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	bf0c      	ite	eq
 8004e00:	6032      	streq	r2, [r6, #0]
 8004e02:	605a      	strne	r2, [r3, #4]
 8004e04:	e7ec      	b.n	8004de0 <_malloc_r+0xa0>
 8004e06:	4623      	mov	r3, r4
 8004e08:	6864      	ldr	r4, [r4, #4]
 8004e0a:	e7b2      	b.n	8004d72 <_malloc_r+0x32>
 8004e0c:	4634      	mov	r4, r6
 8004e0e:	6876      	ldr	r6, [r6, #4]
 8004e10:	e7b9      	b.n	8004d86 <_malloc_r+0x46>
 8004e12:	230c      	movs	r3, #12
 8004e14:	4638      	mov	r0, r7
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	f000 fb70 	bl	80054fc <__malloc_unlock>
 8004e1c:	e7a1      	b.n	8004d62 <_malloc_r+0x22>
 8004e1e:	6025      	str	r5, [r4, #0]
 8004e20:	e7de      	b.n	8004de0 <_malloc_r+0xa0>
 8004e22:	bf00      	nop
 8004e24:	20001140 	.word	0x20001140

08004e28 <iprintf>:
 8004e28:	b40f      	push	{r0, r1, r2, r3}
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <iprintf+0x2c>)
 8004e2c:	b513      	push	{r0, r1, r4, lr}
 8004e2e:	681c      	ldr	r4, [r3, #0]
 8004e30:	b124      	cbz	r4, 8004e3c <iprintf+0x14>
 8004e32:	69a3      	ldr	r3, [r4, #24]
 8004e34:	b913      	cbnz	r3, 8004e3c <iprintf+0x14>
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fe86 	bl	8004b48 <__sinit>
 8004e3c:	ab05      	add	r3, sp, #20
 8004e3e:	4620      	mov	r0, r4
 8004e40:	9a04      	ldr	r2, [sp, #16]
 8004e42:	68a1      	ldr	r1, [r4, #8]
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	f000 fbcf 	bl	80055e8 <_vfiprintf_r>
 8004e4a:	b002      	add	sp, #8
 8004e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e50:	b004      	add	sp, #16
 8004e52:	4770      	bx	lr
 8004e54:	20000010 	.word	0x20000010

08004e58 <_puts_r>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	b118      	cbz	r0, 8004e68 <_puts_r+0x10>
 8004e60:	6983      	ldr	r3, [r0, #24]
 8004e62:	b90b      	cbnz	r3, 8004e68 <_puts_r+0x10>
 8004e64:	f7ff fe70 	bl	8004b48 <__sinit>
 8004e68:	69ab      	ldr	r3, [r5, #24]
 8004e6a:	68ac      	ldr	r4, [r5, #8]
 8004e6c:	b913      	cbnz	r3, 8004e74 <_puts_r+0x1c>
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7ff fe6a 	bl	8004b48 <__sinit>
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <_puts_r+0xd0>)
 8004e76:	429c      	cmp	r4, r3
 8004e78:	d120      	bne.n	8004ebc <_puts_r+0x64>
 8004e7a:	686c      	ldr	r4, [r5, #4]
 8004e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e7e:	07db      	lsls	r3, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_puts_r+0x36>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	0598      	lsls	r0, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_puts_r+0x36>
 8004e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e8a:	f7ff ff20 	bl	8004cce <__retarget_lock_acquire_recursive>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	0719      	lsls	r1, r3, #28
 8004e92:	d51d      	bpl.n	8004ed0 <_puts_r+0x78>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	b1db      	cbz	r3, 8004ed0 <_puts_r+0x78>
 8004e98:	3e01      	subs	r6, #1
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	60a3      	str	r3, [r4, #8]
 8004ea4:	bb39      	cbnz	r1, 8004ef6 <_puts_r+0x9e>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da38      	bge.n	8004f1c <_puts_r+0xc4>
 8004eaa:	4622      	mov	r2, r4
 8004eac:	210a      	movs	r1, #10
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f906 	bl	80050c0 <__swbuf_r>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d011      	beq.n	8004edc <_puts_r+0x84>
 8004eb8:	250a      	movs	r5, #10
 8004eba:	e011      	b.n	8004ee0 <_puts_r+0x88>
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <_puts_r+0xd4>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <_puts_r+0x6e>
 8004ec2:	68ac      	ldr	r4, [r5, #8]
 8004ec4:	e7da      	b.n	8004e7c <_puts_r+0x24>
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <_puts_r+0xd8>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68ec      	ldreq	r4, [r5, #12]
 8004ece:	e7d5      	b.n	8004e7c <_puts_r+0x24>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f958 	bl	8005188 <__swsetup_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d0dd      	beq.n	8004e98 <_puts_r+0x40>
 8004edc:	f04f 35ff 	mov.w	r5, #4294967295
 8004ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ee2:	07da      	lsls	r2, r3, #31
 8004ee4:	d405      	bmi.n	8004ef2 <_puts_r+0x9a>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	059b      	lsls	r3, r3, #22
 8004eea:	d402      	bmi.n	8004ef2 <_puts_r+0x9a>
 8004eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eee:	f7ff feef 	bl	8004cd0 <__retarget_lock_release_recursive>
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da04      	bge.n	8004f04 <_puts_r+0xac>
 8004efa:	69a2      	ldr	r2, [r4, #24]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	dc06      	bgt.n	8004f0e <_puts_r+0xb6>
 8004f00:	290a      	cmp	r1, #10
 8004f02:	d004      	beq.n	8004f0e <_puts_r+0xb6>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	7019      	strb	r1, [r3, #0]
 8004f0c:	e7c5      	b.n	8004e9a <_puts_r+0x42>
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	f000 f8d5 	bl	80050c0 <__swbuf_r>
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1bf      	bne.n	8004e9a <_puts_r+0x42>
 8004f1a:	e7df      	b.n	8004edc <_puts_r+0x84>
 8004f1c:	250a      	movs	r5, #10
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	701d      	strb	r5, [r3, #0]
 8004f26:	e7db      	b.n	8004ee0 <_puts_r+0x88>
 8004f28:	08005d14 	.word	0x08005d14
 8004f2c:	08005d34 	.word	0x08005d34
 8004f30:	08005cf4 	.word	0x08005cf4

08004f34 <puts>:
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <puts+0xc>)
 8004f36:	4601      	mov	r1, r0
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f7ff bf8d 	b.w	8004e58 <_puts_r>
 8004f3e:	bf00      	nop
 8004f40:	20000010 	.word	0x20000010

08004f44 <cleanup_glue>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	460c      	mov	r4, r1
 8004f48:	6809      	ldr	r1, [r1, #0]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	b109      	cbz	r1, 8004f52 <cleanup_glue+0xe>
 8004f4e:	f7ff fff9 	bl	8004f44 <cleanup_glue>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5a:	f000 bad5 	b.w	8005508 <_free_r>
	...

08004f60 <_reclaim_reent>:
 8004f60:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <_reclaim_reent+0xb4>)
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4604      	mov	r4, r0
 8004f68:	4283      	cmp	r3, r0
 8004f6a:	d051      	beq.n	8005010 <_reclaim_reent+0xb0>
 8004f6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f6e:	b143      	cbz	r3, 8004f82 <_reclaim_reent+0x22>
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14a      	bne.n	800500c <_reclaim_reent+0xac>
 8004f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	b111      	cbz	r1, 8004f82 <_reclaim_reent+0x22>
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 fac3 	bl	8005508 <_free_r>
 8004f82:	6961      	ldr	r1, [r4, #20]
 8004f84:	b111      	cbz	r1, 8004f8c <_reclaim_reent+0x2c>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 fabe 	bl	8005508 <_free_r>
 8004f8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f8e:	b111      	cbz	r1, 8004f96 <_reclaim_reent+0x36>
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 fab9 	bl	8005508 <_free_r>
 8004f96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f98:	b111      	cbz	r1, 8004fa0 <_reclaim_reent+0x40>
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 fab4 	bl	8005508 <_free_r>
 8004fa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004fa2:	b111      	cbz	r1, 8004faa <_reclaim_reent+0x4a>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 faaf 	bl	8005508 <_free_r>
 8004faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fac:	b111      	cbz	r1, 8004fb4 <_reclaim_reent+0x54>
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 faaa 	bl	8005508 <_free_r>
 8004fb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004fb6:	b111      	cbz	r1, 8004fbe <_reclaim_reent+0x5e>
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 faa5 	bl	8005508 <_free_r>
 8004fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fc0:	b111      	cbz	r1, 8004fc8 <_reclaim_reent+0x68>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 faa0 	bl	8005508 <_free_r>
 8004fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fca:	b111      	cbz	r1, 8004fd2 <_reclaim_reent+0x72>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fa9b 	bl	8005508 <_free_r>
 8004fd2:	69a3      	ldr	r3, [r4, #24]
 8004fd4:	b1e3      	cbz	r3, 8005010 <_reclaim_reent+0xb0>
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fda:	4798      	blx	r3
 8004fdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fde:	b1b9      	cbz	r1, 8005010 <_reclaim_reent+0xb0>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fe6:	f7ff bfad 	b.w	8004f44 <cleanup_glue>
 8004fea:	5949      	ldr	r1, [r1, r5]
 8004fec:	b941      	cbnz	r1, 8005000 <_reclaim_reent+0xa0>
 8004fee:	3504      	adds	r5, #4
 8004ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff2:	2d80      	cmp	r5, #128	; 0x80
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	d1f8      	bne.n	8004fea <_reclaim_reent+0x8a>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fa85 	bl	8005508 <_free_r>
 8004ffe:	e7ba      	b.n	8004f76 <_reclaim_reent+0x16>
 8005000:	680e      	ldr	r6, [r1, #0]
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fa80 	bl	8005508 <_free_r>
 8005008:	4631      	mov	r1, r6
 800500a:	e7ef      	b.n	8004fec <_reclaim_reent+0x8c>
 800500c:	2500      	movs	r5, #0
 800500e:	e7ef      	b.n	8004ff0 <_reclaim_reent+0x90>
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	bf00      	nop
 8005014:	20000010 	.word	0x20000010

08005018 <_sbrk_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	2300      	movs	r3, #0
 800501c:	4d05      	ldr	r5, [pc, #20]	; (8005034 <_sbrk_r+0x1c>)
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	f7fb fbc0 	bl	80007a8 <_sbrk>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_sbrk_r+0x1a>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b103      	cbz	r3, 8005032 <_sbrk_r+0x1a>
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20001148 	.word	0x20001148

08005038 <__sread>:
 8005038:	b510      	push	{r4, lr}
 800503a:	460c      	mov	r4, r1
 800503c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005040:	f000 fd98 	bl	8005b74 <_read_r>
 8005044:	2800      	cmp	r0, #0
 8005046:	bfab      	itete	ge
 8005048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800504a:	89a3      	ldrhlt	r3, [r4, #12]
 800504c:	181b      	addge	r3, r3, r0
 800504e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005052:	bfac      	ite	ge
 8005054:	6563      	strge	r3, [r4, #84]	; 0x54
 8005056:	81a3      	strhlt	r3, [r4, #12]
 8005058:	bd10      	pop	{r4, pc}

0800505a <__swrite>:
 800505a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505e:	461f      	mov	r7, r3
 8005060:	898b      	ldrh	r3, [r1, #12]
 8005062:	4605      	mov	r5, r0
 8005064:	05db      	lsls	r3, r3, #23
 8005066:	460c      	mov	r4, r1
 8005068:	4616      	mov	r6, r2
 800506a:	d505      	bpl.n	8005078 <__swrite+0x1e>
 800506c:	2302      	movs	r3, #2
 800506e:	2200      	movs	r2, #0
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	f000 f9c4 	bl	8005400 <_lseek_r>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	4632      	mov	r2, r6
 800507c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	4628      	mov	r0, r5
 8005084:	463b      	mov	r3, r7
 8005086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800508e:	f000 b869 	b.w	8005164 <_write_r>

08005092 <__sseek>:
 8005092:	b510      	push	{r4, lr}
 8005094:	460c      	mov	r4, r1
 8005096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509a:	f000 f9b1 	bl	8005400 <_lseek_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	bf15      	itete	ne
 80050a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ae:	81a3      	strheq	r3, [r4, #12]
 80050b0:	bf18      	it	ne
 80050b2:	81a3      	strhne	r3, [r4, #12]
 80050b4:	bd10      	pop	{r4, pc}

080050b6 <__sclose>:
 80050b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ba:	f000 b8d3 	b.w	8005264 <_close_r>
	...

080050c0 <__swbuf_r>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	4605      	mov	r5, r0
 80050c8:	b118      	cbz	r0, 80050d2 <__swbuf_r+0x12>
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	b90b      	cbnz	r3, 80050d2 <__swbuf_r+0x12>
 80050ce:	f7ff fd3b 	bl	8004b48 <__sinit>
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <__swbuf_r+0x98>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d12b      	bne.n	8005130 <__swbuf_r+0x70>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	69a3      	ldr	r3, [r4, #24]
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	071a      	lsls	r2, r3, #28
 80050e2:	d52f      	bpl.n	8005144 <__swbuf_r+0x84>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b36b      	cbz	r3, 8005144 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	b2f6      	uxtb	r6, r6
 80050ee:	1ac0      	subs	r0, r0, r3
 80050f0:	6963      	ldr	r3, [r4, #20]
 80050f2:	4637      	mov	r7, r6
 80050f4:	4283      	cmp	r3, r0
 80050f6:	dc04      	bgt.n	8005102 <__swbuf_r+0x42>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f944 	bl	8005388 <_fflush_r>
 8005100:	bb30      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3001      	adds	r0, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	701e      	strb	r6, [r3, #0]
 8005112:	6963      	ldr	r3, [r4, #20]
 8005114:	4283      	cmp	r3, r0
 8005116:	d004      	beq.n	8005122 <__swbuf_r+0x62>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d506      	bpl.n	800512c <__swbuf_r+0x6c>
 800511e:	2e0a      	cmp	r6, #10
 8005120:	d104      	bne.n	800512c <__swbuf_r+0x6c>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f92f 	bl	8005388 <_fflush_r>
 800512a:	b988      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 800512c:	4638      	mov	r0, r7
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <__swbuf_r+0x9c>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swbuf_r+0x7a>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7cf      	b.n	80050da <__swbuf_r+0x1a>
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <__swbuf_r+0xa0>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7ca      	b.n	80050da <__swbuf_r+0x1a>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f81e 	bl	8005188 <__swsetup_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0cb      	beq.n	80050e8 <__swbuf_r+0x28>
 8005150:	f04f 37ff 	mov.w	r7, #4294967295
 8005154:	e7ea      	b.n	800512c <__swbuf_r+0x6c>
 8005156:	bf00      	nop
 8005158:	08005d14 	.word	0x08005d14
 800515c:	08005d34 	.word	0x08005d34
 8005160:	08005cf4 	.word	0x08005cf4

08005164 <_write_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	2200      	movs	r2, #0
 800516e:	4d05      	ldr	r5, [pc, #20]	; (8005184 <_write_r+0x20>)
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f7fb f804 	bl	8000180 <_write>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_write_r+0x1e>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_write_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20001148 	.word	0x20001148

08005188 <__swsetup_r>:
 8005188:	4b32      	ldr	r3, [pc, #200]	; (8005254 <__swsetup_r+0xcc>)
 800518a:	b570      	push	{r4, r5, r6, lr}
 800518c:	681d      	ldr	r5, [r3, #0]
 800518e:	4606      	mov	r6, r0
 8005190:	460c      	mov	r4, r1
 8005192:	b125      	cbz	r5, 800519e <__swsetup_r+0x16>
 8005194:	69ab      	ldr	r3, [r5, #24]
 8005196:	b913      	cbnz	r3, 800519e <__swsetup_r+0x16>
 8005198:	4628      	mov	r0, r5
 800519a:	f7ff fcd5 	bl	8004b48 <__sinit>
 800519e:	4b2e      	ldr	r3, [pc, #184]	; (8005258 <__swsetup_r+0xd0>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d10f      	bne.n	80051c4 <__swsetup_r+0x3c>
 80051a4:	686c      	ldr	r4, [r5, #4]
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ac:	0719      	lsls	r1, r3, #28
 80051ae:	d42c      	bmi.n	800520a <__swsetup_r+0x82>
 80051b0:	06dd      	lsls	r5, r3, #27
 80051b2:	d411      	bmi.n	80051d8 <__swsetup_r+0x50>
 80051b4:	2309      	movs	r3, #9
 80051b6:	6033      	str	r3, [r6, #0]
 80051b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	e03e      	b.n	8005242 <__swsetup_r+0xba>
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <__swsetup_r+0xd4>)
 80051c6:	429c      	cmp	r4, r3
 80051c8:	d101      	bne.n	80051ce <__swsetup_r+0x46>
 80051ca:	68ac      	ldr	r4, [r5, #8]
 80051cc:	e7eb      	b.n	80051a6 <__swsetup_r+0x1e>
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <__swsetup_r+0xd8>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	bf08      	it	eq
 80051d4:	68ec      	ldreq	r4, [r5, #12]
 80051d6:	e7e6      	b.n	80051a6 <__swsetup_r+0x1e>
 80051d8:	0758      	lsls	r0, r3, #29
 80051da:	d512      	bpl.n	8005202 <__swsetup_r+0x7a>
 80051dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051de:	b141      	cbz	r1, 80051f2 <__swsetup_r+0x6a>
 80051e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e4:	4299      	cmp	r1, r3
 80051e6:	d002      	beq.n	80051ee <__swsetup_r+0x66>
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 f98d 	bl	8005508 <_free_r>
 80051ee:	2300      	movs	r3, #0
 80051f0:	6363      	str	r3, [r4, #52]	; 0x34
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	2300      	movs	r3, #0
 80051fc:	6063      	str	r3, [r4, #4]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	b94b      	cbnz	r3, 8005222 <__swsetup_r+0x9a>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005218:	d003      	beq.n	8005222 <__swsetup_r+0x9a>
 800521a:	4621      	mov	r1, r4
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f927 	bl	8005470 <__smakebuf_r>
 8005222:	89a0      	ldrh	r0, [r4, #12]
 8005224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005228:	f010 0301 	ands.w	r3, r0, #1
 800522c:	d00a      	beq.n	8005244 <__swsetup_r+0xbc>
 800522e:	2300      	movs	r3, #0
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	6963      	ldr	r3, [r4, #20]
 8005234:	425b      	negs	r3, r3
 8005236:	61a3      	str	r3, [r4, #24]
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	b943      	cbnz	r3, 800524e <__swsetup_r+0xc6>
 800523c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005240:	d1ba      	bne.n	80051b8 <__swsetup_r+0x30>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	0781      	lsls	r1, r0, #30
 8005246:	bf58      	it	pl
 8005248:	6963      	ldrpl	r3, [r4, #20]
 800524a:	60a3      	str	r3, [r4, #8]
 800524c:	e7f4      	b.n	8005238 <__swsetup_r+0xb0>
 800524e:	2000      	movs	r0, #0
 8005250:	e7f7      	b.n	8005242 <__swsetup_r+0xba>
 8005252:	bf00      	nop
 8005254:	20000010 	.word	0x20000010
 8005258:	08005d14 	.word	0x08005d14
 800525c:	08005d34 	.word	0x08005d34
 8005260:	08005cf4 	.word	0x08005cf4

08005264 <_close_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	2300      	movs	r3, #0
 8005268:	4d05      	ldr	r5, [pc, #20]	; (8005280 <_close_r+0x1c>)
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fb fa69 	bl	8000746 <_close>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_close_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_close_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20001148 	.word	0x20001148

08005284 <__sflush_r>:
 8005284:	898a      	ldrh	r2, [r1, #12]
 8005286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005288:	4605      	mov	r5, r0
 800528a:	0710      	lsls	r0, r2, #28
 800528c:	460c      	mov	r4, r1
 800528e:	d457      	bmi.n	8005340 <__sflush_r+0xbc>
 8005290:	684b      	ldr	r3, [r1, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	dc04      	bgt.n	80052a0 <__sflush_r+0x1c>
 8005296:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc01      	bgt.n	80052a0 <__sflush_r+0x1c>
 800529c:	2000      	movs	r0, #0
 800529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052a2:	2e00      	cmp	r6, #0
 80052a4:	d0fa      	beq.n	800529c <__sflush_r+0x18>
 80052a6:	2300      	movs	r3, #0
 80052a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052ac:	682f      	ldr	r7, [r5, #0]
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	d032      	beq.n	8005318 <__sflush_r+0x94>
 80052b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	075a      	lsls	r2, r3, #29
 80052b8:	d505      	bpl.n	80052c6 <__sflush_r+0x42>
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	1ac0      	subs	r0, r0, r3
 80052be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c0:	b10b      	cbz	r3, 80052c6 <__sflush_r+0x42>
 80052c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	2300      	movs	r3, #0
 80052c8:	4602      	mov	r2, r0
 80052ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052cc:	4628      	mov	r0, r5
 80052ce:	6a21      	ldr	r1, [r4, #32]
 80052d0:	47b0      	blx	r6
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	d106      	bne.n	80052e6 <__sflush_r+0x62>
 80052d8:	6829      	ldr	r1, [r5, #0]
 80052da:	291d      	cmp	r1, #29
 80052dc:	d82c      	bhi.n	8005338 <__sflush_r+0xb4>
 80052de:	4a29      	ldr	r2, [pc, #164]	; (8005384 <__sflush_r+0x100>)
 80052e0:	40ca      	lsrs	r2, r1
 80052e2:	07d6      	lsls	r6, r2, #31
 80052e4:	d528      	bpl.n	8005338 <__sflush_r+0xb4>
 80052e6:	2200      	movs	r2, #0
 80052e8:	6062      	str	r2, [r4, #4]
 80052ea:	6922      	ldr	r2, [r4, #16]
 80052ec:	04d9      	lsls	r1, r3, #19
 80052ee:	6022      	str	r2, [r4, #0]
 80052f0:	d504      	bpl.n	80052fc <__sflush_r+0x78>
 80052f2:	1c42      	adds	r2, r0, #1
 80052f4:	d101      	bne.n	80052fa <__sflush_r+0x76>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	b903      	cbnz	r3, 80052fc <__sflush_r+0x78>
 80052fa:	6560      	str	r0, [r4, #84]	; 0x54
 80052fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fe:	602f      	str	r7, [r5, #0]
 8005300:	2900      	cmp	r1, #0
 8005302:	d0cb      	beq.n	800529c <__sflush_r+0x18>
 8005304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005308:	4299      	cmp	r1, r3
 800530a:	d002      	beq.n	8005312 <__sflush_r+0x8e>
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f8fb 	bl	8005508 <_free_r>
 8005312:	2000      	movs	r0, #0
 8005314:	6360      	str	r0, [r4, #52]	; 0x34
 8005316:	e7c2      	b.n	800529e <__sflush_r+0x1a>
 8005318:	6a21      	ldr	r1, [r4, #32]
 800531a:	2301      	movs	r3, #1
 800531c:	4628      	mov	r0, r5
 800531e:	47b0      	blx	r6
 8005320:	1c41      	adds	r1, r0, #1
 8005322:	d1c7      	bne.n	80052b4 <__sflush_r+0x30>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0c4      	beq.n	80052b4 <__sflush_r+0x30>
 800532a:	2b1d      	cmp	r3, #29
 800532c:	d001      	beq.n	8005332 <__sflush_r+0xae>
 800532e:	2b16      	cmp	r3, #22
 8005330:	d101      	bne.n	8005336 <__sflush_r+0xb2>
 8005332:	602f      	str	r7, [r5, #0]
 8005334:	e7b2      	b.n	800529c <__sflush_r+0x18>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	e7ae      	b.n	800529e <__sflush_r+0x1a>
 8005340:	690f      	ldr	r7, [r1, #16]
 8005342:	2f00      	cmp	r7, #0
 8005344:	d0aa      	beq.n	800529c <__sflush_r+0x18>
 8005346:	0793      	lsls	r3, r2, #30
 8005348:	bf18      	it	ne
 800534a:	2300      	movne	r3, #0
 800534c:	680e      	ldr	r6, [r1, #0]
 800534e:	bf08      	it	eq
 8005350:	694b      	ldreq	r3, [r1, #20]
 8005352:	1bf6      	subs	r6, r6, r7
 8005354:	600f      	str	r7, [r1, #0]
 8005356:	608b      	str	r3, [r1, #8]
 8005358:	2e00      	cmp	r6, #0
 800535a:	dd9f      	ble.n	800529c <__sflush_r+0x18>
 800535c:	4633      	mov	r3, r6
 800535e:	463a      	mov	r2, r7
 8005360:	4628      	mov	r0, r5
 8005362:	6a21      	ldr	r1, [r4, #32]
 8005364:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005368:	47e0      	blx	ip
 800536a:	2800      	cmp	r0, #0
 800536c:	dc06      	bgt.n	800537c <__sflush_r+0xf8>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	e790      	b.n	800529e <__sflush_r+0x1a>
 800537c:	4407      	add	r7, r0
 800537e:	1a36      	subs	r6, r6, r0
 8005380:	e7ea      	b.n	8005358 <__sflush_r+0xd4>
 8005382:	bf00      	nop
 8005384:	20400001 	.word	0x20400001

08005388 <_fflush_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	4605      	mov	r5, r0
 800538e:	460c      	mov	r4, r1
 8005390:	b913      	cbnz	r3, 8005398 <_fflush_r+0x10>
 8005392:	2500      	movs	r5, #0
 8005394:	4628      	mov	r0, r5
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	b118      	cbz	r0, 80053a2 <_fflush_r+0x1a>
 800539a:	6983      	ldr	r3, [r0, #24]
 800539c:	b90b      	cbnz	r3, 80053a2 <_fflush_r+0x1a>
 800539e:	f7ff fbd3 	bl	8004b48 <__sinit>
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <_fflush_r+0x6c>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d11b      	bne.n	80053e0 <_fflush_r+0x58>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <_fflush_r+0xa>
 80053b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053b4:	07d0      	lsls	r0, r2, #31
 80053b6:	d404      	bmi.n	80053c2 <_fflush_r+0x3a>
 80053b8:	0599      	lsls	r1, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_fflush_r+0x3a>
 80053bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053be:	f7ff fc86 	bl	8004cce <__retarget_lock_acquire_recursive>
 80053c2:	4628      	mov	r0, r5
 80053c4:	4621      	mov	r1, r4
 80053c6:	f7ff ff5d 	bl	8005284 <__sflush_r>
 80053ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053cc:	4605      	mov	r5, r0
 80053ce:	07da      	lsls	r2, r3, #31
 80053d0:	d4e0      	bmi.n	8005394 <_fflush_r+0xc>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	d4dd      	bmi.n	8005394 <_fflush_r+0xc>
 80053d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053da:	f7ff fc79 	bl	8004cd0 <__retarget_lock_release_recursive>
 80053de:	e7d9      	b.n	8005394 <_fflush_r+0xc>
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <_fflush_r+0x70>)
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d101      	bne.n	80053ea <_fflush_r+0x62>
 80053e6:	68ac      	ldr	r4, [r5, #8]
 80053e8:	e7df      	b.n	80053aa <_fflush_r+0x22>
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <_fflush_r+0x74>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	bf08      	it	eq
 80053f0:	68ec      	ldreq	r4, [r5, #12]
 80053f2:	e7da      	b.n	80053aa <_fflush_r+0x22>
 80053f4:	08005d14 	.word	0x08005d14
 80053f8:	08005d34 	.word	0x08005d34
 80053fc:	08005cf4 	.word	0x08005cf4

08005400 <_lseek_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	2200      	movs	r2, #0
 800540a:	4d05      	ldr	r5, [pc, #20]	; (8005420 <_lseek_r+0x20>)
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f7fb f9bd 	bl	800078e <_lseek>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_lseek_r+0x1e>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_lseek_r+0x1e>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	20001148 	.word	0x20001148

08005424 <__swhatbuf_r>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	460e      	mov	r6, r1
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	4614      	mov	r4, r2
 800542e:	2900      	cmp	r1, #0
 8005430:	461d      	mov	r5, r3
 8005432:	b096      	sub	sp, #88	; 0x58
 8005434:	da08      	bge.n	8005448 <__swhatbuf_r+0x24>
 8005436:	2200      	movs	r2, #0
 8005438:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	061a      	lsls	r2, r3, #24
 8005440:	d410      	bmi.n	8005464 <__swhatbuf_r+0x40>
 8005442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005446:	e00e      	b.n	8005466 <__swhatbuf_r+0x42>
 8005448:	466a      	mov	r2, sp
 800544a:	f000 fba5 	bl	8005b98 <_fstat_r>
 800544e:	2800      	cmp	r0, #0
 8005450:	dbf1      	blt.n	8005436 <__swhatbuf_r+0x12>
 8005452:	9a01      	ldr	r2, [sp, #4]
 8005454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800545c:	425a      	negs	r2, r3
 800545e:	415a      	adcs	r2, r3
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	e7ee      	b.n	8005442 <__swhatbuf_r+0x1e>
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	2000      	movs	r0, #0
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	b016      	add	sp, #88	; 0x58
 800546c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005470 <__smakebuf_r>:
 8005470:	898b      	ldrh	r3, [r1, #12]
 8005472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005474:	079d      	lsls	r5, r3, #30
 8005476:	4606      	mov	r6, r0
 8005478:	460c      	mov	r4, r1
 800547a:	d507      	bpl.n	800548c <__smakebuf_r+0x1c>
 800547c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	2301      	movs	r3, #1
 8005486:	6163      	str	r3, [r4, #20]
 8005488:	b002      	add	sp, #8
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	466a      	mov	r2, sp
 800548e:	ab01      	add	r3, sp, #4
 8005490:	f7ff ffc8 	bl	8005424 <__swhatbuf_r>
 8005494:	9900      	ldr	r1, [sp, #0]
 8005496:	4605      	mov	r5, r0
 8005498:	4630      	mov	r0, r6
 800549a:	f7ff fc51 	bl	8004d40 <_malloc_r>
 800549e:	b948      	cbnz	r0, 80054b4 <__smakebuf_r+0x44>
 80054a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a4:	059a      	lsls	r2, r3, #22
 80054a6:	d4ef      	bmi.n	8005488 <__smakebuf_r+0x18>
 80054a8:	f023 0303 	bic.w	r3, r3, #3
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	e7e3      	b.n	800547c <__smakebuf_r+0xc>
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <__smakebuf_r+0x7c>)
 80054b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	6020      	str	r0, [r4, #0]
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	81a3      	strh	r3, [r4, #12]
 80054c2:	9b00      	ldr	r3, [sp, #0]
 80054c4:	6120      	str	r0, [r4, #16]
 80054c6:	6163      	str	r3, [r4, #20]
 80054c8:	9b01      	ldr	r3, [sp, #4]
 80054ca:	b15b      	cbz	r3, 80054e4 <__smakebuf_r+0x74>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d2:	f000 fb73 	bl	8005bbc <_isatty_r>
 80054d6:	b128      	cbz	r0, 80054e4 <__smakebuf_r+0x74>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	89a0      	ldrh	r0, [r4, #12]
 80054e6:	4305      	orrs	r5, r0
 80054e8:	81a5      	strh	r5, [r4, #12]
 80054ea:	e7cd      	b.n	8005488 <__smakebuf_r+0x18>
 80054ec:	08004ae1 	.word	0x08004ae1

080054f0 <__malloc_lock>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__malloc_lock+0x8>)
 80054f2:	f7ff bbec 	b.w	8004cce <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	2000113c 	.word	0x2000113c

080054fc <__malloc_unlock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__malloc_unlock+0x8>)
 80054fe:	f7ff bbe7 	b.w	8004cd0 <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	2000113c 	.word	0x2000113c

08005508 <_free_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4605      	mov	r5, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	d040      	beq.n	8005592 <_free_r+0x8a>
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f0c      	subs	r4, r1, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfb8      	it	lt
 800551a:	18e4      	addlt	r4, r4, r3
 800551c:	f7ff ffe8 	bl	80054f0 <__malloc_lock>
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <_free_r+0x8c>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x2c>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005530:	f7ff bfe4 	b.w	80054fc <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x42>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1809      	addeq	r1, r1, r0
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x1e>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x4c>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x42>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1850      	adds	r0, r2, r1
 8005558:	42a0      	cmp	r0, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x6c>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4401      	add	r1, r0
 8005560:	1850      	adds	r0, r2, r1
 8005562:	4283      	cmp	r3, r0
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x22>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4401      	add	r1, r0
 800556e:	6011      	str	r1, [r2, #0]
 8005570:	6053      	str	r3, [r2, #4]
 8005572:	e7da      	b.n	800552a <_free_r+0x22>
 8005574:	d902      	bls.n	800557c <_free_r+0x74>
 8005576:	230c      	movs	r3, #12
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x22>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	bf01      	itttt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	1809      	addeq	r1, r1, r0
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6054      	str	r4, [r2, #4]
 8005590:	e7cb      	b.n	800552a <_free_r+0x22>
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20001140 	.word	0x20001140

08005598 <__sfputc_r>:
 8005598:	6893      	ldr	r3, [r2, #8]
 800559a:	b410      	push	{r4}
 800559c:	3b01      	subs	r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	6093      	str	r3, [r2, #8]
 80055a2:	da07      	bge.n	80055b4 <__sfputc_r+0x1c>
 80055a4:	6994      	ldr	r4, [r2, #24]
 80055a6:	42a3      	cmp	r3, r4
 80055a8:	db01      	blt.n	80055ae <__sfputc_r+0x16>
 80055aa:	290a      	cmp	r1, #10
 80055ac:	d102      	bne.n	80055b4 <__sfputc_r+0x1c>
 80055ae:	bc10      	pop	{r4}
 80055b0:	f7ff bd86 	b.w	80050c0 <__swbuf_r>
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	1c58      	adds	r0, r3, #1
 80055b8:	6010      	str	r0, [r2, #0]
 80055ba:	7019      	strb	r1, [r3, #0]
 80055bc:	4608      	mov	r0, r1
 80055be:	bc10      	pop	{r4}
 80055c0:	4770      	bx	lr

080055c2 <__sfputs_r>:
 80055c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	18d5      	adds	r5, r2, r3
 80055cc:	42ac      	cmp	r4, r5
 80055ce:	d101      	bne.n	80055d4 <__sfputs_r+0x12>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e007      	b.n	80055e4 <__sfputs_r+0x22>
 80055d4:	463a      	mov	r2, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055dc:	f7ff ffdc 	bl	8005598 <__sfputc_r>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d1f3      	bne.n	80055cc <__sfputs_r+0xa>
 80055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e8 <_vfiprintf_r>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	460d      	mov	r5, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	4698      	mov	r8, r3
 80055f2:	4606      	mov	r6, r0
 80055f4:	b09d      	sub	sp, #116	; 0x74
 80055f6:	b118      	cbz	r0, 8005600 <_vfiprintf_r+0x18>
 80055f8:	6983      	ldr	r3, [r0, #24]
 80055fa:	b90b      	cbnz	r3, 8005600 <_vfiprintf_r+0x18>
 80055fc:	f7ff faa4 	bl	8004b48 <__sinit>
 8005600:	4b89      	ldr	r3, [pc, #548]	; (8005828 <_vfiprintf_r+0x240>)
 8005602:	429d      	cmp	r5, r3
 8005604:	d11b      	bne.n	800563e <_vfiprintf_r+0x56>
 8005606:	6875      	ldr	r5, [r6, #4]
 8005608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800560a:	07d9      	lsls	r1, r3, #31
 800560c:	d405      	bmi.n	800561a <_vfiprintf_r+0x32>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	059a      	lsls	r2, r3, #22
 8005612:	d402      	bmi.n	800561a <_vfiprintf_r+0x32>
 8005614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005616:	f7ff fb5a 	bl	8004cce <__retarget_lock_acquire_recursive>
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	071b      	lsls	r3, r3, #28
 800561e:	d501      	bpl.n	8005624 <_vfiprintf_r+0x3c>
 8005620:	692b      	ldr	r3, [r5, #16]
 8005622:	b9eb      	cbnz	r3, 8005660 <_vfiprintf_r+0x78>
 8005624:	4629      	mov	r1, r5
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff fdae 	bl	8005188 <__swsetup_r>
 800562c:	b1c0      	cbz	r0, 8005660 <_vfiprintf_r+0x78>
 800562e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005630:	07dc      	lsls	r4, r3, #31
 8005632:	d50e      	bpl.n	8005652 <_vfiprintf_r+0x6a>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b01d      	add	sp, #116	; 0x74
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	4b7b      	ldr	r3, [pc, #492]	; (800582c <_vfiprintf_r+0x244>)
 8005640:	429d      	cmp	r5, r3
 8005642:	d101      	bne.n	8005648 <_vfiprintf_r+0x60>
 8005644:	68b5      	ldr	r5, [r6, #8]
 8005646:	e7df      	b.n	8005608 <_vfiprintf_r+0x20>
 8005648:	4b79      	ldr	r3, [pc, #484]	; (8005830 <_vfiprintf_r+0x248>)
 800564a:	429d      	cmp	r5, r3
 800564c:	bf08      	it	eq
 800564e:	68f5      	ldreq	r5, [r6, #12]
 8005650:	e7da      	b.n	8005608 <_vfiprintf_r+0x20>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	0598      	lsls	r0, r3, #22
 8005656:	d4ed      	bmi.n	8005634 <_vfiprintf_r+0x4c>
 8005658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800565a:	f7ff fb39 	bl	8004cd0 <__retarget_lock_release_recursive>
 800565e:	e7e9      	b.n	8005634 <_vfiprintf_r+0x4c>
 8005660:	2300      	movs	r3, #0
 8005662:	9309      	str	r3, [sp, #36]	; 0x24
 8005664:	2320      	movs	r3, #32
 8005666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800566a:	2330      	movs	r3, #48	; 0x30
 800566c:	f04f 0901 	mov.w	r9, #1
 8005670:	f8cd 800c 	str.w	r8, [sp, #12]
 8005674:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005834 <_vfiprintf_r+0x24c>
 8005678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567c:	4623      	mov	r3, r4
 800567e:	469a      	mov	sl, r3
 8005680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005684:	b10a      	cbz	r2, 800568a <_vfiprintf_r+0xa2>
 8005686:	2a25      	cmp	r2, #37	; 0x25
 8005688:	d1f9      	bne.n	800567e <_vfiprintf_r+0x96>
 800568a:	ebba 0b04 	subs.w	fp, sl, r4
 800568e:	d00b      	beq.n	80056a8 <_vfiprintf_r+0xc0>
 8005690:	465b      	mov	r3, fp
 8005692:	4622      	mov	r2, r4
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f7ff ff93 	bl	80055c2 <__sfputs_r>
 800569c:	3001      	adds	r0, #1
 800569e:	f000 80aa 	beq.w	80057f6 <_vfiprintf_r+0x20e>
 80056a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a4:	445a      	add	r2, fp
 80056a6:	9209      	str	r2, [sp, #36]	; 0x24
 80056a8:	f89a 3000 	ldrb.w	r3, [sl]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80a2 	beq.w	80057f6 <_vfiprintf_r+0x20e>
 80056b2:	2300      	movs	r3, #0
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056bc:	f10a 0a01 	add.w	sl, sl, #1
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ca:	4654      	mov	r4, sl
 80056cc:	2205      	movs	r2, #5
 80056ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d2:	4858      	ldr	r0, [pc, #352]	; (8005834 <_vfiprintf_r+0x24c>)
 80056d4:	f000 fa82 	bl	8005bdc <memchr>
 80056d8:	9a04      	ldr	r2, [sp, #16]
 80056da:	b9d8      	cbnz	r0, 8005714 <_vfiprintf_r+0x12c>
 80056dc:	06d1      	lsls	r1, r2, #27
 80056de:	bf44      	itt	mi
 80056e0:	2320      	movmi	r3, #32
 80056e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e6:	0713      	lsls	r3, r2, #28
 80056e8:	bf44      	itt	mi
 80056ea:	232b      	movmi	r3, #43	; 0x2b
 80056ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f0:	f89a 3000 	ldrb.w	r3, [sl]
 80056f4:	2b2a      	cmp	r3, #42	; 0x2a
 80056f6:	d015      	beq.n	8005724 <_vfiprintf_r+0x13c>
 80056f8:	4654      	mov	r4, sl
 80056fa:	2000      	movs	r0, #0
 80056fc:	f04f 0c0a 	mov.w	ip, #10
 8005700:	9a07      	ldr	r2, [sp, #28]
 8005702:	4621      	mov	r1, r4
 8005704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005708:	3b30      	subs	r3, #48	; 0x30
 800570a:	2b09      	cmp	r3, #9
 800570c:	d94e      	bls.n	80057ac <_vfiprintf_r+0x1c4>
 800570e:	b1b0      	cbz	r0, 800573e <_vfiprintf_r+0x156>
 8005710:	9207      	str	r2, [sp, #28]
 8005712:	e014      	b.n	800573e <_vfiprintf_r+0x156>
 8005714:	eba0 0308 	sub.w	r3, r0, r8
 8005718:	fa09 f303 	lsl.w	r3, r9, r3
 800571c:	4313      	orrs	r3, r2
 800571e:	46a2      	mov	sl, r4
 8005720:	9304      	str	r3, [sp, #16]
 8005722:	e7d2      	b.n	80056ca <_vfiprintf_r+0xe2>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	1d19      	adds	r1, r3, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	9103      	str	r1, [sp, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	bfbb      	ittet	lt
 8005730:	425b      	neglt	r3, r3
 8005732:	f042 0202 	orrlt.w	r2, r2, #2
 8005736:	9307      	strge	r3, [sp, #28]
 8005738:	9307      	strlt	r3, [sp, #28]
 800573a:	bfb8      	it	lt
 800573c:	9204      	strlt	r2, [sp, #16]
 800573e:	7823      	ldrb	r3, [r4, #0]
 8005740:	2b2e      	cmp	r3, #46	; 0x2e
 8005742:	d10c      	bne.n	800575e <_vfiprintf_r+0x176>
 8005744:	7863      	ldrb	r3, [r4, #1]
 8005746:	2b2a      	cmp	r3, #42	; 0x2a
 8005748:	d135      	bne.n	80057b6 <_vfiprintf_r+0x1ce>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3402      	adds	r4, #2
 800574e:	1d1a      	adds	r2, r3, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	9203      	str	r2, [sp, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfb8      	it	lt
 8005758:	f04f 33ff 	movlt.w	r3, #4294967295
 800575c:	9305      	str	r3, [sp, #20]
 800575e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005838 <_vfiprintf_r+0x250>
 8005762:	2203      	movs	r2, #3
 8005764:	4650      	mov	r0, sl
 8005766:	7821      	ldrb	r1, [r4, #0]
 8005768:	f000 fa38 	bl	8005bdc <memchr>
 800576c:	b140      	cbz	r0, 8005780 <_vfiprintf_r+0x198>
 800576e:	2340      	movs	r3, #64	; 0x40
 8005770:	eba0 000a 	sub.w	r0, r0, sl
 8005774:	fa03 f000 	lsl.w	r0, r3, r0
 8005778:	9b04      	ldr	r3, [sp, #16]
 800577a:	3401      	adds	r4, #1
 800577c:	4303      	orrs	r3, r0
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005784:	2206      	movs	r2, #6
 8005786:	482d      	ldr	r0, [pc, #180]	; (800583c <_vfiprintf_r+0x254>)
 8005788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800578c:	f000 fa26 	bl	8005bdc <memchr>
 8005790:	2800      	cmp	r0, #0
 8005792:	d03f      	beq.n	8005814 <_vfiprintf_r+0x22c>
 8005794:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <_vfiprintf_r+0x258>)
 8005796:	bb1b      	cbnz	r3, 80057e0 <_vfiprintf_r+0x1f8>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	3307      	adds	r3, #7
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	3308      	adds	r3, #8
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a6:	443b      	add	r3, r7
 80057a8:	9309      	str	r3, [sp, #36]	; 0x24
 80057aa:	e767      	b.n	800567c <_vfiprintf_r+0x94>
 80057ac:	460c      	mov	r4, r1
 80057ae:	2001      	movs	r0, #1
 80057b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b4:	e7a5      	b.n	8005702 <_vfiprintf_r+0x11a>
 80057b6:	2300      	movs	r3, #0
 80057b8:	f04f 0c0a 	mov.w	ip, #10
 80057bc:	4619      	mov	r1, r3
 80057be:	3401      	adds	r4, #1
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	4620      	mov	r0, r4
 80057c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c8:	3a30      	subs	r2, #48	; 0x30
 80057ca:	2a09      	cmp	r2, #9
 80057cc:	d903      	bls.n	80057d6 <_vfiprintf_r+0x1ee>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0c5      	beq.n	800575e <_vfiprintf_r+0x176>
 80057d2:	9105      	str	r1, [sp, #20]
 80057d4:	e7c3      	b.n	800575e <_vfiprintf_r+0x176>
 80057d6:	4604      	mov	r4, r0
 80057d8:	2301      	movs	r3, #1
 80057da:	fb0c 2101 	mla	r1, ip, r1, r2
 80057de:	e7f0      	b.n	80057c2 <_vfiprintf_r+0x1da>
 80057e0:	ab03      	add	r3, sp, #12
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	462a      	mov	r2, r5
 80057e6:	4630      	mov	r0, r6
 80057e8:	4b16      	ldr	r3, [pc, #88]	; (8005844 <_vfiprintf_r+0x25c>)
 80057ea:	a904      	add	r1, sp, #16
 80057ec:	f3af 8000 	nop.w
 80057f0:	4607      	mov	r7, r0
 80057f2:	1c78      	adds	r0, r7, #1
 80057f4:	d1d6      	bne.n	80057a4 <_vfiprintf_r+0x1bc>
 80057f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057f8:	07d9      	lsls	r1, r3, #31
 80057fa:	d405      	bmi.n	8005808 <_vfiprintf_r+0x220>
 80057fc:	89ab      	ldrh	r3, [r5, #12]
 80057fe:	059a      	lsls	r2, r3, #22
 8005800:	d402      	bmi.n	8005808 <_vfiprintf_r+0x220>
 8005802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005804:	f7ff fa64 	bl	8004cd0 <__retarget_lock_release_recursive>
 8005808:	89ab      	ldrh	r3, [r5, #12]
 800580a:	065b      	lsls	r3, r3, #25
 800580c:	f53f af12 	bmi.w	8005634 <_vfiprintf_r+0x4c>
 8005810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005812:	e711      	b.n	8005638 <_vfiprintf_r+0x50>
 8005814:	ab03      	add	r3, sp, #12
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	462a      	mov	r2, r5
 800581a:	4630      	mov	r0, r6
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <_vfiprintf_r+0x25c>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	f000 f882 	bl	8005928 <_printf_i>
 8005824:	e7e4      	b.n	80057f0 <_vfiprintf_r+0x208>
 8005826:	bf00      	nop
 8005828:	08005d14 	.word	0x08005d14
 800582c:	08005d34 	.word	0x08005d34
 8005830:	08005cf4 	.word	0x08005cf4
 8005834:	08005d58 	.word	0x08005d58
 8005838:	08005d5e 	.word	0x08005d5e
 800583c:	08005d62 	.word	0x08005d62
 8005840:	00000000 	.word	0x00000000
 8005844:	080055c3 	.word	0x080055c3

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4699      	mov	r9, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	4607      	mov	r7, r0
 8005856:	4293      	cmp	r3, r2
 8005858:	bfb8      	it	lt
 800585a:	4613      	movlt	r3, r2
 800585c:	6033      	str	r3, [r6, #0]
 800585e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005862:	460c      	mov	r4, r1
 8005864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc28      	bgt.n	80058e2 <_printf_common+0x9a>
 8005890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005894:	1e13      	subs	r3, r2, #0
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42d      	bmi.n	80058fc <_printf_common+0xb4>
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a8:	47c0      	blx	r8
 80058aa:	3001      	adds	r0, #1
 80058ac:	d020      	beq.n	80058f0 <_printf_common+0xa8>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	68e5      	ldr	r5, [r4, #12]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf18      	it	ne
 80058ba:	2500      	movne	r5, #0
 80058bc:	6832      	ldr	r2, [r6, #0]
 80058be:	f04f 0600 	mov.w	r6, #0
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	bf08      	it	eq
 80058c6:	1aad      	subeq	r5, r5, r2
 80058c8:	6922      	ldr	r2, [r4, #16]
 80058ca:	bf08      	it	eq
 80058cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfc4      	itt	gt
 80058d4:	1a9b      	subgt	r3, r3, r2
 80058d6:	18ed      	addgt	r5, r5, r3
 80058d8:	341a      	adds	r4, #26
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d11a      	bne.n	8005914 <_printf_common+0xcc>
 80058de:	2000      	movs	r0, #0
 80058e0:	e008      	b.n	80058f4 <_printf_common+0xac>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4649      	mov	r1, r9
 80058e8:	4638      	mov	r0, r7
 80058ea:	47c0      	blx	r8
 80058ec:	3001      	adds	r0, #1
 80058ee:	d103      	bne.n	80058f8 <_printf_common+0xb0>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7c4      	b.n	8005886 <_printf_common+0x3e>
 80058fc:	2030      	movs	r0, #48	; 0x30
 80058fe:	18e1      	adds	r1, r4, r3
 8005900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800590a:	4422      	add	r2, r4
 800590c:	3302      	adds	r3, #2
 800590e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005912:	e7c5      	b.n	80058a0 <_printf_common+0x58>
 8005914:	2301      	movs	r3, #1
 8005916:	4622      	mov	r2, r4
 8005918:	4649      	mov	r1, r9
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d0e6      	beq.n	80058f0 <_printf_common+0xa8>
 8005922:	3601      	adds	r6, #1
 8005924:	e7d9      	b.n	80058da <_printf_common+0x92>
	...

08005928 <_printf_i>:
 8005928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	7e0f      	ldrb	r7, [r1, #24]
 800592e:	4691      	mov	r9, r2
 8005930:	2f78      	cmp	r7, #120	; 0x78
 8005932:	4680      	mov	r8, r0
 8005934:	460c      	mov	r4, r1
 8005936:	469a      	mov	sl, r3
 8005938:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800593a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800593e:	d807      	bhi.n	8005950 <_printf_i+0x28>
 8005940:	2f62      	cmp	r7, #98	; 0x62
 8005942:	d80a      	bhi.n	800595a <_printf_i+0x32>
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80d9 	beq.w	8005afc <_printf_i+0x1d4>
 800594a:	2f58      	cmp	r7, #88	; 0x58
 800594c:	f000 80a4 	beq.w	8005a98 <_printf_i+0x170>
 8005950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005958:	e03a      	b.n	80059d0 <_printf_i+0xa8>
 800595a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800595e:	2b15      	cmp	r3, #21
 8005960:	d8f6      	bhi.n	8005950 <_printf_i+0x28>
 8005962:	a101      	add	r1, pc, #4	; (adr r1, 8005968 <_printf_i+0x40>)
 8005964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005951 	.word	0x08005951
 8005974:	08005951 	.word	0x08005951
 8005978:	08005951 	.word	0x08005951
 800597c:	08005951 	.word	0x08005951
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005951 	.word	0x08005951
 8005988:	08005951 	.word	0x08005951
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005ae3 	.word	0x08005ae3
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005ac5 	.word	0x08005ac5
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005b05 	.word	0x08005b05
 80059ac:	08005951 	.word	0x08005951
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005acd 	.word	0x08005acd
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0a4      	b.n	8005b1e <_printf_i+0x1f6>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	6829      	ldr	r1, [r5, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	f101 0304 	add.w	r3, r1, #4
 80059de:	d50a      	bpl.n	80059f6 <_printf_i+0xce>
 80059e0:	680e      	ldr	r6, [r1, #0]
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xc8>
 80059e8:	232d      	movs	r3, #45	; 0x2d
 80059ea:	4276      	negs	r6, r6
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	230a      	movs	r3, #10
 80059f2:	485e      	ldr	r0, [pc, #376]	; (8005b6c <_printf_i+0x244>)
 80059f4:	e019      	b.n	8005a2a <_printf_i+0x102>
 80059f6:	680e      	ldr	r6, [r1, #0]
 80059f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	bf18      	it	ne
 8005a00:	b236      	sxthne	r6, r6
 8005a02:	e7ef      	b.n	80059e4 <_printf_i+0xbc>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	1d19      	adds	r1, r3, #4
 8005a0a:	6029      	str	r1, [r5, #0]
 8005a0c:	0601      	lsls	r1, r0, #24
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0xec>
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0xf2>
 8005a14:	0646      	lsls	r6, r0, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0xe8>
 8005a18:	881e      	ldrh	r6, [r3, #0]
 8005a1a:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2308      	moveq	r3, #8
 8005a20:	230a      	movne	r3, #10
 8005a22:	4852      	ldr	r0, [pc, #328]	; (8005b6c <_printf_i+0x244>)
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2a:	6865      	ldr	r5, [r4, #4]
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	bfa8      	it	ge
 8005a30:	6821      	ldrge	r1, [r4, #0]
 8005a32:	60a5      	str	r5, [r4, #8]
 8005a34:	bfa4      	itt	ge
 8005a36:	f021 0104 	bicge.w	r1, r1, #4
 8005a3a:	6021      	strge	r1, [r4, #0]
 8005a3c:	b90e      	cbnz	r6, 8005a42 <_printf_i+0x11a>
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	d04d      	beq.n	8005ade <_printf_i+0x1b6>
 8005a42:	4615      	mov	r5, r2
 8005a44:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a48:	fb03 6711 	mls	r7, r3, r1, r6
 8005a4c:	5dc7      	ldrb	r7, [r0, r7]
 8005a4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a52:	4637      	mov	r7, r6
 8005a54:	42bb      	cmp	r3, r7
 8005a56:	460e      	mov	r6, r1
 8005a58:	d9f4      	bls.n	8005a44 <_printf_i+0x11c>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d10b      	bne.n	8005a76 <_printf_i+0x14e>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07de      	lsls	r6, r3, #31
 8005a62:	d508      	bpl.n	8005a76 <_printf_i+0x14e>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	6861      	ldr	r1, [r4, #4]
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	bfde      	ittt	le
 8005a6c:	2330      	movle	r3, #48	; 0x30
 8005a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a76:	1b52      	subs	r2, r2, r5
 8005a78:	6122      	str	r2, [r4, #16]
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f8cd a000 	str.w	sl, [sp]
 8005a84:	aa03      	add	r2, sp, #12
 8005a86:	f7ff fedf 	bl	8005848 <_printf_common>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d14c      	bne.n	8005b28 <_printf_i+0x200>
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	b004      	add	sp, #16
 8005a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a98:	4834      	ldr	r0, [pc, #208]	; (8005b6c <_printf_i+0x244>)
 8005a9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aa6:	6029      	str	r1, [r5, #0]
 8005aa8:	061d      	lsls	r5, r3, #24
 8005aaa:	d514      	bpl.n	8005ad6 <_printf_i+0x1ae>
 8005aac:	07df      	lsls	r7, r3, #31
 8005aae:	bf44      	itt	mi
 8005ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab4:	6023      	strmi	r3, [r4, #0]
 8005ab6:	b91e      	cbnz	r6, 8005ac0 <_printf_i+0x198>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f023 0320 	bic.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	e7af      	b.n	8005a24 <_printf_i+0xfc>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f043 0320 	orr.w	r3, r3, #32
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	2378      	movs	r3, #120	; 0x78
 8005ace:	4828      	ldr	r0, [pc, #160]	; (8005b70 <_printf_i+0x248>)
 8005ad0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ad4:	e7e3      	b.n	8005a9e <_printf_i+0x176>
 8005ad6:	0659      	lsls	r1, r3, #25
 8005ad8:	bf48      	it	mi
 8005ada:	b2b6      	uxthmi	r6, r6
 8005adc:	e7e6      	b.n	8005aac <_printf_i+0x184>
 8005ade:	4615      	mov	r5, r2
 8005ae0:	e7bb      	b.n	8005a5a <_printf_i+0x132>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	6826      	ldr	r6, [r4, #0]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6961      	ldr	r1, [r4, #20]
 8005aea:	6028      	str	r0, [r5, #0]
 8005aec:	0635      	lsls	r5, r6, #24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	d501      	bpl.n	8005af6 <_printf_i+0x1ce>
 8005af2:	6019      	str	r1, [r3, #0]
 8005af4:	e002      	b.n	8005afc <_printf_i+0x1d4>
 8005af6:	0670      	lsls	r0, r6, #25
 8005af8:	d5fb      	bpl.n	8005af2 <_printf_i+0x1ca>
 8005afa:	8019      	strh	r1, [r3, #0]
 8005afc:	2300      	movs	r3, #0
 8005afe:	4615      	mov	r5, r2
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	e7ba      	b.n	8005a7a <_printf_i+0x152>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	2100      	movs	r1, #0
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f863 	bl	8005bdc <memchr>
 8005b16:	b108      	cbz	r0, 8005b1c <_printf_i+0x1f4>
 8005b18:	1b40      	subs	r0, r0, r5
 8005b1a:	6060      	str	r0, [r4, #4]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	2300      	movs	r3, #0
 8005b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b26:	e7a8      	b.n	8005a7a <_printf_i+0x152>
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	47d0      	blx	sl
 8005b32:	3001      	adds	r0, #1
 8005b34:	d0ab      	beq.n	8005a8e <_printf_i+0x166>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	079b      	lsls	r3, r3, #30
 8005b3a:	d413      	bmi.n	8005b64 <_printf_i+0x23c>
 8005b3c:	68e0      	ldr	r0, [r4, #12]
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	4298      	cmp	r0, r3
 8005b42:	bfb8      	it	lt
 8005b44:	4618      	movlt	r0, r3
 8005b46:	e7a4      	b.n	8005a92 <_printf_i+0x16a>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	47d0      	blx	sl
 8005b52:	3001      	adds	r0, #1
 8005b54:	d09b      	beq.n	8005a8e <_printf_i+0x166>
 8005b56:	3501      	adds	r5, #1
 8005b58:	68e3      	ldr	r3, [r4, #12]
 8005b5a:	9903      	ldr	r1, [sp, #12]
 8005b5c:	1a5b      	subs	r3, r3, r1
 8005b5e:	42ab      	cmp	r3, r5
 8005b60:	dcf2      	bgt.n	8005b48 <_printf_i+0x220>
 8005b62:	e7eb      	b.n	8005b3c <_printf_i+0x214>
 8005b64:	2500      	movs	r5, #0
 8005b66:	f104 0619 	add.w	r6, r4, #25
 8005b6a:	e7f5      	b.n	8005b58 <_printf_i+0x230>
 8005b6c:	08005d69 	.word	0x08005d69
 8005b70:	08005d7a 	.word	0x08005d7a

08005b74 <_read_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4d05      	ldr	r5, [pc, #20]	; (8005b94 <_read_r+0x20>)
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fa fdc2 	bl	800070c <_read>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_read_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_read_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20001148 	.word	0x20001148

08005b98 <_fstat_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d06      	ldr	r5, [pc, #24]	; (8005bb8 <_fstat_r+0x20>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fa fdd9 	bl	800075c <_fstat>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_fstat_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_fstat_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20001148 	.word	0x20001148

08005bbc <_isatty_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4d05      	ldr	r5, [pc, #20]	; (8005bd8 <_isatty_r+0x1c>)
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fa fdd7 	bl	800077a <_isatty>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_isatty_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_isatty_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20001148 	.word	0x20001148

08005bdc <memchr>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	b510      	push	{r4, lr}
 8005be0:	b2c9      	uxtb	r1, r1
 8005be2:	4402      	add	r2, r0
 8005be4:	4293      	cmp	r3, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	d101      	bne.n	8005bee <memchr+0x12>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e003      	b.n	8005bf6 <memchr+0x1a>
 8005bee:	7804      	ldrb	r4, [r0, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	428c      	cmp	r4, r1
 8005bf4:	d1f6      	bne.n	8005be4 <memchr+0x8>
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
