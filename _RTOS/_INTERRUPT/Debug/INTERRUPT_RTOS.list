
INTERRUPT_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  20000078  08004350  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  08004350  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133e2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b37  00000000  00000000  00033483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00035fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019548  00000000  00000000  00038008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120b4  00000000  00000000  00051550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092de0  00000000  00000000  00063604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f63e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000f6434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080041c4 	.word	0x080041c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080041c4 	.word	0x080041c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000094 	.word	0x20000094
 800018c:	20000148 	.word	0x20000148

08000190 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char *p = "xin chao\n";
uint8_t DataRx;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BT1_Pin) {
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001a0:	d114      	bne.n	80001cc <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001a2:	2140      	movs	r1, #64	; 0x40
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80001a6:	f000 fe7d 	bl	8000ea4 <HAL_GPIO_TogglePin>
		BaseType_t xHigherDefaulTask;
		xHigherDefaulTask = xTaskResumeFromISR(defaultTaskHandle);
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <HAL_GPIO_EXTI_Callback+0x48>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 ff66 	bl	8003080 <xTaskResumeFromISR>
 80001b4:	60f8      	str	r0, [r7, #12]
		portEND_SWITCHING_ISR(xHigherDefaulTask);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d007      	beq.n	80001cc <HAL_GPIO_EXTI_Callback+0x3c>
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80001be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001c2:	601a      	str	r2, [r3, #0]
 80001c4:	f3bf 8f4f 	dsb	sy
 80001c8:	f3bf 8f6f 	isb	sy
	}
}
 80001cc:	bf00      	nop
 80001ce:	3710      	adds	r7, #16
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40010800 	.word	0x40010800
 80001d8:	20000390 	.word	0x20000390
 80001dc:	e000ed04 	.word	0xe000ed04

080001e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	490e      	ldr	r1, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x44>)
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <HAL_UART_RxCpltCallback+0x48>)
 80001ee:	f001 fde8 	bl	8001dc2 <HAL_UART_Receive_IT>
	BaseType_t xHigher;
	if (DataRx == 'c') {
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <HAL_UART_RxCpltCallback+0x44>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b63      	cmp	r3, #99	; 0x63
 80001f8:	d110      	bne.n	800021c <HAL_UART_RxCpltCallback+0x3c>
		xHigher = xTaskResumeFromISR(Task2Handle);		// switch true / false
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <HAL_UART_RxCpltCallback+0x4c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 ff3e 	bl	8003080 <xTaskResumeFromISR>
 8000204:	60f8      	str	r0, [r7, #12]
		portEND_SWITCHING_ISR(xHigher);		// start switch task
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d007      	beq.n	800021c <HAL_UART_RxCpltCallback+0x3c>
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <HAL_UART_RxCpltCallback+0x50>)
 800020e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	f3bf 8f4f 	dsb	sy
 8000218:	f3bf 8f6f 	isb	sy
	}
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000398 	.word	0x20000398
 8000228:	20000348 	.word	0x20000348
 800022c:	20000394 	.word	0x20000394
 8000230:	e000ed04 	.word	0xe000ed04

08000234 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08a      	sub	sp, #40	; 0x28
 8000238:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800023a:	f000 fad3 	bl	80007e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800023e:	f000 f847 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000242:	f000 f8b5 	bl	80003b0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000246:	f000 f889 	bl	800035c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &DataRx, 1);
 800024a:	2201      	movs	r2, #1
 800024c:	4918      	ldr	r1, [pc, #96]	; (80002b0 <main+0x7c>)
 800024e:	4819      	ldr	r0, [pc, #100]	; (80002b4 <main+0x80>)
 8000250:	f001 fdb7 	bl	8001dc2 <HAL_UART_Receive_IT>
	//printf("xin chao !");
	HAL_UART_Transmit(&huart1, (uint8_t*) p, strlen(p), 1000);
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <main+0x84>)
 8000256:	681c      	ldr	r4, [r3, #0]
 8000258:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <main+0x84>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff77 	bl	8000150 <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026a:	4621      	mov	r1, r4
 800026c:	4811      	ldr	r0, [pc, #68]	; (80002b4 <main+0x80>)
 800026e:	f001 fd25 	bl	8001cbc <HAL_UART_Transmit>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <main+0x88>)
 8000274:	1d3c      	adds	r4, r7, #4
 8000276:	461d      	mov	r5, r3
 8000278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fb5d 	bl	8002948 <osThreadCreate>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <main+0x8c>)
 8000292:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(Task2, "Task02", 128, NULL, osPriorityAboveNormal + 3,
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <main+0x90>)
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	2304      	movs	r3, #4
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	4909      	ldr	r1, [pc, #36]	; (80002c8 <main+0x94>)
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <main+0x98>)
 80002a4:	f002 fca7 	bl	8002bf6 <xTaskCreate>
			&Task2Handle);
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002a8:	f002 fb47 	bl	800293a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002ac:	e7fe      	b.n	80002ac <main+0x78>
 80002ae:	bf00      	nop
 80002b0:	20000398 	.word	0x20000398
 80002b4:	20000348 	.word	0x20000348
 80002b8:	20000000 	.word	0x20000000
 80002bc:	080041fc 	.word	0x080041fc
 80002c0:	20000390 	.word	0x20000390
 80002c4:	20000394 	.word	0x20000394
 80002c8:	080041f4 	.word	0x080041f4
 80002cc:	08000475 	.word	0x08000475

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	; 0x40
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 feaa 	bl	8004038 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fdf5 	bl	8000f08 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
		Error_Handler();
 8000324:	f000 f8f0 	bl	8000508 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000338:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f862 	bl	800140c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
		Error_Handler();
 800034e:	f000 f8db 	bl	8000508 <Error_Handler>
	}
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	; 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART1_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800036c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000394:	f001 fc42 	bl	8001c1c <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800039e:	f000 f8b3 	bl	8000508 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000348 	.word	0x20000348
 80003ac:	40013800 	.word	0x40013800

080003b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a26      	ldr	r2, [pc, #152]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a20      	ldr	r2, [pc, #128]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <MX_GPIO_Init+0xb4>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0xb4>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	4815      	ldr	r0, [pc, #84]	; (8000468 <MX_GPIO_Init+0xb8>)
 8000412:	f000 fd2f 	bl	8000e74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000416:	2340      	movs	r3, #64	; 0x40
 8000418:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <MX_GPIO_Init+0xb8>)
 800042e:	f000 fb9d 	bl	8000b6c <HAL_GPIO_Init>

	/*Configure GPIO pin : BT1_Pin */
	GPIO_InitStruct.Pin = BT1_Pin;
 8000432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000436:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_GPIO_Init+0xbc>)
 800043a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480a      	ldr	r0, [pc, #40]	; (8000470 <MX_GPIO_Init+0xc0>)
 8000448:	f000 fb90 	bl	8000b6c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2105      	movs	r1, #5
 8000450:	2028      	movs	r0, #40	; 0x28
 8000452:	f000 faae 	bl	80009b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000456:	2028      	movs	r0, #40	; 0x28
 8000458:	f000 fac7 	bl	80009ea <HAL_NVIC_EnableIRQ>

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800
 800046c:	10210000 	.word	0x10210000
 8000470:	40010c00 	.word	0x40010c00

08000474 <Task2>:

/* USER CODE BEGIN 4 */

void Task2(void *parameter) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	char *t2 = "Run Task 2 !!\n";
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <Task2+0x30>)
 800047e:	60fb      	str	r3, [r7, #12]
	while (1) {
		vTaskSuspend(NULL);
 8000480:	2000      	movs	r0, #0
 8000482:	f002 fd31 	bl	8002ee8 <vTaskSuspend>
		HAL_UART_Transmit(&huart1, (uint8_t*) t2, strlen((char*) t2), 1000);
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f7ff fe62 	bl	8000150 <strlen>
 800048c:	4603      	mov	r3, r0
 800048e:	b29a      	uxth	r2, r3
 8000490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000494:	68f9      	ldr	r1, [r7, #12]
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <Task2+0x34>)
 8000498:	f001 fc10 	bl	8001cbc <HAL_UART_Transmit>
		vTaskDelay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f002 fcef 	bl	8002e80 <vTaskDelay>
		vTaskSuspend(NULL);
 80004a2:	e7ed      	b.n	8000480 <Task2+0xc>
 80004a4:	08004218 	.word	0x08004218
 80004a8:	20000348 	.word	0x20000348

080004ac <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	char *t1 = "Run Task Defaul !!\n";
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <StartDefaultTask+0x30>)
 80004b6:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart1, (uint8_t*) t1, strlen((char*) t1), 1000);
 80004b8:	68f8      	ldr	r0, [r7, #12]
 80004ba:	f7ff fe49 	bl	8000150 <strlen>
 80004be:	4603      	mov	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c6:	68f9      	ldr	r1, [r7, #12]
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <StartDefaultTask+0x34>)
 80004ca:	f001 fbf7 	bl	8001cbc <HAL_UART_Transmit>
		vTaskSuspend(NULL);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f002 fd0a 	bl	8002ee8 <vTaskSuspend>
		vTaskDelay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f002 fcd3 	bl	8002e80 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*) t1, strlen((char*) t1), 1000);
 80004da:	e7ed      	b.n	80004b8 <StartDefaultTask+0xc>
 80004dc:	08004228 	.word	0x08004228
 80004e0:	20000348 	.word	0x20000348

080004e4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004f6:	f000 f98b 	bl	8000810 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40000800 	.word	0x40000800

08000508 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_MspInit+0x68>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_MspInit+0x68>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_MspInit+0x68>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_MspInit+0x68>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	210f      	movs	r1, #15
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fa2e 	bl	80009b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x6c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_MspInit+0x6c>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <HAL_UART_MspInit+0x9c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d139      	bne.n	8000618 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <HAL_UART_MspInit+0xa0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <HAL_UART_MspInit+0xa4>)
 80005ea:	f000 fabf 	bl	8000b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <HAL_UART_MspInit+0xa4>)
 8000604:	f000 fab2 	bl	8000b6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2105      	movs	r1, #5
 800060c:	2025      	movs	r0, #37	; 0x25
 800060e:	f000 f9d0 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000612:	2025      	movs	r0, #37	; 0x25
 8000614:	f000 f9e9 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40013800 	.word	0x40013800
 8000624:	40021000 	.word	0x40021000
 8000628:	40010800 	.word	0x40010800

0800062c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <HAL_InitTick+0xe8>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a33      	ldr	r2, [pc, #204]	; (8000714 <HAL_InitTick+0xe8>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <HAL_InitTick+0xe8>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065a:	f107 0210 	add.w	r2, r7, #16
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f841 	bl	80016ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000670:	2b00      	cmp	r3, #0
 8000672:	d103      	bne.n	800067c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000674:	f001 f812 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8000678:	6378      	str	r0, [r7, #52]	; 0x34
 800067a:	e004      	b.n	8000686 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800067c:	f001 f80e 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8000680:	4603      	mov	r3, r0
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <HAL_InitTick+0xec>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0c9b      	lsrs	r3, r3, #18
 8000690:	3b01      	subs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <HAL_InitTick+0xf0>)
 8000696:	4a22      	ldr	r2, [pc, #136]	; (8000720 <HAL_InitTick+0xf4>)
 8000698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <HAL_InitTick+0xf0>)
 800069c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006a2:	4a1e      	ldr	r2, [pc, #120]	; (800071c <HAL_InitTick+0xf0>)
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_InitTick+0xf0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_InitTick+0xf0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_InitTick+0xf0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006ba:	4818      	ldr	r0, [pc, #96]	; (800071c <HAL_InitTick+0xf0>)
 80006bc:	f001 f864 	bl	8001788 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d11b      	bne.n	8000706 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <HAL_InitTick+0xf0>)
 80006d0:	f001 f8b2 	bl	8001838 <HAL_TIM_Base_Start_IT>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d111      	bne.n	8000706 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006e2:	201e      	movs	r0, #30
 80006e4:	f000 f981 	bl	80009ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d808      	bhi.n	8000700 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006ee:	2200      	movs	r2, #0
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	201e      	movs	r0, #30
 80006f4:	f000 f95d 	bl	80009b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <HAL_InitTick+0xf8>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	e002      	b.n	8000706 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800070a:	4618      	mov	r0, r3
 800070c:	3738      	adds	r7, #56	; 0x38
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	431bde83 	.word	0x431bde83
 800071c:	2000039c 	.word	0x2000039c
 8000720:	40000800 	.word	0x40000800
 8000724:	20000008 	.word	0x20000008

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <TIM4_IRQHandler+0x10>)
 800075a:	f001 f8bf 	bl	80018dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000039c 	.word	0x2000039c

08000768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <USART1_IRQHandler+0x10>)
 800076e:	f001 fb4d 	bl	8001e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000348 	.word	0x20000348

0800077c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 8000780:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000784:	f000 fba8 	bl	8000ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000798:	f7ff fff8 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800079e:	490c      	ldr	r1, [pc, #48]	; (80007d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a0:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b4:	4c09      	ldr	r4, [pc, #36]	; (80007dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c2:	f003 fc13 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fd35 	bl	8000234 <main>
  bx lr
 80007ca:	4770      	bx	lr
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007d4:	080042d8 	.word	0x080042d8
  ldr r2, =_sbss
 80007d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007dc:	2000113c 	.word	0x2000113c

080007e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_2_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x28>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f8d1 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f7ff ff16 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff fe88 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	2000000c 	.word	0x2000000c
 8000830:	200003e4 	.word	0x200003e4

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	200003e4 	.word	0x200003e4

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <__NVIC_EnableIRQ+0x34>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff4f 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff64 	bl	8000890 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ffb2 	bl	8000938 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff81 	bl	80008e4 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff57 	bl	80008ac <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d008      	beq.n	8000a30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2204      	movs	r2, #4
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e020      	b.n	8000a72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 020e 	bic.w	r2, r2, #14
 8000a3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 0201 	bic.w	r2, r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	2101      	movs	r1, #1
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d005      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2204      	movs	r2, #4
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e051      	b.n	8000b44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 020e 	bic.w	r2, r2, #14
 8000aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0201 	bic.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <HAL_DMA_Abort_IT+0xd4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d029      	beq.n	8000b1e <HAL_DMA_Abort_IT+0xa2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_DMA_Abort_IT+0xd8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d022      	beq.n	8000b1a <HAL_DMA_Abort_IT+0x9e>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <HAL_DMA_Abort_IT+0xdc>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d01a      	beq.n	8000b14 <HAL_DMA_Abort_IT+0x98>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_DMA_Abort_IT+0xe0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d012      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x92>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_DMA_Abort_IT+0xe4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d00a      	beq.n	8000b08 <HAL_DMA_Abort_IT+0x8c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_DMA_Abort_IT+0xe8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d102      	bne.n	8000b02 <HAL_DMA_Abort_IT+0x86>
 8000afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b00:	e00e      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b06:	e00b      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	e008      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	e005      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	e002      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	e000      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_DMA_Abort_IT+0xec>)
 8000b22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	4798      	blx	r3
    } 
  }
  return status;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40020008 	.word	0x40020008
 8000b54:	4002001c 	.word	0x4002001c
 8000b58:	40020030 	.word	0x40020030
 8000b5c:	40020044 	.word	0x40020044
 8000b60:	40020058 	.word	0x40020058
 8000b64:	4002006c 	.word	0x4002006c
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e169      	b.n	8000e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b80:	2201      	movs	r2, #1
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8158 	bne.w	8000e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a9a      	ldr	r2, [pc, #616]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d05e      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d875      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bae:	4a98      	ldr	r2, [pc, #608]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d058      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d86f      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bba:	4a96      	ldr	r2, [pc, #600]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d052      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bc0:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d869      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bc6:	4a94      	ldr	r2, [pc, #592]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d04c      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bcc:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d863      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bd2:	4a92      	ldr	r2, [pc, #584]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d046      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a90      	ldr	r2, [pc, #576]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d85d      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d82a      	bhi.n	8000c38 <HAL_GPIO_Init+0xcc>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d859      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <HAL_GPIO_Init+0x80>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000c53 	.word	0x08000c53
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000c9b 	.word	0x08000c9b
 8000c04:	08000c9b 	.word	0x08000c9b
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000c9b 	.word	0x08000c9b
 8000c10:	08000c9b 	.word	0x08000c9b
 8000c14:	08000c9b 	.word	0x08000c9b
 8000c18:	08000c9b 	.word	0x08000c9b
 8000c1c:	08000c9b 	.word	0x08000c9b
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c9b 	.word	0x08000c9b
 8000c28:	08000c9b 	.word	0x08000c9b
 8000c2c:	08000c9b 	.word	0x08000c9b
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <HAL_GPIO_Init+0x2b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e029      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e024      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01f      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e01a      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e013      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e009      	b.n	8000c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e003      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          break;
 8000c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2bff      	cmp	r3, #255	; 0xff
 8000ca0:	d801      	bhi.n	8000ca6 <HAL_GPIO_Init+0x13a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_Init+0x13e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d802      	bhi.n	8000cb8 <HAL_GPIO_Init+0x14c>
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x152>
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3b08      	subs	r3, #8
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	401a      	ands	r2, r3
 8000cd0:	6a39      	ldr	r1, [r7, #32]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cec:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <HAL_GPIO_Init+0x2c0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1e8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1e0>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6a:	492f      	ldr	r1, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	492c      	ldr	r1, [pc, #176]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4928      	ldr	r1, [pc, #160]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	4922      	ldr	r1, [pc, #136]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60cb      	str	r3, [r1, #12]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	491e      	ldr	r1, [pc, #120]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4918      	ldr	r1, [pc, #96]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4914      	ldr	r1, [pc, #80]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d021      	beq.n	8000e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e021      	b.n	8000e4e <HAL_GPIO_Init+0x2e2>
 8000e0a:	bf00      	nop
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10310000 	.word	0x10310000
 8000e14:	10220000 	.word	0x10220000
 8000e18:	10210000 	.word	0x10210000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3301      	adds	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f ae8e 	bne.w	8000b80 <HAL_GPIO_Init+0x14>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	; 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43d9      	mvns	r1, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f94a 	bl	8000190 <HAL_GPIO_EXTI_Callback>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e272      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8087 	beq.w	8001036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f28:	4b92      	ldr	r3, [pc, #584]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d00c      	beq.n	8000f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f34:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d112      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5e>
 8000f40:	4b8c      	ldr	r3, [pc, #560]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4c:	d10b      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	4b89      	ldr	r3, [pc, #548]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d06c      	beq.n	8001034 <HAL_RCC_OscConfig+0x12c>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d168      	bne.n	8001034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e24c      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x76>
 8000f70:	4b80      	ldr	r3, [pc, #512]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a7f      	ldr	r2, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e02e      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x98>
 8000f86:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7a      	ldr	r2, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b78      	ldr	r3, [pc, #480]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a77      	ldr	r2, [pc, #476]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0xbc>
 8000faa:	4b72      	ldr	r3, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a71      	ldr	r2, [pc, #452]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000fc4:	4b6b      	ldr	r3, [pc, #428]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a6a      	ldr	r2, [pc, #424]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b68      	ldr	r3, [pc, #416]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a67      	ldr	r2, [pc, #412]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc26 	bl	8000834 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fc22 	bl	8000834 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e200      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0xe4>
 800100a:	e014      	b.n	8001036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fc12 	bl	8000834 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fc0e 	bl	8000834 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1ec      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	4b53      	ldr	r3, [pc, #332]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x10c>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d063      	beq.n	800110a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001042:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b08      	cmp	r3, #8
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x18c>
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d116      	bne.n	8001094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x176>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1c0      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4939      	ldr	r1, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	e03a      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_RCC_OscConfig+0x270>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fbc7 	bl	8000834 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fbc3 	bl	8000834 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1a1      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4927      	ldr	r1, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_RCC_OscConfig+0x270>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fba6 	bl	8000834 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fba2 	bl	8000834 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e180      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d03a      	beq.n	800118c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d019      	beq.n	8001152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_RCC_OscConfig+0x274>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fb86 	bl	8000834 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff fb82 	bl	8000834 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e160      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fafe 	bl	800174c <RCC_Delay>
 8001150:	e01c      	b.n	800118c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_RCC_OscConfig+0x274>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fb6c 	bl	8000834 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115e:	e00f      	b.n	8001180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fb68 	bl	8000834 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d908      	bls.n	8001180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e146      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	42420000 	.word	0x42420000
 800117c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e9      	bne.n	8001160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a6 	beq.w	80012e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a87      	ldr	r2, [pc, #540]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7e      	ldr	r2, [pc, #504]	; (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb29 	bl	8000834 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e6:	f7ff fb25 	bl	8000834 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b64      	cmp	r3, #100	; 0x64
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e103      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b75      	ldr	r3, [pc, #468]	; (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x312>
 800120c:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	e02d      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x334>
 8001222:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a69      	ldr	r2, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a66      	ldr	r2, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	e01c      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b05      	cmp	r3, #5
 8001242:	d10c      	bne.n	800125e <HAL_RCC_OscConfig+0x356>
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a60      	ldr	r2, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	e00b      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d015      	beq.n	80012aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fad9 	bl	8000834 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fad5 	bl	8000834 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e0b1      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ee      	beq.n	8001286 <HAL_RCC_OscConfig+0x37e>
 80012a8:	e014      	b.n	80012d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fac3 	bl	8000834 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fabf 	bl	8000834 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e09b      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ee      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d105      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d061      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d146      	bne.n	8001392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fa93 	bl	8000834 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fa8f 	bl	8000834 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e06d      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d108      	bne.n	800134c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4921      	ldr	r1, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a19      	ldr	r1, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	430b      	orrs	r3, r1
 800135e:	491b      	ldr	r1, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fa63 	bl	8000834 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fa5f 	bl	8000834 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e03d      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x46a>
 8001390:	e035      	b.n	80013fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fa4c 	bl	8000834 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fa48 	bl	8000834 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e026      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x498>
 80013be:	e01e      	b.n	80013fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e019      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40007000 	.word	0x40007000
 80013d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_OscConfig+0x500>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0d0      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d910      	bls.n	8001450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 0207 	bic.w	r2, r3, #7
 8001436:	4965      	ldr	r1, [pc, #404]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800148a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d040      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d115      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e073      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06b      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4936      	ldr	r1, [pc, #216]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff f99a 	bl	8000834 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff f996 	bl	8000834 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e053      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d210      	bcs.n	800155c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4922      	ldr	r1, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159a:	f000 f821 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	490a      	ldr	r1, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1cc>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f836 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08004244 	.word	0x08004244
 80015d8:	20000004 	.word	0x20000004
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x30>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x36>
 800160e:	e027      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	613b      	str	r3, [r7, #16]
      break;
 8001614:	e027      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d010      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c5b      	lsrs	r3, r3, #17
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e004      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e002      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001666:	693b      	ldr	r3, [r7, #16]
}
 8001668:	4618      	mov	r0, r3
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	007a1200 	.word	0x007a1200
 800167c:	0800425c 	.word	0x0800425c
 8001680:	0800426c 	.word	0x0800426c
 8001684:	003d0900 	.word	0x003d0900

08001688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_RCC_GetHCLKFreq+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff2 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08004254 	.word	0x08004254

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffde 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0adb      	lsrs	r3, r3, #11
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	08004254 	.word	0x08004254

080016ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	220f      	movs	r2, #15
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_GetClockConfig+0x58>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_RCC_GetClockConfig+0x58>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_GetClockConfig+0x58>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_GetClockConfig+0x5c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0207 	and.w	r2, r3, #7
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	40022000 	.word	0x40022000

0800174c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <RCC_Delay+0x34>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <RCC_Delay+0x38>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a5b      	lsrs	r3, r3, #9
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001768:	bf00      	nop
  }
  while (Delay --);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <RCC_Delay+0x1c>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000004 	.word	0x20000004
 8001784:	10624dd3 	.word	0x10624dd3

08001788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e041      	b.n	800181e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f839 	bl	8001826 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f000 f9b4 	bl	8001b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d001      	beq.n	8001850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e03a      	b.n	80018c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_TIM_Base_Start_IT+0x98>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00e      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187a:	d009      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d004      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d010      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b2:	e007      	b.n	80018c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40000800 	.word	0x40000800

080018dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d122      	bne.n	8001938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d11b      	bne.n	8001938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0202 	mvn.w	r2, #2
 8001908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8ed 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8e0 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f8ef 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b04      	cmp	r3, #4
 8001944:	d122      	bne.n	800198c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d11b      	bne.n	800198c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0204 	mvn.w	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8c3 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8b6 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8c5 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b08      	cmp	r3, #8
 8001998:	d122      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d11b      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0208 	mvn.w	r2, #8
 80019b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f899 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 80019cc:	e005      	b.n	80019da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f88c 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f89b 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d122      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d11b      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0210 	mvn.w	r2, #16
 8001a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f86f 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001a20:	e005      	b.n	8001a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f862 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f871 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0201 	mvn.w	r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fd42 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b80      	cmp	r3, #128	; 0x80
 8001a6c:	d10e      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a78:	2b80      	cmp	r3, #128	; 0x80
 8001a7a:	d107      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8bf 	bl	8001c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b40      	cmp	r3, #64	; 0x40
 8001a98:	d10e      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d107      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f835 	bl	8001b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d107      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0220 	mvn.w	r2, #32
 8001adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f88a 	bl	8001bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <TIM_Base_SetConfig+0xb8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00b      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b52:	d007      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <TIM_Base_SetConfig+0xbc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <TIM_Base_SetConfig+0xc0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d108      	bne.n	8001b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <TIM_Base_SetConfig+0xb8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00b      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b84:	d007      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <TIM_Base_SetConfig+0xbc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d003      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <TIM_Base_SetConfig+0xc0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d108      	bne.n	8001ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <TIM_Base_SetConfig+0xb8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	615a      	str	r2, [r3, #20]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e042      	b.n	8001cb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fc9e 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	; 0x24
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fdc5 	bl	80027f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d16d      	bne.n	8001db8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_UART_Transmit+0x2c>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e066      	b.n	8001dba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2221      	movs	r2, #33	; 0x21
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfa:	f7fe fd9b 	bl	8000834 <HAL_GetTick>
 8001cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	d108      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	e003      	b.n	8001d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d30:	e02a      	b.n	8001d88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 fb14 	bl	800236a <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e036      	b.n	8001dba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	3302      	adds	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e007      	b.n	8001d7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3301      	adds	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1cf      	bne.n	8001d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fae4 	bl	800236a <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e006      	b.n	8001dba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d112      	bne.n	8001e02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_UART_Receive_IT+0x26>
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00b      	b.n	8001e04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fb24 	bl	8002446 <UART_Start_Receive_IT>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	e000      	b.n	8001e04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0ba      	sub	sp, #232	; 0xe8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_UART_IRQHandler+0x66>
 8001e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fc01 	bl	8002672 <UART_Receive_IT>
      return;
 8001e70:	e25b      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80de 	beq.w	8002038 <HAL_UART_IRQHandler+0x22c>
 8001e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80d1 	beq.w	8002038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_UART_IRQHandler+0xae>
 8001ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_UART_IRQHandler+0xd2>
 8001ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
 8001eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f043 0204 	orr.w	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d011      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
 8001f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f043 0208 	orr.w	r2, r3, #8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 81f2 	beq.w	8002320 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_UART_IRQHandler+0x14e>
 8001f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fb8c 	bl	8002672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_UART_IRQHandler+0x17a>
 8001f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d04f      	beq.n	8002026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa96 	bl	80024b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d041      	beq.n	800201e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa8:	e853 3f00 	ldrex	r3, [r3]
 8001fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3314      	adds	r3, #20
 8001fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fd6:	e841 2300 	strex	r3, r2, [r1]
 8001fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1d9      	bne.n	8001f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d013      	beq.n	8002016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_UART_IRQHandler+0x3e0>)
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fd3e 	bl	8000a7c <HAL_DMA_Abort_IT>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002014:	e00e      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f993 	bl	8002342 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201c:	e00a      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f98f 	bl	8002342 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	e006      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f98b 	bl	8002342 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002032:	e175      	b.n	8002320 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	bf00      	nop
    return;
 8002036:	e173      	b.n	8002320 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 814f 	bne.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8148 	beq.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8141 	beq.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b6 	beq.w	80021f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8145 	beq.w	8002324 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800209e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020a2:	429a      	cmp	r2, r3
 80020a4:	f080 813e 	bcs.w	8002324 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	f000 8088 	beq.w	80021cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	330c      	adds	r3, #12
 80020c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ca:	e853 3f00 	ldrex	r3, [r3]
 80020ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80020d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020f8:	e841 2300 	strex	r3, r2, [r1]
 80020fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1d9      	bne.n	80020bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800212c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002130:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002138:	e841 2300 	strex	r3, r2, [r1]
 800213c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800213e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e1      	bne.n	8002108 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3314      	adds	r3, #20
 800214a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3314      	adds	r3, #20
 8002164:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002168:	66fa      	str	r2, [r7, #108]	; 0x6c
 800216a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800216e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002170:	e841 2300 	strex	r3, r2, [r1]
 8002174:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e3      	bne.n	8002144 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002194:	e853 3f00 	ldrex	r3, [r3]
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219c:	f023 0310 	bic.w	r3, r3, #16
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80021b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021b6:	e841 2300 	strex	r3, r2, [r1]
 80021ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80021bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e3      	bne.n	800218a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fc1d 	bl	8000a06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8b6 	bl	8002354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021e8:	e09c      	b.n	8002324 <HAL_UART_IRQHandler+0x518>
 80021ea:	bf00      	nop
 80021ec:	0800257d 	.word	0x0800257d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808e 	beq.w	8002328 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800220c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8089 	beq.w	8002328 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800222c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800223a:	647a      	str	r2, [r7, #68]	; 0x44
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002242:	e841 2300 	strex	r3, r2, [r1]
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1e3      	bne.n	8002216 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3314      	adds	r3, #20
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	e853 3f00 	ldrex	r3, [r3]
 800225c:	623b      	str	r3, [r7, #32]
   return(result);
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3314      	adds	r3, #20
 800226e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002272:	633a      	str	r2, [r7, #48]	; 0x30
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e3      	bne.n	800224e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022b8:	61fa      	str	r2, [r7, #28]
 80022ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022bc:	69b9      	ldr	r1, [r7, #24]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	e841 2300 	strex	r3, r2, [r1]
 80022c4:	617b      	str	r3, [r7, #20]
   return(result);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e3      	bne.n	8002294 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f83b 	bl	8002354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022de:	e023      	b.n	8002328 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_UART_IRQHandler+0x4f4>
 80022ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f953 	bl	80025a4 <UART_Transmit_IT>
    return;
 80022fe:	e014      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_UART_IRQHandler+0x51e>
 800230c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f992 	bl	8002642 <UART_EndTransmit_IT>
    return;
 800231e:	e004      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
    return;
 8002320:	bf00      	nop
 8002322:	e002      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
      return;
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
      return;
 8002328:	bf00      	nop
  }
}
 800232a:	37e8      	adds	r7, #232	; 0xe8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b090      	sub	sp, #64	; 0x40
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237a:	e050      	b.n	800241e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d04c      	beq.n	800241e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x30>
 800238a:	f7fe fa53 	bl	8000834 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002396:	429a      	cmp	r2, r3
 8002398:	d241      	bcs.n	800241e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	330c      	adds	r3, #12
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	e853 3f00 	ldrex	r3, [r3]
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	637a      	str	r2, [r7, #52]	; 0x34
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e5      	bne.n	800239a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3314      	adds	r3, #20
 80023d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	613b      	str	r3, [r7, #16]
   return(result);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3314      	adds	r3, #20
 80023ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ee:	623a      	str	r2, [r7, #32]
 80023f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	69f9      	ldr	r1, [r7, #28]
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e5      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e00f      	b.n	800243e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	429a      	cmp	r2, r3
 800243a:	d09f      	beq.n	800237c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3740      	adds	r7, #64	; 0x40
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2222      	movs	r2, #34	; 0x22
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b095      	sub	sp, #84	; 0x54
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	e853 3f00 	ldrex	r3, [r3]
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e0:	643a      	str	r2, [r7, #64]	; 0x40
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024e8:	e841 2300 	strex	r3, r2, [r1]
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e5      	bne.n	80024c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	61fb      	str	r3, [r7, #28]
   return(result);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b01      	cmp	r3, #1
 800252e:	d119      	bne.n	8002564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 0310 	bic.w	r3, r3, #16
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	61ba      	str	r2, [r7, #24]
 8002552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6979      	ldr	r1, [r7, #20]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	613b      	str	r3, [r7, #16]
   return(result);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002572:	bf00      	nop
 8002574:	3754      	adds	r7, #84	; 0x54
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fed3 	bl	8002342 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b21      	cmp	r3, #33	; 0x21
 80025b6:	d13e      	bne.n	8002636 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c0:	d114      	bne.n	80025ec <UART_Transmit_IT+0x48>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d110      	bne.n	80025ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	621a      	str	r2, [r3, #32]
 80025ea:	e008      	b.n	80025fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	1c59      	adds	r1, r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6211      	str	r1, [r2, #32]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4619      	mov	r1, r3
 800260c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002620:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe64 	bl	8002330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08c      	sub	sp, #48	; 0x30
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b22      	cmp	r3, #34	; 0x22
 8002684:	f040 80ae 	bne.w	80027e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d117      	bne.n	80026c2 <UART_Receive_IT+0x50>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	1c9a      	adds	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	e026      	b.n	8002710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d007      	beq.n	80026e6 <UART_Receive_IT+0x74>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <UART_Receive_IT+0x82>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e008      	b.n	8002706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002700:	b2da      	uxtb	r2, r3
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002720:	2b00      	cmp	r3, #0
 8002722:	d15d      	bne.n	80027e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0220 	bic.w	r2, r2, #32
 8002732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2b01      	cmp	r3, #1
 8002768:	d135      	bne.n	80027d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	e853 3f00 	ldrex	r3, [r3]
 800277e:	613b      	str	r3, [r7, #16]
   return(result);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f023 0310 	bic.w	r3, r3, #16
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	623a      	str	r2, [r7, #32]
 8002792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	69f9      	ldr	r1, [r7, #28]
 8002796:	6a3a      	ldr	r2, [r7, #32]
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	61bb      	str	r3, [r7, #24]
   return(result);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e5      	bne.n	8002770 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d10a      	bne.n	80027c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fdc0 	bl	8002354 <HAL_UARTEx_RxEventCallback>
 80027d4:	e002      	b.n	80027dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fd fd02 	bl	80001e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e002      	b.n	80027e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3730      	adds	r7, #48	; 0x30
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800282a:	f023 030c 	bic.w	r3, r3, #12
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	430b      	orrs	r3, r1
 8002836:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <UART_SetConfig+0x114>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002858:	f7fe ff34 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	e002      	b.n	8002866 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002860:	f7fe ff1c 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8002864:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <UART_SetConfig+0x118>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	0119      	lsls	r1, r3, #4
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f2f3 	udiv	r2, r2, r3
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <UART_SetConfig+0x118>)
 800289e:	fba3 0302 	umull	r0, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2064      	movs	r0, #100	; 0x64
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <UART_SetConfig+0x118>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028bc:	4419      	add	r1, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <UART_SetConfig+0x118>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <UART_SetConfig+0x118>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013800 	.word	0x40013800
 8002908:	51eb851f 	.word	0x51eb851f

0800290c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800291a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291e:	2b84      	cmp	r3, #132	; 0x84
 8002920:	d005      	beq.n	800292e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002922:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	3303      	adds	r3, #3
 800292c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800293e:	f000 fc11 	bl	8003164 <vTaskStartScheduler>
  
  return osOK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}

08002948 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af04      	add	r7, sp, #16
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <osThreadCreate+0x54>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01c      	beq.n	800299c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685c      	ldr	r4, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681d      	ldr	r5, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691e      	ldr	r6, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffc9 	bl	800290c <makeFreeRtosPriority>
 800297a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002984:	9202      	str	r2, [sp, #8]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	9100      	str	r1, [sp, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4632      	mov	r2, r6
 800298e:	4629      	mov	r1, r5
 8002990:	4620      	mov	r0, r4
 8002992:	f000 f8d4 	bl	8002b3e <xTaskCreateStatic>
 8002996:	4603      	mov	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e01c      	b.n	80029d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685c      	ldr	r4, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a8:	b29e      	uxth	r6, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ffab 	bl	800290c <makeFreeRtosPriority>
 80029b6:	4602      	mov	r2, r0
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	9200      	str	r2, [sp, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4632      	mov	r2, r6
 80029c4:	4629      	mov	r1, r5
 80029c6:	4620      	mov	r0, r4
 80029c8:	f000 f915 	bl	8002bf6 <xTaskCreate>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f103 0208 	add.w	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 0208 	add.w	r2, r3, #8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f103 0208 	add.w	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d103      	bne.n	8002a9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e00c      	b.n	8002ab6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e002      	b.n	8002aaa <vListInsert+0x2e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d2f6      	bcs.n	8002aa4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d103      	bne.n	8002b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08e      	sub	sp, #56	; 0x38
 8002b42:	af04      	add	r7, sp, #16
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <xTaskCreateStatic+0x46>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61fb      	str	r3, [r7, #28]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b84:	23b4      	movs	r3, #180	; 0xb4
 8002b86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2bb4      	cmp	r3, #180	; 0xb4
 8002b8c:	d00a      	beq.n	8002ba4 <xTaskCreateStatic+0x66>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	61bb      	str	r3, [r7, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	e7fe      	b.n	8002ba2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01e      	beq.n	8002be8 <xTaskCreateStatic+0xaa>
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f850 	bl	8002c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002be2:	f000 f8e3 	bl	8002dac <prvAddNewTaskToReadyList>
 8002be6:	e001      	b.n	8002bec <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bec:	697b      	ldr	r3, [r7, #20]
	}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08c      	sub	sp, #48	; 0x30
 8002bfa:	af04      	add	r7, sp, #16
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f816 	bl	8003c3c <pvPortMalloc>
 8002c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c18:	20b4      	movs	r0, #180	; 0xb4
 8002c1a:	f001 f80f 	bl	8003c3c <pvPortMalloc>
 8002c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2c:	e005      	b.n	8002c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f001 f8c8 	bl	8003dc4 <vPortFree>
 8002c34:	e001      	b.n	8002c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9303      	str	r3, [sp, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f80e 	bl	8002c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c64:	69f8      	ldr	r0, [r7, #28]
 8002c66:	f000 f8a1 	bl	8002dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e002      	b.n	8002c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c76:	69bb      	ldr	r3, [r7, #24]
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	617b      	str	r3, [r7, #20]
}
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	e012      	b.n	8002cf4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	7819      	ldrb	r1, [r3, #0]
 8002cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3334      	adds	r3, #52	; 0x34
 8002cde:	460a      	mov	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d9e9      	bls.n	8002cce <prvInitialiseNewTask+0x4e>
 8002cfa:	e000      	b.n	8002cfe <prvInitialiseNewTask+0x7e>
		{
			break;
 8002cfc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d901      	bls.n	8002d10 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d0c:	2306      	movs	r3, #6
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	2200      	movs	r2, #0
 8002d20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	3304      	adds	r3, #4
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fe79 	bl	8002a1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	3318      	adds	r3, #24
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fe74 	bl	8002a1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	f1c3 0207 	rsb	r2, r3, #7
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	334c      	adds	r3, #76	; 0x4c
 8002d60:	2260      	movs	r2, #96	; 0x60
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f967 	bl	8004038 <memset>
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <prvInitialiseNewTask+0x120>)
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <prvInitialiseNewTask+0x124>)
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <prvInitialiseNewTask+0x128>)
 8002d7a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	69b8      	ldr	r0, [r7, #24]
 8002d82:	f000 fd67 	bl	8003854 <pxPortInitialiseStack>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08004290 	.word	0x08004290
 8002da4:	080042b0 	.word	0x080042b0
 8002da8:	08004270 	.word	0x08004270

08002dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002db4:	f000 fe42 	bl	8003a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <prvAddNewTaskToReadyList+0xb8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <prvAddNewTaskToReadyList+0xb8>)
 8002dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <prvAddNewTaskToReadyList+0xbc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dca:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <prvAddNewTaskToReadyList+0xbc>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <prvAddNewTaskToReadyList+0xb8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d110      	bne.n	8002dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dd8:	f000 fc10 	bl	80035fc <prvInitialiseTaskLists>
 8002ddc:	e00d      	b.n	8002dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <prvAddNewTaskToReadyList+0xc0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <prvAddNewTaskToReadyList+0xbc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d802      	bhi.n	8002dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <prvAddNewTaskToReadyList+0xbc>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <prvAddNewTaskToReadyList+0xc4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <prvAddNewTaskToReadyList+0xc4>)
 8002e02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <prvAddNewTaskToReadyList+0xc8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <prvAddNewTaskToReadyList+0xc8>)
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <prvAddNewTaskToReadyList+0xcc>)
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7ff fe02 	bl	8002a36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e32:	f000 fe33 	bl	8003a9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <prvAddNewTaskToReadyList+0xc0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00e      	beq.n	8002e5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <prvAddNewTaskToReadyList+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <prvAddNewTaskToReadyList+0xd0>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200004e8 	.word	0x200004e8
 8002e68:	200003e8 	.word	0x200003e8
 8002e6c:	200004f4 	.word	0x200004f4
 8002e70:	20000504 	.word	0x20000504
 8002e74:	200004f0 	.word	0x200004f0
 8002e78:	200003ec 	.word	0x200003ec
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <vTaskDelay+0x60>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <vTaskDelay+0x30>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60bb      	str	r3, [r7, #8]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002eb0:	f000 f9c2 	bl	8003238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fc66 	bl	8003788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ebc:	f000 f9ca 	bl	8003254 <xTaskResumeAll>
 8002ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <vTaskDelay+0x64>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000510 	.word	0x20000510
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ef0:	f000 fda4 	bl	8003a3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <vTaskSuspend+0x18>
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <vTaskSuspend+0x104>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e000      	b.n	8002f02 <vTaskSuspend+0x1a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fdef 	bl	8002aec <uxListRemove>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d115      	bne.n	8002f40 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	4935      	ldr	r1, [pc, #212]	; (8002ff0 <vTaskSuspend+0x108>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <vTaskSuspend+0x58>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <vTaskSuspend+0x10c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <vTaskSuspend+0x10c>)
 8002f3e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fdcd 	bl	8002aec <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4827      	ldr	r0, [pc, #156]	; (8002ff8 <vTaskSuspend+0x110>)
 8002f5a:	f7ff fd6c 	bl	8002a36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d103      	bne.n	8002f72 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002f72:	f000 fd93 	bl	8003a9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <vTaskSuspend+0x114>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002f7e:	f000 fd5d 	bl	8003a3c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002f82:	f000 fbdd 	bl	8003740 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002f86:	f000 fd89 	bl	8003a9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <vTaskSuspend+0x104>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d127      	bne.n	8002fe4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <vTaskSuspend+0x114>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <vTaskSuspend+0x118>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <vTaskSuspend+0xd2>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60bb      	str	r3, [r7, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <vTaskSuspend+0x11c>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fca:	e00b      	b.n	8002fe4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vTaskSuspend+0x110>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <vTaskSuspend+0x120>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d103      	bne.n	8002fe0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <vTaskSuspend+0x104>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
	}
 8002fde:	e001      	b.n	8002fe4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002fe0:	f000 fa92 	bl	8003508 <vTaskSwitchContext>
	}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200003e8 	.word	0x200003e8
 8002ff0:	200003ec 	.word	0x200003ec
 8002ff4:	200004f0 	.word	0x200004f0
 8002ff8:	200004d4 	.word	0x200004d4
 8002ffc:	200004f4 	.word	0x200004f4
 8003000:	20000510 	.word	0x20000510
 8003004:	e000ed04 	.word	0xe000ed04
 8003008:	200004e8 	.word	0x200004e8

0800300c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60fb      	str	r3, [r7, #12]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <prvTaskIsTaskSuspended+0x6c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <prvTaskIsTaskSuspended+0x3a>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <prvTaskIsTaskSuspended+0x3c>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <prvTaskIsTaskSuspended+0x70>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00a      	beq.n	800306c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <prvTaskIsTaskSuspended+0x56>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <prvTaskIsTaskSuspended+0x58>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800306c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800306e:	4618      	mov	r0, r3
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	200004d4 	.word	0x200004d4
 800307c:	200004a8 	.word	0x200004a8

08003080 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <xTaskResumeFromISR+0x2c>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	61bb      	str	r3, [r7, #24]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ac:	f000 fd88 	bl	8003bc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030b0:	f3ef 8211 	mrs	r2, BASEPRI
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	617a      	str	r2, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030c8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030ca:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80030cc:	6a38      	ldr	r0, [r7, #32]
 80030ce:	f7ff ff9d 	bl	800300c <prvTaskIsTaskSuspended>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02f      	beq.n	8003138 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <xTaskResumeFromISR+0xd0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d125      	bne.n	800312c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <xTaskResumeFromISR+0xd4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d301      	bcc.n	80030f2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fcf8 	bl	8002aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <xTaskResumeFromISR+0xd8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <xTaskResumeFromISR+0xd8>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <xTaskResumeFromISR+0xdc>)
 800311c:	441a      	add	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	3304      	adds	r3, #4
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff fc86 	bl	8002a36 <vListInsertEnd>
 800312a:	e005      	b.n	8003138 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	3318      	adds	r3, #24
 8003130:	4619      	mov	r1, r3
 8003132:	480b      	ldr	r0, [pc, #44]	; (8003160 <xTaskResumeFromISR+0xe0>)
 8003134:	f7ff fc7f 	bl	8002a36 <vListInsertEnd>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003142:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003146:	4618      	mov	r0, r3
 8003148:	3728      	adds	r7, #40	; 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000510 	.word	0x20000510
 8003154:	200003e8 	.word	0x200003e8
 8003158:	200004f0 	.word	0x200004f0
 800315c:	200003ec 	.word	0x200003ec
 8003160:	200004a8 	.word	0x200004a8

08003164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003172:	463a      	mov	r2, r7
 8003174:	1d39      	adds	r1, r7, #4
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	4618      	mov	r0, r3
 800317c:	f7fc fff0 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	9202      	str	r2, [sp, #8]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2300      	movs	r3, #0
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	460a      	mov	r2, r1
 8003192:	4921      	ldr	r1, [pc, #132]	; (8003218 <vTaskStartScheduler+0xb4>)
 8003194:	4821      	ldr	r0, [pc, #132]	; (800321c <vTaskStartScheduler+0xb8>)
 8003196:	f7ff fcd2 	bl	8002b3e <xTaskCreateStatic>
 800319a:	4603      	mov	r3, r0
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <vTaskStartScheduler+0xbc>)
 800319e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <vTaskStartScheduler+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e001      	b.n	80031b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d11b      	bne.n	80031f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	613b      	str	r3, [r7, #16]
}
 80031ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031cc:	4b15      	ldr	r3, [pc, #84]	; (8003224 <vTaskStartScheduler+0xc0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	334c      	adds	r3, #76	; 0x4c
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <vTaskStartScheduler+0xc4>)
 80031d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <vTaskStartScheduler+0xc8>)
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <vTaskStartScheduler+0xcc>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <vTaskStartScheduler+0xd0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031ea:	f000 fbb5 	bl	8003958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031ee:	e00e      	b.n	800320e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d10a      	bne.n	800320e <vTaskStartScheduler+0xaa>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60fb      	str	r3, [r7, #12]
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <vTaskStartScheduler+0xa8>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	0800423c 	.word	0x0800423c
 800321c:	080035cd 	.word	0x080035cd
 8003220:	2000050c 	.word	0x2000050c
 8003224:	200003e8 	.word	0x200003e8
 8003228:	20000014 	.word	0x20000014
 800322c:	20000508 	.word	0x20000508
 8003230:	200004f4 	.word	0x200004f4
 8003234:	200004ec 	.word	0x200004ec

08003238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vTaskSuspendAll+0x18>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a03      	ldr	r2, [pc, #12]	; (8003250 <vTaskSuspendAll+0x18>)
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000510 	.word	0x20000510

08003254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <xTaskResumeAll+0x114>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <xTaskResumeAll+0x2c>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	603b      	str	r3, [r7, #0]
}
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003280:	f000 fbdc 	bl	8003a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <xTaskResumeAll+0x114>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	4a37      	ldr	r2, [pc, #220]	; (8003368 <xTaskResumeAll+0x114>)
 800328c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <xTaskResumeAll+0x114>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d161      	bne.n	800335a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <xTaskResumeAll+0x118>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d05d      	beq.n	800335a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800329e:	e02e      	b.n	80032fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <xTaskResumeAll+0x11c>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3318      	adds	r3, #24
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fc1d 	bl	8002aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fc18 	bl	8002aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <xTaskResumeAll+0x120>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <xTaskResumeAll+0x120>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4a27      	ldr	r2, [pc, #156]	; (8003378 <xTaskResumeAll+0x124>)
 80032dc:	441a      	add	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7ff fba6 	bl	8002a36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <xTaskResumeAll+0x128>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <xTaskResumeAll+0x12c>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <xTaskResumeAll+0x11c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1cc      	bne.n	80032a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800330c:	f000 fa18 	bl	8003740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <xTaskResumeAll+0x130>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800331c:	f000 f836 	bl	800338c <xTaskIncrementTick>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <xTaskResumeAll+0x12c>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f1      	bne.n	800331c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <xTaskResumeAll+0x130>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <xTaskResumeAll+0x12c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003346:	2301      	movs	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <xTaskResumeAll+0x134>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800335a:	f000 fb9f 	bl	8003a9c <vPortExitCritical>

	return xAlreadyYielded;
 800335e:	68bb      	ldr	r3, [r7, #8]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000510 	.word	0x20000510
 800336c:	200004e8 	.word	0x200004e8
 8003370:	200004a8 	.word	0x200004a8
 8003374:	200004f0 	.word	0x200004f0
 8003378:	200003ec 	.word	0x200003ec
 800337c:	200003e8 	.word	0x200003e8
 8003380:	200004fc 	.word	0x200004fc
 8003384:	200004f8 	.word	0x200004f8
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <xTaskIncrementTick+0x150>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 808d 	bne.w	80034ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033a0:	4b4f      	ldr	r3, [pc, #316]	; (80034e0 <xTaskIncrementTick+0x154>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033a8:	4a4d      	ldr	r2, [pc, #308]	; (80034e0 <xTaskIncrementTick+0x154>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d120      	bne.n	80033f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <xTaskIncrementTick+0x158>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xTaskIncrementTick+0x46>
 80033d4:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <xTaskIncrementTick+0x158>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <xTaskIncrementTick+0x15c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <xTaskIncrementTick+0x158>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4a41      	ldr	r2, [pc, #260]	; (80034e8 <xTaskIncrementTick+0x15c>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <xTaskIncrementTick+0x160>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <xTaskIncrementTick+0x160>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	f000 f9a5 	bl	8003740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <xTaskIncrementTick+0x164>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d34d      	bcc.n	800349c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003400:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <xTaskIncrementTick+0x158>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xTaskIncrementTick+0x82>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xTaskIncrementTick+0x84>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <xTaskIncrementTick+0x164>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	601a      	str	r2, [r3, #0]
					break;
 800341c:	e03e      	b.n	800349c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <xTaskIncrementTick+0x158>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d203      	bcs.n	800343e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003436:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <xTaskIncrementTick+0x164>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6013      	str	r3, [r2, #0]
						break;
 800343c:	e02e      	b.n	800349c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3304      	adds	r3, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fb52 	bl	8002aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	3318      	adds	r3, #24
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fb49 	bl	8002aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	2201      	movs	r2, #1
 8003460:	409a      	lsls	r2, r3
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <xTaskIncrementTick+0x168>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <xTaskIncrementTick+0x168>)
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <xTaskIncrementTick+0x16c>)
 800347a:	441a      	add	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7ff fad7 	bl	8002a36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <xTaskIncrementTick+0x170>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d3b4      	bcc.n	8003400 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349a:	e7b1      	b.n	8003400 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <xTaskIncrementTick+0x170>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	4915      	ldr	r1, [pc, #84]	; (80034f8 <xTaskIncrementTick+0x16c>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d907      	bls.n	80034c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e004      	b.n	80034c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <xTaskIncrementTick+0x174>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <xTaskIncrementTick+0x174>)
 80034c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <xTaskIncrementTick+0x178>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034d0:	697b      	ldr	r3, [r7, #20]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000510 	.word	0x20000510
 80034e0:	200004ec 	.word	0x200004ec
 80034e4:	200004a0 	.word	0x200004a0
 80034e8:	200004a4 	.word	0x200004a4
 80034ec:	20000500 	.word	0x20000500
 80034f0:	20000508 	.word	0x20000508
 80034f4:	200004f0 	.word	0x200004f0
 80034f8:	200003ec 	.word	0x200003ec
 80034fc:	200003e8 	.word	0x200003e8
 8003500:	200004f8 	.word	0x200004f8
 8003504:	200004fc 	.word	0x200004fc

08003508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <vTaskSwitchContext+0xac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003516:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <vTaskSwitchContext+0xb0>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800351c:	e044      	b.n	80035a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <vTaskSwitchContext+0xb0>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <vTaskSwitchContext+0xb4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f1c3 031f 	rsb	r3, r3, #31
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4921      	ldr	r1, [pc, #132]	; (80035c0 <vTaskSwitchContext+0xb8>)
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <vTaskSwitchContext+0x5c>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <vTaskSwitchContext+0x5a>
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <vTaskSwitchContext+0xb8>)
 8003570:	4413      	add	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	3308      	adds	r3, #8
 8003586:	429a      	cmp	r2, r3
 8003588:	d104      	bne.n	8003594 <vTaskSwitchContext+0x8c>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <vTaskSwitchContext+0xbc>)
 800359c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <vTaskSwitchContext+0xbc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <vTaskSwitchContext+0xc0>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000510 	.word	0x20000510
 80035b8:	200004fc 	.word	0x200004fc
 80035bc:	200004f0 	.word	0x200004f0
 80035c0:	200003ec 	.word	0x200003ec
 80035c4:	200003e8 	.word	0x200003e8
 80035c8:	20000014 	.word	0x20000014

080035cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035d4:	f000 f852 	bl	800367c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <prvIdleTask+0x28>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d9f9      	bls.n	80035d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <prvIdleTask+0x2c>)
 80035e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035f0:	e7f0      	b.n	80035d4 <prvIdleTask+0x8>
 80035f2:	bf00      	nop
 80035f4:	200003ec 	.word	0x200003ec
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	e00c      	b.n	8003622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <prvInitialiseTaskLists+0x60>)
 8003614:	4413      	add	r3, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f9e2 	bl	80029e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d9ef      	bls.n	8003608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <prvInitialiseTaskLists+0x64>)
 800362a:	f7ff f9d9 	bl	80029e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800362e:	480d      	ldr	r0, [pc, #52]	; (8003664 <prvInitialiseTaskLists+0x68>)
 8003630:	f7ff f9d6 	bl	80029e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003634:	480c      	ldr	r0, [pc, #48]	; (8003668 <prvInitialiseTaskLists+0x6c>)
 8003636:	f7ff f9d3 	bl	80029e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800363a:	480c      	ldr	r0, [pc, #48]	; (800366c <prvInitialiseTaskLists+0x70>)
 800363c:	f7ff f9d0 	bl	80029e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003640:	480b      	ldr	r0, [pc, #44]	; (8003670 <prvInitialiseTaskLists+0x74>)
 8003642:	f7ff f9cd 	bl	80029e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <prvInitialiseTaskLists+0x78>)
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <prvInitialiseTaskLists+0x64>)
 800364a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <prvInitialiseTaskLists+0x7c>)
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <prvInitialiseTaskLists+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200003ec 	.word	0x200003ec
 8003660:	20000478 	.word	0x20000478
 8003664:	2000048c 	.word	0x2000048c
 8003668:	200004a8 	.word	0x200004a8
 800366c:	200004bc 	.word	0x200004bc
 8003670:	200004d4 	.word	0x200004d4
 8003674:	200004a0 	.word	0x200004a0
 8003678:	200004a4 	.word	0x200004a4

0800367c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003682:	e019      	b.n	80036b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003684:	f000 f9da 	bl	8003a3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <prvCheckTasksWaitingTermination+0x50>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fa29 	bl	8002aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <prvCheckTasksWaitingTermination+0x54>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3b01      	subs	r3, #1
 80036a0:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <prvCheckTasksWaitingTermination+0x54>)
 80036a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036ae:	f000 f9f5 	bl	8003a9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f810 	bl	80036d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e1      	bne.n	8003684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200004bc 	.word	0x200004bc
 80036d0:	200004e8 	.word	0x200004e8
 80036d4:	200004d0 	.word	0x200004d0

080036d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	334c      	adds	r3, #76	; 0x4c
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fcbd 	bl	8004064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fb63 	bl	8003dc4 <vPortFree>
				vPortFree( pxTCB );
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fb60 	bl	8003dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003704:	e018      	b.n	8003738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d103      	bne.n	8003718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb57 	bl	8003dc4 <vPortFree>
	}
 8003716:	e00f      	b.n	8003738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800371e:	2b02      	cmp	r3, #2
 8003720:	d00a      	beq.n	8003738 <prvDeleteTCB+0x60>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	60fb      	str	r3, [r7, #12]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <prvDeleteTCB+0x5e>
	}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <prvResetNextTaskUnblockTime+0x40>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <prvResetNextTaskUnblockTime+0x14>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <prvResetNextTaskUnblockTime+0x16>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <prvResetNextTaskUnblockTime+0x44>)
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003762:	e008      	b.n	8003776 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <prvResetNextTaskUnblockTime+0x40>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <prvResetNextTaskUnblockTime+0x44>)
 8003774:	6013      	str	r3, [r2, #0]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	200004a0 	.word	0x200004a0
 8003784:	20000508 	.word	0x20000508

08003788 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f9a4 	bl	8002aec <uxListRemove>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4013      	ands	r3, r2
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d10a      	bne.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	481a      	ldr	r0, [pc, #104]	; (8003844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037da:	f7ff f92c 	bl	8002a36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037de:	e026      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d209      	bcs.n	800380c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff f939 	bl	8002a7c <vListInsert>
}
 800380a:	e010      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <prvAddCurrentTaskToDelayedList+0xc4>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff f92f 	bl	8002a7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	d202      	bcs.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200004ec 	.word	0x200004ec
 800383c:	200003e8 	.word	0x200003e8
 8003840:	200004f0 	.word	0x200004f0
 8003844:	200004d4 	.word	0x200004d4
 8003848:	200004a4 	.word	0x200004a4
 800384c:	200004a0 	.word	0x200004a0
 8003850:	20000508 	.word	0x20000508

08003854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b04      	subs	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800386c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3b04      	subs	r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b04      	subs	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003884:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <pxPortInitialiseStack+0x54>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b14      	subs	r3, #20
 800388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b20      	subs	r3, #32
 800389a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	080038ad 	.word	0x080038ad

080038ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <prvTaskExitError+0x54>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d00a      	beq.n	80038d6 <prvTaskExitError+0x2a>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	60fb      	str	r3, [r7, #12]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <prvTaskExitError+0x28>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	60bb      	str	r3, [r7, #8]
}
 80038e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038ea:	bf00      	nop
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0fc      	beq.n	80038ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000010 	.word	0x20000010
	...

08003910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pxCurrentTCBConst2>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800391a:	f380 8809 	msr	PSP, r0
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	f04e 0e0d 	orr.w	lr, lr, #13
 800392e:	4770      	bx	lr

08003930 <pxCurrentTCBConst2>:
 8003930:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop

08003938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003938:	4806      	ldr	r0, [pc, #24]	; (8003954 <prvPortStartFirstTask+0x1c>)
 800393a:	6800      	ldr	r0, [r0, #0]
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	f380 8808 	msr	MSP, r0
 8003942:	b662      	cpsie	i
 8003944:	b661      	cpsie	f
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	df00      	svc	0
 8003950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003952:	bf00      	nop
 8003954:	e000ed08 	.word	0xe000ed08

08003958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800395e:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <xPortStartScheduler+0xd0>)
 8003960:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <xPortStartScheduler+0xd4>)
 8003984:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <xPortStartScheduler+0xd8>)
 8003988:	2207      	movs	r2, #7
 800398a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800398c:	e009      	b.n	80039a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <xPortStartScheduler+0xd8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <xPortStartScheduler+0xd8>)
 8003996:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d0ef      	beq.n	800398e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <xPortStartScheduler+0xd8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1c3 0307 	rsb	r3, r3, #7
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d00a      	beq.n	80039d0 <xPortStartScheduler+0x78>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60bb      	str	r3, [r7, #8]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <xPortStartScheduler+0xd8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <xPortStartScheduler+0xd8>)
 80039d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <xPortStartScheduler+0xd8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <xPortStartScheduler+0xd8>)
 80039e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <xPortStartScheduler+0xdc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <xPortStartScheduler+0xdc>)
 80039f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <xPortStartScheduler+0xdc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a0d      	ldr	r2, [pc, #52]	; (8003a34 <xPortStartScheduler+0xdc>)
 8003a00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a06:	f000 f8b9 	bl	8003b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <xPortStartScheduler+0xe0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a10:	f7ff ff92 	bl	8003938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a14:	f7ff fd78 	bl	8003508 <vTaskSwitchContext>
	prvTaskExitError();
 8003a18:	f7ff ff48 	bl	80038ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	e000e400 	.word	0xe000e400
 8003a2c:	20000514 	.word	0x20000514
 8003a30:	20000518 	.word	0x20000518
 8003a34:	e000ed20 	.word	0xe000ed20
 8003a38:	20000010 	.word	0x20000010

08003a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
}
 8003a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <vPortEnterCritical+0x58>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <vPortEnterCritical+0x58>)
 8003a5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <vPortEnterCritical+0x58>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10f      	bne.n	8003a88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <vPortEnterCritical+0x5c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vPortEnterCritical+0x4a>
	}
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <vPortExitCritical+0x4c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <vPortExitCritical+0x24>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <vPortExitCritical+0x4c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <vPortExitCritical+0x4c>)
 8003ac8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <vPortExitCritical+0x4c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <vPortExitCritical+0x42>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f383 8811 	msr	BASEPRI, r3
}
 8003adc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000010 	.word	0x20000010
 8003aec:	00000000 	.word	0x00000000

08003af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003af0:	f3ef 8009 	mrs	r0, PSP
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <pxCurrentTCBConst>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b00:	6010      	str	r0, [r2, #0]
 8003b02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b0a:	f380 8811 	msr	BASEPRI, r0
 8003b0e:	f7ff fcfb 	bl	8003508 <vTaskSwitchContext>
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8811 	msr	BASEPRI, r0
 8003b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	6808      	ldr	r0, [r1, #0]
 8003b22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b26:	f380 8809 	msr	PSP, r0
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	4770      	bx	lr

08003b30 <pxCurrentTCBConst>:
 8003b30:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop

08003b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	607b      	str	r3, [r7, #4]
}
 8003b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b52:	f7ff fc1b 	bl	800338c <xTaskIncrementTick>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <SysTick_Handler+0x40>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f383 8811 	msr	BASEPRI, r3
}
 8003b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <vPortSetupTimerInterrupt+0x30>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <vPortSetupTimerInterrupt+0x34>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <vPortSetupTimerInterrupt+0x38>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <vPortSetupTimerInterrupt+0x3c>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <vPortSetupTimerInterrupt+0x40>)
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <vPortSetupTimerInterrupt+0x30>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	e000e010 	.word	0xe000e010
 8003bb0:	e000e018 	.word	0xe000e018
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	10624dd3 	.word	0x10624dd3
 8003bbc:	e000e014 	.word	0xe000e014

08003bc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bc6:	f3ef 8305 	mrs	r3, IPSR
 8003bca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d914      	bls.n	8003bfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <vPortValidateInterruptPriority+0x6c>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <vPortValidateInterruptPriority+0x70>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	7afa      	ldrb	r2, [r7, #11]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d20a      	bcs.n	8003bfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	607b      	str	r3, [r7, #4]
}
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <vPortValidateInterruptPriority+0x74>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <vPortValidateInterruptPriority+0x78>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d90a      	bls.n	8003c22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	603b      	str	r3, [r7, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <vPortValidateInterruptPriority+0x60>
	}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e3f0 	.word	0xe000e3f0
 8003c30:	20000514 	.word	0x20000514
 8003c34:	e000ed0c 	.word	0xe000ed0c
 8003c38:	20000518 	.word	0x20000518

08003c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c48:	f7ff faf6 	bl	8003238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c4c:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <pvPortMalloc+0x174>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c54:	f000 f910 	bl	8003e78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c58:	4b56      	ldr	r3, [pc, #344]	; (8003db4 <pvPortMalloc+0x178>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 808e 	bne.w	8003d82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01d      	beq.n	8003ca8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d014      	beq.n	8003ca8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	3308      	adds	r3, #8
 8003c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <pvPortMalloc+0x6c>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	617b      	str	r3, [r7, #20]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d069      	beq.n	8003d82 <pvPortMalloc+0x146>
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <pvPortMalloc+0x17c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d864      	bhi.n	8003d82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cb8:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <pvPortMalloc+0x180>)
 8003cba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <pvPortMalloc+0x180>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cc2:	e004      	b.n	8003cce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d903      	bls.n	8003ce0 <pvPortMalloc+0xa4>
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f1      	bne.n	8003cc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <pvPortMalloc+0x174>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d04b      	beq.n	8003d82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	4413      	add	r3, r2
 8003cf2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	2308      	movs	r3, #8
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d91f      	bls.n	8003d4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <pvPortMalloc+0xf8>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	613b      	str	r3, [r7, #16]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d46:	69b8      	ldr	r0, [r7, #24]
 8003d48:	f000 f8f8 	bl	8003f3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <pvPortMalloc+0x17c>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <pvPortMalloc+0x17c>)
 8003d58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <pvPortMalloc+0x17c>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <pvPortMalloc+0x184>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d203      	bcs.n	8003d6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <pvPortMalloc+0x17c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <pvPortMalloc+0x184>)
 8003d6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <pvPortMalloc+0x178>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d82:	f7ff fa67 	bl	8003254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <pvPortMalloc+0x16a>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60fb      	str	r3, [r7, #12]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <pvPortMalloc+0x168>
	return pvReturn;
 8003da6:	69fb      	ldr	r3, [r7, #28]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	; 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20001124 	.word	0x20001124
 8003db4:	20001130 	.word	0x20001130
 8003db8:	20001128 	.word	0x20001128
 8003dbc:	2000111c 	.word	0x2000111c
 8003dc0:	2000112c 	.word	0x2000112c

08003dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d048      	beq.n	8003e68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	425b      	negs	r3, r3
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <vPortFree+0xac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <vPortFree+0x44>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60fb      	str	r3, [r7, #12]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <vPortFree+0x62>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60bb      	str	r3, [r7, #8]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <vPortFree+0xac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d019      	beq.n	8003e68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <vPortFree+0xac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e4c:	f7ff f9f4 	bl	8003238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <vPortFree+0xb0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <vPortFree+0xb0>)
 8003e5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e5e:	6938      	ldr	r0, [r7, #16]
 8003e60:	f000 f86c 	bl	8003f3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e64:	f7ff f9f6 	bl	8003254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20001130 	.word	0x20001130
 8003e74:	20001128 	.word	0x20001128

08003e78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e84:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <prvHeapInit+0xac>)
 8003e86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3307      	adds	r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0307 	bic.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <prvHeapInit+0xac>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <prvHeapInit+0xb0>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <prvHeapInit+0xb0>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <prvHeapInit+0xb4>)
 8003ed8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <prvHeapInit+0xb4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <prvHeapInit+0xb4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <prvHeapInit+0xb4>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <prvHeapInit+0xb8>)
 8003f06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <prvHeapInit+0xbc>)
 8003f0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <prvHeapInit+0xc0>)
 8003f12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000051c 	.word	0x2000051c
 8003f28:	2000111c 	.word	0x2000111c
 8003f2c:	20001124 	.word	0x20001124
 8003f30:	2000112c 	.word	0x2000112c
 8003f34:	20001128 	.word	0x20001128
 8003f38:	20001130 	.word	0x20001130

08003f3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f44:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <prvInsertBlockIntoFreeList+0xa8>)
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e002      	b.n	8003f50 <prvInsertBlockIntoFreeList+0x14>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d8f7      	bhi.n	8003f4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4413      	add	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d108      	bne.n	8003f7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d118      	bne.n	8003fc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <prvInsertBlockIntoFreeList+0xac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d00d      	beq.n	8003fba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e008      	b.n	8003fcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <prvInsertBlockIntoFreeList+0xac>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e003      	b.n	8003fcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d002      	beq.n	8003fda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	2000111c 	.word	0x2000111c
 8003fe8:	20001124 	.word	0x20001124

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	2600      	movs	r6, #0
 8003ff0:	4d0c      	ldr	r5, [pc, #48]	; (8004024 <__libc_init_array+0x38>)
 8003ff2:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	f000 f8e2 	bl	80041c4 <_init>
 8004000:	2600      	movs	r6, #0
 8004002:	4d0a      	ldr	r5, [pc, #40]	; (800402c <__libc_init_array+0x40>)
 8004004:	4c0a      	ldr	r4, [pc, #40]	; (8004030 <__libc_init_array+0x44>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f855 3b04 	ldr.w	r3, [r5], #4
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f855 3b04 	ldr.w	r3, [r5], #4
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	080042d0 	.word	0x080042d0
 8004028:	080042d0 	.word	0x080042d0
 800402c:	080042d0 	.word	0x080042d0
 8004030:	080042d4 	.word	0x080042d4

08004034 <__retarget_lock_acquire_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_release_recursive>:
 8004036:	4770      	bx	lr

08004038 <memset>:
 8004038:	4603      	mov	r3, r0
 800403a:	4402      	add	r2, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <cleanup_glue>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	460c      	mov	r4, r1
 800404c:	6809      	ldr	r1, [r1, #0]
 800404e:	4605      	mov	r5, r0
 8004050:	b109      	cbz	r1, 8004056 <cleanup_glue+0xe>
 8004052:	f7ff fff9 	bl	8004048 <cleanup_glue>
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800405e:	f000 b869 	b.w	8004134 <_free_r>
	...

08004064 <_reclaim_reent>:
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <_reclaim_reent+0xb4>)
 8004066:	b570      	push	{r4, r5, r6, lr}
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4604      	mov	r4, r0
 800406c:	4283      	cmp	r3, r0
 800406e:	d051      	beq.n	8004114 <_reclaim_reent+0xb0>
 8004070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004072:	b143      	cbz	r3, 8004086 <_reclaim_reent+0x22>
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d14a      	bne.n	8004110 <_reclaim_reent+0xac>
 800407a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	b111      	cbz	r1, 8004086 <_reclaim_reent+0x22>
 8004080:	4620      	mov	r0, r4
 8004082:	f000 f857 	bl	8004134 <_free_r>
 8004086:	6961      	ldr	r1, [r4, #20]
 8004088:	b111      	cbz	r1, 8004090 <_reclaim_reent+0x2c>
 800408a:	4620      	mov	r0, r4
 800408c:	f000 f852 	bl	8004134 <_free_r>
 8004090:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004092:	b111      	cbz	r1, 800409a <_reclaim_reent+0x36>
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f84d 	bl	8004134 <_free_r>
 800409a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800409c:	b111      	cbz	r1, 80040a4 <_reclaim_reent+0x40>
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 f848 	bl	8004134 <_free_r>
 80040a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80040a6:	b111      	cbz	r1, 80040ae <_reclaim_reent+0x4a>
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 f843 	bl	8004134 <_free_r>
 80040ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040b0:	b111      	cbz	r1, 80040b8 <_reclaim_reent+0x54>
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 f83e 	bl	8004134 <_free_r>
 80040b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80040ba:	b111      	cbz	r1, 80040c2 <_reclaim_reent+0x5e>
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 f839 	bl	8004134 <_free_r>
 80040c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80040c4:	b111      	cbz	r1, 80040cc <_reclaim_reent+0x68>
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 f834 	bl	8004134 <_free_r>
 80040cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ce:	b111      	cbz	r1, 80040d6 <_reclaim_reent+0x72>
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 f82f 	bl	8004134 <_free_r>
 80040d6:	69a3      	ldr	r3, [r4, #24]
 80040d8:	b1e3      	cbz	r3, 8004114 <_reclaim_reent+0xb0>
 80040da:	4620      	mov	r0, r4
 80040dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040de:	4798      	blx	r3
 80040e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040e2:	b1b9      	cbz	r1, 8004114 <_reclaim_reent+0xb0>
 80040e4:	4620      	mov	r0, r4
 80040e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ea:	f7ff bfad 	b.w	8004048 <cleanup_glue>
 80040ee:	5949      	ldr	r1, [r1, r5]
 80040f0:	b941      	cbnz	r1, 8004104 <_reclaim_reent+0xa0>
 80040f2:	3504      	adds	r5, #4
 80040f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040f6:	2d80      	cmp	r5, #128	; 0x80
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	d1f8      	bne.n	80040ee <_reclaim_reent+0x8a>
 80040fc:	4620      	mov	r0, r4
 80040fe:	f000 f819 	bl	8004134 <_free_r>
 8004102:	e7ba      	b.n	800407a <_reclaim_reent+0x16>
 8004104:	680e      	ldr	r6, [r1, #0]
 8004106:	4620      	mov	r0, r4
 8004108:	f000 f814 	bl	8004134 <_free_r>
 800410c:	4631      	mov	r1, r6
 800410e:	e7ef      	b.n	80040f0 <_reclaim_reent+0x8c>
 8004110:	2500      	movs	r5, #0
 8004112:	e7ef      	b.n	80040f4 <_reclaim_reent+0x90>
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	bf00      	nop
 8004118:	20000014 	.word	0x20000014

0800411c <__malloc_lock>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__malloc_lock+0x8>)
 800411e:	f7ff bf89 	b.w	8004034 <__retarget_lock_acquire_recursive>
 8004122:	bf00      	nop
 8004124:	20001134 	.word	0x20001134

08004128 <__malloc_unlock>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__malloc_unlock+0x8>)
 800412a:	f7ff bf84 	b.w	8004036 <__retarget_lock_release_recursive>
 800412e:	bf00      	nop
 8004130:	20001134 	.word	0x20001134

08004134 <_free_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4605      	mov	r5, r0
 8004138:	2900      	cmp	r1, #0
 800413a:	d040      	beq.n	80041be <_free_r+0x8a>
 800413c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004140:	1f0c      	subs	r4, r1, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfb8      	it	lt
 8004146:	18e4      	addlt	r4, r4, r3
 8004148:	f7ff ffe8 	bl	800411c <__malloc_lock>
 800414c:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <_free_r+0x8c>)
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	b933      	cbnz	r3, 8004160 <_free_r+0x2c>
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	6014      	str	r4, [r2, #0]
 8004156:	4628      	mov	r0, r5
 8004158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800415c:	f7ff bfe4 	b.w	8004128 <__malloc_unlock>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d908      	bls.n	8004176 <_free_r+0x42>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	1821      	adds	r1, r4, r0
 8004168:	428b      	cmp	r3, r1
 800416a:	bf01      	itttt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	1809      	addeq	r1, r1, r0
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	e7ed      	b.n	8004152 <_free_r+0x1e>
 8004176:	461a      	mov	r2, r3
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b10b      	cbz	r3, 8004180 <_free_r+0x4c>
 800417c:	42a3      	cmp	r3, r4
 800417e:	d9fa      	bls.n	8004176 <_free_r+0x42>
 8004180:	6811      	ldr	r1, [r2, #0]
 8004182:	1850      	adds	r0, r2, r1
 8004184:	42a0      	cmp	r0, r4
 8004186:	d10b      	bne.n	80041a0 <_free_r+0x6c>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	4401      	add	r1, r0
 800418c:	1850      	adds	r0, r2, r1
 800418e:	4283      	cmp	r3, r0
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	d1e0      	bne.n	8004156 <_free_r+0x22>
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4401      	add	r1, r0
 800419a:	6011      	str	r1, [r2, #0]
 800419c:	6053      	str	r3, [r2, #4]
 800419e:	e7da      	b.n	8004156 <_free_r+0x22>
 80041a0:	d902      	bls.n	80041a8 <_free_r+0x74>
 80041a2:	230c      	movs	r3, #12
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	e7d6      	b.n	8004156 <_free_r+0x22>
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	1821      	adds	r1, r4, r0
 80041ac:	428b      	cmp	r3, r1
 80041ae:	bf01      	itttt	eq
 80041b0:	6819      	ldreq	r1, [r3, #0]
 80041b2:	685b      	ldreq	r3, [r3, #4]
 80041b4:	1809      	addeq	r1, r1, r0
 80041b6:	6021      	streq	r1, [r4, #0]
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	6054      	str	r4, [r2, #4]
 80041bc:	e7cb      	b.n	8004156 <_free_r+0x22>
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20001138 	.word	0x20001138

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
