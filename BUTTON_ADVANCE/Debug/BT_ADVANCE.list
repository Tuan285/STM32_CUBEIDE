
BT_ADVANCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003acc  08003acc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003acc  08003acc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000070  08003b44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08003b44  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b0f  00000000  00000000  0002ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017081  00000000  00000000  0002e030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097d4  00000000  00000000  000450b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000884c2  00000000  00000000  0004e885  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  000d6dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a1c 	.word	0x08003a1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a1c 	.word	0x08003a1c

0800014c <bt_handle>:
}
__weak void bt_release_callback() {
}
__weak void bt_press_timout_callback() {
}
void bt_handle(Button_t *button) {	// GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(button->PORT, button->PIN);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	889b      	ldrh	r3, [r3, #4]
 800015c:	4619      	mov	r1, r3
 800015e:	4610      	mov	r0, r2
 8000160:	f000 ffe4 	bl	800112c <HAL_GPIO_ReadPin>
 8000164:	4603      	mov	r3, r0
 8000166:	73fb      	strb	r3, [r7, #15]
	if (state != button->btn_filter) {		/// loc nhieu nut nhan
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	799b      	ldrb	r3, [r3, #6]
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	429a      	cmp	r2, r3
 8000170:	d007      	beq.n	8000182 <bt_handle+0x36>
		button->btn_filter = state;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	7bfa      	ldrb	r2, [r7, #15]
 8000176:	719a      	strb	r2, [r3, #6]
		button->t_debounce = HAL_GetTick();
 8000178:	f000 fcb6 	bl	8000ae8 <HAL_GetTick>
 800017c:	4602      	mov	r2, r0
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	60da      	str	r2, [r3, #12]
	}
	if (HAL_GetTick() - button->t_debounce >= 15) {		/// het khoang thoi gian nhieu
 8000182:	f000 fcb1 	bl	8000ae8 <HAL_GetTick>
 8000186:	4602      	mov	r2, r0
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	68db      	ldr	r3, [r3, #12]
 800018c:	1ad3      	subs	r3, r2, r3
 800018e:	2b0e      	cmp	r3, #14
 8000190:	d91d      	bls.n	80001ce <bt_handle+0x82>
		button->btn_current = state;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	7bfa      	ldrb	r2, [r7, #15]
 8000196:	721a      	strb	r2, [r3, #8]
		if (button->btn_current != button->btn_last) {			// dang nhan
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7a1a      	ldrb	r2, [r3, #8]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	79db      	ldrb	r3, [r3, #7]
 80001a0:	429a      	cmp	r2, r3
 80001a2:	d014      	beq.n	80001ce <bt_handle+0x82>
			if (button->btn_current == 0) {
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	7a1b      	ldrb	r3, [r3, #8]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d10a      	bne.n	80001c2 <bt_handle+0x76>
				button->time_start_press = HAL_GetTick();
 80001ac:	f000 fc9c 	bl	8000ae8 <HAL_GetTick>
 80001b0:	4602      	mov	r2, r0
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	611a      	str	r2, [r3, #16]
				button->is_press = 1;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2201      	movs	r2, #1
 80001ba:	751a      	strb	r2, [r3, #20]
				bt_press_callback();
 80001bc:	f000 f892 	bl	80002e4 <bt_press_callback>
 80001c0:	e001      	b.n	80001c6 <bt_handle+0x7a>
			} else {
				bt_release_callback();
 80001c2:	f000 f83f 	bl	8000244 <bt_release_callback>
			}
			button->btn_last = button->btn_current;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	7a1a      	ldrb	r2, [r3, #8]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	71da      	strb	r2, [r3, #7]
		}
	}
	if (button->is_press && HAL_GetTick() - button->time_start_press >= 3000) {
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	7d1b      	ldrb	r3, [r3, #20]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d00e      	beq.n	80001f4 <bt_handle+0xa8>
 80001d6:	f000 fc87 	bl	8000ae8 <HAL_GetTick>
 80001da:	4602      	mov	r2, r0
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	691b      	ldr	r3, [r3, #16]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d904      	bls.n	80001f4 <bt_handle+0xa8>
		button->is_press = 0;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
		bt_press_timout_callback();
 80001f0:	f000 f850 	bl	8000294 <bt_press_timout_callback>
	}
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <Button_Init>:
void Button_Init(Button_t *button, GPIO_TypeDef *PORT, uint16_t PIN) {
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	4613      	mov	r3, r2
 8000208:	80fb      	strh	r3, [r7, #6]
	button->PORT = PORT;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	601a      	str	r2, [r3, #0]
	button->PIN = PIN;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	88fa      	ldrh	r2, [r7, #6]
 8000214:	809a      	strh	r2, [r3, #4]
	button->btn_filter = 1;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2201      	movs	r2, #1
 800021a:	719a      	strb	r2, [r3, #6]
	button->btn_last = 1;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2201      	movs	r2, #1
 8000220:	71da      	strb	r2, [r3, #7]
	button->btn_current = 0;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2200      	movs	r2, #0
 8000226:	721a      	strb	r2, [r3, #8]
	button->t_debounce = 0;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
	button->time_start_press = 0;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
	button->is_press = 0;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2200      	movs	r2, #0
 8000238:	751a      	strb	r2, [r3, #20]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <bt_release_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
Button_t bt1;
uint32_t t_prev;
uint32_t press, release, press_timeout;
void bt_release_callback(Button_t *button) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	if (button == &bt1) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <bt_release_callback+0x3c>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d111      	bne.n	8000278 <bt_release_callback+0x34>
		release++;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <bt_release_callback+0x40>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <bt_release_callback+0x40>)
 800025c:	6013      	str	r3, [r2, #0]
		static uint32_t mess[30];
		sprintf(mess, "Release : %d\r\n", release);
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <bt_release_callback+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4908      	ldr	r1, [pc, #32]	; (8000288 <bt_release_callback+0x44>)
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <bt_release_callback+0x48>)
 8000268:	f002 ffc6 	bl	80031f8 <siprintf>
		HAL_UART_Transmit(&huart1, mess, sizeof(mess), 100);
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	2278      	movs	r2, #120	; 0x78
 8000270:	4906      	ldr	r1, [pc, #24]	; (800028c <bt_release_callback+0x48>)
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <bt_release_callback+0x4c>)
 8000274:	f002 fb01 	bl	800287a <HAL_UART_Transmit>
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	200002e4 	.word	0x200002e4
 8000284:	20000208 	.word	0x20000208
 8000288:	08003a34 	.word	0x08003a34
 800028c:	2000008c 	.word	0x2000008c
 8000290:	2000020c 	.word	0x2000020c

08000294 <bt_press_timout_callback>:
void bt_press_timout_callback(Button_t *button) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	if (button == &bt1) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <bt_press_timout_callback+0x3c>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d111      	bne.n	80002c8 <bt_press_timout_callback+0x34>
		press_timeout++;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <bt_press_timout_callback+0x40>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <bt_press_timout_callback+0x40>)
 80002ac:	6013      	str	r3, [r2, #0]
		static uint32_t mess[30];
		sprintf(mess, "Press timeout : %d\r\n", press_timeout);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <bt_press_timout_callback+0x40>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4908      	ldr	r1, [pc, #32]	; (80002d8 <bt_press_timout_callback+0x44>)
 80002b6:	4809      	ldr	r0, [pc, #36]	; (80002dc <bt_press_timout_callback+0x48>)
 80002b8:	f002 ff9e 	bl	80031f8 <siprintf>
		HAL_UART_Transmit(&huart1, mess, sizeof(mess), 100);
 80002bc:	2364      	movs	r3, #100	; 0x64
 80002be:	2278      	movs	r2, #120	; 0x78
 80002c0:	4906      	ldr	r1, [pc, #24]	; (80002dc <bt_press_timout_callback+0x48>)
 80002c2:	4807      	ldr	r0, [pc, #28]	; (80002e0 <bt_press_timout_callback+0x4c>)
 80002c4:	f002 fad9 	bl	800287a <HAL_UART_Transmit>
	}
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	200002e4 	.word	0x200002e4
 80002d4:	20000200 	.word	0x20000200
 80002d8:	08003a44 	.word	0x08003a44
 80002dc:	20000104 	.word	0x20000104
 80002e0:	2000020c 	.word	0x2000020c

080002e4 <bt_press_callback>:
void bt_press_callback(Button_t *button) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	if (button == &bt1) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <bt_press_callback+0x3c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d111      	bne.n	8000318 <bt_press_callback+0x34>
		press++;
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <bt_press_callback+0x40>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <bt_press_callback+0x40>)
 80002fc:	6013      	str	r3, [r2, #0]
		static uint32_t mess[30];
		sprintf(mess, "Press : %d\r\n", press);
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <bt_press_callback+0x40>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	4908      	ldr	r1, [pc, #32]	; (8000328 <bt_press_callback+0x44>)
 8000306:	4809      	ldr	r0, [pc, #36]	; (800032c <bt_press_callback+0x48>)
 8000308:	f002 ff76 	bl	80031f8 <siprintf>
		HAL_UART_Transmit(&huart1, mess, sizeof(mess), 100);
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2278      	movs	r2, #120	; 0x78
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <bt_press_callback+0x48>)
 8000312:	4807      	ldr	r0, [pc, #28]	; (8000330 <bt_press_callback+0x4c>)
 8000314:	f002 fab1 	bl	800287a <HAL_UART_Transmit>
	}
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200002e4 	.word	0x200002e4
 8000324:	20000298 	.word	0x20000298
 8000328:	08003a5c 	.word	0x08003a5c
 800032c:	2000017c 	.word	0x2000017c
 8000330:	2000020c 	.word	0x2000020c

08000334 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000338:	f000 fb7e 	bl	8000a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800033c:	f000 f82a 	bl	8000394 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000340:	f000 f982 	bl	8000648 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000344:	f000 f956 	bl	80005f4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000348:	f000 f86a 	bl	8000420 <MX_TIM1_Init>
	MX_TIM2_Init();
 800034c:	f000 f8dc 	bl	8000508 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	Button_Init(&bt1, BT_GPIO_Port, BT_Pin);
 8000350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <main+0x54>)
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <main+0x58>)
 8000358:	f7ff ff50 	bl	80001fc <Button_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		bt_handle(&bt1);
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <main+0x58>)
 800035e:	f7ff fef5 	bl	800014c <bt_handle>
		if (HAL_GetTick() - t_prev >= 200) {
 8000362:	f000 fbc1 	bl	8000ae8 <HAL_GetTick>
 8000366:	4602      	mov	r2, r0
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <main+0x5c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	2bc7      	cmp	r3, #199	; 0xc7
 8000370:	d9f4      	bls.n	800035c <main+0x28>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <main+0x54>)
 8000378:	f000 ff07 	bl	800118a <HAL_GPIO_TogglePin>
			t_prev = HAL_GetTick();
 800037c:	f000 fbb4 	bl	8000ae8 <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <main+0x5c>)
 8000384:	601a      	str	r2, [r3, #0]
		bt_handle(&bt1);
 8000386:	e7e9      	b.n	800035c <main+0x28>
 8000388:	40011000 	.word	0x40011000
 800038c:	200002e4 	.word	0x200002e4
 8000390:	20000204 	.word	0x20000204

08000394 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 ff20 	bl	80031e8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003be:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	2301      	movs	r3, #1
 80003c6:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c8:	2302      	movs	r3, #2
 80003ca:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 feed 	bl	80011bc <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x58>
	Error_Handler();
 80003e8:	f000 f986 	bl	80006f8 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003ec:	230f      	movs	r3, #15
 80003ee:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2302      	movs	r3, #2
 80003f2:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fc:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f001 f958 	bl	80016bc <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x82>
	Error_Handler();
 8000412:	f000 f971 	bl	80006f8 <Error_Handler>
}
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	; 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM1_Init 0 */

/* USER CODE END TIM1_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
TIM_IC_InitTypeDef sConfigIC = { 0 };
 800043e:	463b      	mov	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]

/* USER CODE BEGIN TIM1_Init 1 */

/* USER CODE END TIM1_Init 1 */
htim1.Instance = TIM1;
 800044a:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <MX_TIM1_Init+0xe0>)
 800044c:	4a2d      	ldr	r2, [pc, #180]	; (8000504 <MX_TIM1_Init+0xe4>)
 800044e:	601a      	str	r2, [r3, #0]
htim1.Init.Prescaler = 0;
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
htim1.Init.Period = 65535;
 800045c:	4b28      	ldr	r3, [pc, #160]	; (8000500 <MX_TIM1_Init+0xe0>)
 800045e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000462:	60da      	str	r2, [r3, #12]
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
htim1.Init.RepetitionCounter = 0;
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <MX_TIM1_Init+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000470:	4b23      	ldr	r3, [pc, #140]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000476:	4822      	ldr	r0, [pc, #136]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000478:	f001 fabc 	bl	80019f4 <HAL_TIM_Base_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0x66>
	Error_Handler();
 8000482:	f000 f939 	bl	80006f8 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048a:	61bb      	str	r3, [r7, #24]
if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800048c:	f107 0318 	add.w	r3, r7, #24
 8000490:	4619      	mov	r1, r3
 8000492:	481b      	ldr	r0, [pc, #108]	; (8000500 <MX_TIM1_Init+0xe0>)
 8000494:	f001 fd00 	bl	8001e98 <HAL_TIM_ConfigClockSource>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x82>
	Error_Handler();
 800049e:	f000 f92b 	bl	80006f8 <Error_Handler>
}
if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80004a2:	4817      	ldr	r0, [pc, #92]	; (8000500 <MX_TIM1_Init+0xe0>)
 80004a4:	f001 fb4d 	bl	8001b42 <HAL_TIM_IC_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x92>
	Error_Handler();
 80004ae:	f000 f923 	bl	80006f8 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	480f      	ldr	r0, [pc, #60]	; (8000500 <MX_TIM1_Init+0xe0>)
 80004c2:	f002 f92f 	bl	8002724 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0xb0>
	Error_Handler();
 80004cc:	f000 f914 	bl	80006f8 <Error_Handler>
}
sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004d0:	2300      	movs	r3, #0
 80004d2:	603b      	str	r3, [r7, #0]
sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004d4:	2301      	movs	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
sConfigIC.ICFilter = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <MX_TIM1_Init+0xe0>)
 80004e8:	f001 fb83 	bl	8001bf2 <HAL_TIM_IC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0xd6>
	Error_Handler();
 80004f2:	f000 f901 	bl	80006f8 <Error_Handler>
}
/* USER CODE BEGIN TIM1_Init 2 */

/* USER CODE END TIM1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000250 	.word	0x20000250
 8000504:	40012c00 	.word	0x40012c00

08000508 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800051c:	f107 0320 	add.w	r3, r7, #32
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <MX_TIM2_Init+0xe8>)
 800053a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053e:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 0;
 8000540:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_TIM2_Init+0xe8>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <MX_TIM2_Init+0xe8>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 65535;
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <MX_TIM2_Init+0xe8>)
 800054e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000552:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_TIM2_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_TIM2_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000560:	4823      	ldr	r0, [pc, #140]	; (80005f0 <MX_TIM2_Init+0xe8>)
 8000562:	f001 fa47 	bl	80019f4 <HAL_TIM_Base_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x68>
	Error_Handler();
 800056c:	f000 f8c4 	bl	80006f8 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057a:	4619      	mov	r1, r3
 800057c:	481c      	ldr	r0, [pc, #112]	; (80005f0 <MX_TIM2_Init+0xe8>)
 800057e:	f001 fc8b 	bl	8001e98 <HAL_TIM_ConfigClockSource>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x84>
	Error_Handler();
 8000588:	f000 f8b6 	bl	80006f8 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800058c:	4818      	ldr	r0, [pc, #96]	; (80005f0 <MX_TIM2_Init+0xe8>)
 800058e:	f001 fa80 	bl	8001a92 <HAL_TIM_PWM_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0x94>
	Error_Handler();
 8000598:	f000 f8ae 	bl	80006f8 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <MX_TIM2_Init+0xe8>)
 80005ac:	f002 f8ba 	bl	8002724 <HAL_TIMEx_MasterConfigSynchronization>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0xb2>
	Error_Handler();
 80005b6:	f000 f89f 	bl	80006f8 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ba:	2360      	movs	r3, #96	; 0x60
 80005bc:	607b      	str	r3, [r7, #4]
sConfigOC.Pulse = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <MX_TIM2_Init+0xe8>)
 80005d2:	f001 fba3 	bl	8001d1c <HAL_TIM_PWM_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0xd8>
	Error_Handler();
 80005dc:	f000 f88c 	bl	80006f8 <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */
HAL_TIM_MspPostInit(&htim2);
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <MX_TIM2_Init+0xe8>)
 80005e2:	f000 f911 	bl	8000808 <HAL_TIM_MspPostInit>

}
 80005e6:	bf00      	nop
 80005e8:	3738      	adds	r7, #56	; 0x38
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000029c 	.word	0x2000029c

080005f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
/* USER CODE END USART1_Init 0 */

/* USER CODE BEGIN USART1_Init 1 */

/* USER CODE END USART1_Init 1 */
huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 9600;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000604:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart1) != HAL_OK) {
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f002 f8d8 	bl	80027e0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
	Error_Handler();
 8000636:	f000 f85f 	bl	80006f8 <Error_Handler>
}
/* USER CODE BEGIN USART1_Init 2 */

/* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000020c 	.word	0x2000020c
 8000644:	40013800 	.word	0x40013800

08000648 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xac>)
 80006ac:	f000 fd55 	bl	800115a <HAL_GPIO_WritePin>

/*Configure GPIO pin : LED_Pin */
GPIO_InitStruct.Pin = LED_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <MX_GPIO_Init+0xac>)
 80006ca:	f000 fbd5 	bl	8000e78 <HAL_GPIO_Init>

/*Configure GPIO pin : BT_Pin */
GPIO_InitStruct.Pin = BT_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BT_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xac>)
 80006e4:	f000 fbc8 	bl	8000e78 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40011000 	.word	0x40011000

080006f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80006fe:	e7fe      	b.n	80006fe <Error_Handler+0x6>

08000700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_MspInit+0x5c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x5c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x5c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_MspInit+0x60>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_MspInit+0x60>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000

08000764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0318 	add.w	r3, r7, #24
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <HAL_TIM_Base_MspInit+0x98>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d125      	bne.n	80007d0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 800078a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4619      	mov	r1, r3
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <HAL_TIM_Base_MspInit+0xa0>)
 80007ca:	f000 fb55 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007ce:	e010      	b.n	80007f2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d8:	d10b      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_TIM_Base_MspInit+0x9c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40012c00 	.word	0x40012c00
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800

08000808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000826:	d117      	bne.n	8000858 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_TIM_MspPostInit+0x58>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_TIM_MspPostInit+0x58>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_TIM_MspPostInit+0x58>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <HAL_TIM_MspPostInit+0x5c>)
 8000854:	f000 fb10 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a20      	ldr	r2, [pc, #128]	; (8000904 <HAL_UART_MspInit+0x9c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d139      	bne.n	80008fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <HAL_UART_MspInit+0xa0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <HAL_UART_MspInit+0xa0>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_UART_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_UART_MspInit+0xa0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <HAL_UART_MspInit+0xa0>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_UART_MspInit+0xa0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <HAL_UART_MspInit+0xa4>)
 80008ce:	f000 fad3 	bl	8000e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_UART_MspInit+0xa4>)
 80008e8:	f000 fac6 	bl	8000e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2025      	movs	r0, #37	; 0x25
 80008f2:	f000 f9da 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f6:	2025      	movs	r0, #37	; 0x25
 80008f8:	f000 f9f3 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 f8b5 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <USART1_IRQHandler+0x10>)
 8000966:	f002 f81b 	bl	80029a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000020c 	.word	0x2000020c

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f002 fbf6 	bl	8003194 <__errno>
 80009a8:	4602      	mov	r2, r0
 80009aa:	230c      	movs	r3, #12
 80009ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20005000 	.word	0x20005000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200001f4 	.word	0x200001f4
 80009dc:	20000308 	.word	0x20000308

080009e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffe5 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 fbc3 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fc8b 	bl	8000334 <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a28:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 8000a2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a30:	20000304 	.word	0x20000304

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f923 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fe54 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f93b 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f903 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200002fc 	.word	0x200002fc

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	200002fc 	.word	0x200002fc

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff2d 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff42 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff35 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d008      	beq.n	8000d3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e020      	b.n	8000d80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020e 	bic.w	r2, r2, #14
 8000d4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d005      	beq.n	8000dae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e051      	b.n	8000e52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 020e 	bic.w	r2, r2, #14
 8000dbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <HAL_DMA_Abort_IT+0xd0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d029      	beq.n	8000e2c <HAL_DMA_Abort_IT+0xa0>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <HAL_DMA_Abort_IT+0xd4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d022      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x9c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_DMA_Abort_IT+0xd8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d01a      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x96>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_DMA_Abort_IT+0xdc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d012      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x90>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <HAL_DMA_Abort_IT+0xe0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00a      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x8a>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <HAL_DMA_Abort_IT+0xe4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d102      	bne.n	8000e10 <HAL_DMA_Abort_IT+0x84>
 8000e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e0e:	e00e      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e14:	e00b      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1a:	e008      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	e005      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e26:	e002      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e28:	2310      	movs	r3, #16
 8000e2a:	e000      	b.n	8000e2e <HAL_DMA_Abort_IT+0xa2>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_DMA_Abort_IT+0xe8>)
 8000e30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	4798      	blx	r3
    } 
  }
  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40020008 	.word	0x40020008
 8000e60:	4002001c 	.word	0x4002001c
 8000e64:	40020030 	.word	0x40020030
 8000e68:	40020044 	.word	0x40020044
 8000e6c:	40020058 	.word	0x40020058
 8000e70:	4002006c 	.word	0x4002006c
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b08b      	sub	sp, #44	; 0x2c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e127      	b.n	80010dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8116 	bne.w	80010d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d034      	beq.n	8000f1c <HAL_GPIO_Init+0xa4>
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d80d      	bhi.n	8000ed2 <HAL_GPIO_Init+0x5a>
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d02b      	beq.n	8000f12 <HAL_GPIO_Init+0x9a>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d804      	bhi.n	8000ec8 <HAL_GPIO_Init+0x50>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d031      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d01c      	beq.n	8000f00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec6:	e048      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d043      	beq.n	8000f54 <HAL_GPIO_Init+0xdc>
 8000ecc:	2b11      	cmp	r3, #17
 8000ece:	d01b      	beq.n	8000f08 <HAL_GPIO_Init+0x90>
          break;
 8000ed0:	e043      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ed2:	4a89      	ldr	r2, [pc, #548]	; (80010f8 <HAL_GPIO_Init+0x280>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d026      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
 8000ed8:	4a87      	ldr	r2, [pc, #540]	; (80010f8 <HAL_GPIO_Init+0x280>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d806      	bhi.n	8000eec <HAL_GPIO_Init+0x74>
 8000ede:	4a87      	ldr	r2, [pc, #540]	; (80010fc <HAL_GPIO_Init+0x284>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d020      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
 8000ee4:	4a86      	ldr	r2, [pc, #536]	; (8001100 <HAL_GPIO_Init+0x288>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d01d      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
          break;
 8000eea:	e036      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eec:	4a85      	ldr	r2, [pc, #532]	; (8001104 <HAL_GPIO_Init+0x28c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
 8000ef2:	4a85      	ldr	r2, [pc, #532]	; (8001108 <HAL_GPIO_Init+0x290>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d016      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
 8000ef8:	4a84      	ldr	r2, [pc, #528]	; (800110c <HAL_GPIO_Init+0x294>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0xae>
          break;
 8000efe:	e02c      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e028      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e023      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	3308      	adds	r3, #8
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e01e      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	330c      	adds	r3, #12
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e019      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e012      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d105      	bne.n	8000f48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	611a      	str	r2, [r3, #16]
          break;
 8000f46:	e008      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	615a      	str	r2, [r3, #20]
          break;
 8000f52:	e002      	b.n	8000f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2bff      	cmp	r3, #255	; 0xff
 8000f5e:	d801      	bhi.n	8000f64 <HAL_GPIO_Init+0xec>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	e001      	b.n	8000f68 <HAL_GPIO_Init+0xf0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3304      	adds	r3, #4
 8000f68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2bff      	cmp	r3, #255	; 0xff
 8000f6e:	d802      	bhi.n	8000f76 <HAL_GPIO_Init+0xfe>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x104>
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	210f      	movs	r1, #15
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	6a39      	ldr	r1, [r7, #32]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	431a      	orrs	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8096 	beq.w	80010d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <HAL_GPIO_Init+0x298>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a58      	ldr	r2, [pc, #352]	; (8001110 <HAL_GPIO_Init+0x298>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x298>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc2:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x29c>)
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <HAL_GPIO_Init+0x2a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x19e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4a      	ldr	r2, [pc, #296]	; (800111c <HAL_GPIO_Init+0x2a4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x19a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a49      	ldr	r2, [pc, #292]	; (8001120 <HAL_GPIO_Init+0x2a8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x196>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x2ac>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x192>
 8001006:	2303      	movs	r3, #3
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x1a0>
 800100a:	2304      	movs	r3, #4
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x1a0>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x1a0>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x1a0>
 8001016:	2300      	movs	r3, #0
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001028:	493a      	ldr	r1, [pc, #232]	; (8001114 <HAL_GPIO_Init+0x29c>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001042:	4b39      	ldr	r3, [pc, #228]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4938      	ldr	r1, [pc, #224]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4933      	ldr	r1, [pc, #204]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 800105a:	4013      	ands	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	492e      	ldr	r1, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	604b      	str	r3, [r1, #4]
 8001076:	e006      	b.n	8001086 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	43db      	mvns	r3, r3
 8001080:	4929      	ldr	r1, [pc, #164]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001082:	4013      	ands	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4924      	ldr	r1, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	491f      	ldr	r1, [pc, #124]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	491a      	ldr	r1, [pc, #104]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60cb      	str	r3, [r1, #12]
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4915      	ldr	r1, [pc, #84]	; (8001128 <HAL_GPIO_Init+0x2b0>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	fa22 f303 	lsr.w	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f47f aed0 	bne.w	8000e8c <HAL_GPIO_Init+0x14>
  }
}
 80010ec:	bf00      	nop
 80010ee:	372c      	adds	r7, #44	; 0x2c
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10110000 	.word	0x10110000
 8001100:	10120000 	.word	0x10120000
 8001104:	10310000 	.word	0x10310000
 8001108:	10320000 	.word	0x10320000
 800110c:	10220000 	.word	0x10220000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116a:	787b      	ldrb	r3, [r7, #1]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001176:	e003      	b.n	8001180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	611a      	str	r2, [r3, #16]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800119c:	887a      	ldrh	r2, [r7, #2]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	041a      	lsls	r2, r3, #16
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	400b      	ands	r3, r1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e26c      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8087 	beq.w	80012ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d00c      	beq.n	8001202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d112      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
 80011f4:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d10b      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d06c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x12c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d168      	bne.n	80012e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e246      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x76>
 8001224:	4b80      	ldr	r3, [pc, #512]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a7f      	ldr	r2, [pc, #508]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e02e      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x98>
 800123a:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b78      	ldr	r3, [pc, #480]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a77      	ldr	r2, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0xbc>
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a71      	ldr	r2, [pc, #452]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001278:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc26 	bl	8000ae8 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc22 	bl	8000ae8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1fa      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe4>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc12 	bl	8000ae8 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc0e 	bl	8000ae8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1e6      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x10c>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1ba      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4939      	ldr	r1, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fbc7 	bl	8000ae8 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fbc3 	bl	8000ae8 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e19b      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fba6 	bl	8000ae8 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fba2 	bl	8000ae8 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e17a      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03a      	beq.n	8001440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d019      	beq.n	8001406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb86 	bl	8000ae8 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb82 	bl	8000ae8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e15a      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 fada 	bl	80019b8 <RCC_Delay>
 8001404:	e01c      	b.n	8001440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fb6c 	bl	8000ae8 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001412:	e00f      	b.n	8001434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fb68 	bl	8000ae8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d908      	bls.n	8001434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e140      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	42420000 	.word	0x42420000
 8001430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b9e      	ldr	r3, [pc, #632]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e9      	bne.n	8001414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a6 	beq.w	800159a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10d      	bne.n	800147a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b94      	ldr	r3, [pc, #592]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a93      	ldr	r2, [pc, #588]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b8e      	ldr	r3, [pc, #568]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a8a      	ldr	r2, [pc, #552]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb29 	bl	8000ae8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fb25 	bl	8000ae8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0fd      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x312>
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e02d      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x334>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	e01c      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x356>
 80014f8:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fad9 	bl	8000ae8 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fad5 	bl	8000ae8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0ab      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x37e>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fac3 	bl	8000ae8 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fabf 	bl	8000ae8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e095      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8081 	beq.w	80016a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d061      	beq.n	8001674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d146      	bne.n	8001646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fa93 	bl	8000ae8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fa8f 	bl	8000ae8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e067      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d108      	bne.n	8001600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	492d      	ldr	r1, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a19      	ldr	r1, [r3, #32]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	430b      	orrs	r3, r1
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fa63 	bl	8000ae8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fa5f 	bl	8000ae8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e037      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x46a>
 8001644:	e02f      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa4c 	bl	8000ae8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fa48 	bl	8000ae8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x498>
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420060 	.word	0x42420060

080016bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0d0      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0207 	bic.w	r2, r3, #7
 80016e6:	4965      	ldr	r1, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800173a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d040      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e073      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06b      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4936      	ldr	r1, [pc, #216]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f99c 	bl	8000ae8 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f998 	bl	8000ae8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e053      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d210      	bcs.n	800180c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0207 	bic.w	r2, r3, #7
 80017f2:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	fa21 f303 	lsr.w	r3, r1, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1cc>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f8fa 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
 8001884:	08003a80 	.word	0x08003a80
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b490      	push	{r4, r7}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001898:	1d3c      	adds	r4, r7, #4
 800189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x46>
 80018ce:	e02d      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	e02d      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018e2:	4413      	add	r3, r2
 80018e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c5b      	lsrs	r3, r3, #17
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001902:	4413      	add	r3, r2
 8001904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 800190e:	fb02 f203 	mul.w	r2, r2, r3
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	e004      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	623b      	str	r3, [r7, #32]
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 800192e:	623b      	str	r3, [r7, #32]
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6a3b      	ldr	r3, [r7, #32]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bc90      	pop	{r4, r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	08003a6c 	.word	0x08003a6c
 8001944:	08003a7c 	.word	0x08003a7c
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	003d0900 	.word	0x003d0900

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_RCC_GetHCLKFreq+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff2 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001970:	4601      	mov	r1, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	08003a90 	.word	0x08003a90

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffde 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0adb      	lsrs	r3, r3, #11
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08003a90 	.word	0x08003a90

080019b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <RCC_Delay+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <RCC_Delay+0x38>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a5b      	lsrs	r3, r3, #9
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d4:	bf00      	nop
  }
  while (Delay --);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f9      	bne.n	80019d4 <RCC_Delay+0x1c>
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e041      	b.n	8001a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fea2 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f000 fae8 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e041      	b.n	8001b28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d106      	bne.n	8001abe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f839 	bl	8001b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f000 fa99 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e041      	b.n	8001bd8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d106      	bne.n	8001b6e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f839 	bl	8001be0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f000 fa41 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_IC_ConfigChannel+0x1a>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e082      	b.n	8001d12 <HAL_TIM_IC_ConfigChannel+0x120>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11b      	bne.n	8001c52 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f000 fbd7 	bl	80023dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 020c 	bic.w	r2, r2, #12
 8001c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6999      	ldr	r1, [r3, #24]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	e05a      	b.n	8001d08 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11c      	bne.n	8001c92 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f000 fc40 	bl	80024ec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6999      	ldr	r1, [r3, #24]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	021a      	lsls	r2, r3, #8
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	e03a      	b.n	8001d08 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d11b      	bne.n	8001cd0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f000 fc8b 	bl	80025c2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020c 	bic.w	r2, r2, #12
 8001cba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69d9      	ldr	r1, [r3, #28]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	61da      	str	r2, [r3, #28]
 8001cce:	e01b      	b.n	8001d08 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f000 fcaa 	bl	8002638 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cf2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69d9      	ldr	r1, [r3, #28]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	021a      	lsls	r2, r3, #8
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0ac      	b.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	f200 809f 	bhi.w	8001e84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d81 	.word	0x08001d81
 8001d50:	08001e85 	.word	0x08001e85
 8001d54:	08001e85 	.word	0x08001e85
 8001d58:	08001e85 	.word	0x08001e85
 8001d5c:	08001dc1 	.word	0x08001dc1
 8001d60:	08001e85 	.word	0x08001e85
 8001d64:	08001e85 	.word	0x08001e85
 8001d68:	08001e85 	.word	0x08001e85
 8001d6c:	08001e03 	.word	0x08001e03
 8001d70:	08001e85 	.word	0x08001e85
 8001d74:	08001e85 	.word	0x08001e85
 8001d78:	08001e85 	.word	0x08001e85
 8001d7c:	08001e43 	.word	0x08001e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f9a0 	bl	80020cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0208 	orr.w	r2, r2, #8
 8001d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6999      	ldr	r1, [r3, #24]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	619a      	str	r2, [r3, #24]
      break;
 8001dbe:	e062      	b.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f9e6 	bl	8002198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6999      	ldr	r1, [r3, #24]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	021a      	lsls	r2, r3, #8
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	619a      	str	r2, [r3, #24]
      break;
 8001e00:	e041      	b.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fa2f 	bl	800226c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0208 	orr.w	r2, r2, #8
 8001e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0204 	bic.w	r2, r2, #4
 8001e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69d9      	ldr	r1, [r3, #28]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	61da      	str	r2, [r3, #28]
      break;
 8001e40:	e021      	b.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fa79 	bl	8002340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69d9      	ldr	r1, [r3, #28]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	61da      	str	r2, [r3, #28]
      break;
 8001e82:	e000      	b.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_ConfigClockSource+0x18>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0a6      	b.n	8001ffe <HAL_TIM_ConfigClockSource+0x166>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d067      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0x120>
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d80b      	bhi.n	8001f04 <HAL_TIM_ConfigClockSource+0x6c>
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d073      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d802      	bhi.n	8001efa <HAL_TIM_ConfigClockSource+0x62>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06f      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ef8:	e078      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d06c      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
 8001efe:	2b30      	cmp	r3, #48	; 0x30
 8001f00:	d06a      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f02:	e073      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d00d      	beq.n	8001f24 <HAL_TIM_ConfigClockSource+0x8c>
 8001f08:	2b70      	cmp	r3, #112	; 0x70
 8001f0a:	d804      	bhi.n	8001f16 <HAL_TIM_ConfigClockSource+0x7e>
 8001f0c:	2b50      	cmp	r3, #80	; 0x50
 8001f0e:	d033      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0xe0>
 8001f10:	2b60      	cmp	r3, #96	; 0x60
 8001f12:	d041      	beq.n	8001f98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f14:	e06a      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d066      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x152>
 8001f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f20:	d017      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f22:	e063      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f000 fbd6 	bl	80026e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]
      break;
 8001f50:	e04c      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f000 fbbf 	bl	80026e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f74:	609a      	str	r2, [r3, #8]
      break;
 8001f76:	e039      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f000 fa83 	bl	8002490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2150      	movs	r1, #80	; 0x50
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fb8d 	bl	80026b0 <TIM_ITRx_SetConfig>
      break;
 8001f96:	e029      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f000 fadd 	bl	8002564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2160      	movs	r1, #96	; 0x60
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fb7d 	bl	80026b0 <TIM_ITRx_SetConfig>
      break;
 8001fb6:	e019      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f000 fa63 	bl	8002490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2140      	movs	r1, #64	; 0x40
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fb6d 	bl	80026b0 <TIM_ITRx_SetConfig>
      break;
 8001fd6:	e009      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fb64 	bl	80026b0 <TIM_ITRx_SetConfig>
        break;
 8001fe8:	e000      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00b      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d007      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <TIM_Base_SetConfig+0xbc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d108      	bne.n	800204a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <TIM_Base_SetConfig+0xbc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800

080020cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f023 0201 	bic.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f023 0302 	bic.w	r3, r3, #2
 8002114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <TIM_OC1_SetConfig+0xc8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d10c      	bne.n	8002142 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f023 0308 	bic.w	r3, r3, #8
 800212e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a13      	ldr	r2, [pc, #76]	; (8002194 <TIM_OC1_SetConfig+0xc8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d111      	bne.n	800216e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	621a      	str	r2, [r3, #32]
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00

08002198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f023 0210 	bic.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f023 0320 	bic.w	r3, r3, #32
 80021e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_OC2_SetConfig+0xd0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10d      	bne.n	8002214 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_OC2_SetConfig+0xd0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d113      	bne.n	8002244 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800222a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	621a      	str	r2, [r3, #32]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00

0800226c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <TIM_OC3_SetConfig+0xd0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10d      	bne.n	80022e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <TIM_OC3_SetConfig+0xd0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d113      	bne.n	8002316 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	621a      	str	r2, [r3, #32]
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00

08002340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800238a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	031b      	lsls	r3, r3, #12
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <TIM_OC4_SetConfig+0x98>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d109      	bne.n	80023b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40012c00 	.word	0x40012c00

080023dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f023 0201 	bic.w	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <TIM_TI1_SetConfig+0xa8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00b      	beq.n	8002422 <TIM_TI1_SetConfig+0x46>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d007      	beq.n	8002422 <TIM_TI1_SetConfig+0x46>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <TIM_TI1_SetConfig+0xac>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <TIM_TI1_SetConfig+0x46>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <TIM_TI1_SetConfig+0xb0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <TIM_TI1_SetConfig+0x4a>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <TIM_TI1_SetConfig+0x4c>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e003      	b.n	8002446 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	b2db      	uxtb	r3, r3
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f023 030a 	bic.w	r3, r3, #10
 8002460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 030a 	and.w	r3, r3, #10
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800

08002490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f023 0201 	bic.w	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f023 030a 	bic.w	r3, r3, #10
 80024cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0210 	bic.w	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800252a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	031b      	lsls	r3, r3, #12
 8002530:	b29b      	uxth	r3, r3
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800253e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f023 0210 	bic.w	r2, r3, #16
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800258e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	621a      	str	r2, [r3, #32]
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b087      	sub	sp, #28
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	b2db      	uxtb	r3, r3
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002612:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002676:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	031b      	lsls	r3, r3, #12
 800267c:	b29b      	uxth	r3, r3
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800268a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f043 0307 	orr.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	609a      	str	r2, [r3, #8]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	431a      	orrs	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002738:	2302      	movs	r3, #2
 800273a:	e046      	b.n	80027ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d009      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10c      	bne.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800

080027e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e03f      	b.n	8002872 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f82e 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fc27 	bl	8003078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d17c      	bne.n	8002994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_Transmit+0x2c>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e075      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x3e>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e06e      	b.n	8002996 <HAL_UART_Transmit+0x11c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ce:	f7fe f90b 	bl	8000ae8 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x82>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800290c:	e02a      	b.n	8002964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fa13 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e007      	b.n	8002956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1cf      	bne.n	800290e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f9e3 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_UART_IRQHandler+0x52>
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa9b 	bl	8002f26 <UART_Receive_IT>
      return;
 80029f0:	e17c      	b.n	8002cec <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80b1 	beq.w	8002b5c <HAL_UART_IRQHandler+0x1bc>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_UART_IRQHandler+0x70>
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80a6 	beq.w	8002b5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_UART_IRQHandler+0x90>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_UART_IRQHandler+0xb0>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_UART_IRQHandler+0xd0>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0204 	orr.w	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <HAL_UART_IRQHandler+0xfa>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_UART_IRQHandler+0xee>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0208 	orr.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 811f 	beq.w	8002ce2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_UART_IRQHandler+0x11e>
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa34 	bl	8002f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x146>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d031      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f976 	bl	8002dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d013      	beq.n	8002b3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	4a77      	ldr	r2, [pc, #476]	; (8002cf4 <HAL_UART_IRQHandler+0x354>)
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f934 	bl	8000d8c <HAL_DMA_Abort_IT>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	e00e      	b.n	8002b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8ee 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	e00a      	b.n	8002b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8ea 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	e006      	b.n	8002b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8e6 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b56:	e0c4      	b.n	8002ce2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b58:	bf00      	nop
    return;
 8002b5a:	e0c2      	b.n	8002ce2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80a1 	bne.w	8002ca8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 809b 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8095 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04e      	beq.n	8002c40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002bac:	8a3b      	ldrh	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8099 	beq.w	8002ce6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bb8:	8a3a      	ldrh	r2, [r7, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f080 8093 	bcs.w	8002ce6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8a3a      	ldrh	r2, [r7, #16]
 8002bc4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d02b      	beq.n	8002c28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bde:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0210 	bic.w	r2, r2, #16
 8002c1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f877 	bl	8000d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f878 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c3e:	e052      	b.n	8002ce6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d048      	beq.n	8002cea <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d045      	beq.n	8002cea <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c9c:	8a7b      	ldrh	r3, [r7, #18]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f844 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ca6:	e020      	b.n	8002cea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x324>
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8cb 	bl	8002e58 <UART_Transmit_IT>
    return;
 8002cc2:	e013      	b.n	8002cec <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <HAL_UART_IRQHandler+0x34c>
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f90c 	bl	8002ef6 <UART_EndTransmit_IT>
    return;
 8002cde:	bf00      	nop
 8002ce0:	e004      	b.n	8002cec <HAL_UART_IRQHandler+0x34c>
    return;
 8002ce2:	bf00      	nop
 8002ce4:	e002      	b.n	8002cec <HAL_UART_IRQHandler+0x34c>
      return;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HAL_UART_IRQHandler+0x34c>
      return;
 8002cea:	bf00      	nop
  }
}
 8002cec:	3728      	adds	r7, #40	; 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08002e31 	.word	0x08002e31

08002cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d54:	e02c      	b.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d028      	beq.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d64:	f7fd fec0 	bl	8000ae8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d21d      	bcs.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e00f      	b.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d0c3      	beq.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0210 	bic.w	r2, r2, #16
 8002e16:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff ff66 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b21      	cmp	r3, #33	; 0x21
 8002e6a:	d13e      	bne.n	8002eea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d114      	bne.n	8002ea0 <UART_Transmit_IT+0x48>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d110      	bne.n	8002ea0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	621a      	str	r2, [r3, #32]
 8002e9e:	e008      	b.n	8002eb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	1c59      	adds	r1, r3, #1
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6211      	str	r1, [r2, #32]
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff feee 	bl	8002cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b22      	cmp	r3, #34	; 0x22
 8002f38:	f040 8099 	bne.w	800306e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d117      	bne.n	8002f76 <UART_Receive_IT+0x50>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
 8002f74:	e026      	b.n	8002fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f88:	d007      	beq.n	8002f9a <UART_Receive_IT+0x74>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <UART_Receive_IT+0x82>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e008      	b.n	8002fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d148      	bne.n	800306a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0220 	bic.w	r2, r2, #32
 8002fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2b01      	cmp	r3, #1
 8003016:	d123      	bne.n	8003060 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0210 	bic.w	r2, r2, #16
 800302c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b10      	cmp	r3, #16
 800303a:	d10a      	bne.n	8003052 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fe68 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
 800305e:	e002      	b.n	8003066 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fe52 	bl	8002d0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e002      	b.n	8003070 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030b2:	f023 030c 	bic.w	r3, r3, #12
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	430b      	orrs	r3, r1
 80030be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <UART_SetConfig+0x114>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7fe fc56 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	e002      	b.n	80030ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7fe fc3e 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	0119      	lsls	r1, r3, #4
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <UART_SetConfig+0x118>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	; 0x32
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <UART_SetConfig+0x118>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003144:	4419      	add	r1, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <UART_SetConfig+0x118>)
 800315e:	fba3 0302 	umull	r0, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2064      	movs	r0, #100	; 0x64
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	3332      	adds	r3, #50	; 0x32
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <UART_SetConfig+0x118>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	440a      	add	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40013800 	.word	0x40013800
 8003190:	51eb851f 	.word	0x51eb851f

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000000c 	.word	0x2000000c

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2500      	movs	r5, #0
 80031a4:	4e0c      	ldr	r6, [pc, #48]	; (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a8:	1ba4      	subs	r4, r4, r6
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a5      	cmp	r5, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f000 fc34 	bl	8003a1c <_init>
 80031b4:	2500      	movs	r5, #0
 80031b6:	4e0a      	ldr	r6, [pc, #40]	; (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <__libc_init_array+0x44>)
 80031ba:	1ba4      	subs	r4, r4, r6
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c8:	4798      	blx	r3
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d2:	4798      	blx	r3
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08003acc 	.word	0x08003acc
 80031dc:	08003acc 	.word	0x08003acc
 80031e0:	08003acc 	.word	0x08003acc
 80031e4:	08003ad0 	.word	0x08003ad0

080031e8 <memset>:
 80031e8:	4603      	mov	r3, r0
 80031ea:	4402      	add	r2, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <siprintf>:
 80031f8:	b40e      	push	{r1, r2, r3}
 80031fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031fe:	b500      	push	{lr}
 8003200:	b09c      	sub	sp, #112	; 0x70
 8003202:	ab1d      	add	r3, sp, #116	; 0x74
 8003204:	9002      	str	r0, [sp, #8]
 8003206:	9006      	str	r0, [sp, #24]
 8003208:	9107      	str	r1, [sp, #28]
 800320a:	9104      	str	r1, [sp, #16]
 800320c:	4808      	ldr	r0, [pc, #32]	; (8003230 <siprintf+0x38>)
 800320e:	4909      	ldr	r1, [pc, #36]	; (8003234 <siprintf+0x3c>)
 8003210:	f853 2b04 	ldr.w	r2, [r3], #4
 8003214:	9105      	str	r1, [sp, #20]
 8003216:	6800      	ldr	r0, [r0, #0]
 8003218:	a902      	add	r1, sp, #8
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	f000 f866 	bl	80032ec <_svfiprintf_r>
 8003220:	2200      	movs	r2, #0
 8003222:	9b02      	ldr	r3, [sp, #8]
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	b01c      	add	sp, #112	; 0x70
 8003228:	f85d eb04 	ldr.w	lr, [sp], #4
 800322c:	b003      	add	sp, #12
 800322e:	4770      	bx	lr
 8003230:	2000000c 	.word	0x2000000c
 8003234:	ffff0208 	.word	0xffff0208

08003238 <__ssputs_r>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	688e      	ldr	r6, [r1, #8]
 800323e:	4682      	mov	sl, r0
 8003240:	429e      	cmp	r6, r3
 8003242:	460c      	mov	r4, r1
 8003244:	4690      	mov	r8, r2
 8003246:	4699      	mov	r9, r3
 8003248:	d837      	bhi.n	80032ba <__ssputs_r+0x82>
 800324a:	898a      	ldrh	r2, [r1, #12]
 800324c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003250:	d031      	beq.n	80032b6 <__ssputs_r+0x7e>
 8003252:	2302      	movs	r3, #2
 8003254:	6825      	ldr	r5, [r4, #0]
 8003256:	6909      	ldr	r1, [r1, #16]
 8003258:	1a6f      	subs	r7, r5, r1
 800325a:	6965      	ldr	r5, [r4, #20]
 800325c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003260:	fb95 f5f3 	sdiv	r5, r5, r3
 8003264:	f109 0301 	add.w	r3, r9, #1
 8003268:	443b      	add	r3, r7
 800326a:	429d      	cmp	r5, r3
 800326c:	bf38      	it	cc
 800326e:	461d      	movcc	r5, r3
 8003270:	0553      	lsls	r3, r2, #21
 8003272:	d530      	bpl.n	80032d6 <__ssputs_r+0x9e>
 8003274:	4629      	mov	r1, r5
 8003276:	f000 fb37 	bl	80038e8 <_malloc_r>
 800327a:	4606      	mov	r6, r0
 800327c:	b950      	cbnz	r0, 8003294 <__ssputs_r+0x5c>
 800327e:	230c      	movs	r3, #12
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f8ca 3000 	str.w	r3, [sl]
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003294:	463a      	mov	r2, r7
 8003296:	6921      	ldr	r1, [r4, #16]
 8003298:	f000 fab6 	bl	8003808 <memcpy>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	6126      	str	r6, [r4, #16]
 80032aa:	443e      	add	r6, r7
 80032ac:	6026      	str	r6, [r4, #0]
 80032ae:	464e      	mov	r6, r9
 80032b0:	6165      	str	r5, [r4, #20]
 80032b2:	1bed      	subs	r5, r5, r7
 80032b4:	60a5      	str	r5, [r4, #8]
 80032b6:	454e      	cmp	r6, r9
 80032b8:	d900      	bls.n	80032bc <__ssputs_r+0x84>
 80032ba:	464e      	mov	r6, r9
 80032bc:	4632      	mov	r2, r6
 80032be:	4641      	mov	r1, r8
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	f000 faac 	bl	800381e <memmove>
 80032c6:	68a3      	ldr	r3, [r4, #8]
 80032c8:	2000      	movs	r0, #0
 80032ca:	1b9b      	subs	r3, r3, r6
 80032cc:	60a3      	str	r3, [r4, #8]
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	441e      	add	r6, r3
 80032d2:	6026      	str	r6, [r4, #0]
 80032d4:	e7dc      	b.n	8003290 <__ssputs_r+0x58>
 80032d6:	462a      	mov	r2, r5
 80032d8:	f000 fb60 	bl	800399c <_realloc_r>
 80032dc:	4606      	mov	r6, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d1e2      	bne.n	80032a8 <__ssputs_r+0x70>
 80032e2:	6921      	ldr	r1, [r4, #16]
 80032e4:	4650      	mov	r0, sl
 80032e6:	f000 fab3 	bl	8003850 <_free_r>
 80032ea:	e7c8      	b.n	800327e <__ssputs_r+0x46>

080032ec <_svfiprintf_r>:
 80032ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f0:	461d      	mov	r5, r3
 80032f2:	898b      	ldrh	r3, [r1, #12]
 80032f4:	b09d      	sub	sp, #116	; 0x74
 80032f6:	061f      	lsls	r7, r3, #24
 80032f8:	4680      	mov	r8, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4616      	mov	r6, r2
 80032fe:	d50f      	bpl.n	8003320 <_svfiprintf_r+0x34>
 8003300:	690b      	ldr	r3, [r1, #16]
 8003302:	b96b      	cbnz	r3, 8003320 <_svfiprintf_r+0x34>
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	f000 faef 	bl	80038e8 <_malloc_r>
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	6120      	str	r0, [r4, #16]
 800330e:	b928      	cbnz	r0, 800331c <_svfiprintf_r+0x30>
 8003310:	230c      	movs	r3, #12
 8003312:	f8c8 3000 	str.w	r3, [r8]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	e0c8      	b.n	80034ae <_svfiprintf_r+0x1c2>
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	6163      	str	r3, [r4, #20]
 8003320:	2300      	movs	r3, #0
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
 8003324:	2320      	movs	r3, #32
 8003326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800332a:	2330      	movs	r3, #48	; 0x30
 800332c:	f04f 0b01 	mov.w	fp, #1
 8003330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003334:	9503      	str	r5, [sp, #12]
 8003336:	4637      	mov	r7, r6
 8003338:	463d      	mov	r5, r7
 800333a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800333e:	b10b      	cbz	r3, 8003344 <_svfiprintf_r+0x58>
 8003340:	2b25      	cmp	r3, #37	; 0x25
 8003342:	d13e      	bne.n	80033c2 <_svfiprintf_r+0xd6>
 8003344:	ebb7 0a06 	subs.w	sl, r7, r6
 8003348:	d00b      	beq.n	8003362 <_svfiprintf_r+0x76>
 800334a:	4653      	mov	r3, sl
 800334c:	4632      	mov	r2, r6
 800334e:	4621      	mov	r1, r4
 8003350:	4640      	mov	r0, r8
 8003352:	f7ff ff71 	bl	8003238 <__ssputs_r>
 8003356:	3001      	adds	r0, #1
 8003358:	f000 80a4 	beq.w	80034a4 <_svfiprintf_r+0x1b8>
 800335c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800335e:	4453      	add	r3, sl
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
 8003362:	783b      	ldrb	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 809d 	beq.w	80034a4 <_svfiprintf_r+0x1b8>
 800336a:	2300      	movs	r3, #0
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800337c:	931a      	str	r3, [sp, #104]	; 0x68
 800337e:	462f      	mov	r7, r5
 8003380:	2205      	movs	r2, #5
 8003382:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003386:	4850      	ldr	r0, [pc, #320]	; (80034c8 <_svfiprintf_r+0x1dc>)
 8003388:	f000 fa30 	bl	80037ec <memchr>
 800338c:	9b04      	ldr	r3, [sp, #16]
 800338e:	b9d0      	cbnz	r0, 80033c6 <_svfiprintf_r+0xda>
 8003390:	06d9      	lsls	r1, r3, #27
 8003392:	bf44      	itt	mi
 8003394:	2220      	movmi	r2, #32
 8003396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800339a:	071a      	lsls	r2, r3, #28
 800339c:	bf44      	itt	mi
 800339e:	222b      	movmi	r2, #43	; 0x2b
 80033a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033a4:	782a      	ldrb	r2, [r5, #0]
 80033a6:	2a2a      	cmp	r2, #42	; 0x2a
 80033a8:	d015      	beq.n	80033d6 <_svfiprintf_r+0xea>
 80033aa:	462f      	mov	r7, r5
 80033ac:	2000      	movs	r0, #0
 80033ae:	250a      	movs	r5, #10
 80033b0:	9a07      	ldr	r2, [sp, #28]
 80033b2:	4639      	mov	r1, r7
 80033b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033b8:	3b30      	subs	r3, #48	; 0x30
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d94d      	bls.n	800345a <_svfiprintf_r+0x16e>
 80033be:	b1b8      	cbz	r0, 80033f0 <_svfiprintf_r+0x104>
 80033c0:	e00f      	b.n	80033e2 <_svfiprintf_r+0xf6>
 80033c2:	462f      	mov	r7, r5
 80033c4:	e7b8      	b.n	8003338 <_svfiprintf_r+0x4c>
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <_svfiprintf_r+0x1dc>)
 80033c8:	463d      	mov	r5, r7
 80033ca:	1a80      	subs	r0, r0, r2
 80033cc:	fa0b f000 	lsl.w	r0, fp, r0
 80033d0:	4318      	orrs	r0, r3
 80033d2:	9004      	str	r0, [sp, #16]
 80033d4:	e7d3      	b.n	800337e <_svfiprintf_r+0x92>
 80033d6:	9a03      	ldr	r2, [sp, #12]
 80033d8:	1d11      	adds	r1, r2, #4
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	9103      	str	r1, [sp, #12]
 80033de:	2a00      	cmp	r2, #0
 80033e0:	db01      	blt.n	80033e6 <_svfiprintf_r+0xfa>
 80033e2:	9207      	str	r2, [sp, #28]
 80033e4:	e004      	b.n	80033f0 <_svfiprintf_r+0x104>
 80033e6:	4252      	negs	r2, r2
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	9207      	str	r2, [sp, #28]
 80033ee:	9304      	str	r3, [sp, #16]
 80033f0:	783b      	ldrb	r3, [r7, #0]
 80033f2:	2b2e      	cmp	r3, #46	; 0x2e
 80033f4:	d10c      	bne.n	8003410 <_svfiprintf_r+0x124>
 80033f6:	787b      	ldrb	r3, [r7, #1]
 80033f8:	2b2a      	cmp	r3, #42	; 0x2a
 80033fa:	d133      	bne.n	8003464 <_svfiprintf_r+0x178>
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	3702      	adds	r7, #2
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	9203      	str	r2, [sp, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	bfb8      	it	lt
 800340a:	f04f 33ff 	movlt.w	r3, #4294967295
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	4d2e      	ldr	r5, [pc, #184]	; (80034cc <_svfiprintf_r+0x1e0>)
 8003412:	2203      	movs	r2, #3
 8003414:	7839      	ldrb	r1, [r7, #0]
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f9e8 	bl	80037ec <memchr>
 800341c:	b138      	cbz	r0, 800342e <_svfiprintf_r+0x142>
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	1b40      	subs	r0, r0, r5
 8003422:	fa03 f000 	lsl.w	r0, r3, r0
 8003426:	9b04      	ldr	r3, [sp, #16]
 8003428:	3701      	adds	r7, #1
 800342a:	4303      	orrs	r3, r0
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	7839      	ldrb	r1, [r7, #0]
 8003430:	2206      	movs	r2, #6
 8003432:	4827      	ldr	r0, [pc, #156]	; (80034d0 <_svfiprintf_r+0x1e4>)
 8003434:	1c7e      	adds	r6, r7, #1
 8003436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800343a:	f000 f9d7 	bl	80037ec <memchr>
 800343e:	2800      	cmp	r0, #0
 8003440:	d038      	beq.n	80034b4 <_svfiprintf_r+0x1c8>
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <_svfiprintf_r+0x1e8>)
 8003444:	bb13      	cbnz	r3, 800348c <_svfiprintf_r+0x1a0>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	3307      	adds	r3, #7
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	3308      	adds	r3, #8
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003454:	444b      	add	r3, r9
 8003456:	9309      	str	r3, [sp, #36]	; 0x24
 8003458:	e76d      	b.n	8003336 <_svfiprintf_r+0x4a>
 800345a:	fb05 3202 	mla	r2, r5, r2, r3
 800345e:	2001      	movs	r0, #1
 8003460:	460f      	mov	r7, r1
 8003462:	e7a6      	b.n	80033b2 <_svfiprintf_r+0xc6>
 8003464:	2300      	movs	r3, #0
 8003466:	250a      	movs	r5, #10
 8003468:	4619      	mov	r1, r3
 800346a:	3701      	adds	r7, #1
 800346c:	9305      	str	r3, [sp, #20]
 800346e:	4638      	mov	r0, r7
 8003470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003474:	3a30      	subs	r2, #48	; 0x30
 8003476:	2a09      	cmp	r2, #9
 8003478:	d903      	bls.n	8003482 <_svfiprintf_r+0x196>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0c8      	beq.n	8003410 <_svfiprintf_r+0x124>
 800347e:	9105      	str	r1, [sp, #20]
 8003480:	e7c6      	b.n	8003410 <_svfiprintf_r+0x124>
 8003482:	fb05 2101 	mla	r1, r5, r1, r2
 8003486:	2301      	movs	r3, #1
 8003488:	4607      	mov	r7, r0
 800348a:	e7f0      	b.n	800346e <_svfiprintf_r+0x182>
 800348c:	ab03      	add	r3, sp, #12
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4622      	mov	r2, r4
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <_svfiprintf_r+0x1ec>)
 8003494:	a904      	add	r1, sp, #16
 8003496:	4640      	mov	r0, r8
 8003498:	f3af 8000 	nop.w
 800349c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034a0:	4681      	mov	r9, r0
 80034a2:	d1d6      	bne.n	8003452 <_svfiprintf_r+0x166>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	065b      	lsls	r3, r3, #25
 80034a8:	f53f af35 	bmi.w	8003316 <_svfiprintf_r+0x2a>
 80034ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ae:	b01d      	add	sp, #116	; 0x74
 80034b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4622      	mov	r2, r4
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <_svfiprintf_r+0x1ec>)
 80034bc:	a904      	add	r1, sp, #16
 80034be:	4640      	mov	r0, r8
 80034c0:	f000 f882 	bl	80035c8 <_printf_i>
 80034c4:	e7ea      	b.n	800349c <_svfiprintf_r+0x1b0>
 80034c6:	bf00      	nop
 80034c8:	08003a98 	.word	0x08003a98
 80034cc:	08003a9e 	.word	0x08003a9e
 80034d0:	08003aa2 	.word	0x08003aa2
 80034d4:	00000000 	.word	0x00000000
 80034d8:	08003239 	.word	0x08003239

080034dc <_printf_common>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	4691      	mov	r9, r2
 80034e2:	461f      	mov	r7, r3
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4606      	mov	r6, r0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfb8      	it	lt
 80034ee:	4613      	movlt	r3, r2
 80034f0:	f8c9 3000 	str.w	r3, [r9]
 80034f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034f8:	460c      	mov	r4, r1
 80034fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034fe:	b112      	cbz	r2, 8003506 <_printf_common+0x2a>
 8003500:	3301      	adds	r3, #1
 8003502:	f8c9 3000 	str.w	r3, [r9]
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	0699      	lsls	r1, r3, #26
 800350a:	bf42      	ittt	mi
 800350c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003510:	3302      	addmi	r3, #2
 8003512:	f8c9 3000 	strmi.w	r3, [r9]
 8003516:	6825      	ldr	r5, [r4, #0]
 8003518:	f015 0506 	ands.w	r5, r5, #6
 800351c:	d107      	bne.n	800352e <_printf_common+0x52>
 800351e:	f104 0a19 	add.w	sl, r4, #25
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	f8d9 2000 	ldr.w	r2, [r9]
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	42ab      	cmp	r3, r5
 800352c:	dc29      	bgt.n	8003582 <_printf_common+0xa6>
 800352e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	3300      	adds	r3, #0
 8003536:	bf18      	it	ne
 8003538:	2301      	movne	r3, #1
 800353a:	0692      	lsls	r2, r2, #26
 800353c:	d42e      	bmi.n	800359c <_printf_common+0xc0>
 800353e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003542:	4639      	mov	r1, r7
 8003544:	4630      	mov	r0, r6
 8003546:	47c0      	blx	r8
 8003548:	3001      	adds	r0, #1
 800354a:	d021      	beq.n	8003590 <_printf_common+0xb4>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	68e5      	ldr	r5, [r4, #12]
 8003550:	f003 0306 	and.w	r3, r3, #6
 8003554:	2b04      	cmp	r3, #4
 8003556:	bf18      	it	ne
 8003558:	2500      	movne	r5, #0
 800355a:	f8d9 2000 	ldr.w	r2, [r9]
 800355e:	f04f 0900 	mov.w	r9, #0
 8003562:	bf08      	it	eq
 8003564:	1aad      	subeq	r5, r5, r2
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	bf08      	it	eq
 800356c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003570:	4293      	cmp	r3, r2
 8003572:	bfc4      	itt	gt
 8003574:	1a9b      	subgt	r3, r3, r2
 8003576:	18ed      	addgt	r5, r5, r3
 8003578:	341a      	adds	r4, #26
 800357a:	454d      	cmp	r5, r9
 800357c:	d11a      	bne.n	80035b4 <_printf_common+0xd8>
 800357e:	2000      	movs	r0, #0
 8003580:	e008      	b.n	8003594 <_printf_common+0xb8>
 8003582:	2301      	movs	r3, #1
 8003584:	4652      	mov	r2, sl
 8003586:	4639      	mov	r1, r7
 8003588:	4630      	mov	r0, r6
 800358a:	47c0      	blx	r8
 800358c:	3001      	adds	r0, #1
 800358e:	d103      	bne.n	8003598 <_printf_common+0xbc>
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	3501      	adds	r5, #1
 800359a:	e7c2      	b.n	8003522 <_printf_common+0x46>
 800359c:	2030      	movs	r0, #48	; 0x30
 800359e:	18e1      	adds	r1, r4, r3
 80035a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035aa:	4422      	add	r2, r4
 80035ac:	3302      	adds	r3, #2
 80035ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035b2:	e7c4      	b.n	800353e <_printf_common+0x62>
 80035b4:	2301      	movs	r3, #1
 80035b6:	4622      	mov	r2, r4
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d0e6      	beq.n	8003590 <_printf_common+0xb4>
 80035c2:	f109 0901 	add.w	r9, r9, #1
 80035c6:	e7d8      	b.n	800357a <_printf_common+0x9e>

080035c8 <_printf_i>:
 80035c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035d0:	460c      	mov	r4, r1
 80035d2:	7e09      	ldrb	r1, [r1, #24]
 80035d4:	b085      	sub	sp, #20
 80035d6:	296e      	cmp	r1, #110	; 0x6e
 80035d8:	4617      	mov	r7, r2
 80035da:	4606      	mov	r6, r0
 80035dc:	4698      	mov	r8, r3
 80035de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035e0:	f000 80b3 	beq.w	800374a <_printf_i+0x182>
 80035e4:	d822      	bhi.n	800362c <_printf_i+0x64>
 80035e6:	2963      	cmp	r1, #99	; 0x63
 80035e8:	d036      	beq.n	8003658 <_printf_i+0x90>
 80035ea:	d80a      	bhi.n	8003602 <_printf_i+0x3a>
 80035ec:	2900      	cmp	r1, #0
 80035ee:	f000 80b9 	beq.w	8003764 <_printf_i+0x19c>
 80035f2:	2958      	cmp	r1, #88	; 0x58
 80035f4:	f000 8083 	beq.w	80036fe <_printf_i+0x136>
 80035f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003600:	e032      	b.n	8003668 <_printf_i+0xa0>
 8003602:	2964      	cmp	r1, #100	; 0x64
 8003604:	d001      	beq.n	800360a <_printf_i+0x42>
 8003606:	2969      	cmp	r1, #105	; 0x69
 8003608:	d1f6      	bne.n	80035f8 <_printf_i+0x30>
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	0605      	lsls	r5, r0, #24
 8003610:	f103 0104 	add.w	r1, r3, #4
 8003614:	d52a      	bpl.n	800366c <_printf_i+0xa4>
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	da03      	bge.n	8003626 <_printf_i+0x5e>
 800361e:	222d      	movs	r2, #45	; 0x2d
 8003620:	425b      	negs	r3, r3
 8003622:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003626:	486f      	ldr	r0, [pc, #444]	; (80037e4 <_printf_i+0x21c>)
 8003628:	220a      	movs	r2, #10
 800362a:	e039      	b.n	80036a0 <_printf_i+0xd8>
 800362c:	2973      	cmp	r1, #115	; 0x73
 800362e:	f000 809d 	beq.w	800376c <_printf_i+0x1a4>
 8003632:	d808      	bhi.n	8003646 <_printf_i+0x7e>
 8003634:	296f      	cmp	r1, #111	; 0x6f
 8003636:	d020      	beq.n	800367a <_printf_i+0xb2>
 8003638:	2970      	cmp	r1, #112	; 0x70
 800363a:	d1dd      	bne.n	80035f8 <_printf_i+0x30>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	e003      	b.n	800364e <_printf_i+0x86>
 8003646:	2975      	cmp	r1, #117	; 0x75
 8003648:	d017      	beq.n	800367a <_printf_i+0xb2>
 800364a:	2978      	cmp	r1, #120	; 0x78
 800364c:	d1d4      	bne.n	80035f8 <_printf_i+0x30>
 800364e:	2378      	movs	r3, #120	; 0x78
 8003650:	4865      	ldr	r0, [pc, #404]	; (80037e8 <_printf_i+0x220>)
 8003652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003656:	e055      	b.n	8003704 <_printf_i+0x13c>
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800365e:	1d19      	adds	r1, r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6011      	str	r1, [r2, #0]
 8003664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003668:	2301      	movs	r3, #1
 800366a:	e08c      	b.n	8003786 <_printf_i+0x1be>
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003672:	6011      	str	r1, [r2, #0]
 8003674:	bf18      	it	ne
 8003676:	b21b      	sxthne	r3, r3
 8003678:	e7cf      	b.n	800361a <_printf_i+0x52>
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	1d18      	adds	r0, r3, #4
 8003680:	6010      	str	r0, [r2, #0]
 8003682:	0628      	lsls	r0, r5, #24
 8003684:	d501      	bpl.n	800368a <_printf_i+0xc2>
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	e002      	b.n	8003690 <_printf_i+0xc8>
 800368a:	0668      	lsls	r0, r5, #25
 800368c:	d5fb      	bpl.n	8003686 <_printf_i+0xbe>
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	296f      	cmp	r1, #111	; 0x6f
 8003692:	bf14      	ite	ne
 8003694:	220a      	movne	r2, #10
 8003696:	2208      	moveq	r2, #8
 8003698:	4852      	ldr	r0, [pc, #328]	; (80037e4 <_printf_i+0x21c>)
 800369a:	2100      	movs	r1, #0
 800369c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036a0:	6865      	ldr	r5, [r4, #4]
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	60a5      	str	r5, [r4, #8]
 80036a6:	f2c0 8095 	blt.w	80037d4 <_printf_i+0x20c>
 80036aa:	6821      	ldr	r1, [r4, #0]
 80036ac:	f021 0104 	bic.w	r1, r1, #4
 80036b0:	6021      	str	r1, [r4, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d13d      	bne.n	8003732 <_printf_i+0x16a>
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	f040 808e 	bne.w	80037d8 <_printf_i+0x210>
 80036bc:	4665      	mov	r5, ip
 80036be:	2a08      	cmp	r2, #8
 80036c0:	d10b      	bne.n	80036da <_printf_i+0x112>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	07db      	lsls	r3, r3, #31
 80036c6:	d508      	bpl.n	80036da <_printf_i+0x112>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bfde      	ittt	le
 80036d0:	2330      	movle	r3, #48	; 0x30
 80036d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036da:	ebac 0305 	sub.w	r3, ip, r5
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	f8cd 8000 	str.w	r8, [sp]
 80036e4:	463b      	mov	r3, r7
 80036e6:	aa03      	add	r2, sp, #12
 80036e8:	4621      	mov	r1, r4
 80036ea:	4630      	mov	r0, r6
 80036ec:	f7ff fef6 	bl	80034dc <_printf_common>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d14d      	bne.n	8003790 <_printf_i+0x1c8>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	b005      	add	sp, #20
 80036fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036fe:	4839      	ldr	r0, [pc, #228]	; (80037e4 <_printf_i+0x21c>)
 8003700:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	1d1d      	adds	r5, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6015      	str	r5, [r2, #0]
 800370e:	060a      	lsls	r2, r1, #24
 8003710:	d50b      	bpl.n	800372a <_printf_i+0x162>
 8003712:	07ca      	lsls	r2, r1, #31
 8003714:	bf44      	itt	mi
 8003716:	f041 0120 	orrmi.w	r1, r1, #32
 800371a:	6021      	strmi	r1, [r4, #0]
 800371c:	b91b      	cbnz	r3, 8003726 <_printf_i+0x15e>
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	6022      	str	r2, [r4, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	e7b7      	b.n	800369a <_printf_i+0xd2>
 800372a:	064d      	lsls	r5, r1, #25
 800372c:	bf48      	it	mi
 800372e:	b29b      	uxthmi	r3, r3
 8003730:	e7ef      	b.n	8003712 <_printf_i+0x14a>
 8003732:	4665      	mov	r5, ip
 8003734:	fbb3 f1f2 	udiv	r1, r3, r2
 8003738:	fb02 3311 	mls	r3, r2, r1, r3
 800373c:	5cc3      	ldrb	r3, [r0, r3]
 800373e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003742:	460b      	mov	r3, r1
 8003744:	2900      	cmp	r1, #0
 8003746:	d1f5      	bne.n	8003734 <_printf_i+0x16c>
 8003748:	e7b9      	b.n	80036be <_printf_i+0xf6>
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	6825      	ldr	r5, [r4, #0]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	6961      	ldr	r1, [r4, #20]
 8003752:	6010      	str	r0, [r2, #0]
 8003754:	0628      	lsls	r0, r5, #24
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	d501      	bpl.n	800375e <_printf_i+0x196>
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	e002      	b.n	8003764 <_printf_i+0x19c>
 800375e:	066a      	lsls	r2, r5, #25
 8003760:	d5fb      	bpl.n	800375a <_printf_i+0x192>
 8003762:	8019      	strh	r1, [r3, #0]
 8003764:	2300      	movs	r3, #0
 8003766:	4665      	mov	r5, ip
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	e7b9      	b.n	80036e0 <_printf_i+0x118>
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	1d19      	adds	r1, r3, #4
 8003770:	6011      	str	r1, [r2, #0]
 8003772:	681d      	ldr	r5, [r3, #0]
 8003774:	6862      	ldr	r2, [r4, #4]
 8003776:	2100      	movs	r1, #0
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f837 	bl	80037ec <memchr>
 800377e:	b108      	cbz	r0, 8003784 <_printf_i+0x1bc>
 8003780:	1b40      	subs	r0, r0, r5
 8003782:	6060      	str	r0, [r4, #4]
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	2300      	movs	r3, #0
 800378a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800378e:	e7a7      	b.n	80036e0 <_printf_i+0x118>
 8003790:	6923      	ldr	r3, [r4, #16]
 8003792:	462a      	mov	r2, r5
 8003794:	4639      	mov	r1, r7
 8003796:	4630      	mov	r0, r6
 8003798:	47c0      	blx	r8
 800379a:	3001      	adds	r0, #1
 800379c:	d0aa      	beq.n	80036f4 <_printf_i+0x12c>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	079b      	lsls	r3, r3, #30
 80037a2:	d413      	bmi.n	80037cc <_printf_i+0x204>
 80037a4:	68e0      	ldr	r0, [r4, #12]
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	4298      	cmp	r0, r3
 80037aa:	bfb8      	it	lt
 80037ac:	4618      	movlt	r0, r3
 80037ae:	e7a3      	b.n	80036f8 <_printf_i+0x130>
 80037b0:	2301      	movs	r3, #1
 80037b2:	464a      	mov	r2, r9
 80037b4:	4639      	mov	r1, r7
 80037b6:	4630      	mov	r0, r6
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d09a      	beq.n	80036f4 <_printf_i+0x12c>
 80037be:	3501      	adds	r5, #1
 80037c0:	68e3      	ldr	r3, [r4, #12]
 80037c2:	9a03      	ldr	r2, [sp, #12]
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	42ab      	cmp	r3, r5
 80037c8:	dcf2      	bgt.n	80037b0 <_printf_i+0x1e8>
 80037ca:	e7eb      	b.n	80037a4 <_printf_i+0x1dc>
 80037cc:	2500      	movs	r5, #0
 80037ce:	f104 0919 	add.w	r9, r4, #25
 80037d2:	e7f5      	b.n	80037c0 <_printf_i+0x1f8>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ac      	bne.n	8003732 <_printf_i+0x16a>
 80037d8:	7803      	ldrb	r3, [r0, #0]
 80037da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e2:	e76c      	b.n	80036be <_printf_i+0xf6>
 80037e4:	08003aa9 	.word	0x08003aa9
 80037e8:	08003aba 	.word	0x08003aba

080037ec <memchr>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	b2c9      	uxtb	r1, r1
 80037f0:	4402      	add	r2, r0
 80037f2:	4290      	cmp	r0, r2
 80037f4:	4603      	mov	r3, r0
 80037f6:	d101      	bne.n	80037fc <memchr+0x10>
 80037f8:	2300      	movs	r3, #0
 80037fa:	e003      	b.n	8003804 <memchr+0x18>
 80037fc:	781c      	ldrb	r4, [r3, #0]
 80037fe:	3001      	adds	r0, #1
 8003800:	428c      	cmp	r4, r1
 8003802:	d1f6      	bne.n	80037f2 <memchr+0x6>
 8003804:	4618      	mov	r0, r3
 8003806:	bd10      	pop	{r4, pc}

08003808 <memcpy>:
 8003808:	b510      	push	{r4, lr}
 800380a:	1e43      	subs	r3, r0, #1
 800380c:	440a      	add	r2, r1
 800380e:	4291      	cmp	r1, r2
 8003810:	d100      	bne.n	8003814 <memcpy+0xc>
 8003812:	bd10      	pop	{r4, pc}
 8003814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800381c:	e7f7      	b.n	800380e <memcpy+0x6>

0800381e <memmove>:
 800381e:	4288      	cmp	r0, r1
 8003820:	b510      	push	{r4, lr}
 8003822:	eb01 0302 	add.w	r3, r1, r2
 8003826:	d807      	bhi.n	8003838 <memmove+0x1a>
 8003828:	1e42      	subs	r2, r0, #1
 800382a:	4299      	cmp	r1, r3
 800382c:	d00a      	beq.n	8003844 <memmove+0x26>
 800382e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003832:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003836:	e7f8      	b.n	800382a <memmove+0xc>
 8003838:	4283      	cmp	r3, r0
 800383a:	d9f5      	bls.n	8003828 <memmove+0xa>
 800383c:	1881      	adds	r1, r0, r2
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	42d3      	cmn	r3, r2
 8003842:	d100      	bne.n	8003846 <memmove+0x28>
 8003844:	bd10      	pop	{r4, pc}
 8003846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800384a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800384e:	e7f7      	b.n	8003840 <memmove+0x22>

08003850 <_free_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d043      	beq.n	80038e0 <_free_r+0x90>
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f0c      	subs	r4, r1, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	18e4      	addlt	r4, r4, r3
 8003864:	f000 f8d0 	bl	8003a08 <__malloc_lock>
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <_free_r+0x94>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	4610      	mov	r0, r2
 800386e:	b933      	cbnz	r3, 800387e <_free_r+0x2e>
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6014      	str	r4, [r2, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800387a:	f000 b8c6 	b.w	8003a0a <__malloc_unlock>
 800387e:	42a3      	cmp	r3, r4
 8003880:	d90b      	bls.n	800389a <_free_r+0x4a>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	1862      	adds	r2, r4, r1
 8003886:	4293      	cmp	r3, r2
 8003888:	bf01      	itttt	eq
 800388a:	681a      	ldreq	r2, [r3, #0]
 800388c:	685b      	ldreq	r3, [r3, #4]
 800388e:	1852      	addeq	r2, r2, r1
 8003890:	6022      	streq	r2, [r4, #0]
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6004      	str	r4, [r0, #0]
 8003896:	e7ed      	b.n	8003874 <_free_r+0x24>
 8003898:	4613      	mov	r3, r2
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	b10a      	cbz	r2, 80038a2 <_free_r+0x52>
 800389e:	42a2      	cmp	r2, r4
 80038a0:	d9fa      	bls.n	8003898 <_free_r+0x48>
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	1858      	adds	r0, r3, r1
 80038a6:	42a0      	cmp	r0, r4
 80038a8:	d10b      	bne.n	80038c2 <_free_r+0x72>
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	4401      	add	r1, r0
 80038ae:	1858      	adds	r0, r3, r1
 80038b0:	4282      	cmp	r2, r0
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	d1de      	bne.n	8003874 <_free_r+0x24>
 80038b6:	6810      	ldr	r0, [r2, #0]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	4401      	add	r1, r0
 80038bc:	6019      	str	r1, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	e7d8      	b.n	8003874 <_free_r+0x24>
 80038c2:	d902      	bls.n	80038ca <_free_r+0x7a>
 80038c4:	230c      	movs	r3, #12
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	e7d4      	b.n	8003874 <_free_r+0x24>
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	1821      	adds	r1, r4, r0
 80038ce:	428a      	cmp	r2, r1
 80038d0:	bf01      	itttt	eq
 80038d2:	6811      	ldreq	r1, [r2, #0]
 80038d4:	6852      	ldreq	r2, [r2, #4]
 80038d6:	1809      	addeq	r1, r1, r0
 80038d8:	6021      	streq	r1, [r4, #0]
 80038da:	6062      	str	r2, [r4, #4]
 80038dc:	605c      	str	r4, [r3, #4]
 80038de:	e7c9      	b.n	8003874 <_free_r+0x24>
 80038e0:	bd38      	pop	{r3, r4, r5, pc}
 80038e2:	bf00      	nop
 80038e4:	200001f8 	.word	0x200001f8

080038e8 <_malloc_r>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	1ccd      	adds	r5, r1, #3
 80038ec:	f025 0503 	bic.w	r5, r5, #3
 80038f0:	3508      	adds	r5, #8
 80038f2:	2d0c      	cmp	r5, #12
 80038f4:	bf38      	it	cc
 80038f6:	250c      	movcc	r5, #12
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	4606      	mov	r6, r0
 80038fc:	db01      	blt.n	8003902 <_malloc_r+0x1a>
 80038fe:	42a9      	cmp	r1, r5
 8003900:	d903      	bls.n	800390a <_malloc_r+0x22>
 8003902:	230c      	movs	r3, #12
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	2000      	movs	r0, #0
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	f000 f87d 	bl	8003a08 <__malloc_lock>
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <_malloc_r+0xac>)
 8003910:	6814      	ldr	r4, [r2, #0]
 8003912:	4621      	mov	r1, r4
 8003914:	b991      	cbnz	r1, 800393c <_malloc_r+0x54>
 8003916:	4c20      	ldr	r4, [pc, #128]	; (8003998 <_malloc_r+0xb0>)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	b91b      	cbnz	r3, 8003924 <_malloc_r+0x3c>
 800391c:	4630      	mov	r0, r6
 800391e:	f000 f863 	bl	80039e8 <_sbrk_r>
 8003922:	6020      	str	r0, [r4, #0]
 8003924:	4629      	mov	r1, r5
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f85e 	bl	80039e8 <_sbrk_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d124      	bne.n	800397a <_malloc_r+0x92>
 8003930:	230c      	movs	r3, #12
 8003932:	4630      	mov	r0, r6
 8003934:	6033      	str	r3, [r6, #0]
 8003936:	f000 f868 	bl	8003a0a <__malloc_unlock>
 800393a:	e7e4      	b.n	8003906 <_malloc_r+0x1e>
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	1b5b      	subs	r3, r3, r5
 8003940:	d418      	bmi.n	8003974 <_malloc_r+0x8c>
 8003942:	2b0b      	cmp	r3, #11
 8003944:	d90f      	bls.n	8003966 <_malloc_r+0x7e>
 8003946:	600b      	str	r3, [r1, #0]
 8003948:	18cc      	adds	r4, r1, r3
 800394a:	50cd      	str	r5, [r1, r3]
 800394c:	4630      	mov	r0, r6
 800394e:	f000 f85c 	bl	8003a0a <__malloc_unlock>
 8003952:	f104 000b 	add.w	r0, r4, #11
 8003956:	1d23      	adds	r3, r4, #4
 8003958:	f020 0007 	bic.w	r0, r0, #7
 800395c:	1ac3      	subs	r3, r0, r3
 800395e:	d0d3      	beq.n	8003908 <_malloc_r+0x20>
 8003960:	425a      	negs	r2, r3
 8003962:	50e2      	str	r2, [r4, r3]
 8003964:	e7d0      	b.n	8003908 <_malloc_r+0x20>
 8003966:	684b      	ldr	r3, [r1, #4]
 8003968:	428c      	cmp	r4, r1
 800396a:	bf16      	itet	ne
 800396c:	6063      	strne	r3, [r4, #4]
 800396e:	6013      	streq	r3, [r2, #0]
 8003970:	460c      	movne	r4, r1
 8003972:	e7eb      	b.n	800394c <_malloc_r+0x64>
 8003974:	460c      	mov	r4, r1
 8003976:	6849      	ldr	r1, [r1, #4]
 8003978:	e7cc      	b.n	8003914 <_malloc_r+0x2c>
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d005      	beq.n	8003990 <_malloc_r+0xa8>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f82e 	bl	80039e8 <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d0cf      	beq.n	8003930 <_malloc_r+0x48>
 8003990:	6025      	str	r5, [r4, #0]
 8003992:	e7db      	b.n	800394c <_malloc_r+0x64>
 8003994:	200001f8 	.word	0x200001f8
 8003998:	200001fc 	.word	0x200001fc

0800399c <_realloc_r>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	4607      	mov	r7, r0
 80039a0:	4614      	mov	r4, r2
 80039a2:	460e      	mov	r6, r1
 80039a4:	b921      	cbnz	r1, 80039b0 <_realloc_r+0x14>
 80039a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039aa:	4611      	mov	r1, r2
 80039ac:	f7ff bf9c 	b.w	80038e8 <_malloc_r>
 80039b0:	b922      	cbnz	r2, 80039bc <_realloc_r+0x20>
 80039b2:	f7ff ff4d 	bl	8003850 <_free_r>
 80039b6:	4625      	mov	r5, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039bc:	f000 f826 	bl	8003a0c <_malloc_usable_size_r>
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d20f      	bcs.n	80039e4 <_realloc_r+0x48>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4638      	mov	r0, r7
 80039c8:	f7ff ff8e 	bl	80038e8 <_malloc_r>
 80039cc:	4605      	mov	r5, r0
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0f2      	beq.n	80039b8 <_realloc_r+0x1c>
 80039d2:	4631      	mov	r1, r6
 80039d4:	4622      	mov	r2, r4
 80039d6:	f7ff ff17 	bl	8003808 <memcpy>
 80039da:	4631      	mov	r1, r6
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff37 	bl	8003850 <_free_r>
 80039e2:	e7e9      	b.n	80039b8 <_realloc_r+0x1c>
 80039e4:	4635      	mov	r5, r6
 80039e6:	e7e7      	b.n	80039b8 <_realloc_r+0x1c>

080039e8 <_sbrk_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	2300      	movs	r3, #0
 80039ec:	4c05      	ldr	r4, [pc, #20]	; (8003a04 <_sbrk_r+0x1c>)
 80039ee:	4605      	mov	r5, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	f7fc ffbe 	bl	8000974 <_sbrk>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_sbrk_r+0x1a>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_sbrk_r+0x1a>
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000300 	.word	0x20000300

08003a08 <__malloc_lock>:
 8003a08:	4770      	bx	lr

08003a0a <__malloc_unlock>:
 8003a0a:	4770      	bx	lr

08003a0c <_malloc_usable_size_r>:
 8003a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a10:	1f18      	subs	r0, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfbc      	itt	lt
 8003a16:	580b      	ldrlt	r3, [r1, r0]
 8003a18:	18c0      	addlt	r0, r0, r3
 8003a1a:	4770      	bx	lr

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
